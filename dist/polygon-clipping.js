(function webpackUniversalModuleDefinition(root, factory) {
	if(typeof exports === 'object' && typeof module === 'object')
		module.exports = factory();
	else if(typeof define === 'function' && define.amd)
		define([], factory);
	else if(typeof exports === 'object')
		exports["polygon-clipping"] = factory();
	else
		root["polygon-clipping"] = factory();
})(typeof self !== 'undefined' ? self : this, function() {
return /******/ (function(modules) { // webpackBootstrap
/******/ 	// The module cache
/******/ 	var installedModules = {};
/******/
/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {
/******/
/******/ 		// Check if module is in cache
/******/ 		if(installedModules[moduleId]) {
/******/ 			return installedModules[moduleId].exports;
/******/ 		}
/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = installedModules[moduleId] = {
/******/ 			i: moduleId,
/******/ 			l: false,
/******/ 			exports: {}
/******/ 		};
/******/
/******/ 		// Execute the module function
/******/ 		modules[moduleId].call(module.exports, module, module.exports, __webpack_require__);
/******/
/******/ 		// Flag the module as loaded
/******/ 		module.l = true;
/******/
/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}
/******/
/******/
/******/ 	// expose the modules object (__webpack_modules__)
/******/ 	__webpack_require__.m = modules;
/******/
/******/ 	// expose the module cache
/******/ 	__webpack_require__.c = installedModules;
/******/
/******/ 	// define getter function for harmony exports
/******/ 	__webpack_require__.d = function(exports, name, getter) {
/******/ 		if(!__webpack_require__.o(exports, name)) {
/******/ 			Object.defineProperty(exports, name, { enumerable: true, get: getter });
/******/ 		}
/******/ 	};
/******/
/******/ 	// define __esModule on exports
/******/ 	__webpack_require__.r = function(exports) {
/******/ 		if(typeof Symbol !== 'undefined' && Symbol.toStringTag) {
/******/ 			Object.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });
/******/ 		}
/******/ 		Object.defineProperty(exports, '__esModule', { value: true });
/******/ 	};
/******/
/******/ 	// create a fake namespace object
/******/ 	// mode & 1: value is a module id, require it
/******/ 	// mode & 2: merge all properties of value into the ns
/******/ 	// mode & 4: return value when already ns object
/******/ 	// mode & 8|1: behave like require
/******/ 	__webpack_require__.t = function(value, mode) {
/******/ 		if(mode & 1) value = __webpack_require__(value);
/******/ 		if(mode & 8) return value;
/******/ 		if((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;
/******/ 		var ns = Object.create(null);
/******/ 		__webpack_require__.r(ns);
/******/ 		Object.defineProperty(ns, 'default', { enumerable: true, value: value });
/******/ 		if(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));
/******/ 		return ns;
/******/ 	};
/******/
/******/ 	// getDefaultExport function for compatibility with non-harmony modules
/******/ 	__webpack_require__.n = function(module) {
/******/ 		var getter = module && module.__esModule ?
/******/ 			function getDefault() { return module['default']; } :
/******/ 			function getModuleExports() { return module; };
/******/ 		__webpack_require__.d(getter, 'a', getter);
/******/ 		return getter;
/******/ 	};
/******/
/******/ 	// Object.prototype.hasOwnProperty.call
/******/ 	__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };
/******/
/******/ 	// __webpack_public_path__
/******/ 	__webpack_require__.p = "";
/******/
/******/
/******/ 	// Load entry module and return exports
/******/ 	return __webpack_require__(__webpack_require__.s = "./main.js");
/******/ })
/************************************************************************/
/******/ ({

/***/ "./main.js":
/*!*****************!*\
  !*** ./main.js ***!
  \*****************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar _src = __webpack_require__(/*! ./src */ \"./src/index.js\");\n\nvar _src2 = _interopRequireDefault(_src);\n\nvar _operation = __webpack_require__(/*! ./src/operation */ \"./src/operation.js\");\n\nvar _operation2 = _interopRequireDefault(_operation);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nvar union = function union(geom) {\n  for (var _len = arguments.length, moreGeoms = Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {\n    moreGeoms[_key - 1] = arguments[_key];\n  }\n\n  return (0, _src2.default)(_operation2.default.types.UNION, geom, moreGeoms);\n};\n\nvar intersection = function intersection(geom) {\n  for (var _len2 = arguments.length, moreGeoms = Array(_len2 > 1 ? _len2 - 1 : 0), _key2 = 1; _key2 < _len2; _key2++) {\n    moreGeoms[_key2 - 1] = arguments[_key2];\n  }\n\n  return (0, _src2.default)(_operation2.default.types.INTERSECTION, geom, moreGeoms);\n};\n\nvar xor = function xor(geom) {\n  for (var _len3 = arguments.length, moreGeoms = Array(_len3 > 1 ? _len3 - 1 : 0), _key3 = 1; _key3 < _len3; _key3++) {\n    moreGeoms[_key3 - 1] = arguments[_key3];\n  }\n\n  return (0, _src2.default)(_operation2.default.types.XOR, geom, moreGeoms);\n};\n\nvar difference = function difference(subjectGeom) {\n  for (var _len4 = arguments.length, clippingGeoms = Array(_len4 > 1 ? _len4 - 1 : 0), _key4 = 1; _key4 < _len4; _key4++) {\n    clippingGeoms[_key4 - 1] = arguments[_key4];\n  }\n\n  return (0, _src2.default)(_operation2.default.types.DIFFERENCE, subjectGeom, clippingGeoms);\n};\n\nexports.default = {\n  union: union,\n  intersection: intersection,\n  xor: xor,\n  difference: difference\n};\nmodule.exports = exports.default;\n\n//# sourceURL=webpack://polygon-clipping/./main.js?");

/***/ }),

/***/ "./node_modules/splaytree/index.js":
/*!*****************************************!*\
  !*** ./node_modules/splaytree/index.js ***!
  \*****************************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"default\", function() { return Tree; });\n/* follows \"An implementation of top-down splaying\"\n * by D. Sleator <sleator@cs.cmu.edu> March 1992\n */\n\n/**\n * @typedef {*} Key\n */\n\n\n/**\n * @typedef {*} Value\n */\n\n\n/**\n * @typedef {function(node:Node):void} Visitor\n */\n\n\n/**\n * @typedef {function(a:Key, b:Key):number} Comparator\n */\n\n\n/**\n * @param {function(node:Node):string} NodePrinter\n */\n\n\n/**\n * @typedef {Object}  Node\n * @property {Key}    Key\n * @property {Value=} data\n * @property {Node}   left\n * @property {Node}   right\n */\n\nclass Node {\n\n  constructor (key, data) {\n    this.key    = key;\n    this.data   = data;\n    this.left   = null;\n    this.right  = null;\n  }\n}\n\nfunction DEFAULT_COMPARE (a, b) { return a > b ? 1 : a < b ? -1 : 0; }\n\n\n/**\n * Simple top down splay, not requiring i to be in the tree t.\n * @param {Key} i\n * @param {Node?} t\n * @param {Comparator} comparator\n */\nfunction splay (i, t, comparator) {\n  if (t === null) return t;\n  let l, r, y;\n  const N = new Node();\n  l = r = N;\n\n  while (true) {\n    const cmp = comparator(i, t.key);\n    //if (i < t.key) {\n    if (cmp < 0) {\n      if (t.left === null) break;\n      //if (i < t.left.key) {\n      if (comparator(i, t.left.key) < 0) {\n        y = t.left;                           /* rotate right */\n        t.left = y.right;\n        y.right = t;\n        t = y;\n        if (t.left === null) break;\n      }\n      r.left = t;                               /* link right */\n      r = t;\n      t = t.left;\n    //} else if (i > t.key) {\n    } else if (cmp > 0) {\n      if (t.right === null) break;\n      //if (i > t.right.key) {\n      if (comparator(i, t.right.key) > 0) {\n        y = t.right;                          /* rotate left */\n        t.right = y.left;\n        y.left = t;\n        t = y;\n        if (t.right === null) break;\n      }\n      l.right = t;                              /* link left */\n      l = t;\n      t = t.right;\n    } else {\n      break;\n    }\n  }\n  /* assemble */\n  l.right = t.left;\n  r.left = t.right;\n  t.left = N.right;\n  t.right = N.left;\n  return t;\n}\n\n\n/**\n * @param  {Key}        i\n * @param  {Value}      data\n * @param  {Comparator} comparator\n * @param  {Tree}       tree\n * @return {Node}      root\n */\nfunction insert (i, data, t, comparator, tree) {\n  const node = new Node(i, data);\n\n  tree._size++;\n\n  if (t === null) {\n    node.left = node.right = null;\n    return node;\n  }\n\n  t = splay(i, t, comparator);\n  const cmp = comparator(i, t.key);\n  if (cmp < 0) {\n    node.left = t.left;\n    node.right = t;\n    t.left = null;\n  } else if (cmp >= 0) {\n    node.right = t.right;\n    node.left = t;\n    t.right = null;\n  }\n  return node;\n}\n\n\n/**\n * Insert i into the tree t, unless it's already there.\n * @param  {Key}        i\n * @param  {Value}      data\n * @param  {Comparator} comparator\n * @param  {Tree}       tree\n * @return {Node}       root\n */\nfunction add (i, data, t, comparator, tree) {\n  const node = new Node(i, data);\n\n  if (t === null) {\n    node.left = node.right = null;\n    tree._size++;\n    return node;\n  }\n\n  t = splay(i, t, comparator);\n  const cmp = comparator(i, t.key);\n  if (cmp === 0) return t;\n  else {\n    if (cmp < 0) {\n      node.left = t.left;\n      node.right = t;\n      t.left = null;\n    } else if (cmp > 0) {\n      node.right = t.right;\n      node.left = t;\n      t.right = null;\n    }\n    tree._size++;\n    return node;\n  }\n}\n\n\n/**\n * Deletes i from the tree if it's there\n * @param {Key}        i\n * @param {Tree}       tree\n * @param {Comparator} comparator\n * @param {Tree}       tree\n * @return {Node}      new root\n */\nfunction remove (i, t, comparator, tree) {\n  let x;\n  if (t === null) return null;\n  t = splay(i, t, comparator);\n  var cmp = comparator(i, t.key);\n  if (cmp === 0) {               /* found it */\n    if (t.left === null) {\n      x = t.right;\n    } else {\n      x = splay(i, t.left, comparator);\n      x.right = t.right;\n    }\n    tree._size--;\n    return x;\n  }\n  return t;                         /* It wasn't there */\n}\n\n\nfunction split (key, v, comparator) {\n  let left, right;\n  if (v === null) {\n    left = right = null;\n  } else {\n    v = splay(key, v, comparator);\n\n    const cmp = comparator(v.key, key);\n    if (cmp === 0) {\n      left  = v.left;\n      right = v.right;\n    } else if (cmp < 0) {\n      right   = v.right;\n      v.right = null;\n      left    = v;\n    } else {\n      left   = v.left;\n      v.left = null;\n      right  = v;\n    }\n  }\n  return { left, right };\n}\n\n\nfunction merge (left, right, comparator) {\n  if (right === null) return left;\n  if (left  === null) return right;\n\n  right = splay(left.key, right, comparator);\n  right.left = left;\n  return right;\n}\n\n\n/**\n * Prints level of the tree\n * @param  {Node}                        root\n * @param  {String}                      prefix\n * @param  {Boolean}                     isTail\n * @param  {Array<string>}               out\n * @param  {Function(node:Node):String}  printNode\n */\nfunction printRow (root, prefix, isTail, out, printNode) {\n  if (root) {\n    out(`${ prefix }${ isTail ? '└── ' : '├── ' }${ printNode(root) }\\n`);\n    const indent = prefix + (isTail ? '    ' : '│   ');\n    if (root.left)  printRow(root.left,  indent, false, out, printNode);\n    if (root.right) printRow(root.right, indent, true,  out, printNode);\n  }\n}\n\n\nclass Tree {\n\n  constructor (comparator = DEFAULT_COMPARE) {\n    this._comparator = comparator;\n    this._root = null;\n    this._size = 0;\n  }\n\n\n  /**\n   * Inserts a key, allows duplicates\n   * @param  {Key}    key\n   * @param  {Value=} data\n   * @return {Node|null}\n   */\n  insert (key, data) {\n    return this._root = insert(key, data, this._root, this._comparator, this);\n  }\n\n\n  /**\n   * Adds a key, if it is not present in the tree\n   * @param  {Key}    key\n   * @param  {Value=} data\n   * @return {Node|null}\n   */\n  add (key, data) {\n    return this._root = add(key, data, this._root, this._comparator, this);\n  }\n\n\n  /**\n   * @param  {Key} key\n   * @return {Node|null}\n   */\n  remove (key) {\n    this._root = remove(key, this._root, this._comparator, this);\n  }\n\n\n  /**\n   * Removes and returns the node with smallest key\n   * @return {?Node}\n   */\n  pop () {\n    let node = this._root;\n    if (node) {\n      while (node.left) node = node.left;\n      this._root = splay(node.key,  this._root, this._comparator);\n      this._root = remove(node.key, this._root, this._comparator, this);\n      return { key: node.key, data: node.data };\n    }\n    return null;\n  }\n\n\n  /**\n   * @param  {Key} key\n   * @return {Node|null}\n   */\n  findStatic (key) {\n    let current   = this._root;\n    const compare = this._comparator;\n    while (current) {\n      const cmp = compare(key, current.key);\n      if (cmp === 0)    return current;\n      else if (cmp < 0) current = current.left;\n      else              current = current.right;\n    }\n    return null;\n  }\n\n\n  /**\n   * @param  {Key} key\n   * @return {Node|null}\n   */\n  find (key) {\n    if (this._root) {\n      this._root = splay(key, this._root, this._comparator);\n      if (this._comparator(key, this._root.key) !== 0) return null;\n    }\n    return this._root;\n  }\n\n\n  /**\n   * @param  {Key} key\n   * @return {Boolean}\n   */\n  contains (key) {\n    let current   = this._root;\n    const compare = this._comparator;\n    while (current) {\n      const cmp = compare(key, current.key);\n      if (cmp === 0)    return true;\n      else if (cmp < 0) current = current.left;\n      else              current = current.right;\n    }\n    return false;\n  }\n\n\n  /**\n   * @param  {Visitor} visitor\n   * @param  {*=}      ctx\n   * @return {SplayTree}\n   */\n  forEach (visitor, ctx) {\n    let current = this._root;\n    const Q = [];  /* Initialize stack s */\n    let done = false;\n\n    while (!done) {\n      if (current !==  null) {\n        Q.push(current);\n        current = current.left;\n      } else {\n        if (Q.length !== 0) {\n          current = Q.pop();\n          visitor.call(ctx, current);\n\n          current = current.right;\n        } else done = true;\n      }\n    }\n    return this;\n  }\n\n\n  /**\n   * Walk key range from `low` to `high`. Stops if `fn` returns a value.\n   * @param  {Key}      low\n   * @param  {Key}      high\n   * @param  {Function} fn\n   * @param  {*?}       ctx\n   * @return {SplayTree}\n   */\n  range (low, high, fn, ctx) {\n    const Q = [];\n    const compare = this._comparator;\n    let node = this._root, cmp;\n\n    while (Q.length !== 0 || node) {\n      if (node) {\n        Q.push(node);\n        node = node.left;\n      } else {\n        node = Q.pop();\n        cmp = compare(node.key, high);\n        if (cmp > 0) {\n          break;\n        } else if (compare(node.key, low) >= 0) {\n          if (fn.call(ctx, node)) return this; // stop if smth is returned\n        }\n        node = node.right;\n      }\n    }\n    return this;\n  }\n\n\n  /**\n   * Returns array of keys\n   * @return {Array<Key>}\n   */\n  keys () {\n    const keys = [];\n    this.forEach(({ key }) => keys.push(key));\n    return keys;\n  }\n\n\n  /**\n   * Returns array of all the data in the nodes\n   * @return {Array<Value>}\n   */\n  values () {\n    const values = [];\n    this.forEach(({ data }) => values.push(data));\n    return values;\n  }\n\n\n  /**\n   * @return {Key|null}\n   */\n  min() {\n    if (this._root) return this.minNode(this._root).key;\n    return null;\n  }\n\n\n  /**\n   * @return {Key|null}\n   */\n  max() {\n    if (this._root) return this.maxNode(this._root).key;\n    return null;\n  }\n\n\n  /**\n   * @return {Node|null}\n   */\n  minNode(t = this._root) {\n    if (t) while (t.left) t = t.left;\n    return t;\n  }\n\n\n  /**\n   * @return {Node|null}\n   */\n  maxNode(t = this._root) {\n    if (t) while (t.right) t = t.right;\n    return t;\n  }\n\n\n  /**\n   * Returns node at given index\n   * @param  {number} index\n   * @return {?Node}\n   */\n  at (index) {\n    let current = this._root, done = false, i = 0;\n    const Q = [];\n\n    while (!done) {\n      if (current) {\n        Q.push(current);\n        current = current.left;\n      } else {\n        if (Q.length > 0) {\n          current = Q.pop();\n          if (i === index) return current;\n          i++;\n          current = current.right;\n        } else done = true;\n      }\n    }\n    return null;\n  }\n\n\n  /**\n   * @param  {Node}   d\n   * @return {Node|null}\n   */\n  next (d) {\n    let root = this._root;\n    let successor = null;\n\n    if (d.right) {\n      successor = d.right;\n      while (successor.left) successor = successor.left;\n      return successor;\n    }\n\n    const comparator = this._comparator;\n    while (root) {\n      const cmp = comparator(d.key, root.key);\n      if (cmp === 0) break;\n      else if (cmp < 0) {\n        successor = root;\n        root = root.left;\n      } else root = root.right;\n    }\n\n    return successor;\n  }\n\n\n  /**\n   * @param  {Node} d\n   * @return {Node|null}\n   */\n  prev (d) {\n    let root = this._root;\n    let predecessor = null;\n\n    if (d.left !== null) {\n      predecessor = d.left;\n      while (predecessor.right) predecessor = predecessor.right;\n      return predecessor;\n    }\n\n    const comparator = this._comparator;\n    while (root) {\n      const cmp = comparator(d.key, root.key);\n      if (cmp === 0) break;\n      else if (cmp < 0) root = root.left;\n      else {\n        predecessor = root;\n        root = root.right;\n      }\n    }\n    return predecessor;\n  }\n\n\n  /**\n   * @return {SplayTree}\n   */\n  clear() {\n    this._root = null;\n    this._size = 0;\n    return this;\n  }\n\n\n  /**\n   * @return {NodeList}\n   */\n  toList() {\n    return toList(this._root);\n  }\n\n\n  /**\n   * Bulk-load items. Both array have to be same size\n   * @param  {Array<Key>}    keys\n   * @param  {Array<Value>}  [values]\n   * @param  {Boolean}       [presort=false] Pre-sort keys and values, using\n   *                                         tree's comparator. Sorting is done\n   *                                         in-place\n   * @return {AVLTree}\n   */\n  load (keys = [], values = [], presort = false) {\n    let size = keys.length;\n    const comparator = this._comparator;\n\n    // sort if needed\n    if (presort) sort(keys, values, 0, size - 1, comparator);\n\n    if (this._root === null) { // empty tree\n      this._root = loadRecursive(this._root, keys, values, 0, size);\n      this._size = size;\n    } else { // that re-builds the whole tree from two in-order traversals\n      const mergedList = mergeLists(this.toList(), createList(keys, values), comparator);\n      size = this._size + size;\n      this._root = sortedListToBST({ head: mergedList }, 0, size);\n    }\n    return this;\n  }\n\n\n  /**\n   * @return {Boolean}\n   */\n  isEmpty() { return this._root === null; }\n\n  get size () { return this._size; }\n\n\n  /**\n   * @param  {NodePrinter=} printNode\n   * @return {String}\n   */\n  toString (printNode = (n) => n.key) {\n    const out = [];\n    printRow(this._root, '', true, (v) => out.push(v), printNode);\n    return out.join('');\n  }\n\n\n  update (key, newKey, newData) {\n    const comparator = this._comparator;\n    let { left, right } = split(key, this._root, comparator);\n    this._size--;\n    if (comparator(key, newKey) < 0) {\n      right = insert(newKey, newData, right, comparator, this);\n    } else {\n      left = insert(newKey, newData, left, comparator, this);\n    }\n    this._root = merge(left, right, comparator);\n  }\n\n\n  split(key) {\n    return split(key, this._root, this._comparator);\n  }\n}\n\n\nfunction loadRecursive (parent, keys, values, start, end) {\n  const size = end - start;\n  if (size > 0) {\n    const middle = start + Math.floor(size / 2);\n    const key    = keys[middle];\n    const data   = values[middle];\n    const node   = { key, data, parent };\n    node.left    = loadRecursive(node, keys, values, start, middle);\n    node.right   = loadRecursive(node, keys, values, middle + 1, end);\n    return node;\n  }\n  return null;\n}\n\n\nfunction createList(keys, values) {\n  const head = { next: null };\n  let p = head;\n  for (let i = 0; i < keys.length; i++) {\n    p = p.next = { key: keys[i], data: values[i] };\n  }\n  p.next = null;\n  return head.next;\n}\n\n\nfunction toList (root) {\n  var current = root;\n  var Q = [], done = false;\n\n  const head = { next: null };\n  let p = head;\n\n  while (!done) {\n    if (current) {\n      Q.push(current);\n      current = current.left;\n    } else {\n      if (Q.length > 0) {\n        current = p = p.next = Q.pop();\n        current = current.right;\n      } else done = true;\n    }\n  }\n  p.next = null; // that'll work even if the tree was empty\n  return head.next;\n}\n\n\nfunction sortedListToBST(list, start, end) {\n  const size = end - start;\n  if (size > 0) {\n    const middle = start + Math.floor(size / 2);\n    const left = sortedListToBST(list, start, middle);\n\n    const root = list.head;\n    root.left = left;\n\n    list.head = list.head.next;\n\n    root.right = sortedListToBST(list, middle + 1, end);\n    return root;\n  }\n  return null;\n}\n\n\nfunction mergeLists (l1, l2, compare = (a, b) => a - b) {\n  const head = {}; // dummy\n  let p = head;\n\n  let p1 = l1;\n  let p2 = l2;\n\n  while (p1 !== null && p2 !== null) {\n    if (compare(p1.key, p2.key) < 0) {\n      p.next = p1;\n      p1 = p1.next;\n    } else {\n      p.next = p2;\n      p2 = p2.next;\n    }\n    p = p.next;\n  }\n\n  if (p1 !== null)      p.next = p1;\n  else if (p2 !== null) p.next = p2;\n\n  return head.next;\n}\n\n\nfunction sort(keys, values, left, right, compare) {\n  if (left >= right) return;\n\n  const pivot = keys[(left + right) >> 1];\n  let i = left - 1;\n  let j = right + 1;\n\n  while (true) {\n    do i++; while (compare(keys[i], pivot) < 0);\n    do j--; while (compare(keys[j], pivot) > 0);\n    if (i >= j) break;\n\n    let tmp = keys[i];\n    keys[i] = keys[j];\n    keys[j] = tmp;\n\n    tmp = values[i];\n    values[i] = values[j];\n    values[j] = tmp;\n  }\n\n  sort(keys, values,  left,     j, compare);\n  sort(keys, values, j + 1, right, compare);\n}\n\n\n//# sourceURL=webpack://polygon-clipping/./node_modules/splaytree/index.js?");

/***/ }),

/***/ "./src/bbox.js":
/*!*********************!*\
  !*** ./src/bbox.js ***!
  \*********************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.getUniqueCorners = exports.getBboxOverlap = exports.doBboxesOverlap = exports.isInBbox = undefined;\n\nvar _flp = __webpack_require__(/*! ./flp */ \"./src/flp.js\");\n\n/**\n * A bounding box has the format:\n *\n *  { ll: { x: xmin, y: ymin }, ur: { x: xmax, y: ymax } }\n *\n */\n\nvar isInBbox = exports.isInBbox = function isInBbox(bbox, point) {\n  var xmin = bbox.ll.x;\n  var ymin = bbox.ll.y;\n  var xmax = bbox.ur.x;\n  var ymax = bbox.ur.y;\n  var xpt = point.x;\n  var ypt = point.y;\n  return (0, _flp.cmp)(xmin, xpt) <= 0 && (0, _flp.cmp)(xpt, xmax) <= 0 && (0, _flp.cmp)(ymin, ypt) <= 0 && (0, _flp.cmp)(ypt, ymax) <= 0;\n};\n\nvar doBboxesOverlap = exports.doBboxesOverlap = function doBboxesOverlap(b1, b2) {\n  return !((0, _flp.cmp)(b2.ur.x, b1.ll.x) < 0 || (0, _flp.cmp)(b1.ur.x, b2.ll.x) < 0 || (0, _flp.cmp)(b2.ur.y, b1.ll.y) < 0 || (0, _flp.cmp)(b1.ur.y, b2.ll.y) < 0);\n};\n\n/* Returns either null, or a bbox (aka an ordered pair of points)\n * If there is only one point of overlap, a bbox with identical points\n * will be returned */\nvar getBboxOverlap = exports.getBboxOverlap = function getBboxOverlap(b1, b2) {\n  if (!doBboxesOverlap(b1, b2)) return null;\n\n  // find the middle two X values\n  var lowerX = b1.ll.x < b2.ll.x ? b2.ll.x : b1.ll.x;\n  var upperX = b1.ur.x < b2.ur.x ? b1.ur.x : b2.ur.x;\n\n  // find the middle two Y values\n  var lowerY = b1.ll.y < b2.ll.y ? b2.ll.y : b1.ll.y;\n  var upperY = b1.ur.y < b2.ur.y ? b1.ur.y : b2.ur.y;\n\n  // put those middle values together to get the overlap\n  return { ll: { x: lowerX, y: lowerY }, ur: { x: upperX, y: upperY } };\n};\n\n/* Returns a list of unique corners.\n * Will contain one, two or four points */\nvar getUniqueCorners = exports.getUniqueCorners = function getUniqueCorners(bbox) {\n  var xmin = bbox.ll.x;\n  var ymin = bbox.ll.y;\n  var xmax = bbox.ur.x;\n  var ymax = bbox.ur.y;\n  var xEq = (0, _flp.cmp)(xmin, xmax) === 0;\n  var yEq = (0, _flp.cmp)(ymin, ymax) === 0;\n  if (xEq && yEq) return [{ x: xmin, y: ymin }];\n  if (xEq) return [{ x: xmin, y: ymin }, { x: xmin, y: ymax }];\n  if (yEq) return [{ x: xmin, y: ymin }, { x: xmax, y: ymin }];\n  return [{ x: xmin, y: ymin }, { x: xmin, y: ymax }, { x: xmax, y: ymin }, { x: xmax, y: ymax }];\n};\n\n//# sourceURL=webpack://polygon-clipping/./src/bbox.js?");

/***/ }),

/***/ "./src/clean-input.js":
/*!****************************!*\
  !*** ./src/clean-input.js ***!
  \****************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.cleanRing = exports.cleanMultiPoly = exports.forceMultiPoly = exports.pointsAsObjects = undefined;\n\nvar _flp = __webpack_require__(/*! ./flp */ \"./src/flp.js\");\n\nvar _vector = __webpack_require__(/*! ./vector */ \"./src/vector.js\");\n\n/* Given input geometry as a standard array-of-arrays geojson-style\n * geometry, return one that uses objects as points, for better perf */\nvar pointsAsObjects = exports.pointsAsObjects = function pointsAsObjects(geom) {\n  // we can handle well-formed multipolys and polys\n  var output = [];\n  if (!Array.isArray(geom)) {\n    throw new Error('Input is not a Polygon or MultiPolygon');\n  }\n  for (var i = 0, iMax = geom.length; i < iMax; i++) {\n    if (!Array.isArray(geom[i]) || geom[i].length == 0) {\n      throw new Error('Input is not a Polygon or MultiPolygon');\n    }\n    output.push([]);\n    for (var j = 0, jMax = geom[i].length; j < jMax; j++) {\n      if (!Array.isArray(geom[i][j]) || geom[i][j].length == 0) {\n        throw new Error('Input is not a Polygon or MultiPolygon');\n      }\n      if (Array.isArray(geom[i][j][0])) {\n        // multipolygon\n        output[i].push([]);\n        for (var k = 0, kMax = geom[i][j].length; k < kMax; k++) {\n          if (!Array.isArray(geom[i][j][k]) || geom[i][j][k].length < 2) {\n            throw new Error('Input is not a Polygon or MultiPolygon');\n          }\n          if (geom[i][j][k].length > 2) {\n            throw new Error('Input has more than two coordinates. ' + 'Only 2-dimensional polygons supported.');\n          }\n          output[i][j].push({ x: geom[i][j][k][0], y: geom[i][j][k][1] });\n        }\n      } else {\n        // polygon\n        if (geom[i][j].length < 2) {\n          throw new Error('Input is not a Polygon or MultiPolygon');\n        }\n        if (geom[i][j].length > 2) {\n          throw new Error('Input has more than two coordinates. ' + 'Only 2-dimensional polygons supported.');\n        }\n        output[i].push({ x: geom[i][j][0], y: geom[i][j][1] });\n      }\n    }\n  }\n  return output;\n};\n\n/* WARN: input modified directly */\nvar forceMultiPoly = exports.forceMultiPoly = function forceMultiPoly(geom) {\n  if (Array.isArray(geom)) {\n    if (geom.length === 0) return; // allow empty multipolys\n\n    if (Array.isArray(geom[0])) {\n      if (Array.isArray(geom[0][0])) {\n        if (typeof geom[0][0][0].x === 'number' && typeof geom[0][0][0].y === 'number') {\n          // multipolygon\n          return;\n        }\n      }\n      if (typeof geom[0][0].x === 'number' && typeof geom[0][0].y === 'number') {\n        // polygon\n        geom.unshift(geom.splice(0));\n        return;\n      }\n    }\n  }\n  throw new Error('Unrecognized input - not a polygon nor multipolygon');\n};\n\n/* WARN: input modified directly */\nvar cleanMultiPoly = exports.cleanMultiPoly = function cleanMultiPoly(multipoly) {\n  var i = 0;\n  while (i < multipoly.length) {\n    var poly = multipoly[i];\n    if (poly.length === 0) {\n      multipoly.splice(i, 1);\n      continue;\n    }\n\n    var exteriorRing = poly[0];\n    cleanRing(exteriorRing);\n    // poly is dropped if exteriorRing is degenerate\n    if (exteriorRing.length === 0) {\n      multipoly.splice(i, 1);\n      continue;\n    }\n\n    var j = 1;\n    while (j < poly.length) {\n      var interiorRing = poly[j];\n      cleanRing(interiorRing);\n      if (interiorRing.length === 0) poly.splice(j, 1);else j++;\n    }\n\n    i++;\n  }\n};\n\n/* Clean ring:\n *  - remove duplicate points\n *  - remove colinear points\n *  - remove rings with no area (less than 3 distinct points)\n *  - un-close rings (last point should not repeat first)\n *\n * WARN: input modified directly */\nvar cleanRing = exports.cleanRing = function cleanRing(ring) {\n  if (ring.length === 0) return;\n  if ((0, _flp.cmpPoints)(ring[0], ring[ring.length - 1]) === 0) ring.pop();\n\n  var isPointUncessary = function isPointUncessary(prevPt, pt, nextPt) {\n    return (0, _flp.cmpPoints)(prevPt, pt) === 0 || (0, _flp.cmpPoints)(pt, nextPt) === 0 || (0, _vector.compareVectorAngles)(pt, prevPt, nextPt) === 0;\n  };\n\n  var i = 0;\n  var prevPt = void 0,\n      nextPt = void 0;\n  while (i < ring.length) {\n    prevPt = i === 0 ? ring[ring.length - 1] : ring[i - 1];\n    nextPt = i === ring.length - 1 ? ring[0] : ring[i + 1];\n    if (isPointUncessary(prevPt, ring[i], nextPt)) ring.splice(i, 1);else i++;\n  }\n\n  // if our ring has less than 3 distinct points now (so is degenerate)\n  // shrink it down to the empty array to communicate to our caller to\n  // drop it\n  while (ring.length < 3 && ring.length > 0) {\n    ring.pop();\n  }\n};\n\n//# sourceURL=webpack://polygon-clipping/./src/clean-input.js?");

/***/ }),

/***/ "./src/flp.js":
/*!********************!*\
  !*** ./src/flp.js ***!
  \********************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n/* Javascript doesn't do integer math. Everything is\n * floating point with percision Number.EPSILON.\n *\n * https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Number/EPSILON\n */\n\nvar epsilon = Number.EPSILON;\n\n// IE Polyfill\nif (epsilon === undefined) epsilon = Math.pow(2, -52);\n\nvar EPSILON_SQ = epsilon * epsilon;\n\n/* FLP comparator */\nvar cmp = exports.cmp = function cmp(a, b) {\n  // check if they're both 0\n  if (-epsilon < a && a < epsilon) {\n    if (-epsilon < b && b < epsilon) {\n      return 0;\n    }\n  }\n\n  // check if they're flp equal\n  if ((a - b) * (a - b) < EPSILON_SQ * a * b) {\n    return 0;\n  }\n\n  // normal comparison\n  return a < b ? -1 : 1;\n};\n\n/* FLP point comparator, favors point encountered first by sweep line */\nvar cmpPoints = exports.cmpPoints = function cmpPoints(aPt, bPt) {\n  if (aPt === bPt) return 0;\n\n  // fist compare X, then compare Y\n  var a = aPt.x;\n  var b = bPt.x;\n\n  // inlined version of cmp() for performance boost\n  if (a <= -epsilon || epsilon <= a || b <= -epsilon || epsilon <= b) {\n    var diff = a - b;\n    if (diff * diff >= EPSILON_SQ * a * b) {\n      return a < b ? -1 : 1;\n    }\n  }\n\n  a = aPt.y;\n  b = bPt.y;\n\n  // inlined version of cmp() for performance boost\n  if (a <= -epsilon || epsilon <= a || b <= -epsilon || epsilon <= b) {\n    var _diff = a - b;\n    if (_diff * _diff >= EPSILON_SQ * a * b) {\n      return a < b ? -1 : 1;\n    }\n  }\n\n  // they're the same\n  return 0;\n};\n\n//# sourceURL=webpack://polygon-clipping/./src/flp.js?");

/***/ }),

/***/ "./src/geom-in.js":
/*!************************!*\
  !*** ./src/geom-in.js ***!
  \************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.MultiPolyIn = exports.PolyIn = exports.RingIn = undefined;\n\nvar _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();\n\nvar _segment = __webpack_require__(/*! ./segment */ \"./src/segment.js\");\n\nvar _segment2 = _interopRequireDefault(_segment);\n\nvar _sweepEvent = __webpack_require__(/*! ./sweep-event.js */ \"./src/sweep-event.js\");\n\nvar _sweepEvent2 = _interopRequireDefault(_sweepEvent);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\n// Give rings unique ID's to get consistent sorting of segments\n// and sweep events when all else is identical\nvar ringId = 0;\n\nvar RingIn = exports.RingIn = function () {\n  function RingIn(geomRing, poly) {\n    _classCallCheck(this, RingIn);\n\n    this.id = ringId++;\n    this.poly = poly;\n    this.segments = [];\n\n    var prevPoint = geomRing[0];\n    for (var i = 1, iMax = geomRing.length; i < iMax; i++) {\n      var point = geomRing[i];\n      this.segments.push(_segment2.default.fromRing(prevPoint, point, this));\n      prevPoint = point;\n    }\n    this.segments.push(_segment2.default.fromRing(prevPoint, geomRing[0], this));\n  }\n\n  _createClass(RingIn, [{\n    key: 'getSweepEvents',\n    value: function getSweepEvents() {\n      var sweepEvents = [];\n      for (var i = 0, iMax = this.segments.length; i < iMax; i++) {\n        var segment = this.segments[i];\n        sweepEvents.push(segment.leftSE);\n        sweepEvents.push(segment.rightSE);\n      }\n      return sweepEvents;\n    }\n  }, {\n    key: 'isValid',\n\n\n    /* Given a segment on this rings with these relationships to other rings,\n     * is it a valid segment of the ring's poly? */\n    value: function isValid(ringsSameSLER, ringsDiffSLER, ringsInsideOf) {\n      var exterior = this.poly.exteriorRing;\n      var interiors = this.poly.interiorRings;\n\n      if (this === exterior) {\n        // exterior segments inside or interior, nope\n        for (var i = 0, iMax = ringsInsideOf.length; i < iMax; i++) {\n          if (interiors.includes(ringsInsideOf[i])) return false;\n        }\n\n        // overlap with an interior of same SWL orientatio, nope\n        for (var _i = 0, _iMax = ringsSameSLER.length; _i < _iMax; _i++) {\n          if (interiors.includes(ringsSameSLER[_i])) return false;\n        }\n\n        return true;\n      }\n\n      // interior rings that aren't inside the exterior nor\n      // overlapping with different SWE\n      if (!ringsInsideOf.includes(exterior)) {\n        if (!ringsDiffSLER.includes(exterior)) return false;\n      }\n\n      // interior rings inside another interior, nope\n      for (var _i2 = 0, _iMax2 = ringsInsideOf.length; _i2 < _iMax2; _i2++) {\n        if (interiors.includes(ringsInsideOf[_i2])) return false;\n      }\n\n      // overlapping interiors with different sweep line orientation, nope\n      for (var _i3 = 0, _iMax3 = ringsDiffSLER.length; _i3 < _iMax3; _i3++) {\n        if (interiors.includes(ringsDiffSLER[_i3])) return false;\n      }\n\n      return true;\n    }\n  }, {\n    key: 'isExterior',\n    get: function get() {\n      return this.poly.exteriorRing === this;\n    }\n  }, {\n    key: 'isInterior',\n    get: function get() {\n      return this.poly.exteriorRing !== this;\n    }\n  }]);\n\n  return RingIn;\n}();\n\nvar PolyIn = exports.PolyIn = function () {\n  function PolyIn(geomPoly, multiPoly) {\n    _classCallCheck(this, PolyIn);\n\n    this.exteriorRing = new RingIn(geomPoly[0], this);\n    this.interiorRings = [];\n    for (var i = 1, iMax = geomPoly.length; i < iMax; i++) {\n      this.interiorRings.push(new RingIn(geomPoly[i], this));\n    }\n    this.multiPoly = multiPoly;\n  }\n\n  _createClass(PolyIn, [{\n    key: 'getSweepEvents',\n    value: function getSweepEvents() {\n      var sweepEvents = this.exteriorRing.getSweepEvents();\n      for (var i = 0, iMax = this.interiorRings.length; i < iMax; i++) {\n        var ringSweepEvents = this.interiorRings[i].getSweepEvents();\n        for (var j = 0, jMax = ringSweepEvents.length; j < jMax; j++) {\n          sweepEvents.push(ringSweepEvents[j]);\n        }\n      }\n      return sweepEvents;\n    }\n\n    /* Given a segment with these rings, is that segment inside this polygon? */\n\n  }, {\n    key: 'isInside',\n    value: function isInside(ringsOnEdgeOf, ringsInsideOf) {\n      // if we're on an edge, we can't be inside\n      for (var i = 0, iMax = ringsOnEdgeOf.length; i < iMax; i++) {\n        if (ringsOnEdgeOf[i].poly === this) return false;\n      }\n\n      // we need to be inside the exterior, and nothing else\n      var isInsideExterior = false;\n      for (var _i4 = 0, _iMax4 = ringsInsideOf.length; _i4 < _iMax4; _i4++) {\n        var ring = ringsInsideOf[_i4];\n        if (ring.poly !== this) continue;\n        if (ring.isInterior) return false;\n        isInsideExterior = true;\n      }\n      return isInsideExterior;\n    }\n  }]);\n\n  return PolyIn;\n}();\n\nvar MultiPolyIn = exports.MultiPolyIn = function () {\n  function MultiPolyIn(geomMultiPoly) {\n    _classCallCheck(this, MultiPolyIn);\n\n    this.polys = [];\n    for (var i = 0, iMax = geomMultiPoly.length; i < iMax; i++) {\n      this.polys.push(new PolyIn(geomMultiPoly[i], this));\n    }\n    this.isSubject = false;\n  }\n\n  _createClass(MultiPolyIn, [{\n    key: 'markAsSubject',\n    value: function markAsSubject() {\n      this.isSubject = true;\n    }\n  }, {\n    key: 'getSweepEvents',\n    value: function getSweepEvents() {\n      var sweepEvents = [];\n      for (var i = 0, iMax = this.polys.length; i < iMax; i++) {\n        var polySweepEvents = this.polys[i].getSweepEvents();\n        for (var j = 0, jMax = polySweepEvents.length; j < jMax; j++) {\n          sweepEvents.push(polySweepEvents[j]);\n        }\n      }\n      return sweepEvents;\n    }\n  }]);\n\n  return MultiPolyIn;\n}();\n\n//# sourceURL=webpack://polygon-clipping/./src/geom-in.js?");

/***/ }),

/***/ "./src/geom-out.js":
/*!*************************!*\
  !*** ./src/geom-out.js ***!
  \*************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.MultiPolyOut = exports.PolyOut = exports.RingOut = undefined;\n\nvar _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();\n\nvar _vector = __webpack_require__(/*! ./vector */ \"./src/vector.js\");\n\nvar _sweepEvent = __webpack_require__(/*! ./sweep-event */ \"./src/sweep-event.js\");\n\nvar _sweepEvent2 = _interopRequireDefault(_sweepEvent);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nvar RingOut = exports.RingOut = function () {\n  _createClass(RingOut, null, [{\n    key: 'factory',\n\n    /* Given the segments from the sweep line pass, compute & return a series\n     * of closed rings from all the segments marked to be part of the result */\n    value: function factory(allSegments) {\n      var ringsOut = [];\n\n      for (var i = 0, iMax = allSegments.length; i < iMax; i++) {\n        var segment = allSegments[i];\n        if (!segment.isInResult || segment.ringOut) continue;\n\n        var prevEvent = null;\n        var event = segment.leftSE;\n        var nextEvent = segment.rightSE;\n        var events = [event];\n\n        var startingPoint = event.point;\n        var intersectionLEs = [];\n\n        /* Walk the chain of linked events to form a closed ring */\n        while (true) {\n          prevEvent = event;\n          event = nextEvent;\n          events.push(event);\n\n          /* Is the ring complete? */\n          if (event.point === startingPoint) break;\n\n          while (true) {\n            var availableLEs = event.getAvailableLinkedEvents();\n\n            /* Did we hit a dead end? This shouldn't happen. Indicates some earlier\n             * part of the algorithm malfunctioned... please file a bug report. */\n            if (availableLEs.length === 0) {\n              var firstPt = events[0].point;\n              var lastPt = events[events.length - 1].point;\n              throw new Error('Unable to complete output ring starting at [' + firstPt.x + ',' + (' ' + firstPt.y + ']. Last matching segment found ends at') + (' [' + lastPt.x + ', ' + lastPt.y + '].'));\n            }\n\n            /* Only one way to go, so cotinue on the path */\n            if (availableLEs.length === 1) {\n              nextEvent = availableLEs[0].otherSE;\n              break;\n            }\n\n            /* We must have an intersection. Check for a completed loop */\n            var indexLE = null;\n            for (var j = 0, jMax = intersectionLEs.length; j < jMax; j++) {\n              if (intersectionLEs[j].point === event.point) {\n                indexLE = j;\n                break;\n              }\n            }\n            /* Found a completed loop. Cut that off and make a ring */\n            if (indexLE !== null) {\n              var intersectionLE = intersectionLEs.splice(indexLE)[0];\n              var ringEvents = events.splice(intersectionLE.index);\n              ringEvents.unshift(ringEvents[0].otherSE);\n              ringsOut.push(new RingOut(ringEvents.reverse()));\n              continue;\n            }\n            /* register the intersection */\n            intersectionLEs.push({\n              index: events.length,\n              point: event.point\n            });\n            /* Choose the left-most option to continue the walk */\n            var comparator = event.getLeftmostComparator(prevEvent);\n            nextEvent = availableLEs.sort(comparator)[0].otherSE;\n            break;\n          }\n        }\n\n        ringsOut.push(new RingOut(events));\n      }\n      return ringsOut;\n    }\n  }]);\n\n  function RingOut(events) {\n    _classCallCheck(this, RingOut);\n\n    this.events = events;\n    for (var i = 0, iMax = events.length; i < iMax; i++) {\n      events[i].segment.registerRingOut(this);\n    }\n    this.poly = null;\n    this._clearCache();\n  }\n\n  _createClass(RingOut, [{\n    key: 'registerPoly',\n    value: function registerPoly(poly) {\n      this.poly = poly;\n    }\n  }, {\n    key: 'getGeom',\n    value: function getGeom() {\n      // Remove superfluous points (ie extra points along a straight line),\n      var points = [[this.events[0].point.x, this.events[0].point.y]];\n      for (var i = 1, iMax = this.events.length - 1; i < iMax; i++) {\n        var _prevPt = this.events[i - 1].point;\n        var _pt = this.events[i].point;\n        var _nextPt = this.events[i + 1].point;\n        if ((0, _vector.compareVectorAngles)(_pt, _prevPt, _nextPt) === 0) continue;\n        points.push([_pt.x, _pt.y]);\n      }\n\n      // check if the starting point is necessary\n      var prevPt = this.events[this.events.length - 2].point;\n      var pt = this.events[0].point;\n      var nextPt = this.events[1].point;\n      if ((0, _vector.compareVectorAngles)(pt, prevPt, nextPt) === 0) points.shift();\n\n      // ring was all (within rounding error of angle calc) colinear points\n      if (points.length === 0) return null;\n\n      points.push(points[0]);\n      return this.isExteriorRing ? points : points.reverse();\n    }\n  }, {\n    key: '_clearCache',\n    value: function _clearCache() {\n      this._cache = {};\n    }\n  }, {\n    key: '_getCached',\n    value: function _getCached(propName, calcMethod) {\n      // if this._cache[something] isn't set, fill it with this._something()\n      if (this._cache[propName] === undefined) {\n        this._cache[propName] = this['_' + propName].bind(this)();\n      }\n      return this._cache[propName];\n    }\n  }, {\n    key: '_isExteriorRing',\n    value: function _isExteriorRing() {\n      if (!this.enclosingRing) return true;\n      if (!this.enclosingRing.enclosingRing) return false;\n      // an island in hole is a whole new polygon\n      return this.enclosingRing.enclosingRing.isExteriorRing;\n    }\n\n    /* Returns the ring that encloses this one, if any */\n\n  }, {\n    key: '_enclosingRing',\n    value: function _enclosingRing() {\n      // start with the ealier sweep line event so that the prevSeg\n      // chain doesn't lead us inside of a loop of ours\n      var leftMostEvt = this.events[0];\n      for (var i = 1, iMax = this.events.length; i < iMax; i++) {\n        var evt = this.events[i];\n        if (_sweepEvent2.default.compare(leftMostEvt, evt) > 0) leftMostEvt = evt;\n      }\n\n      var prevSeg = leftMostEvt.segment.prevInResult;\n      var prevPrevSeg = prevSeg ? prevSeg.prevInResult : null;\n\n      while (true) {\n        // no segment found, thus no ring can enclose us\n        if (!prevSeg) return null;\n\n        // no segments below prev segment found, thus the ring of the prev\n        // segment must loop back around and enclose us\n        if (!prevPrevSeg) return prevSeg.ringOut;\n\n        // if the two segments are of different rings, the ring of the prev\n        // segment must either loop around us or the ring of the prev prev\n        // seg, which would make us and the ring of the prev peers\n        if (prevPrevSeg.ringOut !== prevSeg.ringOut) {\n          if (prevPrevSeg.ringOut.enclosingRing !== prevSeg.ringOut) {\n            return prevSeg.ringOut;\n          } else return prevSeg.ringOut.enclosingRing;\n        }\n\n        // two segments are from the same ring, so this was a penisula\n        // of that ring. iterate downward, keep searching\n        prevSeg = prevPrevSeg.prevInResult;\n        prevPrevSeg = prevSeg ? prevSeg.prevInResult : null;\n      }\n    }\n  }, {\n    key: 'enclosingRing',\n    get: function get() {\n      return this._getCached('enclosingRing');\n    }\n  }, {\n    key: 'isExteriorRing',\n    get: function get() {\n      return this._getCached('isExteriorRing');\n    }\n  }]);\n\n  return RingOut;\n}();\n\nvar PolyOut = exports.PolyOut = function () {\n  function PolyOut(exteriorRing) {\n    _classCallCheck(this, PolyOut);\n\n    this.exteriorRing = exteriorRing;\n    exteriorRing.registerPoly(this);\n    this.interiorRings = [];\n  }\n\n  _createClass(PolyOut, [{\n    key: 'addInterior',\n    value: function addInterior(ring) {\n      this.interiorRings.push(ring);\n      ring.registerPoly(this);\n    }\n  }, {\n    key: 'getGeom',\n    value: function getGeom() {\n      var geom = [this.exteriorRing.getGeom()];\n      // exterior ring was all (within rounding error of angle calc) colinear points\n      if (geom[0] === null) return null;\n      for (var i = 0, iMax = this.interiorRings.length; i < iMax; i++) {\n        var ringGeom = this.interiorRings[i].getGeom();\n        // interior ring was all (within rounding error of angle calc) colinear points\n        if (ringGeom === null) continue;\n        geom.push(ringGeom);\n      }\n      return geom;\n    }\n  }]);\n\n  return PolyOut;\n}();\n\nvar MultiPolyOut = exports.MultiPolyOut = function () {\n  function MultiPolyOut(rings) {\n    _classCallCheck(this, MultiPolyOut);\n\n    this.rings = rings;\n    this.polys = this._composePolys(rings);\n  }\n\n  _createClass(MultiPolyOut, [{\n    key: 'getGeom',\n    value: function getGeom() {\n      var geom = [];\n      for (var i = 0, iMax = this.polys.length; i < iMax; i++) {\n        var polyGeom = this.polys[i].getGeom();\n        // exterior ring was all (within rounding error of angle calc) colinear points\n        if (polyGeom === null) continue;\n        geom.push(polyGeom);\n      }\n      return geom;\n    }\n  }, {\n    key: '_composePolys',\n    value: function _composePolys(rings) {\n      var polys = [];\n      for (var i = 0, iMax = rings.length; i < iMax; i++) {\n        var ring = rings[i];\n        if (ring.poly) continue;\n        if (ring.isExteriorRing) polys.push(new PolyOut(ring));else {\n          if (!ring.enclosingRing.poly) polys.push(new PolyOut(ring.enclosingRing));\n          ring.enclosingRing.poly.addInterior(ring);\n        }\n      }\n      return polys;\n    }\n  }]);\n\n  return MultiPolyOut;\n}();\n\n//# sourceURL=webpack://polygon-clipping/./src/geom-out.js?");

/***/ }),

/***/ "./src/index.js":
/*!**********************!*\
  !*** ./src/index.js ***!
  \**********************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = doIt;\n\nvar _splaytree = __webpack_require__(/*! splaytree */ \"./node_modules/splaytree/index.js\");\n\nvar _splaytree2 = _interopRequireDefault(_splaytree);\n\nvar _cleanInput = __webpack_require__(/*! ./clean-input.js */ \"./src/clean-input.js\");\n\nvar cleanInput = _interopRequireWildcard(_cleanInput);\n\nvar _geomIn = __webpack_require__(/*! ./geom-in */ \"./src/geom-in.js\");\n\nvar geomIn = _interopRequireWildcard(_geomIn);\n\nvar _geomOut = __webpack_require__(/*! ./geom-out */ \"./src/geom-out.js\");\n\nvar geomOut = _interopRequireWildcard(_geomOut);\n\nvar _operation = __webpack_require__(/*! ./operation */ \"./src/operation.js\");\n\nvar _operation2 = _interopRequireDefault(_operation);\n\nvar _sweepEvent = __webpack_require__(/*! ./sweep-event */ \"./src/sweep-event.js\");\n\nvar _sweepEvent2 = _interopRequireDefault(_sweepEvent);\n\nvar _sweepLine = __webpack_require__(/*! ./sweep-line */ \"./src/sweep-line.js\");\n\nvar _sweepLine2 = _interopRequireDefault(_sweepLine);\n\nfunction _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key]; } } newObj.default = obj; return newObj; } }\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nfunction doIt(operationType, geom, moreGeoms) {\n  /* Make a copy of the input geometry with points as objects, for perf */\n  var geoms = [cleanInput.pointsAsObjects(geom)];\n  for (var i = 0, iMax = moreGeoms.length; i < iMax; i++) {\n    geoms.push(cleanInput.pointsAsObjects(moreGeoms[i]));\n  }\n\n  /* Clean inputs */\n  for (var _i = 0, _iMax = geoms.length; _i < _iMax; _i++) {\n    cleanInput.forceMultiPoly(geoms[_i]);\n    cleanInput.cleanMultiPoly(geoms[_i]);\n  }\n\n  /* Convert inputs to MultiPoly objects, mark subject & register operation */\n  var multipolys = [];\n  for (var _i2 = 0, _iMax2 = geoms.length; _i2 < _iMax2; _i2++) {\n    multipolys.push(new geomIn.MultiPolyIn(geoms[_i2]));\n  }\n  multipolys[0].markAsSubject();\n  _operation2.default.register(operationType, multipolys.length);\n\n  /* Put segment endpoints in a priority queue */\n  var queue = new _splaytree2.default(_sweepEvent2.default.compare);\n  for (var _i3 = 0, _iMax3 = multipolys.length; _i3 < _iMax3; _i3++) {\n    var sweepEvents = multipolys[_i3].getSweepEvents();\n    for (var j = 0, jMax = sweepEvents.length; j < jMax; j++) {\n      queue.insert(sweepEvents[j]);\n    }\n  }\n\n  /* Pass the sweep line over those endpoints */\n  var sweepLine = new _sweepLine2.default();\n  var node = void 0;\n  while (node = queue.pop()) {\n    var newEvents = sweepLine.process(node.key);\n    for (var _i4 = 0, _iMax4 = newEvents.length; _i4 < _iMax4; _i4++) {\n      queue.insert(newEvents[_i4]);\n    }\n  }\n\n  /* Collect and compile segments we're keeping into a multipolygon */\n  var ringsOut = geomOut.RingOut.factory(sweepLine.segments);\n  var result = new geomOut.MultiPolyOut(ringsOut);\n  return result.getGeom();\n}\nmodule.exports = exports.default;\n\n//# sourceURL=webpack://polygon-clipping/./src/index.js?");

/***/ }),

/***/ "./src/operation.js":
/*!**************************!*\
  !*** ./src/operation.js ***!
  \**************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nvar Operation = function () {\n  function Operation() {\n    _classCallCheck(this, Operation);\n\n    this.types = {\n      INTERSECTION: 0,\n      UNION: 1,\n      XOR: 2,\n      DIFFERENCE: 3\n    };\n  }\n\n  _createClass(Operation, [{\n    key: \"register\",\n    value: function register(type, numMultiPolys) {\n      this.type = type;\n      this.numMultiPolys = numMultiPolys;\n    }\n  }]);\n\n  return Operation;\n}();\n\n// global to register details about the operation on\n\n\nvar operation = new Operation();\n\nexports.default = operation;\nmodule.exports = exports.default;\n\n//# sourceURL=webpack://polygon-clipping/./src/operation.js?");

/***/ }),

/***/ "./src/segment.js":
/*!************************!*\
  !*** ./src/segment.js ***!
  \************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();\n\nvar _operation = __webpack_require__(/*! ./operation */ \"./src/operation.js\");\n\nvar _operation2 = _interopRequireDefault(_operation);\n\nvar _sweepEvent = __webpack_require__(/*! ./sweep-event */ \"./src/sweep-event.js\");\n\nvar _sweepEvent2 = _interopRequireDefault(_sweepEvent);\n\nvar _bbox = __webpack_require__(/*! ./bbox */ \"./src/bbox.js\");\n\nvar _flp = __webpack_require__(/*! ./flp */ \"./src/flp.js\");\n\nvar _vector = __webpack_require__(/*! ./vector */ \"./src/vector.js\");\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nvar Segment = function () {\n  _createClass(Segment, null, [{\n    key: 'compare',\n    value: function compare(a, b) {\n      if (a === b) return 0;\n\n      var alx = a.leftSE.point.x;\n      var aly = a.leftSE.point.y;\n      var blx = b.leftSE.point.x;\n      var bly = b.leftSE.point.y;\n      var arx = a.rightSE.point.x;\n      var brx = b.rightSE.point.x;\n\n      // check if they're even in the same vertical plane\n      if ((0, _flp.cmp)(brx, alx) < 0) return 1;\n      if ((0, _flp.cmp)(arx, blx) < 0) return -1;\n\n      var cmpLeft = a.comparePoint(b.leftSE.point);\n      var cmpLX = (0, _flp.cmp)(alx, blx);\n\n      // are a and b colinear?\n      if (cmpLeft === 0 && a.comparePoint(b.rightSE.point) === 0 && b.comparePoint(a.leftSE.point) === 0 && b.comparePoint(a.rightSE.point) === 0) {\n        // colinear segments with non-matching left-endpoints, consider\n        // the more-left endpoint to be earlier\n        if (cmpLX !== 0) return cmpLX;\n\n        // colinear segments with matching left-endpoints, fall back\n        // on creation order of segments as a tie-breaker\n        // NOTE: we do not use segment length to break a tie here, because\n        //       when segments are split their length changes\n        if (a.ringIn.id !== b.ringIn.id) {\n          return a.ringIn.id < b.ringIn.id ? -1 : 1;\n        }\n      } else {\n        // not colinear\n\n        // if the our left endpoints are not in the same vertical line,\n        // consider a vertical line at the rightmore of the two left endpoints,\n        // consider the segment that intersects lower with that line to be earlier\n        if (cmpLX < 0) return cmpLeft === 1 ? -1 : 1;\n        if (cmpLX > 0) return b.comparePoint(a.leftSE.point) === 1 ? 1 : -1;\n\n        // if our left endpoints match, consider the segment\n        // that angles more downward to be earlier\n        var cmpLY = (0, _flp.cmp)(aly, bly);\n        if (cmpLY === 0) {\n          // special case verticals due to rounding errors\n          // part of https://github.com/mfogel/polygon-clipping/issues/29\n          if (a.isVertical !== b.isVertical) return a.isVertical ? 1 : -1;else return a.comparePoint(b.rightSE.point) > 0 ? -1 : 1;\n        }\n\n        // left endpoints are in the same vertical line but don't overlap exactly,\n        // lower means ealier\n        return cmpLY;\n      }\n\n      throw new Error('Segment comparison (from [' + a.leftSE.point.x + ', ' + a.leftSE.point.y + '])' + (' -> to [' + a.rightSE.point.x + ', ' + a.rightSE.point.y + ']) failed... ') + ' segments equal but not identical?');\n    }\n  }]);\n\n  function Segment(leftSE, rightSE, ringIn) {\n    _classCallCheck(this, Segment);\n\n    this.leftSE = leftSE;\n    if (leftSE !== null) leftSE.segment = this;\n    this.rightSE = rightSE;\n    if (rightSE !== null) rightSE.segment = this;\n    this.ringIn = ringIn;\n    this.ringOut = null;\n    this.coincidents = [this];\n    this._clearCache();\n  }\n\n  _createClass(Segment, [{\n    key: 'swapEvents',\n    value: function swapEvents() {\n      var tmp = this.leftSE;\n      this.leftSE = this.rightSE;\n      this.rightSE = tmp;\n    }\n  }, {\n    key: 'getOtherSE',\n    value: function getOtherSE(se) {\n      if (se === this.leftSE) return this.rightSE;\n      if (se === this.rightSE) return this.leftSE;\n      throw new Error('may only be called by own sweep events');\n    }\n  }, {\n    key: 'isAnEndpoint',\n    value: function isAnEndpoint(point) {\n      return (0, _flp.cmpPoints)(point, this.leftSE.point) === 0 || (0, _flp.cmpPoints)(point, this.rightSE.point) === 0;\n    }\n  }, {\n    key: 'isPointOn',\n    value: function isPointOn(point) {\n      return (0, _bbox.isInBbox)(this.bbox, point) && this.comparePoint(point) === 0;\n    }\n\n    /* Compare this segment with a point. Return value indicates\n     *    1: point is below segment\n     *    0: point is colinear to segment\n     *   -1: point is above segment */\n\n  }, {\n    key: 'comparePoint',\n    value: function comparePoint(point) {\n      if (this.isAnEndpoint(point)) return 0;\n      var v1 = this.vector;\n      var v2 = (0, _vector.perpendicular)(v1);\n      var interPt = (0, _vector.intersection)(this.leftSE.point, v1, point, v2);\n\n      var cmpY = (0, _flp.cmp)(point.y, interPt.y);\n      if (cmpY !== 0) return cmpY;\n      return (0, _flp.cmp)(interPt.x, point.x);\n    }\n\n    /**\n     * Given another segment, returns an array of intersection points\n     * between the two segments. The returned array can contain:\n     *  * zero points:  no intersection b/t segments\n     *  * one point:    segments intersect once\n     *  * two points:   segments overlap. Endpoints of overlap returned.\n     *                  Will be ordered as sweep line would encounter them.\n     */\n\n  }, {\n    key: 'getIntersections',\n    value: function getIntersections(other) {\n      // If bboxes don't overlap, there can't be any intersections\n      var bboxOverlap = (0, _bbox.getBboxOverlap)(this.bbox, other.bbox);\n      if (bboxOverlap === null) return [];\n\n      // The general algorithim doesn't handle overlapping colinear segments.\n      // Overlapping colinear segments, if present, will have intersections\n      // of one pair of opposing corners of the bbox overlap. Thus we just\n      // manually check those coordinates.\n      //\n      // Note this also handles the cases of a collapsed bbox (just one point)\n      // and semi-collapsed bbox (a vertical or horizontal line) as well.\n      //\n      // In addition, in the case of a T-intersection, this ensures that the\n      // interseciton returned matches exactly an endpoint - no rounding error.\n      var intersections = [];\n      var bboxCorners = (0, _bbox.getUniqueCorners)(bboxOverlap);\n      for (var i = 0, iMax = bboxCorners.length; i < iMax; i++) {\n        var point = bboxCorners[i];\n        // test if this point is an intersection\n        if (this.isAnEndpoint(point) && other.isPointOn(point) || other.isAnEndpoint(point) && this.isPointOn(point)) {\n          intersections.push(point);\n        }\n      }\n      if (intersections.length > 0) return intersections;\n\n      // general case of one intersection between non-overlapping segments\n      var pt = (0, _vector.intersection)(this.leftSE.point, this.vector, other.leftSE.point, other.vector);\n      if (pt !== null && (0, _bbox.isInBbox)(bboxOverlap, pt)) return [pt];\n      return [];\n    }\n\n    /**\n     * Split the given segment and all of its coincidents into multiple segments\n     * on the given points.\n     *  * Each existing segment will retain its leftSE and a new rightSE will be\n     *    generated for it.\n     *  * A new segment will be generated which will adopt the original segment's\n     *    rightSE, and a new leftSE will be generated for it.\n     *  * New segments will be marked coincident as needed.\n     *  * If there are more than two points given to split on, new segments\n     *    in the middle will be generated with new leftSE and rightSE's.\n     *  * An array of the newly generated SweepEvents will be returned.\n     */\n\n  }, {\n    key: 'split',\n    value: function split(points) {\n      // sort them and unique-ify them\n      points.sort(_flp.cmpPoints);\n      var newPts = [];\n      for (var i = 0; i < points.length; i++) {\n        if (i === 0 || (0, _flp.cmpPoints)(points[i - 1], points[i]) !== 0) newPts.push(points[i]);\n      }\n      points = newPts;\n\n      for (var _i = 0, iMax = points.length; _i < iMax; _i++) {\n        var pt = points[_i];\n        if (this.isAnEndpoint(pt)) {\n          throw new Error('Cannot split segment upon endpoint at [' + pt.x + ', ' + pt.y + ']');\n        }\n      }\n\n      var point = points.shift();\n      var newSegments = [];\n      var newEvents = [];\n      for (var _i2 = 0, _iMax = this.coincidents.length; _i2 < _iMax; _i2++) {\n        var thisSeg = this.coincidents[_i2];\n        var newLeftSE = new _sweepEvent2.default(point);\n        var newRightSE = new _sweepEvent2.default(point);\n        newSegments.push(new Segment(newLeftSE, thisSeg.rightSE, thisSeg.ringIn));\n        thisSeg.rightSE = newRightSE;\n        thisSeg.rightSE.segment = thisSeg;\n        newEvents.push(newRightSE);\n        newEvents.push(newLeftSE);\n      }\n\n      for (var _i3 = 1, _iMax2 = newSegments.length; _i3 < _iMax2; _i3++) {\n        newSegments[_i3].registerCoincident(newSegments[_i3 - 1]);\n      }\n\n      if (points.length > 0) {\n        var moreNewEvents = newSegments[0].split(points);\n        for (var _i4 = 0, _iMax3 = moreNewEvents.length; _i4 < _iMax3; _i4++) {\n          newEvents.push(moreNewEvents[_i4]);\n        }\n      }\n      return newEvents;\n    }\n  }, {\n    key: 'registerPrev',\n    value: function registerPrev(other) {\n      this.prev = other;\n      this._clearCache();\n    }\n  }, {\n    key: 'registerRingOut',\n    value: function registerRingOut(ring) {\n      this.ringOut = ring;\n    }\n  }, {\n    key: 'registerCoincident',\n    value: function registerCoincident(other) {\n      if (this.coincidents == other.coincidents) return; // already coincident\n      var otherCoincidents = other.coincidents;\n      for (var i = 0, iMax = otherCoincidents.length; i < iMax; i++) {\n        var seg = otherCoincidents[i];\n        this.coincidents.push(seg);\n        seg.coincidents = this.coincidents;\n      }\n      // put the 'winner' at the front. arbitrary: winner has lowest ringId\n      this.coincidents.sort(function (a, b) {\n        return a.ringIn.id - b.ringIn.id;\n      });\n    }\n\n    /* The first segment previous segment chain that is in the result */\n\n  }, {\n    key: '_prevInResult',\n    value: function _prevInResult() {\n      var prev = this.prev;\n      while (prev && !prev.isInResult) {\n        prev = prev.prev;\n      }return prev;\n    }\n  }, {\n    key: '_prevNotCoincident',\n    value: function _prevNotCoincident() {\n      // iterating backwards from next to prev\n      var next = this;\n      var prev = this.prev;\n      while (prev && next.coincidents === prev.coincidents) {\n        next = prev;\n        prev = prev.prev;\n      }\n      return prev;\n    }\n\n    /* Does the sweep line, when it intersects this segment, enter the ring? */\n\n  }, {\n    key: '_sweepLineEntersRing',\n    value: function _sweepLineEntersRing() {\n      // opposite of previous segment on the same ring\n      var prev = this.prevNotCoincident;\n      while (prev) {\n        for (var i = 0, iMax = prev.coincidents.length; i < iMax; i++) {\n          var seg = prev.coincidents[i];\n          if (seg.ringIn === this.ringIn) return !seg.sweepLineEntersRing;\n        }\n        prev = prev.prevNotCoincident;\n      }\n      return true;\n    }\n\n    /* Does the sweep line, when it intersects this segment, enter the polygon? */\n\n  }, {\n    key: '_ringsInsideOf',\n    value: function _ringsInsideOf() {\n      if (!this.prev) return [];\n\n      // coincidents always share the same rings. Return same array to save mem\n      if (this.coincidents === this.prev.coincidents) {\n        return this.prev.ringsInsideOf;\n      }\n\n      var rings = [];\n      var prevRingsInsideOf = this.prev.ringsInsideOf;\n      var prevRingsEntering = this.prev.getRingsEntering();\n      var ringsExiting = this.getRingsExiting();\n\n      // rings our prev was inside of all count, except those we're exiting\n      for (var i = 0, iMax = prevRingsInsideOf.length; i < iMax; i++) {\n        var ring = prevRingsInsideOf[i];\n        if (!ringsExiting.includes(ring)) rings.push(ring);\n      }\n\n      // rings our prev was entering of all count, except those we're exiting\n      for (var _i5 = 0, _iMax4 = prevRingsEntering.length; _i5 < _iMax4; _i5++) {\n        var _ring = prevRingsEntering[_i5];\n        if (!ringsExiting.includes(_ring)) rings.push(_ring);\n      }\n\n      return rings;\n    }\n\n    /* Array of input rings this segment is on boundary of */\n\n  }, {\n    key: 'getRingsOnEdgeOf',\n    value: function getRingsOnEdgeOf() {\n      var rings = [];\n      for (var i = 0, iMax = this.coincidents.length; i < iMax; i++) {\n        rings.push(this.coincidents[i].ringIn);\n      }\n      return rings;\n    }\n\n    /* Array of input rings this segment is on boundary of,\n     * and for which the sweep line enters when intersecting there */\n\n  }, {\n    key: 'getRingsEntering',\n    value: function getRingsEntering() {\n      var rings = [];\n      for (var i = 0, iMax = this.coincidents.length; i < iMax; i++) {\n        var segment = this.coincidents[i];\n        if (!segment.sweepLineEntersRing) continue;\n        rings.push(segment.ringIn);\n      }\n      return rings;\n    }\n\n    /* Array of input rings this segment is on boundary of,\n     * and for which the sweep line exits when intersecting there */\n\n  }, {\n    key: 'getRingsExiting',\n    value: function getRingsExiting() {\n      var rings = [];\n      for (var i = 0, iMax = this.coincidents.length; i < iMax; i++) {\n        var segment = this.coincidents[i];\n        if (segment.sweepLineEntersRing) continue;\n        rings.push(segment.ringIn);\n      }\n      return rings;\n    }\n  }, {\n    key: 'getRingsEnteringAndExiting',\n    value: function getRingsEnteringAndExiting() {\n      var ringsEntering = [];\n      var ringsExiting = [];\n\n      for (var i = 0, iMax = this.coincidents.length; i < iMax; i++) {\n        var segment = this.coincidents[i];\n        if (segment.sweepLineEntersRing) ringsEntering.push(segment.ringIn);else ringsExiting.push(segment.ringIn);\n      }\n\n      return [ringsEntering, ringsExiting];\n    }\n\n    /* Is this segment valid on our own polygon? (ie not outside exterior ring) */\n\n  }, {\n    key: '_isValidEdgeForPoly',\n    value: function _isValidEdgeForPoly() {\n      // SLER: sweep line entering orientation\n      var sameSLER = void 0;\n      var diffSLER = void 0;\n      var rings = this.getRingsEnteringAndExiting();\n      if (this.sweepLineEntersRing) {\n        sameSLER = rings[0];\n        diffSLER = rings[1];\n      } else {\n        diffSLER = rings[0];\n        sameSLER = rings[1];\n      }\n      return this.ringIn.isValid(sameSLER, diffSLER, this.ringsInsideOf);\n    }\n\n    /* Array of multipolys this segment is inside of */\n\n  }, {\n    key: 'getMultiPolysInsideOf',\n    value: function getMultiPolysInsideOf() {\n      var mps = [];\n      for (var i = 0, iMax = this.ringsInsideOf.length; i < iMax; i++) {\n        var poly = this.ringsInsideOf[i].poly;\n        if (mps.includes(poly.multiPoly)) continue;\n        if (!poly.isInside(this.getRingsOnEdgeOf(), this.ringsInsideOf)) continue;\n        mps.push(poly.multiPoly);\n      }\n      return mps;\n    }\n\n    /* Combine the above two functions for efficient looping */\n\n  }, {\n    key: 'getMultiPolysSLPEntersAndExits',\n    value: function getMultiPolysSLPEntersAndExits(multiPolysInsideOf) {\n      var mpsEnters = multiPolysInsideOf.slice(0);\n      var mpsExits = multiPolysInsideOf.slice(0);\n      for (var i = 0, iMax = this.coincidents.length; i < iMax; i++) {\n        var seg = this.coincidents[i];\n        var mp = seg.ringIn.poly.multiPoly;\n        if (seg.sweepLineEntersPoly) {\n          if (!mpsEnters.includes(mp)) mpsEnters.push(mp);\n        } else if (seg.sweepLineExitsPoly) {\n          if (!mpsExits.includes(mp)) mpsExits.push(mp);\n        }\n      }\n      return [mpsEnters, mpsExits];\n    }\n\n    /* Is this segment part of the final result? */\n\n  }, {\n    key: '_isInResult',\n    value: function _isInResult() {\n      // if it's not the coincidence winner, it's not in the resul\n      if (this !== this.coincidents[0]) return false;\n\n      var multiPolysInsideOf = this.getMultiPolysInsideOf();\n      var getMPS = this.getMultiPolysSLPEntersAndExits(multiPolysInsideOf);\n      var multiPolysSLPEnters = getMPS[0];\n      var multiPolysSLPExits = getMPS[1];\n\n      switch (_operation2.default.type) {\n        case _operation2.default.types.UNION:\n          // UNION - included iff:\n          //  * On one side of us there is 0 poly interiors AND\n          //  * On the other side there is 1 or more.\n          var noEnters = multiPolysSLPEnters.length === 0;\n          var noExits = multiPolysSLPExits.length === 0;\n          return noEnters !== noExits;\n\n        case _operation2.default.types.INTERSECTION:\n          // INTERSECTION - included iff:\n          //  * on one side of us all multipolys are rep. with poly interiors AND\n          //  * on the other side of us, not all multipolys are repsented\n          //    with poly interiors\n          var least = void 0;\n          var most = void 0;\n          if (multiPolysSLPEnters.length < multiPolysSLPExits.length) {\n            least = multiPolysSLPEnters.length;\n            most = multiPolysSLPExits.length;\n          } else {\n            least = multiPolysSLPExits.length;\n            most = multiPolysSLPEnters.length;\n          }\n          return most === _operation2.default.numMultiPolys && least < most;\n\n        case _operation2.default.types.XOR:\n          // XOR - included iff:\n          //  * the difference between the number of multipolys represented\n          //    with poly interiors on our two sides is an odd number\n          var diff = Math.abs(multiPolysSLPEnters.length - multiPolysSLPExits.length);\n          return diff % 2 === 1;\n\n        case _operation2.default.types.DIFFERENCE:\n          // DIFFERENCE included iff:\n          //  * on exactly one side, we have just the subject\n          var isJustSubject = function isJustSubject(mps) {\n            return mps.length === 1 && mps[0].isSubject;\n          };\n          return isJustSubject(multiPolysSLPEnters) !== isJustSubject(multiPolysSLPExits);\n\n        default:\n          throw new Error('Unrecognized operation type found ' + _operation2.default.type);\n      }\n    }\n  }, {\n    key: '_clearCache',\n    value: function _clearCache() {\n      this._cache = {};\n    }\n  }, {\n    key: 'bbox',\n    get: function get() {\n      var y1 = this.leftSE.point.y;\n      var y2 = this.rightSE.point.y;\n      return {\n        ll: { x: this.leftSE.point.x, y: y1 < y2 ? y1 : y2 },\n        ur: { x: this.rightSE.point.x, y: y1 > y2 ? y1 : y2 }\n      };\n    }\n\n    /* A vector from the left point to the right */\n\n  }, {\n    key: 'vector',\n    get: function get() {\n      return {\n        x: this.rightSE.point.x - this.leftSE.point.x,\n        y: this.rightSE.point.y - this.leftSE.point.y\n      };\n    }\n  }, {\n    key: 'isVertical',\n    get: function get() {\n      return (0, _flp.cmp)(this.leftSE.point.x, this.rightSE.point.x) === 0;\n    }\n  }, {\n    key: 'prevInResult',\n    get: function get() {\n      var key = 'prevInResult';\n      if (this._cache[key] === undefined) this._cache[key] = this['_' + key]();\n      return this._cache[key];\n    }\n  }, {\n    key: 'prevNotCoincident',\n    get: function get() {\n      var key = 'prevNotCoincident';\n      if (this._cache[key] === undefined) this._cache[key] = this['_' + key]();\n      return this._cache[key];\n    }\n  }, {\n    key: 'sweepLineEntersRing',\n    get: function get() {\n      var key = 'sweepLineEntersRing';\n      if (this._cache[key] === undefined) this._cache[key] = this['_' + key]();\n      return this._cache[key];\n    }\n  }, {\n    key: 'sweepLineEntersPoly',\n    get: function get() {\n      if (!this.isValidEdgeForPoly) return false;\n      return this.ringIn.isExterior === this.sweepLineEntersRing;\n    }\n\n    /* Does the sweep line, when it intersects this segment, exit the polygon? */\n\n  }, {\n    key: 'sweepLineExitsPoly',\n    get: function get() {\n      if (!this.isValidEdgeForPoly) return false;\n      return this.ringIn.isExterior !== this.sweepLineEntersRing;\n    }\n\n    /* Array of input rings this segment is inside of (not on boundary) */\n\n  }, {\n    key: 'ringsInsideOf',\n    get: function get() {\n      var key = 'ringsInsideOf';\n      if (this._cache[key] === undefined) this._cache[key] = this['_' + key]();\n      return this._cache[key];\n    }\n  }, {\n    key: 'isValidEdgeForPoly',\n    get: function get() {\n      var key = 'isValidEdgeForPoly';\n      if (this._cache[key] === undefined) this._cache[key] = this['_' + key]();\n      return this._cache[key];\n    }\n  }, {\n    key: 'isInResult',\n    get: function get() {\n      var key = 'isInResult';\n      if (this._cache[key] === undefined) this._cache[key] = this['_' + key]();\n      return this._cache[key];\n    }\n  }], [{\n    key: 'fromRing',\n    value: function fromRing(point1, point2, ring) {\n      var leftSE = void 0,\n          rightSE = void 0;\n      var ptCmp = (0, _flp.cmpPoints)(point1, point2);\n      if (ptCmp < 0) {\n        leftSE = new _sweepEvent2.default(point1);\n        rightSE = new _sweepEvent2.default(point2);\n      } else if (ptCmp > 0) {\n        leftSE = new _sweepEvent2.default(point2);\n        rightSE = new _sweepEvent2.default(point1);\n      } else {\n        throw new Error('Tried to create degenerate segment at [' + point1.x + ', ' + point2.y + ']');\n      }\n      return new Segment(leftSE, rightSE, ring);\n    }\n  }]);\n\n  return Segment;\n}();\n\nexports.default = Segment;\nmodule.exports = exports.default;\n\n//# sourceURL=webpack://polygon-clipping/./src/segment.js?");

/***/ }),

/***/ "./src/sweep-event.js":
/*!****************************!*\
  !*** ./src/sweep-event.js ***!
  \****************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();\n\nvar _flp = __webpack_require__(/*! ./flp */ \"./src/flp.js\");\n\nvar _vector = __webpack_require__(/*! ./vector */ \"./src/vector.js\");\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nvar SweepEvent = function () {\n  _createClass(SweepEvent, null, [{\n    key: 'compare',\n    value: function compare(a, b) {\n\n      // if the events are already linked, then we know the points are equal\n      if (a.point !== b.point) {\n\n        // favor event with a point that the sweep line hits first\n        var cmpX = (0, _flp.cmp)(a.point.x, b.point.x);\n        if (cmpX !== 0) return cmpX;\n\n        var cmpY = (0, _flp.cmp)(a.point.y, b.point.y);\n        if (cmpY !== 0) return cmpY;\n\n        // Points are equal, so go ahead and link these events.\n        // This will cascade and possibly mark segments coincident.\n        a.link(b);\n      }\n\n      // favor right events over left\n      if (a.isLeft !== b.isLeft) return a.isLeft ? 1 : -1;\n\n      // favor vertical segments for left events, and non-vertical for right\n      // https://github.com/mfogel/polygon-clipping/issues/29\n      if (a.segment.isVertical && !b.segment.isVertical) return a.isLeft ? 1 : -1;\n      if (!a.segment.isVertical && b.segment.isVertical) return a.isLeft ? -1 : 1;\n\n      // favor events where the line segment is lower\n      var pointSegCmp = a.segment.comparePoint(b.otherSE.point);\n      if (pointSegCmp !== 0) return pointSegCmp > 0 ? -1 : 1;\n\n      // as a tie-breaker, favor lower segment creation id\n      var aId = a.segment.ringIn.id;\n      var bId = b.segment.ringIn.id;\n      if (aId !== bId) return aId < bId ? -1 : 1;\n\n      // NOTE:  We don't sort on segment length because that changes\n      //        as segments are divided.\n\n      // they appear to be the same point... are they?\n      if (a === b) return 0;\n\n      throw new Error('SweepEvent comparison failed at [' + a.point.x + ', ' + a.point.y + ']... ' + 'equal but not identical?');\n    }\n\n    // Warning: input will be modified and re-used (for performance)\n\n  }]);\n\n  function SweepEvent(point) {\n    _classCallCheck(this, SweepEvent);\n\n    if (point.events === undefined) point.events = [this];else point.events.push(this);\n    this.point = point;\n  }\n\n  _createClass(SweepEvent, [{\n    key: 'link',\n    value: function link(other) {\n      if (other.point === this.point) {\n        throw new Error('Tried to link already linked events');\n      }\n      var numOriginalEvents = this.point.events.length;\n      var otherEvents = other.point.events;\n      for (var i = 0, iMax = otherEvents.length; i < iMax; i++) {\n        var evt = otherEvents[i];\n        this.point.events.push(evt);\n        evt.point = this.point;\n        for (var j = 0, jMax = numOriginalEvents; j < jMax; j++) {\n          if (this.point.events[j].otherSE.point === evt.otherSE.point) {\n            this.point.events[j].segment.registerCoincident(evt.segment);\n          }\n        }\n      }\n    }\n  }, {\n    key: 'getAvailableLinkedEvents',\n    value: function getAvailableLinkedEvents() {\n      // point.events is always of length 2 or greater\n      var events = [];\n      for (var i = 0, iMax = this.point.events.length; i < iMax; i++) {\n        var evt = this.point.events[i];\n        if (evt !== this && !evt.segment.ringOut && evt.segment.isInResult) {\n          events.push(evt);\n        }\n      }\n      return events;\n    }\n\n    /**\n     * Returns a comparator function for sorting linked events that will\n     * favor the event that will give us the smallest left-side angle.\n     * All ring construction starts as low as possible heading to the right,\n     * so by always turning left as sharp as possible we'll get polygons\n     * without uncessary loops & holes.\n     *\n     * The comparator function has a compute cache such that it avoids\n     * re-computing already-computed values.\n     */\n\n  }, {\n    key: 'getLeftmostComparator',\n    value: function getLeftmostComparator(baseEvent) {\n      var _this = this;\n\n      var cache = new Map();\n\n      var fillCache = function fillCache(linkedEvent) {\n        var nextEvent = linkedEvent.otherSE;\n        cache.set(linkedEvent, {\n          sine: (0, _vector.sineOfAngle)(_this.point, baseEvent.point, nextEvent.point),\n          cosine: (0, _vector.cosineOfAngle)(_this.point, baseEvent.point, nextEvent.point)\n        });\n      };\n\n      return function (a, b) {\n        if (!cache.has(a)) fillCache(a);\n        if (!cache.has(b)) fillCache(b);\n\n        var _cache$get = cache.get(a),\n            asine = _cache$get.sine,\n            acosine = _cache$get.cosine;\n\n        var _cache$get2 = cache.get(b),\n            bsine = _cache$get2.sine,\n            bcosine = _cache$get2.cosine;\n\n        var cmpZeroASine = (0, _flp.cmp)(asine, 0);\n        var cmpZeroBSine = (0, _flp.cmp)(bsine, 0);\n\n        if (cmpZeroASine >= 0 && cmpZeroBSine >= 0) return (0, _flp.cmp)(bcosine, acosine);\n        if (cmpZeroASine < 0 && cmpZeroBSine < 0) return (0, _flp.cmp)(acosine, bcosine);\n        return (0, _flp.cmp)(bsine, asine);\n      };\n    }\n  }, {\n    key: 'isLeft',\n    get: function get() {\n      return this === this.segment.leftSE;\n    }\n  }, {\n    key: 'isRight',\n    get: function get() {\n      return this === this.segment.rightSE;\n    }\n  }, {\n    key: 'isOrientationCorrect',\n    get: function get() {\n      var ptCmp = (0, _flp.cmpPoints)(this.point, this.otherSE.point);\n      if (ptCmp < 0) return this.isLeft;\n      if (ptCmp > 0) return this.isRight;\n      throw new Error(\"Degenerate segment encountered\");\n    }\n  }, {\n    key: 'otherSE',\n    get: function get() {\n      return this.segment.getOtherSE(this);\n    }\n  }]);\n\n  return SweepEvent;\n}();\n\nexports.default = SweepEvent;\nmodule.exports = exports.default;\n\n//# sourceURL=webpack://polygon-clipping/./src/sweep-event.js?");

/***/ }),

/***/ "./src/sweep-line.js":
/*!***************************!*\
  !*** ./src/sweep-line.js ***!
  \***************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();\n\nvar _splaytree = __webpack_require__(/*! splaytree */ \"./node_modules/splaytree/index.js\");\n\nvar _splaytree2 = _interopRequireDefault(_splaytree);\n\nvar _segment = __webpack_require__(/*! ./segment */ \"./src/segment.js\");\n\nvar _segment2 = _interopRequireDefault(_segment);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\n/**\n * NOTE:  We must be careful not to change any segments while\n *        they are in the SplayTree. AFAIK, there's no way to tell\n *        the tree to rebalance itself - thus before splitting\n *        a segment that's in the tree, we remove it from the tree,\n *        do the split, then re-insert it. (Even though splitting a\n *        segment *shouldn't* change its correct position in the\n *        sweep line tree, the reality is because of rounding errors,\n *        it sometimes does.)\n */\n\nvar SweepLine = function () {\n  function SweepLine() {\n    var comparator = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : _segment2.default.compare;\n\n    _classCallCheck(this, SweepLine);\n\n    this.tree = new _splaytree2.default(comparator);\n    this.segments = [];\n  }\n\n  _createClass(SweepLine, [{\n    key: 'process',\n    value: function process(event) {\n      var segment = event.segment;\n      var newEvents = [];\n      var node = event.isLeft ? this.tree.insert(segment) : this.tree.find(segment);\n\n      var prevNode = this.tree.prev(node);\n      var prevSeg = prevNode ? prevNode.key : null;\n\n      var nextNode = this.tree.next(node);\n      var nextSeg = nextNode ? nextNode.key : null;\n\n      if (event.isLeft) {\n        var mySplitters = [];\n\n        // Check for intersections against the previous segment in the sweep line\n        if (prevSeg) {\n          var prevInters = prevSeg.getIntersections(segment);\n          if (prevInters.length > 0) {\n            var newEventsFromSplit = this._possibleSplit(prevSeg, prevInters);\n            for (var i = 0, iMax = newEventsFromSplit.length; i < iMax; i++) {\n              newEvents.push(newEventsFromSplit[i]);\n            }\n            for (var _i = 0, _iMax = prevInters.length; _i < _iMax; _i++) {\n              var pt = prevInters[_i];\n              if (!segment.isAnEndpoint(pt)) mySplitters.push(pt);\n            }\n          }\n        }\n\n        // Check for intersections against the next segment in the sweep line\n        if (nextSeg) {\n          var nextInters = nextSeg.getIntersections(segment);\n          if (nextInters.length > 0) {\n            var _newEventsFromSplit = this._possibleSplit(nextSeg, nextInters);\n            for (var _i2 = 0, _iMax2 = _newEventsFromSplit.length; _i2 < _iMax2; _i2++) {\n              newEvents.push(_newEventsFromSplit[_i2]);\n            }\n            for (var _i3 = 0, _iMax3 = nextInters.length; _i3 < _iMax3; _i3++) {\n              var _pt = nextInters[_i3];\n              if (!segment.isAnEndpoint(_pt)) mySplitters.push(_pt);\n            }\n          }\n        }\n\n        // did we get some intersections?\n        if (newEvents.length > 0 || mySplitters.length > 0) {\n          this.tree.remove(segment);\n\n          if (mySplitters.length > 0) {\n            // split ourselves\n            var _newEventsFromSplit2 = segment.split(mySplitters);\n            for (var _i4 = 0, _iMax4 = _newEventsFromSplit2.length; _i4 < _iMax4; _i4++) {\n              newEvents.push(_newEventsFromSplit2[_i4]);\n            }\n          }\n\n          // Make sure sweep line ordering is totally consistent for later\n          // use with the segment 'prev' pointers - re-do the current event.\n          newEvents.push(event);\n        } else {\n          this.segments.push(segment);\n          segment.registerPrev(prevSeg);\n        }\n      } else {\n        // event.isRight\n\n        // since we're about to be removed from the sweep line, check for\n        // intersections between our previous and next segments\n        if (prevSeg && nextSeg) {\n          var inters = prevSeg.getIntersections(nextSeg);\n          if (inters.length > 0) {\n            var _newEventsFromSplit3 = this._possibleSplit(prevSeg, inters);\n            for (var _i5 = 0, _iMax5 = _newEventsFromSplit3.length; _i5 < _iMax5; _i5++) {\n              newEvents.push(_newEventsFromSplit3[_i5]);\n            }\n            _newEventsFromSplit3 = this._possibleSplit(nextSeg, inters);\n            for (var _i6 = 0, _iMax6 = _newEventsFromSplit3.length; _i6 < _iMax6; _i6++) {\n              newEvents.push(_newEventsFromSplit3[_i6]);\n            }\n          }\n        }\n\n        this.tree.remove(segment);\n      }\n\n      // sometimes, becaues of rounding errors, we need to resort events in the queue\n      // https://github.com/mfogel/polygon-clipping/issues/29\n      for (var _i7 = 0, _iMax7 = newEvents.length; _i7 < _iMax7; _i7++) {\n        var evt = newEvents[_i7];\n        if (!evt.isOrientationCorrect) evt.segment.swapEvents();\n      }\n\n      return newEvents;\n    }\n  }, {\n    key: '_possibleSplit',\n    value: function _possibleSplit(segment, intersections) {\n      var splitters = [];\n      for (var i = 0, iMax = intersections.length; i < iMax; i++) {\n        var pt = intersections[i];\n        if (!segment.isAnEndpoint(pt)) splitters.push(pt);\n      }\n\n      var newEvents = [];\n      if (splitters.length > 0) {\n        // Sometimes, because of rounding errors, splitting segments can cause their\n        // ordering to change, making them un-findable in the sweep line tree.\n        // To avoid this, we remove and re-insert the segments while splitting.\n        // Also, keep in mind coincidents can change while splitting. (re: #44)\n        var nodes = [];\n        for (var _i8 = 0, _iMax8 = segment.coincidents.length; _i8 < _iMax8; _i8++) {\n          var node = this.tree.find(segment.coincidents[_i8]);\n          if (node !== null) {\n            nodes.push(node);\n            this.tree.remove(node.key);\n          }\n        }\n        newEvents = segment.split(splitters);\n        for (var _i9 = 0, _iMax9 = nodes.length; _i9 < _iMax9; _i9++) {\n          this.tree.insert(nodes[_i9].key);\n        }\n      }\n      return newEvents;\n    }\n  }]);\n\n  return SweepLine;\n}();\n\nexports.default = SweepLine;\nmodule.exports = exports.default;\n\n//# sourceURL=webpack://polygon-clipping/./src/sweep-line.js?");

/***/ }),

/***/ "./src/vector.js":
/*!***********************!*\
  !*** ./src/vector.js ***!
  \***********************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.perpendicular = exports.intersection = exports.verticalIntersection = exports.horizontalIntersection = exports.cosineOfAngle = exports.sineOfAngle = exports.length = exports.compareVectorAngles = exports.dotProduct = exports.crossProduct = undefined;\n\nvar _flp = __webpack_require__(/*! ./flp */ \"./src/flp.js\");\n\n/* Cross Product of two vectors with first point at origin */\nvar crossProduct = exports.crossProduct = function crossProduct(a, b) {\n  return a.x * b.y - a.y * b.x;\n};\n\n/* Dot Product of two vectors with first point at origin */\nvar dotProduct = exports.dotProduct = function dotProduct(a, b) {\n  return a.x * b.x + a.y * b.y;\n};\n\n/* Comparator for two vectors with same starting point */\nvar compareVectorAngles = exports.compareVectorAngles = function compareVectorAngles(basePt, endPt1, endPt2) {\n  var v1 = { x: endPt1.x - basePt.x, y: endPt1.y - basePt.y };\n  var v2 = { x: endPt2.x - basePt.x, y: endPt2.y - basePt.y };\n  var kross = crossProduct(v1, v2);\n  return (0, _flp.cmp)(kross, 0);\n};\n\nvar length = exports.length = function length(v) {\n  return Math.sqrt(dotProduct(v, v));\n};\n\n/* Get the sine of the angle from pShared -> pAngle to pShaed -> pBase */\nvar sineOfAngle = exports.sineOfAngle = function sineOfAngle(pShared, pBase, pAngle) {\n  var vBase = { x: pBase.x - pShared.x, y: pBase.y - pShared.y };\n  var vAngle = { x: pAngle.x - pShared.x, y: pAngle.y - pShared.y };\n  return crossProduct(vAngle, vBase) / length(vAngle) / length(vBase);\n};\n\n/* Get the cosine of the angle from pShared -> pAngle to pShaed -> pBase */\nvar cosineOfAngle = exports.cosineOfAngle = function cosineOfAngle(pShared, pBase, pAngle) {\n  var vBase = { x: pBase.x - pShared.x, y: pBase.y - pShared.y };\n  var vAngle = { x: pAngle.x - pShared.x, y: pAngle.y - pShared.y };\n  return dotProduct(vAngle, vBase) / length(vAngle) / length(vBase);\n};\n\n/* Get the x coordinate where the given line (defined by a point and vector)\n * crosses the horizontal line with the given y coordiante.\n * In the case of parrallel lines (including overlapping ones) returns null. */\nvar horizontalIntersection = exports.horizontalIntersection = function horizontalIntersection(pt, v, y) {\n  if (v.y === 0) return null;\n  return { x: pt.x + v.x / v.y * (y - pt.y), y: y };\n};\n\n/* Get the y coordinate where the given line (defined by a point and vector)\n * crosses the vertical line with the given x coordiante.\n * In the case of parrallel lines (including overlapping ones) returns null. */\nvar verticalIntersection = exports.verticalIntersection = function verticalIntersection(pt, v, x) {\n  if (v.x === 0) return null;\n  return { x: x, y: pt.y + v.y / v.x * (x - pt.x) };\n};\n\n/* Get the intersection of two lines, each defined by a base point and a vector.\n * In the case of parrallel lines (including overlapping ones) returns null. */\nvar intersection = exports.intersection = function intersection(pt1, v1, pt2, v2) {\n  // take some shortcuts for vertical and horizontal lines\n  // this also ensures we don't calculate an intersection and then discover\n  // it's actually outside the bounding box of the line\n  if (v1.x === 0) return verticalIntersection(pt2, v2, pt1.x);\n  if (v2.x === 0) return verticalIntersection(pt1, v1, pt2.x);\n  if (v1.y === 0) return horizontalIntersection(pt2, v2, pt1.y);\n  if (v2.y === 0) return horizontalIntersection(pt1, v1, pt2.y);\n\n  // General case for non-overlapping segments.\n  // This algorithm is based on Schneider and Eberly.\n  // http://www.cimec.org.ar/~ncalvo/Schneider_Eberly.pdf - pg 244\n\n  var kross = crossProduct(v1, v2);\n  if (kross == 0) return null;\n\n  var ve = { x: pt2.x - pt1.x, y: pt2.y - pt1.y };\n  var d1 = crossProduct(ve, v1) / kross;\n  var d2 = crossProduct(ve, v2) / kross;\n\n  // take the average of the two calculations to minimize rounding error\n  var x = (pt1.x + d2 * v1.x + pt2.x + d1 * v2.x) / 2;\n  var y = (pt1.y + d2 * v1.y + pt2.y + d1 * v2.y) / 2;\n  return { x: x, y: y };\n};\n\n/* Given a vector, return one that is perpendicular */\nvar perpendicular = exports.perpendicular = function perpendicular(v) {\n  return { x: -v.y, y: v.x };\n};\n\n//# sourceURL=webpack://polygon-clipping/./src/vector.js?");

/***/ })

/******/ });
});