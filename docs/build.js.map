{"version":3,"sources":["webpack:///webpack/bootstrap","webpack:///./src/flp.js","webpack:///./src/vector.js","webpack:///debug/App.vue","webpack:///./src/operation.js","webpack:///(webpack)/buildin/global.js","webpack:///./debug/App.vue?af47","webpack:///./src/sweep-event.js","webpack:///./src/segment.js","webpack:///./node_modules/vue-loader/lib/runtime/component-normalizer.js","webpack:///./node_modules/vue-style-loader/lib/listToStyles.js","webpack:///./node_modules/vue-style-loader/lib/addStylesClient.js","webpack:///./node_modules/martinez-polygon-clipping/dist/martinez.js","webpack:///./node_modules/splaytree/index.js","webpack:///./src/sweep-line.js","webpack:///./src/geom-out.js","webpack:///./src/bbox.js","webpack:///./src/geom-in.js","webpack:///./src/clean-input.js","webpack:///./node_modules/qheap/lib/qheap.js","webpack:///./node_modules/qheap/index.js","webpack:///./src/index.js","webpack:///./main.js","webpack:///./test/end-to-end/saw-and-cheese/args.geojson","webpack:///./test/end-to-end/almost-parrallel-segments/args.geojson","webpack:///./test/fixtures/asia-with-poly.geojson","webpack:///./node_modules/css-loader/lib/css-base.js","webpack:///./debug/App.vue?fc7e","webpack:///./debug/App.vue?7b8c","webpack:///./debug/App.vue","webpack:///./node_modules/process/browser.js","webpack:///./node_modules/setimmediate/setImmediate.js","webpack:///./node_modules/timers-browserify/main.js","webpack:///./node_modules/vue/dist/vue.esm.js","webpack:///./debug/main.js"],"names":["installedModules","__webpack_require__","moduleId","exports","module","i","l","modules","call","m","c","d","name","getter","o","Object","defineProperty","configurable","enumerable","get","r","value","n","__esModule","object","property","prototype","hasOwnProperty","p","s","undefined","Number","EPSILON","Math","pow","EPSILON_SQ","cmp","a","b","cmpPoints","aPt","bPt","x","diff","y","crossProduct","dotProduct","length","v","sqrt","compareVectorAngles","basePt","endPt1","endPt2","v1","v2","kross","cosineOfAngle","pShared","pBase","pAngle","vBase","vAngle","sineOfAngle","pc","martinez","operation","intersection","martinezOp","turfOperation","turf","intersect","inData","inLayer","outLayer","map","fc","JSON","parse","_asiaWithPoly2","default","fc2","_args2","_args4","clearLayers","fc3","runOperation","union","xor","difference","now","coordinates","outData","addTo","Simple","Operation","_classCallCheck","this","types","INTERSECTION","UNION","XOR","DIFFERENCE","type","numMultiPolys","g","Function","eval","e","window","__webpack_exports__","staticRenderFns","render","_vm","_h","$createElement","_c","_self","attrs","id","staticClass","_v","on","change","setInput","_l","directives","rawName","expression","domProps","checked","_q","selectedOperation","$event","setOperation","_s","performance","martinezPerf","jstsPerf","SweepEvent","point","segment","linkedEvents","cmpX","cmpY","isLeft","pointSegCmp","comparePoint","otherSE","aId","ringIn","bId","Error","other","otherLE","iMax","evt","push","events","ringOut","isInResult","baseEvent","_this","cache","Map","fillCache","linkedEvent","nextEvent","set","sine","cosine","has","_cache$get","asine","acosine","_cache$get2","bsine","bcosine","cmpZeroASine","cmpZeroBSine","leftSE","rightSE","getOtherSE","isInBbox","getBboxOverlap","getUniqueCorners","Segment","point1","point2","ring","ptCmp","lp","rp","flowL2R","_clearCache","alx","aly","blx","bly","arx","brx","cmpLeft","cmpLX","leftSR","seg","se","bbox","isAnEndpoint","bboxOverlap","intersections","bboxCorners","isPointOn","al","bl","va","vector","vb","ve","t","ll","ur","points","sort","filter","pt","pts","shift","newSeg","clone","newEvents","moreNewEvents","split","prev","coincidents","leftLinkedEvents","rightLinkedEvents","_cache","next","prevNotCoincident","sweepLineEntersRing","ringsInsideOf","rings","prevRingsInsideOf","prevRingsEntering","getRingsEntering","ringsExiting","getRingsExiting","includes","sameSLER","diffSLER","isValid","mps","poly","multiPoly","isInside","getRingsOnEdgeOf","multiPolysInsideOf","slice","sweepLineEntersPoly","mp","sweepLineExitsPoly","getMultiPolysInsideOf","multiPolysSLPEnters","getMultiPolysSLPEnters","multiPolysSLPExits","getMultiPolysSLPExits","least","most","abs","isJustSubject","isSubject","y1","y2","key","isValidEdgeForPoly","isExterior","normalizeComponent","scriptExports","functionalTemplate","injectStyles","scopeId","moduleIdentifier","shadowMode","hook","options","_compiled","functional","_scopeId","context","$vnode","ssrContext","parent","__VUE_SSR_CONTEXT__","_registeredComponents","add","_ssrRegister","$root","$options","shadowRoot","_injectStyles","originalRender","h","existing","beforeCreate","concat","listToStyles","parentId","list","styles","newStyles","item","part","css","media","sourceMap","parts","addStylesClient","hasDocument","document","DEBUG","stylesInDom","head","getElementsByTagName","singletonElement","singletonCounter","isProduction","noop","ssrIdKey","isOldIE","navigator","test","userAgent","toLowerCase","_isProduction","_options","addStylesToDom","newList","mayRemove","domStyle","refs","j","addStyle","createStyleElement","styleElement","createElement","appendChild","obj","update","remove","querySelector","parentNode","removeChild","styleIndex","applyToSingletonTag","bind","setAttribute","ssrId","sources","btoa","unescape","encodeURIComponent","stringify","styleSheet","cssText","firstChild","createTextNode","newObj","textStore","replaceText","index","replacement","Boolean","join","cssNode","childNodes","insertBefore","require","u","f","code","1","boolean","./src/index","2","global","factory","print","root","printNode","out","row","prefix","isTail","indent","left","right","height","node","max","DEFAULT_COMPARE","rotateLeft","rightNode","balanceFactor","rotateRight","leftNode","AVLTree","comparator","noDuplicates","_comparator","_root","_size","_noDuplicates","prototypeAccessors","size","destroy","contains","successor","predecessor","forEach","callback","current","done","pop","keys","values","data","at","minNode","maxNode","min","isEmpty","returnValue","find","subtree","compare","insert","newRoot","newNode","pp","load","Array","isArray","len","isBalanced","lh","rh","toString","defineProperties","avl","3","TinyQueue","defaultCompare","_down","_up","top","peek","pos","halfLength","best","4","signedArea","e1","e2","p1","p2","otherEvent","isBelow","specialCases","./signed_area","5","compareEvents","equals","le1","le2","isAbove","contourId","./compare_events","./equals","6","edgeType","operationType","inResult","event","NORMAL","otherInOut","SAME_TRANSITION","DIFFERENT_TRANSITION","NON_CONTRIBUTING","inOut","isVertical","prevInResult","./edge_type","./operation","7","nextPos","resultEvents","processed","origIndex","newPos","sortedEvents","tmp","sorted","orderEvents","result","contour","isExteriorRing","ringId","initial","resultInOut","8","queue","console","warn","./sweep_event","9","10","11","Queue","operations","processPolygon","contourOrHole","depth","Q","s1","s2","subject","clipping","sbbox","cbbox","polygonSet","ii","jj","eventQueue","tinyqueue","12","subdivideSegments","connectEdges","fillQueue","EMPTY","trivial","trivialOperation","Infinity","compareBBoxes","./connect_edges","./fill_queue","./subdivide_segments","13","14","divideSegment","se1","se2","inter","nintersections","leftCoincide","rightCoincide","./divide_segment","./segment_intersection","15","a1","a2","b1","b2","noEndpointTouch","toPoint","sqrKross","sqrLenA","sqrLenB","sqrLenE","sa","sb","smin","smax","16","p0","17","Tree","computeFields","possibleIntersection","compareSegments","begin","sweepLine","rightbound","prevprevEvent","prevEvent","prevprev","./compare_segments","./compute_fields","./possible_intersection","18","EdgeType","copy","SplayTree","[object Object]","_compare","gp","ggp","z","comp","splay","replace","sMax","_splaytree","SweepLine","arguments","tree","_splaytree2","segments","prevNode","prevSeg","nextNode","nextSeg","mySplitters","prevInters","getIntersections","newEventsFromSplit","_possibleSplit","nextInters","registerPrev","inters","link","splitters","Ring","registerRingOut","allSegments","ringsOut","startingLE","intersectionLEs","availableLEs","getAvailableLinkedEvents","firstPt","lastPt","indexLE","jMax","getLeftmostComparator","intersectionLE","splice","ringEvents","unshift","reverse","prevPt","nextPt","propName","calcMethod","enclosingRing","prevPrevSeg","_getCached","Poly","exteriorRing","registerPoly","interiorRings","geom","getGeom","ringGeom","MultiPoly","polys","_composePolys","polyGeom","addInterior","doBboxesOverlap","lowerX","upperX","xmin","ymin","xmax","ymax","xEq","yEq","xpt","ypt","geomRing","sweepEvents","ringsSameSLER","ringsDiffSLER","exterior","interiors","geomPoly","getSweepEvents","ringSweepEvents","ringsOnEdgeOf","isInsideExterior","isInterior","geomMultiPoly","polySweepEvents","cleanRing","isPointUncessary","cleanMultiPoly","multipoly","interiorRing","errorOnSelfIntersectingRings","_loop","flowIntoSE","evtsThisRing","leftMostEvt","rightMostEvt","forceMultiPoly","pointsAsObjects","output","k","kMax","isBeforeDefault","Heap","opts","compar","_isBefore","comparBefore","_freeSpace","freeSpace","_trimArraySize","_list","_compar","idx","parentidx","parentval","append","enqueue","cv","ret","itm","dequeue","gc","minListLength","minLength","minListFull","minFull","_check","isBefore","fail","log","cleanInput","geomIn","geomOut","moreGeoms","geoms","multipolys","markAsSubject","register","compareBefore","process","doIt","_len","_key","_len2","_key2","_len3","_key3","subjectGeom","_len4","clippingGeoms","_key4","useSourceMap","content","cssMapping","sourceMapping","sourceURLs","source","sourceRoot","cssWithMappingToString","mediaQuery","alreadyImportedModules","locals","_node_modules_vue_loader_lib_runtime_component_normalizer__WEBPACK_IMPORTED_MODULE_2__","__vue_styles__","Component","_babel_loader_node_modules_vue_loader_lib_selector_type_script_index_0_App_vue__WEBPACK_IMPORTED_MODULE_0___default","_node_modules_vue_loader_lib_template_compiler_index_id_data_v_7d55b0ee_hasScoped_false_optionsId_0_buble_transforms_node_modules_vue_loader_lib_selector_type_template_index_0_App_vue__WEBPACK_IMPORTED_MODULE_1__","cachedSetTimeout","cachedClearTimeout","defaultSetTimout","defaultClearTimeout","runTimeout","fun","setTimeout","clearTimeout","currentQueue","draining","queueIndex","cleanUpNextTick","drainQueue","timeout","run","marker","runClearTimeout","Item","array","nextTick","args","apply","title","browser","env","argv","version","versions","addListener","once","off","removeListener","removeAllListeners","emit","prependListener","prependOnceListener","listeners","binding","cwd","chdir","dir","umask","setImmediate","registerImmediate","html","channel","messagePrefix","onGlobalMessage","nextHandle","tasksByHandle","currentlyRunningATask","doc","attachTo","getPrototypeOf","handle","runIfPresent","postMessage","importScripts","postMessageIsAsynchronous","oldOnMessage","onmessage","canUsePostMessage","MessageChannel","port1","port2","documentElement","script","onreadystatechange","random","indexOf","addEventListener","attachEvent","task","clearImmediate","self","Timeout","clearFn","_id","_clearFn","setInterval","clearInterval","close","unref","ref","enroll","msecs","_idleTimeoutId","_idleTimeout","unenroll","_unrefActive","active","_onTimeout","emptyObject","freeze","isUndef","isDef","isTrue","isPrimitive","isObject","_toString","isPlainObject","isRegExp","isValidArrayIndex","val","parseFloat","String","floor","isFinite","toNumber","isNaN","makeMap","str","expectsLowerCase","create","isBuiltInTag","isReservedAttribute","arr","hasOwn","cached","fn","camelizeRE","camelize","_","toUpperCase","capitalize","charAt","hyphenateRE","hyphenate","ctx","boundFn","_length","toArray","start","extend","to","_from","toObject","res","no","identity","looseEqual","isObjectA","isObjectB","isArrayA","isArrayB","every","keysA","keysB","looseIndexOf","called","SSR_ATTR","ASSET_TYPES","LIFECYCLE_HOOKS","config","optionMergeStrategies","silent","productionTip","devtools","errorHandler","warnHandler","ignoredElements","keyCodes","isReservedTag","isReservedAttr","isUnknownElement","getTagNamespace","parsePlatformTagName","mustUseProp","_lifecycleHooks","def","writable","bailRE","_isServer","hasProto","inBrowser","inWeex","WXEnvironment","platform","weexPlatform","UA","isIE","isIE9","isEdge","isIOS","nativeWatch","watch","supportsPassive","isServerRendering","VUE_ENV","__VUE_DEVTOOLS_GLOBAL_HOOK__","isNative","Ctor","_Set","hasSymbol","Symbol","Reflect","ownKeys","Set","clear","uid","Dep","subs","addSub","sub","removeSub","depend","target","addDep","notify","targetStack","pushTarget","_target","popTarget","VNode","tag","children","text","elm","componentOptions","asyncFactory","ns","fnContext","fnOptions","fnScopeId","componentInstance","raw","isStatic","isRootInsert","isComment","isCloned","isOnce","asyncMeta","isAsyncPlaceholder","child","createEmptyVNode","createTextVNode","cloneVNode","vnode","cloned","arrayProto","arrayMethods","method","original","inserted","ob","__ob__","observeArray","dep","arrayKeys","getOwnPropertyNames","shouldObserve","toggleObserving","Observer","vmCount","protoAugment","copyAugment","walk","src","__proto__","observe","asRootData","isExtensible","_isVue","defineReactive","customSetter","shallow","getOwnPropertyDescriptor","setter","childOb","dependArray","newVal","del","items","strats","mergeData","from","toVal","fromVal","mergeDataOrFn","parentVal","childVal","vm","instanceData","defaultData","mergeHook","mergeAssets","key$1","props","methods","inject","computed","provide","defaultStrat","mergeOptions","normalizeProps","normalized","normalizeInject","dirs","normalizeDirectives","extendsFrom","extends","mixins","mergeField","strat","resolveAsset","warnMissing","assets","camelizedId","PascalCaseId","validateProp","propOptions","propsData","prop","absent","booleanIndex","getTypeIndex","stringIndex","_props","getType","getPropDefaultValue","prevShouldObserve","match","isSameType","expectedTypes","handleError","err","info","cur","$parent","hooks","errorCaptured","globalHandleError","logError","error","microTimerFunc","macroTimerFunc","callbacks","pending","flushCallbacks","copies","useMacroTask","port","Promise","resolve","then","cb","_resolve","seenObjects","traverse","_traverse","seen","isA","isFrozen","depId","normalizeEvent","passive","once$$1","capture","createFnInvoker","fns","invoker","arguments$1","updateListeners","oldOn","remove$$1","old","params","mergeVNodeHook","hookKey","oldHook","wrappedHook","merged","checkProp","hash","altKey","preserve","normalizeChildren","normalizeArrayChildren","nestedIndex","lastIndex","last","isTextNode","_isVList","ensureCtor","base","toStringTag","getFirstComponentChild","$once","$on","remove$1","$off","updateComponentListeners","oldListeners","resolveSlots","slots","slot","name$1","isWhitespace","resolveScopedSlots","activeInstance","isInInactiveTree","_inactive","activateChildComponent","direct","_directInactive","$children","callHook","handlers","_hasHookEvent","$emit","activatedChildren","waiting","flushing","flushSchedulerQueue","watcher","activatedQueue","updatedQueue","callActivatedHooks","_watcher","_isMounted","callUpdatedHooks","uid$1","Watcher","expOrFn","isRenderWatcher","_watchers","deep","user","lazy","sync","dirty","deps","newDeps","depIds","newDepIds","path","parsePath","cleanupDeps","queueWatcher","oldValue","evaluate","teardown","_isBeingDestroyed","sharedPropertyDefinition","proxy","sourceKey","initState","propsOptions","_propKeys","loop","initProps","initMethods","_data","getData","charCodeAt","initData","watchers","_computedWatchers","isSSR","userDef","computedWatcherOptions","defineComputed","initComputed","handler","createWatcher","initWatch","shouldCache","createComputedGetter","$watch","resolveInject","provideKey","_provided","provideDefault","renderList","renderSlot","fallback","bindObject","nodes","scopedSlotFn","$scopedSlots","slotNodes","$slots","_rendered","resolveFilter","isKeyNotMatch","expect","actual","checkKeyCodes","eventKeyCode","builtInKeyCode","eventKeyName","builtInKeyName","mappedKeyCode","bindObjectProps","asProp","isSync","renderStatic","isInFor","_staticTrees","markStatic","_renderProxy","markOnce","markStaticNode","bindObjectListeners","ours","installRenderHelpers","_o","_n","_t","_i","_m","_f","_k","_b","_e","_u","_g","FunctionalRenderContext","contextVm","_original","isCompiled","needNormalization","injections","scopedSlots","cloneAndMarkFunctionalResult","mergeProps","componentVNodeHooks","init","hydrating","parentElm","refElm","_isDestroyed","keepAlive","mountedNode","prepatch","_isComponent","_parentVnode","_parentElm","_refElm","inlineTemplate","createComponentInstanceForVnode","$mount","oldVnode","parentVnode","renderChildren","hasChildren","_renderChildren","_vnode","$attrs","$listeners","propKeys","_parentListeners","$forceUpdate","updateChildComponent","deactivateChildComponent","$destroy","hooksToMerge","createComponent","baseCtor","_base","cid","errorComp","resolved","loading","loadingComp","contexts","forceRender","reject","reason","component","delay","resolveAsyncComponent","createAsyncPlaceholder","resolveConstructorOptions","model","transformModel","extractPropsFromVNodeData","renderContext","vnodes","createFunctionalComponent","nativeOn","abstract","installComponentHooks","SIMPLE_NORMALIZE","ALWAYS_NORMALIZE","normalizationType","alwaysNormalize","is","simpleNormalizeChildren","applyNS","force","style","class","registerDeepBindings","_createElement","uid$3","super","superOptions","modifiedOptions","modified","latest","extended","extendOptions","sealed","sealedOptions","dedupe","resolveModifiedOptions","components","Vue","_init","initExtend","Super","SuperId","cachedCtors","_Ctor","Sub","constructor","Comp","initProps$1","initComputed$1","mixin","use","getComponentName","matches","pattern","pruneCache","keepAliveInstance","cachedNode","pruneCacheEntry","cached$$1","_uid","vnodeComponentOptions","_componentTag","initInternalComponent","$refs","initLifecycle","_events","initEvents","parentData","initRender","initInjections","initProvide","el","initMixin","dataDef","propsDef","$set","$delete","immediate","stateMixin","hookRE","cbs","i$1","eventsMixin","_update","prevEl","$el","prevVnode","prevActiveInstance","__patch__","__vue__","lifecycleMixin","$nextTick","_render","renderMixin","patternTypes","RegExp","builtInComponents","KeepAlive","include","exclude","created","destroyed","mounted","this$1","parseInt","configDef","util","delete","plugin","installedPlugins","_installedPlugins","install","initUse","initMixin$1","definition","initAssetRegisters","initGlobalAPI","acceptValue","attr","isEnumeratedAttr","isBooleanAttr","xlinkNS","isXlink","getXlinkProp","isFalsyAttrValue","genClassForVnode","childNode","mergeClassData","dynamicClass","stringifyClass","renderClass","stringified","stringifyArray","stringifyObject","namespaceMap","svg","math","isHTMLTag","isSVG","unknownElementCache","isTextInputType","query","selected","nodeOps","tagName","multiple","createElementNS","namespace","createComment","referenceNode","nextSibling","setTextContent","textContent","setStyleScope","registerRef","isRemoval","refInFor","emptyNode","sameVnode","typeA","typeB","sameInputType","createKeyToOldIdx","beginIdx","endIdx","updateDirectives","oldDir","isCreate","isDestroy","oldDirs","normalizeDirectives$1","newDirs","dirsWithInsert","dirsWithPostpatch","callHook$1","componentUpdated","callInsert","emptyModifiers","modifiers","getRawDirName","baseModules","updateAttrs","inheritAttrs","oldAttrs","setAttr","removeAttributeNS","removeAttribute","baseSetAttr","setAttributeNS","__ieph","blocker","stopImmediatePropagation","removeEventListener","updateClass","oldData","cls","transitionClass","_transitionClasses","_prevClass","chr","index$1","expressionPos","expressionEndPos","klass","validDivisionCharRE","parseFilters","exp","filters","inSingle","inDouble","inTemplateString","inRegex","curly","square","paren","lastFilterIndex","trim","pushFilter","wrapFilter","baseWarn","msg","pluckModuleFunction","addProp","plain","addAttr","addRawAttr","attrsMap","attrsList","addDirective","arg","addHandler","important","middle","native","nativeEvents","newHandler","getBindingAttr","getStatic","dynamicValue","getAndRemoveAttr","staticValue","removeFromMap","genComponentModel","number","valueExpression","assignment","genAssignmentCode","lastIndexOf","eof","isStringStart","parseString","parseBracket","parseModel","inBracket","stringQuote","target$1","RANGE_TOKEN","CHECKBOX_RADIO_TOKEN","add$1","_withTask","onceHandler","remove$2","createOnceHandler","updateDOMListeners","normalizeEvents","updateDOMProps","oldProps","_value","strCur","shouldUpdateValue","checkVal","composing","notInFocus","activeElement","isNotInFocusAndDirty","_vModifiers","isDirtyWithModifiers","parseStyleText","propertyDelimiter","normalizeStyleData","normalizeStyleBinding","staticStyle","bindingStyle","emptyStyle","cssVarRE","importantRE","setProp","setProperty","normalizedName","normalize","vendorNames","capName","updateStyle","oldStaticStyle","oldStyleBinding","normalizedStyle","oldStyle","newStyle","checkChild","styleData","getStyle","addClass","classList","getAttribute","removeClass","tar","resolveTransition","autoCssTransition","enterClass","enterToClass","enterActiveClass","leaveClass","leaveToClass","leaveActiveClass","hasTransition","TRANSITION","ANIMATION","transitionProp","transitionEndEvent","animationProp","animationEndEvent","ontransitionend","onwebkittransitionend","onanimationend","onwebkitanimationend","raf","requestAnimationFrame","nextFrame","addTransitionClass","transitionClasses","removeTransitionClass","whenTransitionEnds","expectedType","getTransitionInfo","propCount","ended","end","onEnd","transformRE","getComputedStyle","transitionDelays","transitionDurations","transitionTimeout","getTimeout","animationDelays","animationDurations","animationTimeout","hasTransform","delays","durations","toMs","enter","toggleDisplay","_leaveCb","cancelled","transition","_enterCb","nodeType","appearClass","appearToClass","appearActiveClass","beforeEnter","afterEnter","enterCancelled","beforeAppear","appear","afterAppear","appearCancelled","duration","transitionNode","isAppear","startClass","activeClass","toClass","beforeEnterHook","enterHook","afterEnterHook","enterCancelledHook","explicitEnterDuration","expectsCSS","userWantsControl","getHookArgumentsLength","show","pendingNode","_pending","isValidDuration","leave","rm","beforeLeave","afterLeave","leaveCancelled","delayLeave","explicitLeaveDuration","performLeave","invokerFns","_enter","patch","backend","removeNode","createElm","insertedVnodeQueue","nested","ownerArray","isReactivated","initComponent","innerNode","activate","reactivateComponent","setScope","createChildren","invokeCreateHooks","pendingInsert","isPatchable","ref$$1","ancestor","addVnodes","startIdx","invokeDestroyHook","removeVnodes","ch","removeAndInvokeRemoveHook","childElm","createRmCb","findIdxInOld","oldCh","patchVnode","removeOnly","hydrate","newCh","oldKeyToIdx","idxInOld","vnodeToMove","oldStartIdx","newStartIdx","oldEndIdx","oldStartVnode","oldEndVnode","newEndIdx","newStartVnode","newEndVnode","canMove","updateChildren","postpatch","invokeInsertHook","isRenderedModule","inVPre","pre","hasChildNodes","innerHTML","childrenMatch","fullInvoke","isInitialPatch","isRealElement","hasAttribute","oldElm","parentElm$1","patchable","i$2","createPatchFunction","vmodel","trigger","directive","_vOptions","setSelected","getValue","onCompositionStart","onCompositionEnd","prevOptions","curOptions","some","hasNoMatchingOption","actuallySetSelected","isMultiple","option","selectedIndex","createEvent","initEvent","dispatchEvent","locateNode","platformDirectives","transition$$1","originalDisplay","__vOriginalDisplay","display","unbind","transitionProps","mode","getRealChild","compOptions","extractTransitionData","placeholder","rawChild","Transition","hasParentTransition","_leaving","oldRawChild","oldChild","isSameChild","delayedLeave","moveClass","callPendingCbs","_moveCb","recordPosition","getBoundingClientRect","applyTranslation","oldPos","dx","dy","moved","transform","WebkitTransform","transitionDuration","platformComponents","TransitionGroup","prevChildren","rawChildren","transitionData","kept","removed","c$1","beforeUpdate","updated","hasMove","_reflow","body","offsetHeight","propertyName","_hasMove","cloneNode","HTMLUnknownElement","HTMLElement","mountComponent","defaultTagRE","regexEscapeRE","buildRegex","delimiters","open","klass$1","staticKeys","transformNode","classBinding","genData","decoder","style$1","styleBinding","he","isUnaryTag","canBeLeftOpenTag","isNonPhrasingTag","attribute","ncname","qnameCapture","startTagOpen","startTagClose","endTag","doctype","comment","conditionalComment","IS_REGEX_CAPTURING_BROKEN","isPlainTextElement","reCache","decodingMap","&lt;","&gt;","&quot;","&amp;","&#10;","&#9;","encodedAttr","encodedAttrWithNewLines","isIgnoreNewlineTag","shouldIgnoreFirstNewline","decodeAttr","shouldDecodeNewlines","re","warn$2","transforms","preTransforms","postTransforms","platformIsPreTag","platformMustUseProp","platformGetTagNamespace","onRE","dirRE","forAliasRE","forIteratorRE","stripParensRE","argRE","bindRE","modifierRE","decodeHTMLCached","createASTElement","makeAttrsMap","template","isPreTag","currentParent","stack","preserveWhitespace","inPre","closeElement","element","lastTag","expectHTML","isUnaryTag$$1","canBeLeftOpenTag$$1","endTagLength","stackedTag","reStackedTag","rest$1","all","chars","parseEndTag","textEnd","commentEnd","shouldKeepComment","substring","advance","conditionalEnd","doctypeMatch","endTagMatch","curIndex","startTagMatch","parseStartTag","handleStartTag","rest","unarySlash","unary","shouldDecodeNewlinesForHref","lowerCasedTag","lowerCasedTagName","parseHTML","comments","ieNSBug","ieNSPrefix","guardIESVGBug","forbidden","checkRootConstraints","processPre","processRawAttrs","processFor","if","addIfCondition","block","else","elseif","processIf","processOnce","processElement","findPrevElement","processIfConditions","slotScope","slotTarget","lastNode","tagRE","tokenValue","tokens","rawTokens","exec","@binding","parseText","for","checkInFor","processRef","slotName","processSlot","processComponent","isProp","hasBindings","parseModifiers","camel","argMatch","processAttrs","inMatch","alias","iteratorMatch","iterator1","iterator2","parseFor","condition","ifConditions","cloneASTElement","modules$1","preTransformNode","typeBinding","ifCondition","ifConditionExtra","hasElse","elseIfCondition","branch0","branch1","branch2","isStaticKey","isPlatformReservedTag","baseOptions","_warn","genSelect","valueBinding","trueValueBinding","falseValueBinding","genCheckboxModel","genRadioModel","needCompositionGuard","genDefaultModel","reduce","genStaticKeys","genStaticKeysCached","optimize","markStatic$1","static","isDirectChildOfTemplateFor","l$1","markStaticRoots","staticInFor","staticRoot","fnExpRE","simplePathRE","esc","tab","space","up","down","keyNames","genGuard","modifierCode","stop","prevent","ctrl","alt","meta","genHandlers","genHandler","isMethodPath","isFunctionExpression","genModifierCode","keyModifier","genFilterCode","genKeyFilter","keyVal","keyCode","keyName","baseDirectives","wrapListeners","wrapData","cloak","CodegenState","dataGenFns","maybeComponent","onceId","generate","ast","state","genElement","staticProcessed","genStatic","onceProcessed","genOnce","forProcessed","altGen","altHelper","genFor","ifProcessed","genIf","genChildren","bind$$1","genSlot","componentName","genData$2","genComponent","altEmpty","genIfConditions","conditions","genTernaryExp","needRuntime","hasRuntime","gen","genDirectives","genProps","genScopedSlot","inlineRenderFns","genInlineTemplate","genForScopedSlot","checkSkip","altGenElement","altGenNode","el$1","needsNormalization","getNormalizationType","genNode","transformSpecialNewlines","createFunction","errors","baseCompile","div","compileToFunctions","compile","finalOptions","tips","tip","compiled","fnGenErrors","createCompileToFunctionFn","getShouldDecode","href","idToTemplate","mount","outerHTML","container","getOuterHTML","_vue2"],"mappings":"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","file":"build.js","sourcesContent":[" \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId]) {\n \t\t\treturn installedModules[moduleId].exports;\n \t\t}\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\ti: moduleId,\n \t\t\tl: false,\n \t\t\texports: {}\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.l = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// define getter function for harmony exports\n \t__webpack_require__.d = function(exports, name, getter) {\n \t\tif(!__webpack_require__.o(exports, name)) {\n \t\t\tObject.defineProperty(exports, name, {\n \t\t\t\tconfigurable: false,\n \t\t\t\tenumerable: true,\n \t\t\t\tget: getter\n \t\t\t});\n \t\t}\n \t};\n\n \t// define __esModule on exports\n \t__webpack_require__.r = function(exports) {\n \t\tObject.defineProperty(exports, '__esModule', { value: true });\n \t};\n\n \t// getDefaultExport function for compatibility with non-harmony modules\n \t__webpack_require__.n = function(module) {\n \t\tvar getter = module && module.__esModule ?\n \t\t\tfunction getDefault() { return module['default']; } :\n \t\t\tfunction getModuleExports() { return module; };\n \t\t__webpack_require__.d(getter, 'a', getter);\n \t\treturn getter;\n \t};\n\n \t// Object.prototype.hasOwnProperty.call\n \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"/docs/\";\n\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(__webpack_require__.s = 32);\n","/* Javascript doesn't do integer math. Everything is\r\n * floating point with percision Number.EPSILON.\r\n *\r\n * https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Number/EPSILON\r\n */\r\n\r\n// IE Polyfill\r\nif (Number.EPSILON === undefined) Number.EPSILON = Math.pow(2, -52)\r\n\r\nconst EPSILON_SQ = Number.EPSILON * Number.EPSILON\r\n\r\n/* FLP comparator */\r\nconst cmp = (a, b) => {\r\n  // check if they're both 0\r\n  if (-Number.EPSILON < a && a < Number.EPSILON) {\r\n    if (-Number.EPSILON < b && b < Number.EPSILON) {\r\n      return 0\r\n    }\r\n  }\r\n\r\n  // check if they're flp equal\r\n  if ((a - b) * (a - b) < EPSILON_SQ * a * b) {\r\n    return 0\r\n  }\r\n\r\n  // normal comparison\r\n  return a < b ? -1 : 1\r\n}\r\n\r\n/* FLP point comparator, favors point encountered first by sweep line */\r\nconst cmpPoints = (aPt, bPt) => {\r\n  // fist compare X, then compare Y\r\n\r\n  let a = aPt.x\r\n  let b = bPt.x\r\n\r\n  // inlined version of cmp() for performance boost\r\n  if (\r\n    a <= -Number.EPSILON ||\r\n    Number.EPSILON <= a ||\r\n    b <= -Number.EPSILON ||\r\n    Number.EPSILON <= b\r\n  ) {\r\n    const diff = a - b\r\n    if (diff * diff >= EPSILON_SQ * a * b) {\r\n      return a < b ? -1 : 1\r\n    }\r\n  }\r\n\r\n  a = aPt.y\r\n  b = bPt.y\r\n\r\n  // inlined version of cmp() for performance boost\r\n  if (\r\n    a <= -Number.EPSILON ||\r\n    Number.EPSILON <= a ||\r\n    b <= -Number.EPSILON ||\r\n    Number.EPSILON <= b\r\n  ) {\r\n    const diff = a - b\r\n    if (diff * diff >= EPSILON_SQ * a * b) {\r\n      return a < b ? -1 : 1\r\n    }\r\n  }\r\n\r\n  // they're the same\r\n  return 0\r\n}\r\n\r\nmodule.exports = {\r\n  cmp,\r\n  cmpPoints\r\n}\r\n","const { cmp } = require('./flp')\r\n\r\n/* Cross Product of two vectors with first point at origin */\r\nconst crossProduct = (a, b) => a.x * b.y - a.y * b.x\r\n\r\n/* Dot Product of two vectors with first point at origin */\r\nconst dotProduct = (a, b) => a.x * b.x + a.y * b.y\r\n\r\n/* Comparator for two vectors with same starting point */\r\nconst compareVectorAngles = (basePt, endPt1, endPt2) => {\r\n  const v1 = { x: endPt1.x - basePt.x, y: endPt1.y - basePt.y }\r\n  const v2 = { x: endPt2.x - basePt.x, y: endPt2.y - basePt.y }\r\n  const kross = crossProduct(v1, v2)\r\n  return cmp(kross, 0)\r\n}\r\n\r\nconst length = v => Math.sqrt(dotProduct(v, v))\r\n\r\n/* Get the sine of the angle from pShared -> pAngle to pShaed -> pBase */\r\nconst sineOfAngle = (pShared, pBase, pAngle) => {\r\n  const vBase = { x: pBase.x - pShared.x, y: pBase.y - pShared.y }\r\n  const vAngle = { x: pAngle.x - pShared.x, y: pAngle.y - pShared.y }\r\n  return crossProduct(vAngle, vBase) / length(vAngle) / length(vBase)\r\n}\r\n\r\n/* Get the cosine of the angle from pShared -> pAngle to pShaed -> pBase */\r\nconst cosineOfAngle = (pShared, pBase, pAngle) => {\r\n  const vBase = { x: pBase.x - pShared.x, y: pBase.y - pShared.y }\r\n  const vAngle = { x: pAngle.x - pShared.x, y: pAngle.y - pShared.y }\r\n  return dotProduct(vAngle, vBase) / length(vAngle) / length(vBase)\r\n}\r\n\r\nmodule.exports = {\r\n  crossProduct,\r\n  dotProduct,\r\n  compareVectorAngles,\r\n  cosineOfAngle,\r\n  sineOfAngle\r\n}\r\n","<template>\r\n  <div id=\"app\">\r\n    <div id=\"map\">\r\n      <div class=\"control leaflet-bar\">\r\n        <h4>Input Data</h4>\r\n        <select v-on:change=\"setInput\">\r\n          <option>Asia</option>\r\n          <option>Almost Parallel Segments</option>\r\n          <option>Saw & Cheese</option>\r\n        </select>\r\n        <br><br>\r\n        <div v-for=\"operation in operations\">\r\n          <input type=\"radio\" name=\"some\" :value=\"operation\" v-on:change=\"setOperation\" v-model=\"selectedOperation\"> {{operation}}\r\n        </div>\r\n\r\n        <h4>Performance</h4>\r\n        <p>polygon-clipping {{performance}} m/s  </br>\r\n        martinez {{martinezPerf}} m/s  </br>\r\n        jsts {{jstsPerf}} m/s  </br>\r\n        </p>      \r\n\r\n      </div>\r\n    </div>\r\n  </div>\r\n</template>\r\n\r\n<script>\r\n\r\nvar pc = require('../main')\r\nvar martinez = require('martinez-polygon-clipping')\r\n\r\nvar operation = pc.intersection\r\nvar martinezOp = martinez.intersection\r\nvar turfOperation = turf.intersect\r\nvar inData = null\r\nvar inLayer = null\r\nvar outLayer = null\r\nvar map = null\r\n\r\nimport asia from '../test/fixtures/asia-with-poly.geojson'\r\nimport parallel from '../test/end-to-end/almost-parrallel-segments/args.geojson'\r\nimport cheese from '../test/end-to-end/saw-and-cheese/args.geojson'\r\n\r\nconst fc = JSON.parse(asia)\r\nconst fc2 = JSON.parse(parallel)\r\nconst f3 = JSON.parse(cheese)\r\n\r\nexport default {\r\n  name: 'app',\r\n  data () {\r\n    return {\r\n      operations: ['Intersection', 'Union', 'Difference', 'XOR'],\r\n      selectedOperation: 'Intersection',\r\n      performance: '',\r\n      martinezPerf: '',\r\n      jstsPerf: ''\r\n    }\r\n  },\r\n  methods: {\r\n    setInput (e) {\r\n      inLayer.clearLayers()\r\n      outLayer.clearLayers()\r\n      if (e.target.value === 'Asia') inData = fc\r\n      if (e.target.value === 'Almost Parallel Segments') inData = fc2\r\n      if (e.target.value === 'Saw & Cheese') inData = fc3\r\n      inLayer.addData(inData)\r\n      map.fitBounds(inLayer.getBounds(), {\r\n        padding: [20, 20]\r\n      })\r\n      this.runOperation()\r\n    },\r\n    setOperation (e) {\r\n      this.selectedOperation = e.target.value\r\n      outLayer.clearLayers()\r\n\r\n      if (this.selectedOperation === 'Union') {\r\n        operation = pc.union\r\n        martinezOp = martinez.union\r\n        turfOperation = turf.union\r\n      }\r\n      if (this.selectedOperation === 'Intersection') {\r\n        operation = pc.intersection\r\n        martinezOp = martinez.intersection\r\n        turfOperation = turf.intersect\r\n      }\r\n      if (this.selectedOperation === 'XOR') {\r\n        operation = pc.xor\r\n        martinezOp = martinez.xor\r\n        turfOperation = null\r\n      }\r\n      if (this.selectedOperation === 'Difference') {\r\n        operation = pc.difference\r\n        martinezOp = martinez.diff\r\n        turfOperation = turf.difference\r\n      }\r\n\r\n      this.runOperation()\r\n    },\r\n    runOperation() {\r\n\r\n      var t0 = performance.now()\r\n      var outData = operation(inData.features[0].geometry.coordinates, inData.features[1].geometry.coordinates)\r\n      var t1 = performance.now()\r\n      this.performance = (t1 - t0).toFixed(2)\r\n\r\n      outLayer.addData({\r\n          \"type\": \"MultiPolygon\",\r\n          \"coordinates\": outData\r\n      }).addTo(map)\r\n\r\n      var m0 = performance.now()\r\n      var outMartinez = martinezOp(inData.features[0].geometry.coordinates, inData.features[1].geometry.coordinates)\r\n      var m1 = performance.now()\r\n      this.martinezPerf = (m1 - m0).toFixed(2)\r\n\r\n      if (turfOperation !== null) {\r\n        var j0 = performance.now()\r\n        var outTurf = turfOperation(inData.features[0], inData.features[1])\r\n        var j1 = performance.now()\r\n        this.jstsPerf = (j1 - j0).toFixed(2)        \r\n      } else {\r\n        this.jstsPerf = 'N/A'      \r\n      }\r\n\r\n    }\r\n  },\r\n  mounted () {\r\n    inData = fc\r\n    map = window.map = L.map('map', {\r\n      minZoom: 1,\r\n      maxZoom: 20,\r\n      center: [0, 0],\r\n      zoom: 2,\r\n      crs: L.CRS.Simple\r\n    })\r\n\r\n    inLayer = L.geoJson(fc).addTo(map)\r\n\r\n    map.fitBounds(inLayer.getBounds(), {\r\n      padding: [20, 20]\r\n    })\r\n    outLayer = L.geoJson({type: 'FeatureCollection', features: []}, {\r\n      color: 'red'\r\n    }).addTo(map)\r\n\r\n    this.runOperation()\r\n  }\r\n}\r\n</script>\r\n\r\n<style>\r\n    html, body, #app, #map {\r\n      width: 100%;\r\n      height: 100%;\r\n      margin: 0px;\r\n    }\r\n\r\n  .control {\r\n    position: absolute;\r\n    top: 10px;\r\n    right: 10px;\r\n    background: white;\r\n    padding: 10px;\r\n    z-index: 10000;\r\n  }\r\n\r\n  h4{\r\n    margin-bottom: 5px\r\n  }\r\n  p{\r\n    margin-top: 5px;\r\n  }\r\n</style>\r\n","class Operation {\r\n  constructor () {\r\n    this.types = {\r\n      INTERSECTION: 0,\r\n      UNION: 1,\r\n      XOR: 2,\r\n      DIFFERENCE: 3\r\n    }\r\n  }\r\n\r\n  register (type, numMultiPolys) {\r\n    this.type = type\r\n    this.numMultiPolys = numMultiPolys\r\n  }\r\n}\r\n\r\n// global to register details about the operation on\r\nconst operation = new Operation()\r\n\r\nmodule.exports = operation\r\n","var g;\r\n\r\n// This works in non-strict mode\r\ng = (function() {\r\n\treturn this;\r\n})();\r\n\r\ntry {\r\n\t// This works if eval is allowed (see CSP)\r\n\tg = g || Function(\"return this\")() || (1, eval)(\"this\");\r\n} catch (e) {\r\n\t// This works if the window reference is available\r\n\tif (typeof window === \"object\") g = window;\r\n}\r\n\r\n// g can still be undefined, but nothing to do about it...\r\n// We return undefined, instead of nothing here, so it's\r\n// easier to handle this case. if(!global) { ...}\r\n\r\nmodule.exports = g;\r\n","var render = function () {var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;return _c('div',{attrs:{\"id\":\"app\"}},[_c('div',{attrs:{\"id\":\"map\"}},[_c('div',{staticClass:\"control leaflet-bar\"},[_c('h4',[_vm._v(\"Input Data\")]),_vm._v(\" \"),_c('select',{on:{\"change\":_vm.setInput}},[_c('option',[_vm._v(\"Asia\")]),_vm._v(\" \"),_c('option',[_vm._v(\"Almost Parallel Segments\")]),_vm._v(\" \"),_c('option',[_vm._v(\"Saw & Cheese\")])]),_vm._v(\" \"),_c('br'),_c('br'),_vm._v(\" \"),_vm._l((_vm.operations),function(operation){return _c('div',[_c('input',{directives:[{name:\"model\",rawName:\"v-model\",value:(_vm.selectedOperation),expression:\"selectedOperation\"}],attrs:{\"type\":\"radio\",\"name\":\"some\"},domProps:{\"value\":operation,\"checked\":_vm._q(_vm.selectedOperation,operation)},on:{\"change\":[function($event){_vm.selectedOperation=operation},_vm.setOperation]}}),_vm._v(\" \"+_vm._s(operation)+\"\\n      \")])}),_vm._v(\" \"),_c('h4',[_vm._v(\"Performance\")]),_vm._v(\" \"),_c('p',[_vm._v(\"polygon-clipping \"+_vm._s(_vm.performance)+\" m/s  \"),_c('br'),_vm._v(\"\\n      martinez \"+_vm._s(_vm.martinezPerf)+\" m/s  \"),_c('br'),_vm._v(\"\\n      jsts \"+_vm._s(_vm.jstsPerf)+\" m/s  \"),_c('br')])],2)])])}\nvar staticRenderFns = []\nexport { render, staticRenderFns }","const { cmp } = require('./flp')\r\nconst { cosineOfAngle, sineOfAngle } = require('./vector')\r\n\r\nclass SweepEvent {\r\n  static compareBefore (a, b) {\r\n    // favor event with a point that the sweep line hits first\r\n    const cmpX = cmp(a.point.x, b.point.x)\r\n    if (cmpX !== 0) return cmpX < 0\r\n\r\n    const cmpY = cmp(a.point.y, b.point.y)\r\n    if (cmpY !== 0) return cmpY < 0\r\n\r\n    // favor right events over left\r\n    if (a.isLeft !== b.isLeft) return !a.isLeft\r\n\r\n    // favor events where the line segment is lower\r\n    const pointSegCmp = a.segment.comparePoint(b.otherSE.point)\r\n    if (pointSegCmp !== 0) return pointSegCmp > 0\r\n\r\n    // as a tie-breaker, favor lower segment creation id\r\n    const aId = a.segment.ringIn.id\r\n    const bId = b.segment.ringIn.id\r\n    if (aId !== bId) return aId < bId\r\n\r\n    // NOTE:  We don't sort on segment length because that changes\r\n    //        as segments are divided.\r\n\r\n    // they appear to be the same point... are they?\r\n    if (a === b) return false\r\n\r\n    throw new Error(\r\n      `SweepEvent comparison failed at [${a.point.x}, ${a.point.y}]... ` +\r\n        `equal but not identical?`\r\n    )\r\n  }\r\n\r\n  constructor (point, segment) {\r\n    this.point = point\r\n    this.segment = segment\r\n    this.linkedEvents = [this]\r\n  }\r\n\r\n  link (other) {\r\n    const otherLE = other.linkedEvents\r\n    for (let i = 0, iMax = otherLE.length; i < iMax; i++) {\r\n      const evt = otherLE[i]\r\n      this.linkedEvents.push(evt)\r\n      evt.linkedEvents = this.linkedEvents\r\n    }\r\n  }\r\n\r\n  getAvailableLinkedEvents () {\r\n    const events = []\r\n    for (let i = 0, iMax = this.linkedEvents.length; i < iMax; i++) {\r\n      const evt = this.linkedEvents[i]\r\n      if (evt !== this && !evt.segment.ringOut && evt.segment.isInResult) {\r\n        events.push(evt)\r\n      }\r\n    }\r\n    return events\r\n  }\r\n\r\n  /**\r\n   * Returns a comparator function for sorting linked events that will\r\n   * favor the event that will give us the smallest left-side angle.\r\n   * All ring construction starts as low as possible heading to the right,\r\n   * so by always turning left as sharp as possible we'll get polygons\r\n   * without uncessary loops & holes.\r\n   *\r\n   * The comparator function has a compute cache such that it avoids\r\n   * re-computing already-computed values.\r\n   */\r\n  getLeftmostComparator (baseEvent) {\r\n    const cache = new Map()\r\n\r\n    const fillCache = linkedEvent => {\r\n      const nextEvent = linkedEvent.otherSE\r\n      cache.set(linkedEvent, {\r\n        sine: sineOfAngle(this.point, baseEvent.point, nextEvent.point),\r\n        cosine: cosineOfAngle(this.point, baseEvent.point, nextEvent.point)\r\n      })\r\n    }\r\n\r\n    return (a, b) => {\r\n      if (!cache.has(a)) fillCache(a)\r\n      if (!cache.has(b)) fillCache(b)\r\n\r\n      const { sine: asine, cosine: acosine } = cache.get(a)\r\n      const { sine: bsine, cosine: bcosine } = cache.get(b)\r\n\r\n      const cmpZeroASine = cmp(asine, 0)\r\n      const cmpZeroBSine = cmp(bsine, 0)\r\n\r\n      if (cmpZeroASine >= 0 && cmpZeroBSine >= 0) return cmp(bcosine, acosine)\r\n      if (cmpZeroASine < 0 && cmpZeroBSine < 0) return cmp(acosine, bcosine)\r\n      return cmp(bsine, asine)\r\n    }\r\n  }\r\n\r\n  get isLeft () {\r\n    return this === this.segment.leftSE\r\n  }\r\n\r\n  get isRight () {\r\n    return this === this.segment.rightSE\r\n  }\r\n\r\n  get otherSE () {\r\n    return this.segment.getOtherSE(this)\r\n  }\r\n}\r\n\r\nmodule.exports = SweepEvent\r\n","const operation = require('./operation')\r\nconst SweepEvent = require('./sweep-event')\r\nconst { isInBbox, getBboxOverlap, getUniqueCorners } = require('./bbox')\r\nconst { cmp, cmpPoints } = require('./flp')\r\nconst { crossProduct, compareVectorAngles } = require('./vector')\r\n\r\nclass Segment {\r\n  static compare (a, b) {\r\n    if (a === b) return 0\r\n\r\n    const alx = a.leftSE.point.x\r\n    const aly = a.leftSE.point.y\r\n    const blx = b.leftSE.point.x\r\n    const bly = b.leftSE.point.y\r\n    const arx = a.rightSE.point.x\r\n    const brx = b.rightSE.point.x\r\n\r\n    // check if they're even in the same vertical plane\r\n    if (cmp(brx, alx) < 0) return 1\r\n    if (cmp(arx, blx) < 0) return -1\r\n\r\n    const cmpLeft = a.comparePoint(b.leftSE.point)\r\n    const cmpLX = cmp(alx, blx)\r\n\r\n    // are a and b colinear?\r\n    if (\r\n      cmpLeft === 0 &&\r\n      a.comparePoint(b.rightSE.point) === 0 &&\r\n      b.comparePoint(a.leftSE.point) === 0 &&\r\n      b.comparePoint(a.rightSE.point) === 0\r\n    ) {\r\n      // colinear segments with non-matching left-endpoints, consider\r\n      // the more-left endpoint to be earlier\r\n      if (cmpLX !== 0) return cmpLX\r\n\r\n      // colinear segments with matching left-endpoints, fall back\r\n      // on creation order of segments as a tie-breaker\r\n      // NOTE: we do not use segment length to break a tie here, because\r\n      //       when segments are split their length changes\r\n      if (a.ringIn.id !== b.ringIn.id) {\r\n        return a.ringIn.id < b.ringIn.id ? -1 : 1\r\n      }\r\n    } else {\r\n      // not colinear\r\n\r\n      // if the our left endpoints are not in the same vertical line,\r\n      // consider a vertical line at the rightmore of the two left endpoints,\r\n      // consider the segment that intersects lower with that line to be earlier\r\n      if (cmpLX < 0) return cmpLeft === 1 ? -1 : 1\r\n      if (cmpLX > 0) return b.comparePoint(a.leftSE.point) === 1 ? 1 : -1\r\n\r\n      // if our left endpoints match, consider the segment\r\n      // that angles more downward to be earlier\r\n      if (cmpLX === 0 && cmp(a.leftSE.point.y, b.leftSE.point.y) === 0) {\r\n        return a.comparePoint(b.rightSE.point) > 0 ? -1 : 1\r\n      }\r\n\r\n      // left endpoints are in the same vertical line but don't overlap exactly,\r\n      // lower means ealier\r\n      return cmp(aly, bly)\r\n    }\r\n\r\n    throw new Error(\r\n      `Segment comparison (from [${a.leftSE.point.x}, ${a.leftSR.point.y}])` +\r\n        ` -> to [${a.rightSE.point.x}, ${a.rightSE.point.y}]) failed... ` +\r\n        ` segments equal but not identical?`\r\n    )\r\n  }\r\n\r\n  constructor (point1, point2, ring) {\r\n    this.ringIn = ring\r\n    this.ringOut = null\r\n\r\n    const ptCmp = cmpPoints(point1, point2)\r\n    let lp\r\n    let rp\r\n    if (ptCmp < 0) {\r\n      lp = point1\r\n      rp = point2\r\n      this.flowL2R = true\r\n    } else if (ptCmp > 0) {\r\n      lp = point2\r\n      rp = point1\r\n      this.flowL2R = false\r\n    } else {\r\n      throw new Error(\r\n        `Tried to create degenerate segment at [${point1.x}, ${point1.y}]`\r\n      )\r\n    }\r\n\r\n    this.leftSE = new SweepEvent(lp, this)\r\n    this.rightSE = new SweepEvent(rp, this)\r\n\r\n    // cache of dynamically computed properies\r\n    this._clearCache()\r\n  }\r\n\r\n  clone () {\r\n    const seg = new Segment(this.leftSE.point, this.rightSE.point, this.ringIn)\r\n    seg.flowL2R = this.flowL2R\r\n    return seg\r\n  }\r\n\r\n  get bbox () {\r\n    const y1 = this.leftSE.point.y\r\n    const y2 = this.rightSE.point.y\r\n    return {\r\n      ll: { x: this.leftSE.point.x, y: y1 < y2 ? y1 : y2 },\r\n      ur: { x: this.rightSE.point.x, y: y1 > y2 ? y1 : y2 }\r\n    }\r\n  }\r\n\r\n  /* A vector from the left point to the right */\r\n  get vector () {\r\n    return {\r\n      x: this.rightSE.point.x - this.leftSE.point.x,\r\n      y: this.rightSE.point.y - this.leftSE.point.y\r\n    }\r\n  }\r\n\r\n  get isVertical () {\r\n    return cmp(this.leftSE.point.x, this.rightSE.point.x) === 0\r\n  }\r\n\r\n  /* In the original ringIn, which event came second */\r\n  get flowIntoSE () {\r\n    return this.flowL2R ? this.rightSE : this.leftSE\r\n  }\r\n\r\n  getOtherSE (se) {\r\n    if (se === this.leftSE) return this.rightSE\r\n    if (se === this.rightSE) return this.leftSE\r\n    throw new Error('may only be called by own sweep events')\r\n  }\r\n\r\n  isAnEndpoint (point) {\r\n    return (\r\n      cmpPoints(point, this.leftSE.point) === 0 ||\r\n      cmpPoints(point, this.rightSE.point) === 0\r\n    )\r\n  }\r\n\r\n  isPointOn (point) {\r\n    return isInBbox(this.bbox, point) && this.comparePoint(point) === 0\r\n  }\r\n\r\n  /* Compare this segment with a point. Return value indicates\r\n   *    1: point is below segment\r\n   *    0: point is colinear to segment\r\n   *   -1: point is above segment */\r\n  comparePoint (point) {\r\n    if (this.isAnEndpoint(point)) return 0\r\n    return compareVectorAngles(point, this.leftSE.point, this.rightSE.point)\r\n  }\r\n\r\n  /**\r\n   * Given another segment, returns an array of intersection points\r\n   * between the two segments. The returned array can contain:\r\n   *  * zero points:  no intersection b/t segments\r\n   *  * one point:    segments intersect once\r\n   *  * two points:   segments overlap. Endpoints of overlap returned.\r\n   *                  Will be ordered as sweep line would encounter them.\r\n   */\r\n  getIntersections (other) {\r\n    // If bboxes don't overlap, there can't be any intersections\r\n    const bboxOverlap = getBboxOverlap(this.bbox, other.bbox)\r\n    if (bboxOverlap === null) return []\r\n\r\n    // The general algorithim doesn't handle overlapping colinear segments.\r\n    // Overlapping colinear segments, if present, will have intersections\r\n    // of one pair of opposing corners of the bbox overlap. Thus we just\r\n    // manually check those coordinates.\r\n    //\r\n    // Note this also handles the cases of a collapsed bbox (just one point)\r\n    // and semi-collapsed bbox (a vertical or horizontal line) as well.\r\n    //\r\n    // In addition, in the case of a T-intersection, this ensures that the\r\n    // interseciton returned matches exactly an endpoint - no rounding error.\r\n    const intersections = []\r\n    const bboxCorners = getUniqueCorners(bboxOverlap)\r\n    for (let i = 0, iMax = bboxCorners.length; i < iMax; i++) {\r\n      const point = bboxCorners[i]\r\n      // test if this point is an intersection\r\n      if (\r\n        (this.isAnEndpoint(point) && other.isPointOn(point)) ||\r\n        (other.isAnEndpoint(point) && this.isPointOn(point))\r\n      ) {\r\n        intersections.push(point)\r\n      }\r\n    }\r\n    if (intersections.length > 0) return intersections\r\n\r\n    // General case for non-overlapping segments.\r\n    // This algorithm is based on Schneider and Eberly.\r\n    // http://www.cimec.org.ar/~ncalvo/Schneider_Eberly.pdf - pg 244\r\n    const al = this.leftSE.point\r\n    const bl = other.leftSE.point\r\n    const va = this.vector\r\n    const vb = other.vector\r\n    const ve = { x: bl.x - al.x, y: bl.y - al.y }\r\n    const kross = crossProduct(va, vb)\r\n\r\n    // not on line segment a\r\n    const s = crossProduct(ve, vb) / kross\r\n    if (cmp(s, 0) < 0 || cmp(1, s) < 0) return []\r\n\r\n    const t = crossProduct(ve, va) / kross\r\n    if (cmp(t, 0) < 0 || cmp(1, t) < 0) return []\r\n\r\n    // intersection is in a midpoint of both lines, let's average them and\r\n    // bound the result by org bbox (otherwise leftSE and rightSE could swap)\r\n    let x = (al.x + s * va.x + bl.x + t * vb.x) / 2\r\n    let y = (al.y + s * va.y + bl.y + t * vb.y) / 2\r\n    if (x < bboxOverlap.ll.x) x = bboxOverlap.ll.x\r\n    if (x > bboxOverlap.ur.x) x = bboxOverlap.ur.x\r\n    if (y < bboxOverlap.ll.y) y = bboxOverlap.ll.y\r\n    if (y > bboxOverlap.ur.y) y = bboxOverlap.ur.y\r\n    return [{ x: x, y: y }]\r\n  }\r\n\r\n  /**\r\n   * Split the given segment into multiple segments on the given points.\r\n   *  * The existing segment will retain it's leftSE and a new rightSE will be\r\n   *    generated for it.\r\n   *  * A new segment will be generated which will adopt the original segment's\r\n   *    rightSE, and a new leftSE will be generated for it.\r\n   *  * If there are more than two points given to split on, new segments\r\n   *    in the middle will be generated with new leftSE and rightSE's.\r\n   *  * An array of the newly generated SweepEvents will be returned.\r\n   */\r\n  split (points) {\r\n    // sort them and unique-ify them\r\n    points.sort(cmpPoints)\r\n    points = points.filter(\r\n      (pt, i, pts) => i === 0 || cmpPoints(pts[i - 1], pt) !== 0\r\n    )\r\n\r\n    for (let i = 0, iMax = points.length; i < iMax; i++) {\r\n      const pt = points[i]\r\n      if (this.isAnEndpoint(pt)) {\r\n        throw new Error(\r\n          `Cannot split segment upon endpoint at [${pt.x}, ${pt.y}]`\r\n        )\r\n      }\r\n    }\r\n\r\n    const point = points.shift()\r\n    const newSeg = this.clone()\r\n    newSeg.leftSE = new SweepEvent(point, newSeg)\r\n    newSeg.rightSE = this.rightSE\r\n    this.rightSE.segment = newSeg\r\n    this.rightSE = new SweepEvent(point, this)\r\n    const newEvents = [this.rightSE, newSeg.leftSE]\r\n\r\n    if (points.length > 0) {\r\n      const moreNewEvents = newSeg.split(points)\r\n      for (let i = 0, iMax = moreNewEvents.length; i < iMax; i++) {\r\n        newEvents.push(moreNewEvents[i])\r\n      }\r\n    }\r\n    return newEvents\r\n  }\r\n\r\n  registerPrev (other) {\r\n    this.prev = other\r\n    this._clearCache()\r\n  }\r\n\r\n  registerRingOut (ring) {\r\n    this.ringOut = ring\r\n  }\r\n\r\n  /* The first segment previous segment chain that is in the result */\r\n  get prevInResult () {\r\n    const key = 'prevInResult'\r\n    if (this._cache[key] === undefined) this._cache[key] = this[`_${key}`]()\r\n    return this._cache[key]\r\n  }\r\n\r\n  _prevInResult () {\r\n    let prev = this.prev\r\n    while (prev && !prev.isInResult) prev = prev.prev\r\n    return prev\r\n  }\r\n\r\n  /* The segments, including ourselves, for which we overlap perfectly */\r\n  get coincidents () {\r\n    const key = 'coincidents'\r\n    if (this._cache[key] === undefined) this._cache[key] = this[`_${key}`]()\r\n    return this._cache[key]\r\n  }\r\n\r\n  _coincidents () {\r\n    // a coincident will have both left and right sweepEvents linked with us\r\n    const coincidents = []\r\n    const leftLinkedEvents = this.leftSE.linkedEvents\r\n    const rightLinkedEvents = this.rightSE.linkedEvents\r\n    for (let i = 0, iMax = leftLinkedEvents.length; i < iMax; i++) {\r\n      const leftSE = leftLinkedEvents[i]\r\n      if (!leftSE.isLeft) continue\r\n      if (leftSE.segment.rightSE.linkedEvents !== rightLinkedEvents) continue\r\n      coincidents.push(leftSE.segment)\r\n    }\r\n\r\n    if (coincidents.length > 0) {\r\n      // put the 'winner' at the front\r\n      // arbitary - winner is the one with lowest ringId\r\n      coincidents.sort((a, b) => a.ringIn.id - b.ringIn.id)\r\n\r\n      // set this in all our coincident's caches so they don't have to calc it\r\n      for (let i = 0, iMax = coincidents.length; i < iMax; i++) {\r\n        coincidents[i]._cache['coincidents'] = coincidents\r\n      }\r\n    }\r\n    return coincidents\r\n  }\r\n\r\n  get prevNotCoincident () {\r\n    const key = 'prevNotCoincident'\r\n    if (this._cache[key] === undefined) this._cache[key] = this[`_${key}`]()\r\n    return this._cache[key]\r\n  }\r\n\r\n  _prevNotCoincident () {\r\n    // iterating backwards from next to prev\r\n    let next = this\r\n    let prev = this.prev\r\n    while (prev && next.coincidents === prev.coincidents) {\r\n      next = prev\r\n      prev = prev.prev\r\n    }\r\n    return prev\r\n  }\r\n\r\n  /* Does the sweep line, when it intersects this segment, enter the ring? */\r\n  get sweepLineEntersRing () {\r\n    const key = 'sweepLineEntersRing'\r\n    if (this._cache[key] === undefined) this._cache[key] = this[`_${key}`]()\r\n    return this._cache[key]\r\n  }\r\n\r\n  _sweepLineEntersRing () {\r\n    // opposite of previous segment on the same ring\r\n    let prev = this.prevNotCoincident\r\n    while (prev) {\r\n      for (let i = 0, iMax = prev.coincidents.length; i < iMax; i++) {\r\n        const seg = prev.coincidents[i]\r\n        if (seg.ringIn === this.ringIn) return !seg.sweepLineEntersRing\r\n      }\r\n      prev = prev.prevNotCoincident\r\n    }\r\n    return true\r\n  }\r\n\r\n  /* Does the sweep line, when it intersects this segment, enter the polygon? */\r\n  get sweepLineEntersPoly () {\r\n    if (!this.isValidEdgeForPoly) return false\r\n    return this.ringIn.isExterior === this.sweepLineEntersRing\r\n  }\r\n\r\n  /* Does the sweep line, when it intersects this segment, exit the polygon? */\r\n  get sweepLineExitsPoly () {\r\n    if (!this.isValidEdgeForPoly) return false\r\n    return this.ringIn.isExterior !== this.sweepLineEntersRing\r\n  }\r\n\r\n  /* Array of input rings this segment is inside of (not on boundary) */\r\n  get ringsInsideOf () {\r\n    const key = 'ringsInsideOf'\r\n    if (this._cache[key] === undefined) this._cache[key] = this[`_${key}`]()\r\n    return this._cache[key]\r\n  }\r\n\r\n  _ringsInsideOf () {\r\n    if (!this.prev) return []\r\n\r\n    // coincidents always share the same rings. Return same array to save mem\r\n    if (this.coincidents === this.prev.coincidents) {\r\n      return this.prev.ringsInsideOf\r\n    }\r\n\r\n    let rings = []\r\n    let prevRingsInsideOf = this.prev.ringsInsideOf\r\n    let prevRingsEntering = this.prev.getRingsEntering()\r\n    let ringsExiting = this.getRingsExiting()\r\n\r\n    // rings our prev was inside of all count, except those we're exiting\r\n    for (let i = 0, iMax = prevRingsInsideOf.length; i < iMax; i++) {\r\n      const ring = prevRingsInsideOf[i]\r\n      if (!ringsExiting.includes(ring)) rings.push(ring)\r\n    }\r\n\r\n    // rings our prev was entering of all count, except those we're exiting\r\n    for (let i = 0, iMax = prevRingsEntering.length; i < iMax; i++) {\r\n      const ring = prevRingsEntering[i]\r\n      if (!ringsExiting.includes(ring)) rings.push(ring)\r\n    }\r\n\r\n    return rings\r\n  }\r\n\r\n  /* Array of input rings this segment is on boundary of */\r\n  getRingsOnEdgeOf () {\r\n    const rings = []\r\n    for (let i = 0, iMax = this.coincidents.length; i < iMax; i++) {\r\n      rings.push(this.coincidents[i].ringIn)\r\n    }\r\n    return rings\r\n  }\r\n\r\n  /* Array of input rings this segment is on boundary of,\r\n   * and for which the sweep line enters when intersecting there */\r\n  getRingsEntering () {\r\n    const rings = []\r\n    for (let i = 0, iMax = this.coincidents.length; i < iMax; i++) {\r\n      const segment = this.coincidents[i]\r\n      if (!segment.sweepLineEntersRing) continue\r\n      rings.push(segment.ringIn)\r\n    }\r\n    return rings\r\n  }\r\n\r\n  /* Array of input rings this segment is on boundary of,\r\n   * and for which the sweep line exits when intersecting there */\r\n  getRingsExiting () {\r\n    const rings = []\r\n    for (let i = 0, iMax = this.coincidents.length; i < iMax; i++) {\r\n      const segment = this.coincidents[i]\r\n      if (segment.sweepLineEntersRing) continue\r\n      rings.push(segment.ringIn)\r\n    }\r\n    return rings\r\n  }\r\n\r\n  /* Is this segment valid on our own polygon? (ie not outside exterior ring) */\r\n  get isValidEdgeForPoly () {\r\n    const key = 'isValidEdgeForPoly'\r\n    if (this._cache[key] === undefined) this._cache[key] = this[`_${key}`]()\r\n    return this._cache[key]\r\n  }\r\n\r\n  _isValidEdgeForPoly () {\r\n    // SLER: sweep line entering orientation\r\n    let sameSLER\r\n    let diffSLER\r\n    if (this.sweepLineEntersRing) {\r\n      sameSLER = this.getRingsEntering()\r\n      diffSLER = this.getRingsExiting()\r\n    } else {\r\n      diffSLER = this.getRingsEntering()\r\n      sameSLER = this.getRingsExiting()\r\n    }\r\n    return this.ringIn.isValid(sameSLER, diffSLER, this.ringsInsideOf)\r\n  }\r\n\r\n  /* Array of multipolys this segment is inside of */\r\n  getMultiPolysInsideOf () {\r\n    const mps = []\r\n    for (let i = 0, iMax = this.ringsInsideOf.length; i < iMax; i++) {\r\n      const poly = this.ringsInsideOf[i].poly\r\n      if (mps.includes(poly.multiPoly)) continue\r\n      if (!poly.isInside(this.getRingsOnEdgeOf(), this.ringsInsideOf)) continue\r\n      mps.push(poly.multiPoly)\r\n    }\r\n    return mps\r\n  }\r\n\r\n  /* The multipolys on one side of us */\r\n  getMultiPolysSLPEnters (multiPolysInsideOf) {\r\n    // start with the multipolys we're fully inside\r\n    const mps = multiPolysInsideOf.slice()\r\n    // add the multipolys we have the sweep line entering\r\n    for (let i = 0, iMax = this.coincidents.length; i < iMax; i++) {\r\n      const seg = this.coincidents[i]\r\n      if (!seg.sweepLineEntersPoly) continue\r\n      const mp = seg.ringIn.poly.multiPoly\r\n      if (!mps.includes(mp)) mps.push(mp)\r\n    }\r\n    return mps\r\n  }\r\n\r\n  /* The multipolys on the other side of us */\r\n  getMultiPolysSLPExits (multiPolysInsideOf) {\r\n    // start with the multipolys we're fully inside\r\n    const mps = multiPolysInsideOf.slice()\r\n    // add the multipolys we have the sweep line entering\r\n    for (let i = 0, iMax = this.coincidents.length; i < iMax; i++) {\r\n      const seg = this.coincidents[i]\r\n      if (!seg.sweepLineExitsPoly) continue\r\n      const mp = seg.ringIn.poly.multiPoly\r\n      if (!mps.includes(mp)) mps.push(mp)\r\n    }\r\n    return mps\r\n  }\r\n\r\n  /* Is this segment part of the final result? */\r\n  get isInResult () {\r\n    const key = 'isInResult'\r\n    if (this._cache[key] === undefined) this._cache[key] = this[`_${key}`]()\r\n    return this._cache[key]\r\n  }\r\n\r\n  _isInResult () {\r\n    // if it's not the coincidence winner, it's not in the resul\r\n    if (this !== this.coincidents[0]) return false\r\n\r\n    const multiPolysInsideOf = this.getMultiPolysInsideOf()\r\n    const multiPolysSLPEnters = this.getMultiPolysSLPEnters(multiPolysInsideOf)\r\n    const multiPolysSLPExits = this.getMultiPolysSLPExits(multiPolysInsideOf)\r\n\r\n    switch (operation.type) {\r\n      case operation.types.UNION:\r\n        // UNION - included iff:\r\n        //  * On one side of us there is 0 poly interiors AND\r\n        //  * On the other side there is 1 or more.\r\n        const noEnters = multiPolysSLPEnters.length === 0\r\n        const noExits = multiPolysSLPExits.length === 0\r\n        return noEnters !== noExits\r\n\r\n      case operation.types.INTERSECTION:\r\n        // INTERSECTION - included iff:\r\n        //  * on one side of us all multipolys are rep. with poly interiors AND\r\n        //  * on the other side of us, not all multipolys are repsented\r\n        //    with poly interiors\r\n        let least\r\n        let most\r\n        if (multiPolysSLPEnters.length < multiPolysSLPExits.length) {\r\n          least = multiPolysSLPEnters.length\r\n          most = multiPolysSLPExits.length\r\n        } else {\r\n          least = multiPolysSLPExits.length\r\n          most = multiPolysSLPEnters.length\r\n        }\r\n        return most === operation.numMultiPolys && least < most\r\n\r\n      case operation.types.XOR:\r\n        // XOR - included iff:\r\n        //  * the difference between the number of multipolys represented\r\n        //    with poly interiors on our two sides is an odd number\r\n        const diff = Math.abs(\r\n          multiPolysSLPEnters.length - multiPolysSLPExits.length\r\n        )\r\n        return diff % 2 === 1\r\n\r\n      case operation.types.DIFFERENCE:\r\n        // DIFFERENCE included iff:\r\n        //  * on exactly one side, we have just the subject\r\n        const isJustSubject = mps => mps.length === 1 && mps[0].isSubject\r\n        return (\r\n          isJustSubject(multiPolysSLPEnters) !==\r\n          isJustSubject(multiPolysSLPExits)\r\n        )\r\n\r\n      default:\r\n        throw new Error(`Unrecognized operation type found ${operation.type}`)\r\n    }\r\n  }\r\n\r\n  _clearCache () {\r\n    this._cache = {}\r\n  }\r\n}\r\n\r\nmodule.exports = Segment\r\n","/* globals __VUE_SSR_CONTEXT__ */\n\n// IMPORTANT: Do NOT use ES2015 features in this file (except for modules).\n// This module is a runtime utility for cleaner component module output and will\n// be included in the final webpack user bundle.\n\nexport default function normalizeComponent (\n  scriptExports,\n  render,\n  staticRenderFns,\n  functionalTemplate,\n  injectStyles,\n  scopeId,\n  moduleIdentifier, /* server only */\n  shadowMode /* vue-cli only */\n) {\n  scriptExports = scriptExports || {}\n\n  // ES6 modules interop\n  var type = typeof scriptExports.default\n  if (type === 'object' || type === 'function') {\n    scriptExports = scriptExports.default\n  }\n\n  // Vue.extend constructor export interop\n  var options = typeof scriptExports === 'function'\n    ? scriptExports.options\n    : scriptExports\n\n  // render functions\n  if (render) {\n    options.render = render\n    options.staticRenderFns = staticRenderFns\n    options._compiled = true\n  }\n\n  // functional template\n  if (functionalTemplate) {\n    options.functional = true\n  }\n\n  // scopedId\n  if (scopeId) {\n    options._scopeId = scopeId\n  }\n\n  var hook\n  if (moduleIdentifier) { // server build\n    hook = function (context) {\n      // 2.3 injection\n      context =\n        context || // cached call\n        (this.$vnode && this.$vnode.ssrContext) || // stateful\n        (this.parent && this.parent.$vnode && this.parent.$vnode.ssrContext) // functional\n      // 2.2 with runInNewContext: true\n      if (!context && typeof __VUE_SSR_CONTEXT__ !== 'undefined') {\n        context = __VUE_SSR_CONTEXT__\n      }\n      // inject component styles\n      if (injectStyles) {\n        injectStyles.call(this, context)\n      }\n      // register component module identifier for async chunk inferrence\n      if (context && context._registeredComponents) {\n        context._registeredComponents.add(moduleIdentifier)\n      }\n    }\n    // used by ssr in case component is cached and beforeCreate\n    // never gets called\n    options._ssrRegister = hook\n  } else if (injectStyles) {\n    hook = shadowMode\n      ? function () { injectStyles.call(this, this.$root.$options.shadowRoot) }\n      : injectStyles\n  }\n\n  if (hook) {\n    if (options.functional) {\n      // for template-only hot-reload because in that case the render fn doesn't\n      // go through the normalizer\n      options._injectStyles = hook\n      // register for functioal component in vue file\n      var originalRender = options.render\n      options.render = function renderWithStyleInjection (h, context) {\n        hook.call(context)\n        return originalRender(h, context)\n      }\n    } else {\n      // inject component registration as beforeCreate hook\n      var existing = options.beforeCreate\n      options.beforeCreate = existing\n        ? [].concat(existing, hook)\n        : [hook]\n    }\n  }\n\n  return {\n    exports: scriptExports,\n    options: options\n  }\n}\n","/**\n * Translates the list format produced by css-loader into something\n * easier to manipulate.\n */\nexport default function listToStyles (parentId, list) {\n  var styles = []\n  var newStyles = {}\n  for (var i = 0; i < list.length; i++) {\n    var item = list[i]\n    var id = item[0]\n    var css = item[1]\n    var media = item[2]\n    var sourceMap = item[3]\n    var part = {\n      id: parentId + ':' + i,\n      css: css,\n      media: media,\n      sourceMap: sourceMap\n    }\n    if (!newStyles[id]) {\n      styles.push(newStyles[id] = { id: id, parts: [part] })\n    } else {\n      newStyles[id].parts.push(part)\n    }\n  }\n  return styles\n}\n","/*\n  MIT License http://www.opensource.org/licenses/mit-license.php\n  Author Tobias Koppers @sokra\n  Modified by Evan You @yyx990803\n*/\n\nimport listToStyles from './listToStyles'\n\nvar hasDocument = typeof document !== 'undefined'\n\nif (typeof DEBUG !== 'undefined' && DEBUG) {\n  if (!hasDocument) {\n    throw new Error(\n    'vue-style-loader cannot be used in a non-browser environment. ' +\n    \"Use { target: 'node' } in your Webpack config to indicate a server-rendering environment.\"\n  ) }\n}\n\n/*\ntype StyleObject = {\n  id: number;\n  parts: Array<StyleObjectPart>\n}\n\ntype StyleObjectPart = {\n  css: string;\n  media: string;\n  sourceMap: ?string\n}\n*/\n\nvar stylesInDom = {/*\n  [id: number]: {\n    id: number,\n    refs: number,\n    parts: Array<(obj?: StyleObjectPart) => void>\n  }\n*/}\n\nvar head = hasDocument && (document.head || document.getElementsByTagName('head')[0])\nvar singletonElement = null\nvar singletonCounter = 0\nvar isProduction = false\nvar noop = function () {}\nvar options = null\nvar ssrIdKey = 'data-vue-ssr-id'\n\n// Force single-tag solution on IE6-9, which has a hard limit on the # of <style>\n// tags it will allow on a page\nvar isOldIE = typeof navigator !== 'undefined' && /msie [6-9]\\b/.test(navigator.userAgent.toLowerCase())\n\nexport default function addStylesClient (parentId, list, _isProduction, _options) {\n  isProduction = _isProduction\n\n  options = _options || {}\n\n  var styles = listToStyles(parentId, list)\n  addStylesToDom(styles)\n\n  return function update (newList) {\n    var mayRemove = []\n    for (var i = 0; i < styles.length; i++) {\n      var item = styles[i]\n      var domStyle = stylesInDom[item.id]\n      domStyle.refs--\n      mayRemove.push(domStyle)\n    }\n    if (newList) {\n      styles = listToStyles(parentId, newList)\n      addStylesToDom(styles)\n    } else {\n      styles = []\n    }\n    for (var i = 0; i < mayRemove.length; i++) {\n      var domStyle = mayRemove[i]\n      if (domStyle.refs === 0) {\n        for (var j = 0; j < domStyle.parts.length; j++) {\n          domStyle.parts[j]()\n        }\n        delete stylesInDom[domStyle.id]\n      }\n    }\n  }\n}\n\nfunction addStylesToDom (styles /* Array<StyleObject> */) {\n  for (var i = 0; i < styles.length; i++) {\n    var item = styles[i]\n    var domStyle = stylesInDom[item.id]\n    if (domStyle) {\n      domStyle.refs++\n      for (var j = 0; j < domStyle.parts.length; j++) {\n        domStyle.parts[j](item.parts[j])\n      }\n      for (; j < item.parts.length; j++) {\n        domStyle.parts.push(addStyle(item.parts[j]))\n      }\n      if (domStyle.parts.length > item.parts.length) {\n        domStyle.parts.length = item.parts.length\n      }\n    } else {\n      var parts = []\n      for (var j = 0; j < item.parts.length; j++) {\n        parts.push(addStyle(item.parts[j]))\n      }\n      stylesInDom[item.id] = { id: item.id, refs: 1, parts: parts }\n    }\n  }\n}\n\nfunction createStyleElement () {\n  var styleElement = document.createElement('style')\n  styleElement.type = 'text/css'\n  head.appendChild(styleElement)\n  return styleElement\n}\n\nfunction addStyle (obj /* StyleObjectPart */) {\n  var update, remove\n  var styleElement = document.querySelector('style[' + ssrIdKey + '~=\"' + obj.id + '\"]')\n\n  if (styleElement) {\n    if (isProduction) {\n      // has SSR styles and in production mode.\n      // simply do nothing.\n      return noop\n    } else {\n      // has SSR styles but in dev mode.\n      // for some reason Chrome can't handle source map in server-rendered\n      // style tags - source maps in <style> only works if the style tag is\n      // created and inserted dynamically. So we remove the server rendered\n      // styles and inject new ones.\n      styleElement.parentNode.removeChild(styleElement)\n    }\n  }\n\n  if (isOldIE) {\n    // use singleton mode for IE9.\n    var styleIndex = singletonCounter++\n    styleElement = singletonElement || (singletonElement = createStyleElement())\n    update = applyToSingletonTag.bind(null, styleElement, styleIndex, false)\n    remove = applyToSingletonTag.bind(null, styleElement, styleIndex, true)\n  } else {\n    // use multi-style-tag mode in all other cases\n    styleElement = createStyleElement()\n    update = applyToTag.bind(null, styleElement)\n    remove = function () {\n      styleElement.parentNode.removeChild(styleElement)\n    }\n  }\n\n  update(obj)\n\n  return function updateStyle (newObj /* StyleObjectPart */) {\n    if (newObj) {\n      if (newObj.css === obj.css &&\n          newObj.media === obj.media &&\n          newObj.sourceMap === obj.sourceMap) {\n        return\n      }\n      update(obj = newObj)\n    } else {\n      remove()\n    }\n  }\n}\n\nvar replaceText = (function () {\n  var textStore = []\n\n  return function (index, replacement) {\n    textStore[index] = replacement\n    return textStore.filter(Boolean).join('\\n')\n  }\n})()\n\nfunction applyToSingletonTag (styleElement, index, remove, obj) {\n  var css = remove ? '' : obj.css\n\n  if (styleElement.styleSheet) {\n    styleElement.styleSheet.cssText = replaceText(index, css)\n  } else {\n    var cssNode = document.createTextNode(css)\n    var childNodes = styleElement.childNodes\n    if (childNodes[index]) styleElement.removeChild(childNodes[index])\n    if (childNodes.length) {\n      styleElement.insertBefore(cssNode, childNodes[index])\n    } else {\n      styleElement.appendChild(cssNode)\n    }\n  }\n}\n\nfunction applyToTag (styleElement, obj) {\n  var css = obj.css\n  var media = obj.media\n  var sourceMap = obj.sourceMap\n\n  if (media) {\n    styleElement.setAttribute('media', media)\n  }\n  if (options.ssrId) {\n    styleElement.setAttribute(ssrIdKey, obj.id)\n  }\n\n  if (sourceMap) {\n    // https://developer.chrome.com/devtools/docs/javascript-debugging\n    // this makes source maps inside style tags work properly in Chrome\n    css += '\\n/*# sourceURL=' + sourceMap.sources[0] + ' */'\n    // http://stackoverflow.com/a/26603875\n    css += '\\n/*# sourceMappingURL=data:application/json;base64,' + btoa(unescape(encodeURIComponent(JSON.stringify(sourceMap)))) + ' */'\n  }\n\n  if (styleElement.styleSheet) {\n    styleElement.styleSheet.cssText = css\n  } else {\n    while (styleElement.firstChild) {\n      styleElement.removeChild(styleElement.firstChild)\n    }\n    styleElement.appendChild(document.createTextNode(css))\n  }\n}\n","(function(f){if(typeof exports===\"object\"&&typeof module!==\"undefined\"){module.exports=f()}else if(typeof define===\"function\"&&define.amd){define([],f)}else{var g;if(typeof window!==\"undefined\"){g=window}else if(typeof global!==\"undefined\"){g=global}else if(typeof self!==\"undefined\"){g=self}else{g=this}g.martinez = f()}})(function(){var define,module,exports;return (function e(t,n,r){function s(o,u){if(!n[o]){if(!t[o]){var a=typeof require==\"function\"&&require;if(!u&&a)return a(o,!0);if(i)return i(o,!0);var f=new Error(\"Cannot find module '\"+o+\"'\");throw f.code=\"MODULE_NOT_FOUND\",f}var l=n[o]={exports:{}};t[o][0].call(l.exports,function(e){var n=t[o][1][e];return s(n?n:e)},l,l.exports,e,t,n,r)}return n[o].exports}var i=typeof require==\"function\"&&require;for(var o=0;o<r.length;o++)s(r[o]);return s})({1:[function(require,module,exports){\n'use strict';\n\nvar martinez = require('./src/index');\n\nvar boolean = {\n  union: martinez.union,\n  diff: martinez.diff,\n  xor: martinez.xor,\n  intersection: martinez.intersection\n};\nboolean.default = boolean;\n\nmodule.exports = boolean;\n\n},{\"./src/index\":12}],2:[function(require,module,exports){\n(function (global, factory) {\n\ttypeof exports === 'object' && typeof module !== 'undefined' ? module.exports = factory() :\n\ttypeof define === 'function' && define.amd ? define(factory) :\n\t(global.avl = factory());\n}(this, (function () { 'use strict';\n\n/**\n * Prints tree horizontally\n * @param  {Node}                       root\n * @param  {Function(node:Node):String} [printNode]\n * @return {String}\n */\nfunction print (root, printNode) {\n  if ( printNode === void 0 ) printNode = function (n) { return n.key; };\n\n  var out = [];\n  row(root, '', true, function (v) { return out.push(v); }, printNode);\n  return out.join('');\n}\n\n/**\n * Prints level of the tree\n * @param  {Node}                        root\n * @param  {String}                      prefix\n * @param  {Boolean}                     isTail\n * @param  {Function(in:string):void}    out\n * @param  {Function(node:Node):String}  printNode\n */\nfunction row (root, prefix, isTail, out, printNode) {\n  if (root) {\n    out((\"\" + prefix + (isTail ? '└── ' : '├── ') + (printNode(root)) + \"\\n\"));\n    var indent = prefix + (isTail ? '    ' : '│   ');\n    if (root.left)  { row(root.left,  indent, false, out, printNode); }\n    if (root.right) { row(root.right, indent, true,  out, printNode); }\n  }\n}\n\n\n/**\n * Is the tree balanced (none of the subtrees differ in height by more than 1)\n * @param  {Node}    root\n * @return {Boolean}\n */\nfunction isBalanced(root) {\n  if (root === null) { return true; } // If node is empty then return true\n\n  // Get the height of left and right sub trees\n  var lh = height(root.left);\n  var rh = height(root.right);\n\n  if (Math.abs(lh - rh) <= 1 &&\n      isBalanced(root.left)  &&\n      isBalanced(root.right)) { return true; }\n\n  // If we reach here then tree is not height-balanced\n  return false;\n}\n\n/**\n * The function Compute the 'height' of a tree.\n * Height is the number of nodes along the longest path\n * from the root node down to the farthest leaf node.\n *\n * @param  {Node} node\n * @return {Number}\n */\nfunction height(node) {\n  return node ? (1 + Math.max(height(node.left), height(node.right))) : 0;\n}\n\n// function createNode (parent, left, right, height, key, data) {\n//   return { parent, left, right, balanceFactor: height, key, data };\n// }\n\n/**\n * @typedef {{\n *   parent:        ?Node,\n *   left:          ?Node,\n *   right:         ?Node,\n *   balanceFactor: number,\n *   key:           Key,\n *   data:          Value\n * }} Node\n */\n\n/**\n * @typedef {*} Key\n */\n\n/**\n * @typedef {*} Value\n */\n\n/**\n * Default comparison function\n * @param {Key} a\n * @param {Key} b\n * @returns {number}\n */\nfunction DEFAULT_COMPARE (a, b) { return a > b ? 1 : a < b ? -1 : 0; }\n\n\n/**\n * Single left rotation\n * @param  {Node} node\n * @return {Node}\n */\nfunction rotateLeft (node) {\n  var rightNode = node.right;\n  node.right    = rightNode.left;\n\n  if (rightNode.left) { rightNode.left.parent = node; }\n\n  rightNode.parent = node.parent;\n  if (rightNode.parent) {\n    if (rightNode.parent.left === node) {\n      rightNode.parent.left = rightNode;\n    } else {\n      rightNode.parent.right = rightNode;\n    }\n  }\n\n  node.parent    = rightNode;\n  rightNode.left = node;\n\n  node.balanceFactor += 1;\n  if (rightNode.balanceFactor < 0) {\n    node.balanceFactor -= rightNode.balanceFactor;\n  }\n\n  rightNode.balanceFactor += 1;\n  if (node.balanceFactor > 0) {\n    rightNode.balanceFactor += node.balanceFactor;\n  }\n  return rightNode;\n}\n\n\nfunction rotateRight (node) {\n  var leftNode = node.left;\n  node.left = leftNode.right;\n  if (node.left) { node.left.parent = node; }\n\n  leftNode.parent = node.parent;\n  if (leftNode.parent) {\n    if (leftNode.parent.left === node) {\n      leftNode.parent.left = leftNode;\n    } else {\n      leftNode.parent.right = leftNode;\n    }\n  }\n\n  node.parent    = leftNode;\n  leftNode.right = node;\n\n  node.balanceFactor -= 1;\n  if (leftNode.balanceFactor > 0) {\n    node.balanceFactor -= leftNode.balanceFactor;\n  }\n\n  leftNode.balanceFactor -= 1;\n  if (node.balanceFactor < 0) {\n    leftNode.balanceFactor += node.balanceFactor;\n  }\n\n  return leftNode;\n}\n\n\n// function leftBalance (node) {\n//   if (node.left.balanceFactor === -1) rotateLeft(node.left);\n//   return rotateRight(node);\n// }\n\n\n// function rightBalance (node) {\n//   if (node.right.balanceFactor === 1) rotateRight(node.right);\n//   return rotateLeft(node);\n// }\n\n\nvar AVLTree = function AVLTree (comparator, noDuplicates) {\n  if ( noDuplicates === void 0 ) noDuplicates = false;\n\n  this._comparator = comparator || DEFAULT_COMPARE;\n  this._root = null;\n  this._size = 0;\n  this._noDuplicates = !!noDuplicates;\n};\n\nvar prototypeAccessors = { size: {} };\n\n\n/**\n * Clear the tree\n * @return {AVLTree}\n */\nAVLTree.prototype.destroy = function destroy () {\n  this._root = null;\n  return this;\n};\n\n/**\n * Number of nodes\n * @return {number}\n */\nprototypeAccessors.size.get = function () {\n  return this._size;\n};\n\n\n/**\n * Whether the tree contains a node with the given key\n * @param{Key} key\n * @return {boolean} true/false\n */\nAVLTree.prototype.contains = function contains (key) {\n  if (this._root){\n    var node     = this._root;\n    var comparator = this._comparator;\n    while (node){\n      var cmp = comparator(key, node.key);\n      if    (cmp === 0) { return true; }\n      else if (cmp < 0) { node = node.left; }\n      else              { node = node.right; }\n    }\n  }\n  return false;\n};\n\n\n/* eslint-disable class-methods-use-this */\n\n/**\n * Successor node\n * @param{Node} node\n * @return {?Node}\n */\nAVLTree.prototype.next = function next (node) {\n  var successor = node;\n  if (successor) {\n    if (successor.right) {\n      successor = successor.right;\n      while (successor && successor.left) { successor = successor.left; }\n    } else {\n      successor = node.parent;\n      while (successor && successor.right === node) {\n        node = successor; successor = successor.parent;\n      }\n    }\n  }\n  return successor;\n};\n\n\n/**\n * Predecessor node\n * @param{Node} node\n * @return {?Node}\n */\nAVLTree.prototype.prev = function prev (node) {\n  var predecessor = node;\n  if (predecessor) {\n    if (predecessor.left) {\n      predecessor = predecessor.left;\n      while (predecessor && predecessor.right) { predecessor = predecessor.right; }\n    } else {\n      predecessor = node.parent;\n      while (predecessor && predecessor.left === node) {\n        node = predecessor;\n        predecessor = predecessor.parent;\n      }\n    }\n  }\n  return predecessor;\n};\n/* eslint-enable class-methods-use-this */\n\n\n/**\n * Callback for forEach\n * @callback forEachCallback\n * @param {Node} node\n * @param {number} index\n */\n\n/**\n * @param{forEachCallback} callback\n * @return {AVLTree}\n */\nAVLTree.prototype.forEach = function forEach (callback) {\n  var current = this._root;\n  var s = [], done = false, i = 0;\n\n  while (!done) {\n    // Reach the left most Node of the current Node\n    if (current) {\n      // Place pointer to a tree node on the stack\n      // before traversing the node's left subtree\n      s.push(current);\n      current = current.left;\n    } else {\n      // BackTrack from the empty subtree and visit the Node\n      // at the top of the stack; however, if the stack is\n      // empty you are done\n      if (s.length > 0) {\n        current = s.pop();\n        callback(current, i++);\n\n        // We have visited the node and its left\n        // subtree. Now, it's right subtree's turn\n        current = current.right;\n      } else { done = true; }\n    }\n  }\n  return this;\n};\n\n\n/**\n * Returns all keys in order\n * @return {Array<Key>}\n */\nAVLTree.prototype.keys = function keys () {\n  var current = this._root;\n  var s = [], r = [], done = false;\n\n  while (!done) {\n    if (current) {\n      s.push(current);\n      current = current.left;\n    } else {\n      if (s.length > 0) {\n        current = s.pop();\n        r.push(current.key);\n        current = current.right;\n      } else { done = true; }\n    }\n  }\n  return r;\n};\n\n\n/**\n * Returns `data` fields of all nodes in order.\n * @return {Array<Value>}\n */\nAVLTree.prototype.values = function values () {\n  var current = this._root;\n  var s = [], r = [], done = false;\n\n  while (!done) {\n    if (current) {\n      s.push(current);\n      current = current.left;\n    } else {\n      if (s.length > 0) {\n        current = s.pop();\n        r.push(current.data);\n        current = current.right;\n      } else { done = true; }\n    }\n  }\n  return r;\n};\n\n\n/**\n * Returns node at given index\n * @param{number} index\n * @return {?Node}\n */\nAVLTree.prototype.at = function at (index) {\n  // removed after a consideration, more misleading than useful\n  // index = index % this.size;\n  // if (index < 0) index = this.size - index;\n\n  var current = this._root;\n  var s = [], done = false, i = 0;\n\n  while (!done) {\n    if (current) {\n      s.push(current);\n      current = current.left;\n    } else {\n      if (s.length > 0) {\n        current = s.pop();\n        if (i === index) { return current; }\n        i++;\n        current = current.right;\n      } else { done = true; }\n    }\n  }\n  return null;\n};\n\n\n/**\n * Returns node with the minimum key\n * @return {?Node}\n */\nAVLTree.prototype.minNode = function minNode () {\n  var node = this._root;\n  if (!node) { return null; }\n  while (node.left) { node = node.left; }\n  return node;\n};\n\n\n/**\n * Returns node with the max key\n * @return {?Node}\n */\nAVLTree.prototype.maxNode = function maxNode () {\n  var node = this._root;\n  if (!node) { return null; }\n  while (node.right) { node = node.right; }\n  return node;\n};\n\n\n/**\n * Min key\n * @return {?Key}\n */\nAVLTree.prototype.min = function min () {\n  var node = this._root;\n  if (!node) { return null; }\n  while (node.left) { node = node.left; }\n  return node.key;\n};\n\n\n/**\n * Max key\n * @return {?Key}\n */\nAVLTree.prototype.max = function max () {\n  var node = this._root;\n  if (!node) { return null; }\n  while (node.right) { node = node.right; }\n  return node.key;\n};\n\n\n/**\n * @return {boolean} true/false\n */\nAVLTree.prototype.isEmpty = function isEmpty () {\n  return !this._root;\n};\n\n\n/**\n * Removes and returns the node with smallest key\n * @return {?Node}\n */\nAVLTree.prototype.pop = function pop () {\n  var node = this._root, returnValue = null;\n  if (node) {\n    while (node.left) { node = node.left; }\n    returnValue = { key: node.key, data: node.data };\n    this.remove(node.key);\n  }\n  return returnValue;\n};\n\n\n/**\n * Find node by key\n * @param{Key} key\n * @return {?Node}\n */\nAVLTree.prototype.find = function find (key) {\n  var root = this._root;\n  // if (root === null)  return null;\n  // if (key === root.key) return root;\n\n  var subtree = root, cmp;\n  var compare = this._comparator;\n  while (subtree) {\n    cmp = compare(key, subtree.key);\n    if    (cmp === 0) { return subtree; }\n    else if (cmp < 0) { subtree = subtree.left; }\n    else              { subtree = subtree.right; }\n  }\n\n  return null;\n};\n\n\n/**\n * Insert a node into the tree\n * @param{Key} key\n * @param{Value} [data]\n * @return {?Node}\n */\nAVLTree.prototype.insert = function insert (key, data) {\n    var this$1 = this;\n\n  if (!this._root) {\n    this._root = {\n      parent: null, left: null, right: null, balanceFactor: 0,\n      key: key, data: data\n    };\n    this._size++;\n    return this._root;\n  }\n\n  var compare = this._comparator;\n  var node  = this._root;\n  var parent= null;\n  var cmp   = 0;\n\n  if (this._noDuplicates) {\n    while (node) {\n      cmp = compare(key, node.key);\n      parent = node;\n      if    (cmp === 0) { return null; }\n      else if (cmp < 0) { node = node.left; }\n      else              { node = node.right; }\n    }\n  } else {\n    while (node) {\n      cmp = compare(key, node.key);\n      parent = node;\n      if    (cmp <= 0){ node = node.left; } //return null;\n      else              { node = node.right; }\n    }\n  }\n\n  var newNode = {\n    left: null,\n    right: null,\n    balanceFactor: 0,\n    parent: parent, key: key, data: data\n  };\n  var newRoot;\n  if (cmp <= 0) { parent.left= newNode; }\n  else       { parent.right = newNode; }\n\n  while (parent) {\n    cmp = compare(parent.key, key);\n    if (cmp < 0) { parent.balanceFactor -= 1; }\n    else       { parent.balanceFactor += 1; }\n\n    if      (parent.balanceFactor === 0) { break; }\n    else if (parent.balanceFactor < -1) {\n      // inlined\n      //var newRoot = rightBalance(parent);\n      if (parent.right.balanceFactor === 1) { rotateRight(parent.right); }\n      newRoot = rotateLeft(parent);\n\n      if (parent === this$1._root) { this$1._root = newRoot; }\n      break;\n    } else if (parent.balanceFactor > 1) {\n      // inlined\n      // var newRoot = leftBalance(parent);\n      if (parent.left.balanceFactor === -1) { rotateLeft(parent.left); }\n      newRoot = rotateRight(parent);\n\n      if (parent === this$1._root) { this$1._root = newRoot; }\n      break;\n    }\n    parent = parent.parent;\n  }\n\n  this._size++;\n  return newNode;\n};\n\n\n/**\n * Removes the node from the tree. If not found, returns null.\n * @param{Key} key\n * @return {?Node}\n */\nAVLTree.prototype.remove = function remove (key) {\n    var this$1 = this;\n\n  if (!this._root) { return null; }\n\n  var node = this._root;\n  var compare = this._comparator;\n  var cmp = 0;\n\n  while (node) {\n    cmp = compare(key, node.key);\n    if    (cmp === 0) { break; }\n    else if (cmp < 0) { node = node.left; }\n    else              { node = node.right; }\n  }\n  if (!node) { return null; }\n\n  var returnValue = node.key;\n  var max, min;\n\n  if (node.left) {\n    max = node.left;\n\n    while (max.left || max.right) {\n      while (max.right) { max = max.right; }\n\n      node.key = max.key;\n      node.data = max.data;\n      if (max.left) {\n        node = max;\n        max = max.left;\n      }\n    }\n\n    node.key= max.key;\n    node.data = max.data;\n    node = max;\n  }\n\n  if (node.right) {\n    min = node.right;\n\n    while (min.left || min.right) {\n      while (min.left) { min = min.left; }\n\n      node.key= min.key;\n      node.data = min.data;\n      if (min.right) {\n        node = min;\n        min = min.right;\n      }\n    }\n\n    node.key= min.key;\n    node.data = min.data;\n    node = min;\n  }\n\n  var parent = node.parent;\n  var pp   = node;\n  var newRoot;\n\n  while (parent) {\n    if (parent.left === pp) { parent.balanceFactor -= 1; }\n    else                  { parent.balanceFactor += 1; }\n\n    if      (parent.balanceFactor < -1) {\n      // inlined\n      //var newRoot = rightBalance(parent);\n      if (parent.right.balanceFactor === 1) { rotateRight(parent.right); }\n      newRoot = rotateLeft(parent);\n\n      if (parent === this$1._root) { this$1._root = newRoot; }\n      parent = newRoot;\n    } else if (parent.balanceFactor > 1) {\n      // inlined\n      // var newRoot = leftBalance(parent);\n      if (parent.left.balanceFactor === -1) { rotateLeft(parent.left); }\n      newRoot = rotateRight(parent);\n\n      if (parent === this$1._root) { this$1._root = newRoot; }\n      parent = newRoot;\n    }\n\n    if (parent.balanceFactor === -1 || parent.balanceFactor === 1) { break; }\n\n    pp   = parent;\n    parent = parent.parent;\n  }\n\n  if (node.parent) {\n    if (node.parent.left === node) { node.parent.left= null; }\n    else                         { node.parent.right = null; }\n  }\n\n  if (node === this._root) { this._root = null; }\n\n  this._size--;\n  return returnValue;\n};\n\n\n/**\n * Bulk-load items\n * @param{Array<Key>}keys\n * @param{Array<Value>}[values]\n * @return {AVLTree}\n */\nAVLTree.prototype.load = function load (keys, values) {\n    var this$1 = this;\n    if ( keys === void 0 ) keys = [];\n    if ( values === void 0 ) values = [];\n\n  if (Array.isArray(keys)) {\n    for (var i = 0, len = keys.length; i < len; i++) {\n      this$1.insert(keys[i], values[i]);\n    }\n  }\n  return this;\n};\n\n\n/**\n * Returns true if the tree is balanced\n * @return {boolean}\n */\nAVLTree.prototype.isBalanced = function isBalanced$1 () {\n  return isBalanced(this._root);\n};\n\n\n/**\n * String representation of the tree - primitive horizontal print-out\n * @param{Function(Node):string} [printNode]\n * @return {string}\n */\nAVLTree.prototype.toString = function toString (printNode) {\n  return print(this._root, printNode);\n};\n\nObject.defineProperties( AVLTree.prototype, prototypeAccessors );\n\nreturn AVLTree;\n\n})));\n\n\n},{}],3:[function(require,module,exports){\n'use strict';\n\nmodule.exports = TinyQueue;\nmodule.exports.default = TinyQueue;\n\nfunction TinyQueue(data, compare) {\n    if (!(this instanceof TinyQueue)) return new TinyQueue(data, compare);\n\n    this.data = data || [];\n    this.length = this.data.length;\n    this.compare = compare || defaultCompare;\n\n    if (this.length > 0) {\n        for (var i = (this.length >> 1) - 1; i >= 0; i--) this._down(i);\n    }\n}\n\nfunction defaultCompare(a, b) {\n    return a < b ? -1 : a > b ? 1 : 0;\n}\n\nTinyQueue.prototype = {\n\n    push: function (item) {\n        this.data.push(item);\n        this.length++;\n        this._up(this.length - 1);\n    },\n\n    pop: function () {\n        if (this.length === 0) return undefined;\n\n        var top = this.data[0];\n        this.length--;\n\n        if (this.length > 0) {\n            this.data[0] = this.data[this.length];\n            this._down(0);\n        }\n        this.data.pop();\n\n        return top;\n    },\n\n    peek: function () {\n        return this.data[0];\n    },\n\n    _up: function (pos) {\n        var data = this.data;\n        var compare = this.compare;\n        var item = data[pos];\n\n        while (pos > 0) {\n            var parent = (pos - 1) >> 1;\n            var current = data[parent];\n            if (compare(item, current) >= 0) break;\n            data[pos] = current;\n            pos = parent;\n        }\n\n        data[pos] = item;\n    },\n\n    _down: function (pos) {\n        var data = this.data;\n        var compare = this.compare;\n        var halfLength = this.length >> 1;\n        var item = data[pos];\n\n        while (pos < halfLength) {\n            var left = (pos << 1) + 1;\n            var right = left + 1;\n            var best = data[left];\n\n            if (right < this.length && compare(data[right], best) < 0) {\n                left = right;\n                best = data[right];\n            }\n            if (compare(best, item) >= 0) break;\n\n            data[pos] = best;\n            pos = left;\n        }\n\n        data[pos] = item;\n    }\n};\n\n},{}],4:[function(require,module,exports){\n'use strict';\n\nvar signedArea = require('./signed_area');\n// var equals = require('./equals');\n\n/**\n * @param  {SweepEvent} e1\n * @param  {SweepEvent} e2\n * @return {Number}\n */\nmodule.exports = function compareEvents(e1, e2) {\n  var p1 = e1.point;\n  var p2 = e2.point;\n\n  // Different x-coordinate\n  if (p1[0] > p2[0]) return 1;\n  if (p1[0] < p2[0]) return -1;\n\n  // Different points, but same x-coordinate\n  // Event with lower y-coordinate is processed first\n  if (p1[1] !== p2[1]) return p1[1] > p2[1] ? 1 : -1;\n\n  return specialCases(e1, e2, p1, p2);\n};\n\n\n/* eslint-disable no-unused-vars */\nfunction specialCases(e1, e2, p1, p2) {\n  // Same coordinates, but one is a left endpoint and the other is\n  // a right endpoint. The right endpoint is processed first\n  if (e1.left !== e2.left)\n    return e1.left ? 1 : -1;\n\n  // var p2 = e1.otherEvent.point, p3 = e2.otherEvent.point;\n  // var sa = (p1[0] - p3[0]) * (p2[1] - p3[1]) - (p2[0] - p3[0]) * (p1[1] - p3[1])\n  // Same coordinates, both events\n  // are left endpoints or right endpoints.\n  // not collinear\n  if (signedArea(p1, e1.otherEvent.point, e2.otherEvent.point) !== 0) {\n    // the event associate to the bottom segment is processed first\n    return (!e1.isBelow(e2.otherEvent.point)) ? 1 : -1;\n  }\n\n  return (!e1.isSubject && e2.isSubject) ? 1 : -1;\n}\n/* eslint-enable no-unused-vars */\n\n},{\"./signed_area\":16}],5:[function(require,module,exports){\n'use strict';\n\nvar signedArea    = require('./signed_area');\nvar compareEvents = require('./compare_events');\nvar equals        = require('./equals');\n\n\n/**\n * @param  {SweepEvent} le1\n * @param  {SweepEvent} le2\n * @return {Number}\n */\nmodule.exports = function compareSegments(le1, le2) {\n  if (le1 === le2) return 0;\n\n  // Segments are not collinear\n  if (signedArea(le1.point, le1.otherEvent.point, le2.point) !== 0 ||\n    signedArea(le1.point, le1.otherEvent.point, le2.otherEvent.point) !== 0) {\n\n    // If they share their left endpoint use the right endpoint to sort\n    if (equals(le1.point, le2.point)) return le1.isBelow(le2.otherEvent.point) ? -1 : 1;\n\n    // Different left endpoint: use the left endpoint to sort\n    if (le1.point[0] === le2.point[0]) return le1.point[1] < le2.point[1] ? -1 : 1;\n\n    // has the line segment associated to e1 been inserted\n    // into S after the line segment associated to e2 ?\n    if (compareEvents(le1, le2) === 1) return le2.isAbove(le1.point) ? -1 : 1;\n\n    // The line segment associated to e2 has been inserted\n    // into S after the line segment associated to e1\n    return le1.isBelow(le2.point) ? -1 : 1;\n  }\n\n  if (le1.isSubject === le2.isSubject) { // same polygon\n    var p1 = le1.point, p2 = le2.point;\n    if (p1[0] === p2[0] && p1[1] === p2[1]/*equals(le1.point, le2.point)*/) {\n      p1 = le1.otherEvent.point; p2 = le2.otherEvent.point;\n      if (p1[0] === p2[0] && p1[1] === p2[1]) return 0;\n      else return le1.contourId > le2.contourId ? 1 : -1;\n    }\n  } else { // Segments are collinear, but belong to separate polygons\n    return le1.isSubject ? -1 : 1;\n  }\n\n  return compareEvents(le1, le2) === 1 ? 1 : -1;\n};\n\n},{\"./compare_events\":4,\"./equals\":10,\"./signed_area\":16}],6:[function(require,module,exports){\n'use strict';\n\nvar edgeType = require('./edge_type');\nvar operationType = require('./operation');\n\nvar INTERSECTION = operationType.INTERSECTION;\nvar UNION        = operationType.UNION;\nvar DIFFERENCE   = operationType.DIFFERENCE;\nvar XOR          = operationType.XOR;\n\n/**\n * @param  {SweepEvent} event\n * @param  {SweepEvent} prev\n * @param  {Operation} operation\n */\nmodule.exports = function computeFields(event, prev, operation) {\n  // compute inOut and otherInOut fields\n  if (prev === null) {\n    event.inOut      = false;\n    event.otherInOut = true;\n\n  // previous line segment in sweepline belongs to the same polygon\n  } else {\n    if (event.isSubject === prev.isSubject) {\n      event.inOut      = !prev.inOut;\n      event.otherInOut = prev.otherInOut;\n\n    // previous line segment in sweepline belongs to the clipping polygon\n    } else {\n      event.inOut      = !prev.otherInOut;\n      event.otherInOut = prev.isVertical() ? !prev.inOut : prev.inOut;\n    }\n\n    // compute prevInResult field\n    if (prev) {\n      event.prevInResult = (!inResult(prev, operation) || prev.isVertical()) ?\n         prev.prevInResult : prev;\n    }\n  }\n\n  // check if the line segment belongs to the Boolean operation\n  event.inResult = inResult(event, operation);\n};\n\n\n/* eslint-disable indent */\nfunction inResult(event, operation) {\n  switch (event.type) {\n    case edgeType.NORMAL:\n      switch (operation) {\n        case INTERSECTION:\n          return !event.otherInOut;\n        case UNION:\n          return event.otherInOut;\n        case DIFFERENCE:\n          // return (event.isSubject && !event.otherInOut) ||\n          //         (!event.isSubject && event.otherInOut);\n          return (event.isSubject && event.otherInOut) ||\n                  (!event.isSubject && !event.otherInOut);\n        case XOR:\n          return true;\n      }\n      break;\n    case edgeType.SAME_TRANSITION:\n      return operation === INTERSECTION || operation === UNION;\n    case edgeType.DIFFERENT_TRANSITION:\n      return operation === DIFFERENCE;\n    case edgeType.NON_CONTRIBUTING:\n      return false;\n  }\n  return false;\n}\n/* eslint-enable indent */\n\n},{\"./edge_type\":9,\"./operation\":13}],7:[function(require,module,exports){\n'use strict';\n\n// var equals = require('./equals');\nvar compareEvents = require('./compare_events');\nvar operationType = require('./operation');\n\n/**\n * @param  {Array.<SweepEvent>} sortedEvents\n * @return {Array.<SweepEvent>}\n */\nfunction orderEvents(sortedEvents) {\n  var event, i, len, tmp;\n  var resultEvents = [];\n  for (i = 0, len = sortedEvents.length; i < len; i++) {\n    event = sortedEvents[i];\n    if ((event.left && event.inResult) ||\n      (!event.left && event.otherEvent.inResult)) {\n      resultEvents.push(event);\n    }\n  }\n  // Due to overlapping edges the resultEvents array can be not wholly sorted\n  var sorted = false;\n  while (!sorted) {\n    sorted = true;\n    for (i = 0, len = resultEvents.length; i < len; i++) {\n      if ((i + 1) < len &&\n        compareEvents(resultEvents[i], resultEvents[i + 1]) === 1) {\n        tmp = resultEvents[i];\n        resultEvents[i] = resultEvents[i + 1];\n        resultEvents[i + 1] = tmp;\n        sorted = false;\n      }\n    }\n  }\n\n  for (i = 0, len = resultEvents.length; i < len; i++) {\n    event = resultEvents[i];\n    event.pos = i;\n\n    if (!event.left) {\n      tmp = event.pos;\n      event.pos = event.otherEvent.pos;\n      event.otherEvent.pos = tmp;\n    }\n  }\n\n  return resultEvents;\n}\n\n\n/**\n * @param  {Number} pos\n * @param  {Array.<SweepEvent>} resultEvents\n * @param  {Object>}    processed\n * @return {Number}\n */\nfunction nextPos(pos, resultEvents, processed, origIndex) {\n  var newPos = pos + 1;\n  var length = resultEvents.length;\n  if (newPos > length - 1) return pos - 1;\n  var p  = resultEvents[pos].point;\n  var p1 = resultEvents[newPos].point;\n\n\n  // while in range and not the current one by value\n  while (newPos < length && p1[0] === p[0] && p1[1] === p[1]) {\n    if (!processed[newPos]) {\n      return newPos;\n    } else   {\n      newPos++;\n    }\n    p1 = resultEvents[newPos].point;\n  }\n\n  newPos = pos - 1;\n\n  while (processed[newPos] && newPos >= origIndex) {\n    newPos--;\n  }\n  return newPos;\n}\n\n\n/**\n * @param  {Array.<SweepEvent>} sortedEvents\n * @return {Array.<*>} polygons\n */\nmodule.exports = function connectEdges(sortedEvents, operation) {\n  var i, len;\n  var resultEvents = orderEvents(sortedEvents);\n\n  // \"false\"-filled array\n  var processed = {};\n  var result = [];\n  var event;\n\n  for (i = 0, len = resultEvents.length; i < len; i++) {\n    if (processed[i]) continue;\n    var contour = [[]];\n\n    if (!resultEvents[i].isExteriorRing) {\n      if (operation === operationType.DIFFERENCE && !resultEvents[i].isSubject && result.length === 0) {\n        result.push(contour);\n      } else if (result.length === 0) {\n        result.push([[contour]]);\n      } else {\n        result[result.length - 1].push(contour[0]);\n      }\n    } else if (operation === operationType.DIFFERENCE && !resultEvents[i].isSubject && result.length > 1) {\n      result[result.length - 1].push(contour[0]);\n    } else {\n      result.push(contour);\n    }\n\n    var ringId = result.length - 1;\n    var pos = i;\n\n    var initial = resultEvents[i].point;\n    contour[0].push(initial);\n\n    while (pos >= i) {\n      event = resultEvents[pos];\n      processed[pos] = true;\n\n      if (event.left) {\n        event.resultInOut = false;\n        event.contourId   = ringId;\n      } else {\n        event.otherEvent.resultInOut = true;\n        event.otherEvent.contourId   = ringId;\n      }\n\n      pos = event.pos;\n      processed[pos] = true;\n      contour[0].push(resultEvents[pos].point);\n      pos = nextPos(pos, resultEvents, processed, i);\n    }\n\n    pos = pos === -1 ? i : pos;\n\n    event = resultEvents[pos];\n    processed[pos] = processed[event.pos] = true;\n    event.otherEvent.resultInOut = true;\n    event.otherEvent.contourId   = ringId;\n  }\n\n  // for (i = 0, len = result.length; i < len; i++) {\n  //   var polygon = result[i];\n  //   for (var j = 0, jj = polygon.length; j < jj; j++) {\n  //     var polygonContour = polygon[j];\n  //     for (var k = 0, kk = polygonContour.length; k < kk; k++) {\n  //       var coords = polygonContour[k];\n  //       if (typeof coords[0] !== 'number') {\n  //         polygon.splice(j, 1);\n  //         polygon.push(coords);\n  //       }\n  //     }\n  //   }\n  // }\n\n  // Handle if the result is a polygon (eg not multipoly)\n  // Commented it again, let's see what do we mean by that\n  // if (result.length === 1) result = result[0];\n  return result;\n};\n\n},{\"./compare_events\":4,\"./operation\":13}],8:[function(require,module,exports){\n'use strict';\n\nvar SweepEvent    = require('./sweep_event');\nvar equals        = require('./equals');\nvar compareEvents = require('./compare_events');\n\n/**\n * @param  {SweepEvent} se\n * @param  {Array.<Number>} p\n * @param  {Queue} queue\n * @return {Queue}\n */\nmodule.exports = function divideSegment(se, p, queue)  {\n  var r = new SweepEvent(p, false, se,            se.isSubject);\n  var l = new SweepEvent(p, true,  se.otherEvent, se.isSubject);\n\n  if (equals(se.point, se.otherEvent.point)) {\n    console.warn('what is that, a collapsed segment?', se);\n  }\n\n  r.contourId = l.contourId = se.contourId;\n\n  // avoid a rounding error. The left event would be processed after the right event\n  if (compareEvents(l, se.otherEvent) > 0) {\n    se.otherEvent.left = true;\n    l.left = false;\n  }\n\n  // avoid a rounding error. The left event would be processed after the right event\n  // if (compareEvents(se, r) > 0) {}\n\n  se.otherEvent.otherEvent = l;\n  se.otherEvent = r;\n\n  queue.push(l);\n  queue.push(r);\n\n  return queue;\n};\n\n},{\"./compare_events\":4,\"./equals\":10,\"./sweep_event\":18}],9:[function(require,module,exports){\n'use strict';\n\nmodule.exports = {\n  NORMAL:               0,\n  NON_CONTRIBUTING:     1,\n  SAME_TRANSITION:      2,\n  DIFFERENT_TRANSITION: 3\n};\n\n},{}],10:[function(require,module,exports){\n'use strict';\n\n// var EPSILON = 1e-9;\n// var abs = Math.abs;\n\nmodule.exports = function equals(p1, p2) {\n  if (p1[0] === p2[0]) {\n    if (p1[1] === p2[1]) {\n      return true;\n    } else {\n      return false;\n    }\n  }\n  return false;\n};\n\n// TODO https://github.com/w8r/martinez/issues/6#issuecomment-262847164\n// Precision problem.\n//\n// module.exports = function equals(p1, p2) {\n//   return abs(p1[0] - p2[0]) <= EPSILON && abs(p1[1] - p2[1]) <= EPSILON;\n// };\n\n},{}],11:[function(require,module,exports){\n'use strict';\n\nvar Queue           = require('tinyqueue');\nvar SweepEvent      = require('./sweep_event');\nvar compareEvents   = require('./compare_events');\nvar operations      = require('./operation');\n\nvar max = Math.max;\nvar min = Math.min;\n\nvar contourId = 0;\n\n\nfunction processPolygon(contourOrHole, isSubject, depth, Q, bbox, isExteriorRing) {\n  var i, len, s1, s2, e1, e2;\n  for (i = 0, len = contourOrHole.length - 1; i < len; i++) {\n    s1 = contourOrHole[i];\n    s2 = contourOrHole[i + 1];\n    e1 = new SweepEvent(s1, false, undefined, isSubject);\n    e2 = new SweepEvent(s2, false, e1,        isSubject);\n    e1.otherEvent = e2;\n\n    if (s1[0] === s2[0] && s1[1] === s2[1]) {\n      continue; // skip collapsed edges, or it breaks\n    }\n\n    e1.contourId = e2.contourId = depth;\n    if (!isExteriorRing) {\n      e1.isExteriorRing = false;\n      e2.isExteriorRing = false;\n    }\n    if (compareEvents(e1, e2) > 0) {\n      e2.left = true;\n    } else {\n      e1.left = true;\n    }\n\n    var x = s1[0], y = s1[1];\n    bbox[0] = min(bbox[0], x);\n    bbox[1] = min(bbox[1], y);\n    bbox[2] = max(bbox[2], x);\n    bbox[3] = max(bbox[3], y);\n\n    // Pushing it so the queue is sorted from left to right,\n    // with object on the left having the highest priority.\n    Q.push(e1);\n    Q.push(e2);\n  }\n}\n\n\nmodule.exports = function fillQueue(subject, clipping, sbbox, cbbox, operation) {\n  var eventQueue = new Queue(null, compareEvents);\n  var polygonSet, isExteriorRing, i, ii, j, jj; //, k, kk;\n\n  for (i = 0, ii = subject.length; i < ii; i++) {\n    polygonSet = subject[i];\n    for (j = 0, jj = polygonSet.length; j < jj; j++) {\n      isExteriorRing = j === 0;\n      if (isExteriorRing) contourId++;\n      processPolygon(polygonSet[j], true, contourId, eventQueue, sbbox, isExteriorRing);\n    }\n  }\n\n  for (i = 0, ii = clipping.length; i < ii; i++) {\n    polygonSet = clipping[i];\n    for (j = 0, jj = polygonSet.length; j < jj; j++) {\n      isExteriorRing = j === 0;\n      if (operation === operations.DIFFERENCE) isExteriorRing = false;\n      if (isExteriorRing) contourId++;\n      processPolygon(polygonSet[j], false, contourId, eventQueue, cbbox, isExteriorRing);\n    }\n  }\n\n  return eventQueue;\n};\n\n},{\"./compare_events\":4,\"./operation\":13,\"./sweep_event\":18,\"tinyqueue\":3}],12:[function(require,module,exports){\n'use strict';\n\nvar subdivideSegments = require('./subdivide_segments');\nvar connectEdges      = require('./connect_edges');\nvar fillQueue         = require('./fill_queue');\nvar operations        = require('./operation');\n\nvar EMPTY = [];\n\n\nfunction trivialOperation(subject, clipping, operation) {\n  var result = null;\n  if (subject.length * clipping.length === 0) {\n    if        (operation === operations.INTERSECTION) {\n      result = EMPTY;\n    } else if (operation === operations.DIFFERENCE) {\n      result = subject;\n    } else if (operation === operations.UNION ||\n               operation === operations.XOR) {\n      result = (subject.length === 0) ? clipping : subject;\n    }\n  }\n  return result;\n}\n\n\nfunction compareBBoxes(subject, clipping, sbbox, cbbox, operation) {\n  var result = null;\n  if (sbbox[0] > cbbox[2] ||\n      cbbox[0] > sbbox[2] ||\n      sbbox[1] > cbbox[3] ||\n      cbbox[1] > sbbox[3]) {\n    if        (operation === operations.INTERSECTION) {\n      result = EMPTY;\n    } else if (operation === operations.DIFFERENCE) {\n      result = subject;\n    } else if (operation === operations.UNION ||\n               operation === operations.XOR) {\n      result = subject.concat(clipping);\n    }\n  }\n  return result;\n}\n\n\nfunction boolean(subject, clipping, operation) {\n  if (typeof subject[0][0][0] === 'number') {\n    subject = [subject];\n  }\n  if (typeof clipping[0][0][0] === 'number') {\n    clipping = [clipping];\n  }\n  var trivial = trivialOperation(subject, clipping, operation);\n  if (trivial) {\n    return trivial === EMPTY ? null : trivial;\n  }\n  var sbbox = [Infinity, Infinity, -Infinity, -Infinity];\n  var cbbox = [Infinity, Infinity, -Infinity, -Infinity];\n\n  //console.time('fill queue');\n  var eventQueue = fillQueue(subject, clipping, sbbox, cbbox, operation);\n  //console.timeEnd('fill queue');\n\n  trivial = compareBBoxes(subject, clipping, sbbox, cbbox, operation);\n  if (trivial) {\n    return trivial === EMPTY ? null : trivial;\n  }\n  //console.time('subdivide edges');\n  var sortedEvents = subdivideSegments(eventQueue, subject, clipping, sbbox, cbbox, operation);\n  //console.timeEnd('subdivide edges');\n\n  //console.time('connect vertices');\n  var result = connectEdges(sortedEvents, operation);\n  //console.timeEnd('connect vertices');\n  return result;\n}\n\nboolean.union = function (subject, clipping) {\n  return boolean(subject, clipping, operations.UNION);\n};\n\n\nboolean.diff = function (subject, clipping) {\n  return boolean(subject, clipping, operations.DIFFERENCE);\n};\n\n\nboolean.xor = function (subject, clipping) {\n  return boolean(subject, clipping, operations.XOR);\n};\n\n\nboolean.intersection = function (subject, clipping) {\n  return boolean(subject, clipping, operations.INTERSECTION);\n};\n\n\n/**\n * @enum {Number}\n */\nboolean.operations = operations;\n\n\nmodule.exports = boolean;\nmodule.exports.default = boolean;\n\n},{\"./connect_edges\":7,\"./fill_queue\":11,\"./operation\":13,\"./subdivide_segments\":17}],13:[function(require,module,exports){\n'use strict';\n\nmodule.exports = {\n  INTERSECTION: 0,\n  UNION:        1,\n  DIFFERENCE:   2,\n  XOR:          3\n};\n\n},{}],14:[function(require,module,exports){\n'use strict';\n\nvar divideSegment = require('./divide_segment');\nvar intersection  = require('./segment_intersection');\nvar equals        = require('./equals');\nvar compareEvents = require('./compare_events');\nvar edgeType      = require('./edge_type');\n\n/**\n * @param  {SweepEvent} se1\n * @param  {SweepEvent} se2\n * @param  {Queue}      queue\n * @return {Number}\n */\nmodule.exports = function possibleIntersection(se1, se2, queue) {\n  // that disallows self-intersecting polygons,\n  // did cost us half a day, so I'll leave it\n  // out of respect\n  // if (se1.isSubject === se2.isSubject) return;\n  var inter = intersection(\n    se1.point, se1.otherEvent.point,\n    se2.point, se2.otherEvent.point\n  );\n\n  var nintersections = inter ? inter.length : 0;\n  if (nintersections === 0) return 0; // no intersection\n\n  // the line segments intersect at an endpoint of both line segments\n  if ((nintersections === 1) &&\n      (equals(se1.point, se2.point) ||\n       equals(se1.otherEvent.point, se2.otherEvent.point))) {\n    return 0;\n  }\n\n  if (nintersections === 2 && se1.isSubject === se2.isSubject) {\n    // if(se1.contourId === se2.contourId){\n    // console.warn('Edges of the same polygon overlap',\n    //   se1.point, se1.otherEvent.point, se2.point, se2.otherEvent.point);\n    // }\n    //throw new Error('Edges of the same polygon overlap');\n    return 0;\n  }\n\n  // The line segments associated to se1 and se2 intersect\n  if (nintersections === 1) {\n\n    // if the intersection point is not an endpoint of se1\n    if (!equals(se1.point, inter[0]) && !equals(se1.otherEvent.point, inter[0])) {\n      divideSegment(se1, inter[0], queue);\n    }\n\n    // if the intersection point is not an endpoint of se2\n    if (!equals(se2.point, inter[0]) && !equals(se2.otherEvent.point, inter[0])) {\n      divideSegment(se2, inter[0], queue);\n    }\n    return 1;\n  }\n\n  // The line segments associated to se1 and se2 overlap\n  var events        = [];\n  var leftCoincide  = false;\n  var rightCoincide = false;\n\n  if (equals(se1.point, se2.point)) {\n    leftCoincide = true; // linked\n  } else if (compareEvents(se1, se2) === 1) {\n    events.push(se2, se1);\n  } else {\n    events.push(se1, se2);\n  }\n\n  if (equals(se1.otherEvent.point, se2.otherEvent.point)) {\n    rightCoincide = true;\n  } else if (compareEvents(se1.otherEvent, se2.otherEvent) === 1) {\n    events.push(se2.otherEvent, se1.otherEvent);\n  } else {\n    events.push(se1.otherEvent, se2.otherEvent);\n  }\n\n  if ((leftCoincide && rightCoincide) || leftCoincide) {\n    // both line segments are equal or share the left endpoint\n    se2.type = edgeType.NON_CONTRIBUTING;\n    se1.type = (se2.inOut === se1.inOut) ?\n      edgeType.SAME_TRANSITION :\n      edgeType.DIFFERENT_TRANSITION;\n\n    if (leftCoincide && !rightCoincide) {\n      // honestly no idea, but changing events selection from [2, 1]\n      // to [0, 1] fixes the overlapping self-intersecting polygons issue\n      divideSegment(events[1].otherEvent, events[0].point, queue);\n    }\n    return 2;\n  }\n\n  // the line segments share the right endpoint\n  if (rightCoincide) {\n    divideSegment(events[0], events[1].point, queue);\n    return 3;\n  }\n\n  // no line segment includes totally the other one\n  if (events[0] !== events[3].otherEvent) {\n    divideSegment(events[0], events[1].point, queue);\n    divideSegment(events[1], events[2].point, queue);\n    return 3;\n  }\n\n  // one line segment includes the other one\n  divideSegment(events[0], events[1].point, queue);\n  divideSegment(events[3].otherEvent, events[2].point, queue);\n\n  return 3;\n};\n\n},{\"./compare_events\":4,\"./divide_segment\":8,\"./edge_type\":9,\"./equals\":10,\"./segment_intersection\":15}],15:[function(require,module,exports){\n'use strict';\n\nvar EPSILON = 1e-9;\n\n/**\n * Finds the magnitude of the cross product of two vectors (if we pretend\n * they're in three dimensions)\n *\n * @param {Object} a First vector\n * @param {Object} b Second vector\n * @private\n * @returns {Number} The magnitude of the cross product\n */\nfunction crossProduct(a, b) {\n  return a[0] * b[1] - a[1] * b[0];\n}\n\n/**\n * Finds the dot product of two vectors.\n *\n * @param {Object} a First vector\n * @param {Object} b Second vector\n * @private\n * @returns {Number} The dot product\n */\nfunction dotProduct(a, b) {\n  return a[0] * b[0] + a[1] * b[1];\n}\n\n/**\n * Finds the intersection (if any) between two line segments a and b, given the\n * line segments' end points a1, a2 and b1, b2.\n *\n * This algorithm is based on Schneider and Eberly.\n * http://www.cimec.org.ar/~ncalvo/Schneider_Eberly.pdf\n * Page 244.\n *\n * @param {Array.<Number>} a1 point of first line\n * @param {Array.<Number>} a2 point of first line\n * @param {Array.<Number>} b1 point of second line\n * @param {Array.<Number>} b2 point of second line\n * @param {Boolean=}       noEndpointTouch whether to skip single touchpoints\n *                                         (meaning connected segments) as\n *                                         intersections\n * @returns {Array.<Array.<Number>>|Null} If the lines intersect, the point of\n * intersection. If they overlap, the two end points of the overlapping segment.\n * Otherwise, null.\n */\nmodule.exports = function (a1, a2, b1, b2, noEndpointTouch) {\n  // The algorithm expects our lines in the form P + sd, where P is a point,\n  // s is on the interval [0, 1], and d is a vector.\n  // We are passed two points. P can be the first point of each pair. The\n  // vector, then, could be thought of as the distance (in x and y components)\n  // from the first point to the second point.\n  // So first, let's make our vectors:\n  var va = [a2[0] - a1[0], a2[1] - a1[1]];\n  var vb = [b2[0] - b1[0], b2[1] - b1[1]];\n  // We also define a function to convert back to regular point form:\n\n  /* eslint-disable arrow-body-style */\n\n  function toPoint(p, s, d) {\n    return [\n      p[0] + s * d[0],\n      p[1] + s * d[1]\n    ];\n  }\n\n  /* eslint-enable arrow-body-style */\n\n  // The rest is pretty much a straight port of the algorithm.\n  var e = [b1[0] - a1[0], b1[1] - a1[1]];\n  var kross    = crossProduct(va, vb);\n  var sqrKross = kross * kross;\n  var sqrLenA  = dotProduct(va, va);\n  var sqrLenB  = dotProduct(vb, vb);\n\n  // Check for line intersection. This works because of the properties of the\n  // cross product -- specifically, two vectors are parallel if and only if the\n  // cross product is the 0 vector. The full calculation involves relative error\n  // to account for possible very small line segments. See Schneider & Eberly\n  // for details.\n  if (sqrKross > EPSILON * sqrLenA * sqrLenB) {\n    // If they're not parallel, then (because these are line segments) they\n    // still might not actually intersect. This code checks that the\n    // intersection point of the lines is actually on both line segments.\n    var s = crossProduct(e, vb) / kross;\n    if (s < 0 || s > 1) {\n      // not on line segment a\n      return null;\n    }\n    var t = crossProduct(e, va) / kross;\n    if (t < 0 || t > 1) {\n      // not on line segment b\n      return null;\n    }\n    return noEndpointTouch ? null : [toPoint(a1, s, va)];\n  }\n\n  // If we've reached this point, then the lines are either parallel or the\n  // same, but the segments could overlap partially or fully, or not at all.\n  // So we need to find the overlap, if any. To do that, we can use e, which is\n  // the (vector) difference between the two initial points. If this is parallel\n  // with the line itself, then the two lines are the same line, and there will\n  // be overlap.\n  var sqrLenE = dotProduct(e, e);\n  kross = crossProduct(e, va);\n  sqrKross = kross * kross;\n\n  if (sqrKross > EPSILON * sqrLenA * sqrLenE) {\n    // Lines are just parallel, not the same. No overlap.\n    return null;\n  }\n\n  var sa = dotProduct(va, e) / sqrLenA;\n  var sb = sa + dotProduct(va, vb) / sqrLenA;\n  var smin = Math.min(sa, sb);\n  var smax = Math.max(sa, sb);\n\n  // this is, essentially, the FindIntersection acting on floats from\n  // Schneider & Eberly, just inlined into this function.\n  if (smin <= 1 && smax >= 0) {\n\n    // overlap on an end point\n    if (smin === 1) {\n      return noEndpointTouch ? null : [toPoint(a1, smin > 0 ? smin : 0, va)];\n    }\n\n    if (smax === 0) {\n      return noEndpointTouch ? null : [toPoint(a1, smax < 1 ? smax : 1, va)];\n    }\n\n    if (noEndpointTouch && smin === 0 && smax === 1) return null;\n\n    // There's overlap on a segment -- two points of intersection. Return both.\n    return [\n      toPoint(a1, smin > 0 ? smin : 0, va),\n      toPoint(a1, smax < 1 ? smax : 1, va),\n    ];\n  }\n\n  return null;\n};\n\n},{}],16:[function(require,module,exports){\n'use strict';\n\n/**\n * Signed area of the triangle (p0, p1, p2)\n * @param  {Array.<Number>} p0\n * @param  {Array.<Number>} p1\n * @param  {Array.<Number>} p2\n * @return {Number}\n */\nmodule.exports = function signedArea(p0, p1, p2) {\n  return (p0[0] - p2[0]) * (p1[1] - p2[1]) - (p1[0] - p2[0]) * (p0[1] - p2[1]);\n};\n\n},{}],17:[function(require,module,exports){\n'use strict';\n\nvar Tree                 = require('avl');\nvar computeFields        = require('./compute_fields');\nvar possibleIntersection = require('./possible_intersection');\nvar compareSegments      = require('./compare_segments');\nvar operations           = require('./operation');\n\n\nmodule.exports = function subdivide(eventQueue, subject, clipping, sbbox, cbbox, operation) {\n  var sweepLine = new Tree(compareSegments);\n  var sortedEvents = [];\n\n  var rightbound = Math.min(sbbox[2], cbbox[2]);\n\n  var prev, next, begin;\n\n  var INTERSECTION = operations.INTERSECTION;\n  var DIFFERENCE   = operations.DIFFERENCE;\n\n  while (eventQueue.length) {\n    var event = eventQueue.pop();\n    sortedEvents.push(event);\n\n    // optimization by bboxes for intersection and difference goes here\n    if ((operation === INTERSECTION && event.point[0] > rightbound) ||\n        (operation === DIFFERENCE   && event.point[0] > sbbox[2])) {\n      break;\n    }\n\n    if (event.left) {\n      next  = prev = sweepLine.insert(event);\n      begin = sweepLine.minNode();\n\n      if (prev !== begin) prev = sweepLine.prev(prev);\n      else                prev = null;\n\n      next = sweepLine.next(next);\n\n      var prevEvent = prev ? prev.key : null;\n      var prevprevEvent;\n      computeFields(event, prevEvent, operation);\n      if (next) {\n        if (possibleIntersection(event, next.key, eventQueue) === 2) {\n          computeFields(event, prevEvent, operation);\n          computeFields(event, next.key, operation);\n        }\n      }\n\n      if (prev) {\n        if (possibleIntersection(prev.key, event, eventQueue) === 2) {\n          var prevprev = prev;\n          if (prevprev !== begin) prevprev = sweepLine.prev(prevprev);\n          else                    prevprev = null;\n\n          prevprevEvent = prevprev ? prevprev.key : null;\n          computeFields(prevEvent, prevprevEvent, operation);\n          computeFields(event,     prevEvent,     operation);\n        }\n      }\n    } else {\n      event = event.otherEvent;\n      next = prev = sweepLine.find(event);\n\n      if (prev && next) {\n\n        if (prev !== begin) prev = sweepLine.prev(prev);\n        else                prev = null;\n\n        next = sweepLine.next(next);\n        sweepLine.remove(event);\n\n        if (next && prev) {\n          possibleIntersection(prev.key, next.key, eventQueue);\n        }\n      }\n    }\n  }\n  return sortedEvents;\n};\n\n},{\"./compare_segments\":5,\"./compute_fields\":6,\"./operation\":13,\"./possible_intersection\":14,\"avl\":2}],18:[function(require,module,exports){\n'use strict';\n\n//var signedArea = require('./signed_area');\nvar EdgeType   = require('./edge_type');\n\n/**\n * Sweepline event\n *\n * @class {SweepEvent}\n * @param {Array.<Number>}  point\n * @param {Boolean}         left\n * @param {SweepEvent=}     otherEvent\n * @param {Boolean}         isSubject\n * @param {Number}          edgeType\n */\nfunction SweepEvent(point, left, otherEvent, isSubject, edgeType) {\n\n  /**\n   * Is left endpoint?\n   * @type {Boolean}\n   */\n  this.left = left;\n\n  /**\n   * @type {Array.<Number>}\n   */\n  this.point = point;\n\n  /**\n   * Other edge reference\n   * @type {SweepEvent}\n   */\n  this.otherEvent = otherEvent;\n\n  /**\n   * Belongs to source or clipping polygon\n   * @type {Boolean}\n   */\n  this.isSubject = isSubject;\n\n  /**\n   * Edge contribution type\n   * @type {Number}\n   */\n  this.type = edgeType || EdgeType.NORMAL;\n\n\n  /**\n   * In-out transition for the sweepline crossing polygon\n   * @type {Boolean}\n   */\n  this.inOut = false;\n\n\n  /**\n   * @type {Boolean}\n   */\n  this.otherInOut = false;\n\n  /**\n   * Previous event in result?\n   * @type {SweepEvent}\n   */\n  this.prevInResult = null;\n\n  /**\n   * Does event belong to result?\n   * @type {Boolean}\n   */\n  this.inResult = false;\n\n\n  // connection step\n\n  /**\n   * @type {Boolean}\n   */\n  this.resultInOut = false;\n\n  this.isExteriorRing = true;\n}\n\n\nSweepEvent.prototype = {\n\n  /**\n   * @param  {Array.<Number>}  p\n   * @return {Boolean}\n   */\n  isBelow: function (p) {\n    var p0 = this.point, p1 = this.otherEvent.point;\n    return this.left ?\n      (p0[0] - p[0]) * (p1[1] - p[1]) - (p1[0] - p[0]) * (p0[1] - p[1]) > 0 :\n      // signedArea(this.point, this.otherEvent.point, p) > 0 :\n      (p1[0] - p[0]) * (p0[1] - p[1]) - (p0[0] - p[0]) * (p1[1] - p[1]) > 0;\n      //signedArea(this.otherEvent.point, this.point, p) > 0;\n  },\n\n\n  /**\n   * @param  {Array.<Number>}  p\n   * @return {Boolean}\n   */\n  isAbove: function (p) {\n    return !this.isBelow(p);\n  },\n\n\n  /**\n   * @return {Boolean}\n   */\n  isVertical: function () {\n    return this.point[0] === this.otherEvent.point[0];\n  },\n\n\n  clone: function () {\n    var copy = new SweepEvent(\n      this.point, this.left, this.otherEvent, this.isSubject, this.type);\n\n    copy.inResult       = this.inResult;\n    copy.prevInResult   = this.prevInResult;\n    copy.isExteriorRing = this.isExteriorRing;\n    copy.inOut          = this.inOut;\n    copy.otherInOut     = this.otherInOut;\n\n    return copy;\n  }\n};\n\nmodule.exports = SweepEvent;\n\n},{\"./edge_type\":9}]},{},[1])(1)\n});","function DEFAULT_COMPARE (a, b) { return a > b ? 1 : a < b ? -1 : 0; }\n\nexport default class SplayTree {\n\n  constructor(compare = DEFAULT_COMPARE, noDuplicates = false) {\n    this._compare = compare;\n    this._root = null;\n    this._size = 0;\n    this._noDuplicates = !!noDuplicates;\n  }\n\n\n  rotateLeft(x) {\n    var y = x.right;\n    if (y) {\n      x.right = y.left;\n      if (y.left) y.left.parent = x;\n      y.parent = x.parent;\n    }\n\n    if (!x.parent)                this._root = y;\n    else if (x === x.parent.left) x.parent.left = y;\n    else                          x.parent.right = y;\n    if (y) y.left = x;\n    x.parent = y;\n  }\n\n\n  rotateRight(x) {\n    var y = x.left;\n    if (y) {\n      x.left = y.right;\n      if (y.right) y.right.parent = x;\n      y.parent = x.parent;\n    }\n\n    if (!x.parent)               this._root = y;\n    else if(x === x.parent.left) x.parent.left = y;\n    else                         x.parent.right = y;\n    if (y) y.right = x;\n    x.parent = y;\n  }\n\n\n  _splay(x) {\n    while (x.parent) {\n      var p = x.parent;\n      if (!p.parent) {\n        if (p.left === x) this.rotateRight(p);\n        else              this.rotateLeft(p);\n      } else if (p.left === x && p.parent.left === p) {\n        this.rotateRight(p.parent);\n        this.rotateRight(p);\n      } else if (p.right === x && p.parent.right === p) {\n        this.rotateLeft(p.parent);\n        this.rotateLeft(p);\n      } else if (p.left === x && p.parent.right === p) {\n        this.rotateRight(p);\n        this.rotateLeft(p);\n      } else {\n        this.rotateLeft(p);\n        this.rotateRight(p);\n      }\n    }\n  }\n\n\n  splay(x) {\n    var p, gp, ggp, l, r;\n\n    while (x.parent) {\n      p = x.parent;\n      gp = p.parent;\n\n      if (gp && gp.parent) {\n        ggp = gp.parent;\n        if (ggp.left === gp) ggp.left  = x;\n        else                 ggp.right = x;\n        x.parent = ggp;\n      } else {\n        x.parent = null;\n        this._root = x;\n      }\n\n      l = x.left; r = x.right;\n\n      if (x === p.left) { // left\n        if (gp) {\n          if (gp.left === p) {\n            /* zig-zig */\n            if (p.right) {\n              gp.left = p.right;\n              gp.left.parent = gp;\n            } else gp.left = null;\n\n            p.right   = gp;\n            gp.parent = p;\n          } else {\n            /* zig-zag */\n            if (l) {\n              gp.right = l;\n              l.parent = gp;\n            } else gp.right = null;\n\n            x.left    = gp;\n            gp.parent = x;\n          }\n        }\n        if (r) {\n          p.left = r;\n          r.parent = p;\n        } else p.left = null;\n\n        x.right  = p;\n        p.parent = x;\n      } else { // right\n        if (gp) {\n          if (gp.right === p) {\n            /* zig-zig */\n            if (p.left) {\n              gp.right = p.left;\n              gp.right.parent = gp;\n            } else gp.right = null;\n\n            p.left = gp;\n            gp.parent = p;\n          } else {\n            /* zig-zag */\n            if (r) {\n              gp.left = r;\n              r.parent = gp;\n            } else gp.left = null;\n\n            x.right   = gp;\n            gp.parent = x;\n          }\n        }\n        if (l) {\n          p.right = l;\n          l.parent = p;\n        } else p.right = null;\n\n        x.left   = p;\n        p.parent = x;\n      }\n    }\n  }\n\n\n  replace(u, v) {\n    if (!u.parent) this._root = v;\n    else if (u === u.parent.left) u.parent.left = v;\n    else u.parent.right = v;\n    if (v) v.parent = u.parent;\n  }\n\n\n  minNode(u = this._root) {\n    if (u) while (u.left) u = u.left;\n    return u;\n  }\n\n\n  maxNode(u = this._root) {\n    if (u) while (u.right) u = u.right;\n    return u;\n  }\n\n\n  insert(key, data) {\n    var z = this._root;\n    var p = null;\n    var comp = this._compare;\n    var cmp;\n\n    if (this._noDuplicates) {\n      while (z) {\n        p = z;\n        cmp = comp(z.key, key);\n        if (cmp === 0) return;\n        else if (comp(z.key, key) < 0) z = z.right;\n        else z = z.left;\n      }\n    } else {\n      while (z) {\n        p = z;\n        if (comp(z.key, key) < 0) z = z.right;\n        else z = z.left;\n      }\n    }\n\n    z = { key, data, left: null, right: null, parent: p };\n\n    if (!p)                          this._root = z;\n    else if (comp(p.key, z.key) < 0) p.right = z;\n    else                             p.left  = z;\n\n    this.splay(z);\n    this._size++;\n    return z;\n  }\n\n\n  find (key) {\n    var z    = this._root;\n    var comp = this._compare;\n    while (z) {\n      var cmp = comp(z.key, key);\n      if      (cmp < 0) z = z.right;\n      else if (cmp > 0) z = z.left;\n      else              return z;\n    }\n    return null;\n  }\n\n  /**\n   * Whether the tree contains a node with the given key\n   * @param  {Key} key\n   * @return {boolean} true/false\n   */\n  contains (key) {\n    var node       = this._root;\n    var comparator = this._compare;\n    while (node)  {\n      var cmp = comparator(key, node.key);\n      if      (cmp === 0) return true;\n      else if (cmp < 0)   node = node.left;\n      else                node = node.right;\n    }\n\n    return false;\n  }\n\n\n  remove (key) {\n    var z = this.find(key);\n\n    if (!z) return false;\n\n    this.splay(z);\n\n    if (!z.left) this.replace(z, z.right);\n    else if (!z.right) this.replace(z, z.left);\n    else {\n      var y = this.minNode(z.right);\n      if (y.parent !== z) {\n        this.replace(y, y.right);\n        y.right = z.right;\n        y.right.parent = y;\n      }\n      this.replace(z, y);\n      y.left = z.left;\n      y.left.parent = y;\n    }\n\n    this._size--;\n    return true;\n  }\n\n\n  removeNode(z) {\n    if (!z) return false;\n\n    this.splay(z);\n\n    if (!z.left) this.replace(z, z.right);\n    else if (!z.right) this.replace(z, z.left);\n    else {\n      var y = this.minNode(z.right);\n      if (y.parent !== z) {\n        this.replace(y, y.right);\n        y.right = z.right;\n        y.right.parent = y;\n      }\n      this.replace(z, y);\n      y.left = z.left;\n      y.left.parent = y;\n    }\n\n    this._size--;\n    return true;\n  }\n\n\n  erase (key) {\n    var z = this.find(key);\n    if (!z) return;\n\n    this.splay(z);\n\n    var s = z.left;\n    var t = z.right;\n\n    var sMax = null;\n    if (s) {\n      s.parent = null;\n      sMax = this.maxNode(s);\n      this.splay(sMax);\n      this._root = sMax;\n    }\n    if (t) {\n      if (s) sMax.right = t;\n      else   this._root = t;\n      t.parent = sMax;\n    }\n\n    this._size--;\n  }\n\n  /**\n   * Removes and returns the node with smallest key\n   * @return {?Node}\n   */\n  pop () {\n    var node = this._root, returnValue = null;\n    if (node) {\n      while (node.left) node = node.left;\n      returnValue = { key: node.key, data: node.data };\n      this.remove(node.key);\n    }\n    return returnValue;\n  }\n\n\n  /* eslint-disable class-methods-use-this */\n\n  /**\n   * Successor node\n   * @param  {Node} node\n   * @return {?Node}\n   */\n  next (node) {\n    var successor = node;\n    if (successor) {\n      if (successor.right) {\n        successor = successor.right;\n        while (successor && successor.left) successor = successor.left;\n      } else {\n        successor = node.parent;\n        while (successor && successor.right === node) {\n          node = successor; successor = successor.parent;\n        }\n      }\n    }\n    return successor;\n  }\n\n\n  /**\n   * Predecessor node\n   * @param  {Node} node\n   * @return {?Node}\n   */\n  prev (node) {\n    var predecessor = node;\n    if (predecessor) {\n      if (predecessor.left) {\n        predecessor = predecessor.left;\n        while (predecessor && predecessor.right) predecessor = predecessor.right;\n      } else {\n        predecessor = node.parent;\n        while (predecessor && predecessor.left === node) {\n          node = predecessor;\n          predecessor = predecessor.parent;\n        }\n      }\n    }\n    return predecessor;\n  }\n  /* eslint-enable class-methods-use-this */\n\n\n  /**\n   * @param  {forEachCallback} callback\n   * @return {AVLTree}\n   */\n  forEach(callback) {\n    var current = this._root;\n    var s = [], done = false, i = 0;\n\n    while (!done) {\n      // Reach the left most Node of the current Node\n      if (current) {\n        // Place pointer to a tree node on the stack\n        // before traversing the node's left subtree\n        s.push(current);\n        current = current.left;\n      } else {\n        // BackTrack from the empty subtree and visit the Node\n        // at the top of the stack; however, if the stack is\n        // empty you are done\n        if (s.length > 0) {\n          current = s.pop();\n          callback(current, i++);\n\n          // We have visited the node and its left\n          // subtree. Now, it's right subtree's turn\n          current = current.right;\n        } else done = true;\n      }\n    }\n    return this;\n  }\n\n  /**\n   * Returns all keys in order\n   * @return {Array<Key>}\n   */\n  keys () {\n    var current = this._root;\n    var s = [], r = [], done = false;\n\n    while (!done) {\n      if (current) {\n        s.push(current);\n        current = current.left;\n      } else {\n        if (s.length > 0) {\n          current = s.pop();\n          r.push(current.key);\n          current = current.right;\n        } else done = true;\n      }\n    }\n    return r;\n  }\n\n\n  /**\n   * Returns `data` fields of all nodes in order.\n   * @return {Array<Value>}\n   */\n  values () {\n    var current = this._root;\n    var s = [], r = [], done = false;\n\n    while (!done) {\n      if (current) {\n        s.push(current);\n        current = current.left;\n      } else {\n        if (s.length > 0) {\n          current = s.pop();\n          r.push(current.data);\n          current = current.right;\n        } else done = true;\n      }\n    }\n    return r;\n  }\n\n\n  /**\n   * Returns node at given index\n   * @param  {number} index\n   * @return {?Node}\n   */\n  at (index) {\n    // removed after a consideration, more misleading than useful\n    // index = index % this.size;\n    // if (index < 0) index = this.size - index;\n\n    var current = this._root;\n    var s = [], done = false, i = 0;\n\n    while (!done) {\n      if (current) {\n        s.push(current);\n        current = current.left;\n      } else {\n        if (s.length > 0) {\n          current = s.pop();\n          if (i === index) return current;\n          i++;\n          current = current.right;\n        } else done = true;\n      }\n    }\n    return null;\n  }\n\n  /**\n   * Bulk-load items\n   * @param  {Array<Key>}  keys\n   * @param  {Array<Value>}  [values]\n   * @return {AVLTree}\n   */\n  load(keys = [], values = []) {\n    if (Array.isArray(keys)) {\n      for (var i = 0, len = keys.length; i < len; i++) {\n        this.insert(keys[i], values[i]);\n      }\n    }\n    return this;\n  }\n\n\n  min() {\n    var node = this.minNode(this._root);\n    if (node) return node.key;\n    else      return null;\n  }\n\n\n  max() {\n    var node = this.maxNode(this._root);\n    if (node) return node.key;\n    else      return null;\n  }\n\n  isEmpty() { return this._root === null; }\n  get size() { return this._size; }\n}\n","import SplayTree from 'splaytree'\r\nconst { cmpPoints } = require('./flp')\r\nconst Segment = require('./segment')\r\n\r\n/**\r\n * NOTE:  We must be careful not to change any segments while\r\n *        they are in the SplayTree. AFAIK, there's no way to tell\r\n *        the tree to rebalance itself - thus before splitting\r\n *        a segment that's in the tree, we remove it from the tree,\r\n *        do the split, then re-insert it. (Even though splitting a\r\n *        segment *shouldn't* change its correct position in the\r\n *        sweep line tree, the reality is because of rounding errors,\r\n *        it sometimes does.)\r\n */\r\n\r\nclass SweepLine {\r\n  constructor (comparator = Segment.compare) {\r\n    this.tree = new SplayTree(comparator)\r\n    this.segments = []\r\n    this.prevEvent = null\r\n  }\r\n\r\n  process (event) {\r\n    const segment = event.segment\r\n    const newEvents = []\r\n    const node = event.isLeft\r\n      ? this.tree.insert(segment)\r\n      : this.tree.find(segment)\r\n\r\n    const prevNode = this.tree.prev(node)\r\n    const prevSeg = prevNode ? prevNode.key : null\r\n\r\n    const nextNode = this.tree.next(node)\r\n    const nextSeg = nextNode ? nextNode.key : null\r\n\r\n    if (event.isLeft) {\r\n      const mySplitters = []\r\n\r\n      // Check for intersections against the previous segment in the sweep line\r\n      if (prevSeg) {\r\n        const prevInters = segment.getIntersections(prevSeg)\r\n        if (prevInters.length > 0) {\r\n          const newEventsFromSplit = this._possibleSplit(prevSeg, prevInters)\r\n          for (let i = 0, iMax = newEventsFromSplit.length; i < iMax; i++) {\r\n            newEvents.push(newEventsFromSplit[i])\r\n          }\r\n          for (let i = 0, iMax = prevInters.length; i < iMax; i++) {\r\n            const pt = prevInters[i]\r\n            if (!segment.isAnEndpoint(pt)) mySplitters.push(pt)\r\n          }\r\n        }\r\n      }\r\n\r\n      // Check for intersections against the next segment in the sweep line\r\n      if (nextSeg) {\r\n        const nextInters = segment.getIntersections(nextSeg)\r\n        if (nextInters.length > 0) {\r\n          const newEventsFromSplit = this._possibleSplit(nextSeg, nextInters)\r\n          for (let i = 0, iMax = newEventsFromSplit.length; i < iMax; i++) {\r\n            newEvents.push(newEventsFromSplit[i])\r\n          }\r\n          for (let i = 0, iMax = nextInters.length; i < iMax; i++) {\r\n            const pt = nextInters[i]\r\n            if (!segment.isAnEndpoint(pt)) mySplitters.push(pt)\r\n          }\r\n        }\r\n      }\r\n\r\n      // did we get some intersections?\r\n      if (newEvents.length > 0 || mySplitters.length > 0) {\r\n        this.tree.remove(segment)\r\n\r\n        if (mySplitters.length > 0) {\r\n          const newEventsFromSplit = segment.split(mySplitters)\r\n          for (let i = 0, iMax = newEventsFromSplit.length; i < iMax; i++) {\r\n            newEvents.push(newEventsFromSplit[i])\r\n          }\r\n        }\r\n\r\n        // Make sure sweep line ordering is totally consistent for later\r\n        // use with the segment 'prev' pointers - re-do the current event.\r\n        newEvents.push(event)\r\n        return newEvents\r\n      }\r\n\r\n      this.segments.push(segment)\r\n      segment.registerPrev(prevSeg)\r\n    } else {\r\n      // event.isRight\r\n\r\n      // since we're about to be removed from the sweep line, check for\r\n      // intersections between our previous and next segments\r\n      if (prevSeg && nextSeg) {\r\n        const inters = prevSeg.getIntersections(nextSeg)\r\n        if (inters.length > 0) {\r\n          let newEventsFromSplit = this._possibleSplit(prevSeg, inters)\r\n          for (let i = 0, iMax = newEventsFromSplit.length; i < iMax; i++) {\r\n            newEvents.push(newEventsFromSplit[i])\r\n          }\r\n          newEventsFromSplit = this._possibleSplit(nextSeg, inters)\r\n          for (let i = 0, iMax = newEventsFromSplit.length; i < iMax; i++) {\r\n            newEvents.push(newEventsFromSplit[i])\r\n          }\r\n        }\r\n      }\r\n\r\n      this.tree.remove(segment)\r\n    }\r\n\r\n    if (this.prevEvent && cmpPoints(this.prevEvent.point, event.point) === 0) {\r\n      this.prevEvent.link(event)\r\n    }\r\n    this.prevEvent = event\r\n\r\n    return newEvents\r\n  }\r\n\r\n  _possibleSplit (segment, intersections) {\r\n    const splitters = []\r\n    for (let i = 0, iMax = intersections.length; i < iMax; i++) {\r\n      const pt = intersections[i]\r\n      if (!segment.isAnEndpoint(pt)) splitters.push(pt)\r\n    }\r\n\r\n    let newEvents\r\n    if (splitters.length > 0) {\r\n      this.tree.remove(segment)\r\n      newEvents = segment.split(splitters)\r\n      this.tree.insert(segment)\r\n    } else newEvents = []\r\n    return newEvents\r\n  }\r\n}\r\n\r\nmodule.exports = SweepLine\r\n","const { compareVectorAngles } = require('./vector')\r\n\r\nclass Ring {\r\n  /* Given the segments from the sweep line pass, compute & return a series\r\n   * of closed rings from all the segments marked to be part of the result */\r\n  static factory (allSegments) {\r\n    const ringsOut = []\r\n\r\n    for (let i = 0, iMax = allSegments.length; i < iMax; i++) {\r\n      const segment = allSegments[i]\r\n      if (!segment.isInResult || segment.ringOut) continue\r\n\r\n      let prevEvent = null\r\n      let event = segment.leftSE\r\n      let nextEvent = segment.rightSE\r\n      const events = [event]\r\n\r\n      const startingLE = event.linkedEvents\r\n      const intersectionLEs = []\r\n\r\n      /* Walk the chain of linked events to form a closed ring */\r\n      while (true) {\r\n        prevEvent = event\r\n        event = nextEvent\r\n        events.push(event)\r\n\r\n        /* Is the ring complete? */\r\n        if (event.linkedEvents === startingLE) break\r\n\r\n        while (true) {\r\n          const availableLEs = event.getAvailableLinkedEvents()\r\n\r\n          /* Did we hit a dead end? This shouldn't happen. Indicates some earlier\r\n           * part of the algorithm malfunctioned... please file a bug report. */\r\n          if (availableLEs.length === 0) {\r\n            const firstPt = events[0].point\r\n            const lastPt = events[events.length - 1].point\r\n            throw new Error(\r\n              `Unable to complete output ring starting at [${firstPt.x},` +\r\n                ` ${firstPt.y}]. Last matching segment found ends at ` +\r\n                ` [${lastPt.x}, ${lastPt.y}].`\r\n            )\r\n          }\r\n\r\n          /* Only one way to go, so cotinue on the path */\r\n          if (availableLEs.length === 1) {\r\n            nextEvent = availableLEs[0].otherSE\r\n            break\r\n          }\r\n\r\n          /* We must have an intersection. Check for a completed loop */\r\n          let indexLE = null\r\n          for (let j = 0, jMax = intersectionLEs.length; j < jMax; j++) {\r\n            if (intersectionLEs[j].linkedEvents === event.linkedEvents) {\r\n              indexLE = j\r\n              break\r\n            }\r\n          }\r\n          /* Found a completed loop. Cut that off and make a ring */\r\n          if (indexLE !== null) {\r\n            const intersectionLE = intersectionLEs.splice(indexLE)[0]\r\n            const ringEvents = events.splice(intersectionLE.index)\r\n            ringEvents.unshift(ringEvents[0].otherSE)\r\n            ringsOut.push(new Ring(ringEvents.reverse()))\r\n            continue\r\n          }\r\n          /* register the intersection */\r\n          intersectionLEs.push({\r\n            index: events.length,\r\n            linkedEvents: event.linkedEvents\r\n          })\r\n          /* Choose the left-most option to continue the walk */\r\n          const comparator = event.getLeftmostComparator(prevEvent)\r\n          nextEvent = availableLEs.sort(comparator)[0].otherSE\r\n          break\r\n        }\r\n      }\r\n\r\n      ringsOut.push(new Ring(events))\r\n    }\r\n    return ringsOut\r\n  }\r\n\r\n  constructor (events) {\r\n    this.events = events\r\n    for (let i = 0, iMax = events.length; i < iMax; i++) {\r\n      events[i].segment.registerRingOut(this)\r\n    }\r\n    this.poly = null\r\n    this._clearCache()\r\n  }\r\n\r\n  registerPoly (poly) {\r\n    this.poly = poly\r\n  }\r\n\r\n  getGeom () {\r\n    // Remove superfluous points (ie extra points along a straight line),\r\n    const points = [[this.events[0].point.x, this.events[0].point.y]]\r\n    for (let i = 1, iMax = this.events.length - 1; i < iMax; i++) {\r\n      const prevPt = this.events[i - 1].point\r\n      const pt = this.events[i].point\r\n      const nextPt = this.events[i + 1].point\r\n      if (compareVectorAngles(pt, prevPt, nextPt) === 0) continue\r\n      points.push([pt.x, pt.y])\r\n    }\r\n\r\n    // check if the starting point is necessary\r\n    const prevPt = this.events[this.events.length - 2].point\r\n    const pt = this.events[0].point\r\n    const nextPt = this.events[1].point\r\n    if (compareVectorAngles(pt, prevPt, nextPt) === 0) points.shift()\r\n\r\n    // ring was all (within rounding error of angle calc) colinear points\r\n    if (points.length === 0) return null\r\n\r\n    points.push(points[0])\r\n    return this.isExteriorRing ? points : points.reverse()\r\n  }\r\n\r\n  get enclosingRing () {\r\n    return this._getCached('enclosingRing')\r\n  }\r\n\r\n  get isExteriorRing () {\r\n    return this._getCached('isExteriorRing')\r\n  }\r\n\r\n  _clearCache () {\r\n    this._cache = {}\r\n  }\r\n\r\n  _getCached (propName, calcMethod) {\r\n    // if this._cache[something] isn't set, fill it with this._something()\r\n    if (this._cache[propName] === undefined) {\r\n      this._cache[propName] = this[`_${propName}`].bind(this)()\r\n    }\r\n    return this._cache[propName]\r\n  }\r\n\r\n  _isExteriorRing () {\r\n    if (!this.enclosingRing) return true\r\n    if (!this.enclosingRing.enclosingRing) return false\r\n    // an island in hole is a whole new polygon\r\n    return this.enclosingRing.enclosingRing.isExteriorRing\r\n  }\r\n\r\n  /* Returns the ring that encloses this one, if any */\r\n  _enclosingRing () {\r\n    let prevSeg = this.events[0].segment.prevInResult\r\n    while (prevSeg && prevSeg.ringOut === this) prevSeg = prevSeg.prevInResult\r\n    let prevPrevSeg = prevSeg ? prevSeg.prevInResult : null\r\n\r\n    while (true) {\r\n      // no segment found, thus no ring can enclose us\r\n      if (!prevSeg) return null\r\n\r\n      // no segments below prev segment found, thus the ring of the prev\r\n      // segment must loop back around and enclose us\r\n      if (!prevPrevSeg) return prevSeg.ringOut\r\n\r\n      // if the two segments are of different rings, the ring of the prev\r\n      // segment must either loop around us or the ring of the prev prev\r\n      // seg, which would make us and the ring of the prev peers\r\n      if (prevPrevSeg.ringOut !== prevSeg.ringOut) {\r\n        if (prevPrevSeg.ringOut.enclosingRing !== prevSeg.ringOut) {\r\n          return prevSeg.ringOut\r\n        } else return prevSeg.ringOut.enclosingRing\r\n      }\r\n\r\n      // two segments are from the same ring, so this was a penisula\r\n      // of that ring. iterate downward, keep searching\r\n      prevSeg = prevPrevSeg.prevInResult\r\n      prevPrevSeg = prevSeg ? prevSeg.prevInResult : null\r\n    }\r\n  }\r\n}\r\n\r\nclass Poly {\r\n  constructor (exteriorRing) {\r\n    this.exteriorRing = exteriorRing\r\n    exteriorRing.registerPoly(this)\r\n    this.interiorRings = []\r\n  }\r\n\r\n  addInterior (ring) {\r\n    this.interiorRings.push(ring)\r\n    ring.registerPoly(this)\r\n  }\r\n\r\n  getGeom () {\r\n    const geom = [this.exteriorRing.getGeom()]\r\n    // exterior ring was all (within rounding error of angle calc) colinear points\r\n    if (geom[0] === null) return null\r\n    for (let i = 0, iMax = this.interiorRings.length; i < iMax; i++) {\r\n      const ringGeom = this.interiorRings[i].getGeom()\r\n      // interior ring was all (within rounding error of angle calc) colinear points\r\n      if (ringGeom === null) continue\r\n      geom.push(ringGeom)\r\n    }\r\n    return geom\r\n  }\r\n}\r\n\r\nclass MultiPoly {\r\n  constructor (rings) {\r\n    this.rings = rings\r\n    this.polys = this._composePolys(rings)\r\n  }\r\n\r\n  getGeom () {\r\n    const geom = []\r\n    for (let i = 0, iMax = this.polys.length; i < iMax; i++) {\r\n      const polyGeom = this.polys[i].getGeom()\r\n      // exterior ring was all (within rounding error of angle calc) colinear points\r\n      if (polyGeom === null) continue\r\n      geom.push(polyGeom)\r\n    }\r\n    return geom\r\n  }\r\n\r\n  _composePolys (rings) {\r\n    const polys = []\r\n    for (let i = 0, iMax = rings.length; i < iMax; i++) {\r\n      const ring = rings[i]\r\n      if (ring.poly) continue\r\n      if (ring.isExteriorRing) polys.push(new Poly(ring))\r\n      else {\r\n        if (!ring.enclosingRing.poly) polys.push(new Poly(ring.enclosingRing))\r\n        ring.enclosingRing.poly.addInterior(ring)\r\n      }\r\n    }\r\n    return polys\r\n  }\r\n}\r\n\r\nmodule.exports = { Ring, Poly, MultiPoly }\r\n","const { cmp } = require('./flp')\r\n\r\n/**\r\n * A bounding box has the format:\r\n *\r\n *  { ll: { x: xmin, y: ymin }, ur: { x: xmax, y: ymax } }\r\n *\r\n */\r\n\r\nconst isInBbox = (bbox, point) => {\r\n  const xmin = bbox.ll.x\r\n  const ymin = bbox.ll.y\r\n  const xmax = bbox.ur.x\r\n  const ymax = bbox.ur.y\r\n  const xpt = point.x\r\n  const ypt = point.y\r\n  return (\r\n    cmp(xmin, xpt) <= 0 &&\r\n    cmp(xpt, xmax) <= 0 &&\r\n    cmp(ymin, ypt) <= 0 &&\r\n    cmp(ypt, ymax) <= 0\r\n  )\r\n}\r\n\r\nconst doBboxesOverlap = (b1, b2) =>\r\n  !(\r\n    cmp(b2.ur.x, b1.ll.x) < 0 ||\r\n    cmp(b1.ur.x, b2.ll.x) < 0 ||\r\n    cmp(b2.ur.y, b1.ll.y) < 0 ||\r\n    cmp(b1.ur.y, b2.ll.y) < 0\r\n  )\r\n\r\n/* Returns either null, or a bbox (aka an ordered pair of points)\r\n * If there is only one point of overlap, a bbox with identical points\r\n * will be returned */\r\nconst getBboxOverlap = (b1, b2) => {\r\n  if (!doBboxesOverlap(b1, b2)) return null\r\n\r\n  // find the middle two X values\r\n  const lowerX = b1.ll.x < b2.ll.x ? b2.ll.x : b1.ll.x\r\n  const upperX = b1.ur.x < b2.ur.x ? b1.ur.x : b2.ur.x\r\n\r\n  // find the middle two Y values\r\n  const lowerY = b1.ll.y < b2.ll.y ? b2.ll.y : b1.ll.y\r\n  const upperY = b1.ur.y < b2.ur.y ? b1.ur.y : b2.ur.y\r\n\r\n  // put those middle values together to get the overlap\r\n  return { ll: { x: lowerX, y: lowerY }, ur: { x: upperX, y: upperY } }\r\n}\r\n\r\n/* Returns a list of unique corners.\r\n * Will contain one, two or four points */\r\nconst getUniqueCorners = bbox => {\r\n  const xmin = bbox.ll.x\r\n  const ymin = bbox.ll.y\r\n  const xmax = bbox.ur.x\r\n  const ymax = bbox.ur.y\r\n  const xEq = cmp(xmin, xmax) === 0\r\n  const yEq = cmp(ymin, ymax) === 0\r\n  if (xEq && yEq) return [{ x: xmin, y: ymin }]\r\n  if (xEq) return [{ x: xmin, y: ymin }, { x: xmin, y: ymax }]\r\n  if (yEq) return [{ x: xmin, y: ymin }, { x: xmax, y: ymin }]\r\n  return [\r\n    { x: xmin, y: ymin },\r\n    { x: xmin, y: ymax },\r\n    { x: xmax, y: ymin },\r\n    { x: xmax, y: ymax }\r\n  ]\r\n}\r\n\r\nmodule.exports = {\r\n  doBboxesOverlap,\r\n  getBboxOverlap,\r\n  getUniqueCorners,\r\n  isInBbox\r\n}\r\n","const Segment = require('./segment')\r\n\r\n// Give rings unique ID's to get consistent sorting of segments\r\n// and sweep events when all else is identical\r\nlet ringId = 0\r\n\r\nclass Ring {\r\n  constructor (geomRing, poly) {\r\n    this.id = ringId++\r\n    this.poly = poly\r\n    this.segments = []\r\n\r\n    for (let i = 1, iMax = geomRing.length; i < iMax; i++) {\r\n      this.segments.push(new Segment(geomRing[i - 1], geomRing[i], this))\r\n    }\r\n  }\r\n\r\n  getSweepEvents () {\r\n    const sweepEvents = []\r\n    for (let i = 0, iMax = this.segments.length; i < iMax; i++) {\r\n      const segment = this.segments[i]\r\n      sweepEvents.push(segment.leftSE)\r\n      sweepEvents.push(segment.rightSE)\r\n    }\r\n    return sweepEvents\r\n  }\r\n\r\n  get isExterior () {\r\n    return this.poly.exteriorRing === this\r\n  }\r\n\r\n  get isInterior () {\r\n    return this.poly.exteriorRing !== this\r\n  }\r\n\r\n  /* Given a segment on this rings with these relationships to other rings,\r\n   * is it a valid segment of the ring's poly? */\r\n  isValid (ringsSameSLER, ringsDiffSLER, ringsInsideOf) {\r\n    const exterior = this.poly.exteriorRing\r\n    const interiors = this.poly.interiorRings\r\n\r\n    if (this === exterior) {\r\n      // exterior segments inside or interior, nope\r\n      for (let i = 0, iMax = ringsInsideOf.length; i < iMax; i++) {\r\n        if (interiors.includes(ringsInsideOf[i])) return false\r\n      }\r\n\r\n      // overlap with an interior of same SWL orientatio, nope\r\n      for (let i = 0, iMax = ringsSameSLER.length; i < iMax; i++) {\r\n        if (interiors.includes(ringsSameSLER[i])) return false\r\n      }\r\n\r\n      return true\r\n    }\r\n\r\n    // interior rings that aren't inside the exterior nor\r\n    // overlapping with different SWE\r\n    if (!ringsInsideOf.includes(exterior)) {\r\n      if (!ringsDiffSLER.includes(exterior)) return false\r\n    }\r\n\r\n    // interior rings inside another interior, nope\r\n    for (let i = 0, iMax = ringsInsideOf.length; i < iMax; i++) {\r\n      if (interiors.includes(ringsInsideOf[i])) return false\r\n    }\r\n\r\n    // overlapping interiors with different sweep line orientation, nope\r\n    for (let i = 0, iMax = ringsDiffSLER.length; i < iMax; i++) {\r\n      if (interiors.includes(ringsDiffSLER[i])) return false\r\n    }\r\n\r\n    return true\r\n  }\r\n}\r\n\r\nclass Poly {\r\n  constructor (geomPoly, multiPoly) {\r\n    this.exteriorRing = new Ring(geomPoly[0], this)\r\n    this.interiorRings = []\r\n    for (let i = 1, iMax = geomPoly.length; i < iMax; i++) {\r\n      this.interiorRings.push(new Ring(geomPoly[i], this))\r\n    }\r\n    this.multiPoly = multiPoly\r\n  }\r\n\r\n  getSweepEvents () {\r\n    const sweepEvents = this.exteriorRing.getSweepEvents()\r\n    for (let i = 0, iMax = this.interiorRings.length; i < iMax; i++) {\r\n      const ringSweepEvents = this.interiorRings[i].getSweepEvents()\r\n      for (let j = 0, jMax = ringSweepEvents.length; j < jMax; j++) {\r\n        sweepEvents.push(ringSweepEvents[j])\r\n      }\r\n    }\r\n    return sweepEvents\r\n  }\r\n\r\n  /* Given a segment with these rings, is that segment inside this polygon? */\r\n  isInside (ringsOnEdgeOf, ringsInsideOf) {\r\n    // if we're on an edge, we can't be inside\r\n    for (let i = 0, iMax = ringsOnEdgeOf.length; i < iMax; i++) {\r\n      if (ringsOnEdgeOf[i].poly === this) return false\r\n    }\r\n\r\n    // we need to be inside the exterior, and nothing else\r\n    let isInsideExterior = false\r\n    for (let i = 0, iMax = ringsInsideOf.length; i < iMax; i++) {\r\n      const ring = ringsInsideOf[i]\r\n      if (ring.poly !== this) continue\r\n      if (ring.isInterior) return false\r\n      isInsideExterior = true\r\n    }\r\n    return isInsideExterior\r\n  }\r\n}\r\n\r\nclass MultiPoly {\r\n  constructor (geomMultiPoly) {\r\n    this.polys = []\r\n    for (let i = 0, iMax = geomMultiPoly.length; i < iMax; i++) {\r\n      this.polys.push(new Poly(geomMultiPoly[i], this))\r\n    }\r\n    this.isSubject = false\r\n  }\r\n\r\n  markAsSubject () {\r\n    this.isSubject = true\r\n  }\r\n\r\n  getSweepEvents () {\r\n    const sweepEvents = []\r\n    for (let i = 0, iMax = this.polys.length; i < iMax; i++) {\r\n      const polySweepEvents = this.polys[i].getSweepEvents()\r\n      for (let j = 0, jMax = polySweepEvents.length; j < jMax; j++) {\r\n        sweepEvents.push(polySweepEvents[j])\r\n      }\r\n    }\r\n    return sweepEvents\r\n  }\r\n}\r\n\r\nmodule.exports = { Ring, Poly, MultiPoly }\r\n","const { cmpPoints } = require('./flp')\r\nconst { compareVectorAngles } = require('./vector')\r\n\r\n/* Given input geometry as a standard array-of-arrays geojson-style\r\n * geometry, return one that uses objects as points, for better perf */\r\nconst pointsAsObjects = geom => {\r\n  // we can handle well-formed multipolys and polys\r\n  const output = []\r\n  if (!Array.isArray(geom)) {\r\n    throw new Error('Input is not a Polygon or MultiPolygon')\r\n  }\r\n  for (let i = 0, iMax = geom.length; i < iMax; i++) {\r\n    if (!Array.isArray(geom[i])) {\r\n      throw new Error('Input is not a Polygon or MultiPolygon')\r\n    }\r\n    output.push([])\r\n    for (let j = 0, jMax = geom[i].length; j < jMax; j++) {\r\n      if (!Array.isArray(geom[i][j])) {\r\n        throw new Error('Input is not a Polygon or MultiPolygon')\r\n      }\r\n      if (geom[i][j].length === 2) {\r\n        output[i].push({ x: geom[i][j][0], y: geom[i][j][1] })\r\n        continue\r\n      }\r\n      output[i].push([])\r\n      for (let k = 0, kMax = geom[i][j].length; k < kMax; k++) {\r\n        if (!Array.isArray(geom[i][j][k]) || geom[i][j][k].length !== 2) {\r\n          throw new Error('Input is not a Polygon or MultiPolygon')\r\n        }\r\n        output[i][j].push({ x: geom[i][j][k][0], y: geom[i][j][k][1] })\r\n      }\r\n    }\r\n  }\r\n  return output\r\n}\r\n\r\n/* WARN: input modified directly */\r\nconst forceMultiPoly = geom => {\r\n  if (Array.isArray(geom)) {\r\n    if (geom.length === 0) return // allow empty multipolys\r\n\r\n    if (Array.isArray(geom[0])) {\r\n      if (Array.isArray(geom[0][0])) {\r\n        if (\r\n          typeof geom[0][0][0].x === 'number' &&\r\n          typeof geom[0][0][0].y === 'number'\r\n        ) {\r\n          // multipolygon\r\n          return\r\n        }\r\n      }\r\n      if (\r\n        typeof geom[0][0].x === 'number' &&\r\n        typeof geom[0][0].y === 'number'\r\n      ) {\r\n        // polygon\r\n        geom.unshift(geom.splice(0))\r\n        return\r\n      }\r\n    }\r\n  }\r\n  throw new Error('Unrecognized input - not a polygon nor multipolygon')\r\n}\r\n\r\n/* WARN: input modified directly */\r\nconst cleanMultiPoly = multipoly => {\r\n  let i = 0\r\n  while (i < multipoly.length) {\r\n    const poly = multipoly[i]\r\n    if (poly.length === 0) {\r\n      multipoly.splice(i, 1)\r\n      continue\r\n    }\r\n\r\n    const exteriorRing = poly[0]\r\n    cleanRing(exteriorRing)\r\n    // poly is dropped if exteriorRing is degenerate\r\n    if (exteriorRing.length === 0) {\r\n      multipoly.splice(i, 1)\r\n      continue\r\n    }\r\n\r\n    let j = 1\r\n    while (j < poly.length) {\r\n      const interiorRing = poly[j]\r\n      cleanRing(interiorRing)\r\n      if (interiorRing.length === 0) poly.splice(j, 1)\r\n      else j++\r\n    }\r\n\r\n    i++\r\n  }\r\n}\r\n\r\n/* Clean ring:\r\n *  - remove duplicate points\r\n *  - remove colinear points\r\n *  - remove rings with no area (less than 3 distinct points)\r\n *  - close rings (last point should equal first)\r\n *\r\n * WARN: input modified directly */\r\nconst cleanRing = ring => {\r\n  if (ring.length === 0) return\r\n  if (cmpPoints(ring[0], ring[ring.length - 1]) !== 0) {\r\n    ring.push({ x: ring[0].x, y: ring[0].y }) // copy by value\r\n  }\r\n\r\n  const isPointUncessary = (prevPt, pt, nextPt) =>\r\n    cmpPoints(prevPt, pt) === 0 ||\r\n    cmpPoints(pt, nextPt) === 0 ||\r\n    compareVectorAngles(pt, prevPt, nextPt) === 0\r\n\r\n  let i = 1\r\n  while (i < ring.length - 1) {\r\n    if (isPointUncessary(ring[i - 1], ring[i], ring[i + 1])) ring.splice(i, 1)\r\n    else i++\r\n  }\r\n\r\n  // check the first/last point as well\r\n  while (ring.length > 2) {\r\n    if (!isPointUncessary(ring[ring.length - 2], ring[0], ring[1])) break\r\n    ring.splice(0, 1)\r\n    ring.splice(ring.length - 1, 1)\r\n    ring.push(ring[0])\r\n  }\r\n\r\n  // if our ring has less than 3 distinct points now (so is degenerate)\r\n  // shrink it down to the empty array to communicate to our caller to\r\n  // drop it\r\n  while (ring.length < 4 && ring.length > 0) ring.pop()\r\n}\r\n\r\n/* Scan the already-linked events of the segments for any\r\n * self-intersecting input rings (which are not supported) */\r\nconst errorOnSelfIntersectingRings = segments => {\r\n  for (let i = 0, iMax = segments.length; i < iMax; i++) {\r\n    const seg = segments[i]\r\n\r\n    const evt = seg.flowIntoSE\r\n\r\n    if (evt.linkedEvents.length > 2) {\r\n      const evtsThisRing = evt.linkedEvents.filter(\r\n        other => other.segment.ringIn === seg.ringIn\r\n      )\r\n      if (evtsThisRing.length > 2) {\r\n        evtsThisRing.sort(evt.getLeftmostComparator(evt.otherSE))\r\n        const leftMostEvt = evtsThisRing[1] // skip ourself\r\n        const rightMostEvt = evtsThisRing[evtsThisRing.length - 1]\r\n\r\n        // both the segment on our immediate left and right will flow\r\n        // 'out' in intersection point was a touch and not a crossing\r\n        if (\r\n          leftMostEvt.segment.flowIntoSE === leftMostEvt ||\r\n          rightMostEvt.segment.flowIntoSE === rightMostEvt\r\n        ) {\r\n          throw new Error(\r\n            `Self-intersecting, crossing input ring found at ` +\r\n              `[${evt.point.x}, ${evt.point.y}]`\r\n          )\r\n        }\r\n      }\r\n    }\r\n  }\r\n}\r\n\r\nmodule.exports = {\r\n  cleanMultiPoly,\r\n  cleanRing,\r\n  errorOnSelfIntersectingRings,\r\n  forceMultiPoly,\r\n  pointsAsObjects\r\n}\r\n","/**\n * nodejs heap, classic array implementation\n *\n * Items are stored in a balanced binary tree packed into an array where\n * node is at [i], left child is at [2*i], right at [2*i+1].  Root is at [1].\n *\n * Copyright (C) 2014-2017 Andras Radics\n * Licensed under the Apache License, Version 2.0\n */\n\n'use strict';\n\nmodule.exports = Heap;\n\nfunction isBeforeDefault( a, b ) { return a < b; }\n\nfunction Heap( opts ) {\n    opts = opts || {};\n    if (typeof opts === 'function') opts = {compar: opts};\n\n    if (opts.compar) {\n        this._isBefore = function(a, b) { return opts.compar(a,b) < 0 };\n    } else if (opts.comparBefore) {\n        this._isBefore = opts.comparBefore;\n    } else {\n        this._isBefore = isBeforeDefault;\n    }\n    this.length = 0;\n    this._freeSpace = opts.freeSpace ? this._trimArraySize : false;\n    this._list = new Array(opts.size || 100);\n}\n\nHeap.prototype._list = null;\nHeap.prototype._compar = null;\nHeap.prototype._isBefore = null;\nHeap.prototype._freeSpace = null;\nHeap.prototype.length = 0;\n\n/*\n * insert new item at end, and bubble up\n */\nHeap.prototype.insert = function Heap_insert( item ) {\n    var idx = ++this.length;\n    var list = this._list;\n    list[idx] = item;\n\n    while (idx > 1) {\n        var parentidx = idx >> 1;\n        var parentval = list[parentidx];\n        if (!(this._isBefore(item, parentval))) break;\n        list[idx] = parentval;\n        idx = parentidx;\n    }\n    list[idx] = item;\n};\nHeap.prototype.append = Heap.prototype.insert;\nHeap.prototype.push = Heap.prototype.insert;\nHeap.prototype.unshift = Heap.prototype.insert;\nHeap.prototype.enqueue = Heap.prototype.insert;\n\nHeap.prototype.peek = function Heap_peek( ) {\n    return this.length > 0 ? this._list[1] : undefined;\n};\n\nHeap.prototype.size = function Heap_size( ) {\n    return this.length;\n};\n\n/*\n * return the root, and bubble down last item from top root position\n * when bubbling down, r: root idx, c: child sub-tree root idx, cv: child root value\n * Note that the child at (c == this.length) does not have to be tested in the loop,\n * since its value is the one being bubbled down, so can loop `while (c < len)`.\n *\n * Note that a redundant (c < len &&) test before the c vs c+1 compar lets node v0.10\n * run 4x faster; v4, v5 and v6 run faster without it if using _isBefore and not\n * raw _compar.\n *\n * Note that this version runs faster than the two-pass pull-up-new-root then\n * bubble-up-last-value-from-hole approach (except when inserting pre-sorted data).\n */\nHeap.prototype.remove = function Heap_remove( ) {\n    if (this.length < 1) return undefined;\n    var ret = this._list[1];\n    var itm = this._list[this.length];\n\n    var r = 1, c = 2, cv;\n    var len = this.length;\n    while (c < len) {\n        cv = this._list[c];\n        if (this._isBefore(this._list[c+1], cv)) { cv = this._list[c+1] ; c = c+1 }\n        if (!(this._isBefore(cv, itm))) break;\n        this._list[r] = cv;\n        r = c;\n        c = c << 1;\n    }\n    this._list[len] = 0;\n    this.length = --len;\n    if (len) this._list[r] = itm;\n    if (this._freeSpace) this._freeSpace(this._list, len);\n\n    return ret;\n};\nHeap.prototype.shift = Heap.prototype.remove;\nHeap.prototype.pop = Heap.prototype.remove;\nHeap.prototype.dequeue = Heap.prototype.remove;\n\n/*\n * Free unused storage slots in the _list.\n * The default is to unconditionally gc, use the options to omit when not useful.\n */\nHeap.prototype.gc = function Heap_gc( options ) {\n    if (!options) options = {};\n\n    var minListLength = options.minLength;      // smallest list that will be gc-d\n    if (minListLength === undefined) minListLength = 0;\n\n    var minListFull = options.minFull;          // list utilization below which to gc\n    if (minListFull === undefined) minListFull = 1.00;\n\n    if (this._list.length >= minListLength && (this.length < this._list.length * minListFull)) {\n        // gc reallocates the array to free the unused storage slots at the end\n        // use splice to actually free memory; 7% slower than setting .length\n        // note: list.slice makes the array slower to insert to??  splice is better\n        this._list.splice(this.length+1, this._list.length);\n    }\n}\n\nHeap.prototype._trimArraySize = function Heap__trimArraySize( list, len ) {\n    if (len > 10000 && list.length > 4 * len) {\n        // use slice to actually free memory; 7% slower than setting .length\n        // note: list.slice makes the array slower to insert to??  splice is better\n        list.splice(len+1, list.length);\n    }\n}\n\nHeap.prototype._check = function Heap__check( ) {\n    var isBefore = this._isBefore;\n    var _compar = function(a, b) { return isBefore(a, b) ? -1 : 1 };\n\n    var i, p, fail = 0;\n    for (i=this.length; i>1; i--) {\n        // error if parent should go after child, but not if don`t care\n        p = i >>> 1;\n        // swapping the values must change their ordering, otherwise the\n        // comparison is a tie.  (Ie, consider the ordering func (a <= b)\n        // that for some values reports both that a < b and b < a.)\n        if (_compar(this._list[p], this._list[i]) > 0 &&\n            _compar(this._list[i], this._list[p]) < 0)\n        {\n            fail = i;\n        }\n    }\n    if (fail) console.log(\"failed at\", (fail >>> 1), fail);\n    return !fail;\n}\n\n// optimize access\nHeap.prototype = Heap.prototype;\n","module.exports = require('./lib/qheap.js');\n","const Queue = require('qheap')\r\nconst cleanInput = require('./clean-input.js')\r\nconst geomIn = require('./geom-in')\r\nconst geomOut = require('./geom-out')\r\nconst operation = require('./operation')\r\nconst SweepEvent = require('./sweep-event')\r\nconst SweepLine = require('./sweep-line')\r\n\r\nconst doIt = (operationType, geom, moreGeoms) => {\r\n  /* Make a copy of the input geometry with points as objects, for perf */\r\n  const geoms = [cleanInput.pointsAsObjects(geom)]\r\n  for (let i = 0, iMax = moreGeoms.length; i < iMax; i++) {\r\n    geoms.push(cleanInput.pointsAsObjects(moreGeoms[i]))\r\n  }\r\n\r\n  /* Clean inputs */\r\n  for (let i = 0, iMax = geoms.length; i < iMax; i++) {\r\n    cleanInput.forceMultiPoly(geoms[i])\r\n    cleanInput.cleanMultiPoly(geoms[i])\r\n  }\r\n\r\n  /* Convert inputs to MultiPoly objects, mark subject & register operation */\r\n  const multipolys = []\r\n  for (let i = 0, iMax = geoms.length; i < iMax; i++) {\r\n    multipolys.push(new geomIn.MultiPoly(geoms[i]))\r\n  }\r\n  multipolys[0].markAsSubject()\r\n  operation.register(operationType, multipolys.length)\r\n\r\n  /* Put segment endpoints in a priority queue */\r\n  const queue = new Queue({ comparBefore: SweepEvent.compareBefore })\r\n  for (let i = 0, iMax = multipolys.length; i < iMax; i++) {\r\n    const sweepEvents = multipolys[i].getSweepEvents()\r\n    for (let j = 0, jMax = sweepEvents.length; j < jMax; j++) {\r\n      queue.insert(sweepEvents[j])\r\n    }\r\n  }\r\n\r\n  /* Pass the sweep line over those endpoints */\r\n  const sweepLine = new SweepLine()\r\n  while (queue.length) {\r\n    const newEvents = sweepLine.process(queue.remove())\r\n    for (let i = 0, iMax = newEvents.length; i < iMax; i++) {\r\n      queue.insert(newEvents[i])\r\n    }\r\n  }\r\n\r\n  /* Error on self-crossing input rings */\r\n  cleanInput.errorOnSelfIntersectingRings(sweepLine.segments)\r\n\r\n  /* Collect and compile segments we're keeping into a multipolygon */\r\n  const ringsOut = geomOut.Ring.factory(sweepLine.segments)\r\n  const result = new geomOut.MultiPoly(ringsOut)\r\n  return result.getGeom()\r\n}\r\n\r\nmodule.exports = doIt\r\n","const doIt = require('./src')\r\nconst operation = require('./src/operation')\r\n\r\nconst union = (geom, ...moreGeoms) => {\r\n  return doIt(operation.types.UNION, geom, moreGeoms)\r\n}\r\n\r\nconst intersection = (geom, ...moreGeoms) => {\r\n  return doIt(operation.types.INTERSECTION, geom, moreGeoms)\r\n}\r\n\r\nconst xor = (geom, ...moreGeoms) => {\r\n  return doIt(operation.types.XOR, geom, moreGeoms)\r\n}\r\n\r\nconst difference = (subjectGeom, ...clippingGeoms) => {\r\n  return doIt(operation.types.DIFFERENCE, subjectGeom, clippingGeoms)\r\n}\r\n\r\nmodule.exports = { union, intersection, xor, difference }\r\n","module.exports = \"{\\r\\n  \\\"type\\\": \\\"FeatureCollection\\\",\\r\\n  \\\"features\\\": [\\r\\n    {\\r\\n      \\\"type\\\": \\\"Feature\\\",\\r\\n      \\\"properties\\\": {},\\r\\n      \\\"geometry\\\": {\\r\\n        \\\"type\\\": \\\"Polygon\\\",\\r\\n        \\\"coordinates\\\": [\\r\\n          [\\r\\n            [0, 0],\\r\\n            [12, 0],\\r\\n            [12, 1],\\r\\n            [10, 3],\\r\\n            [8, 1],\\r\\n            [6, 3],\\r\\n            [4, 1],\\r\\n            [2, 3],\\r\\n            [0, 1],\\r\\n            [0, 0]\\r\\n          ]\\r\\n        ]\\r\\n      }\\r\\n    },\\r\\n    {\\r\\n      \\\"type\\\": \\\"Feature\\\",\\r\\n      \\\"properties\\\": {},\\r\\n      \\\"geometry\\\": {\\r\\n        \\\"type\\\": \\\"Polygon\\\",\\r\\n        \\\"coordinates\\\": [[[1, 2], [3, 2], [3, 4], [1, 4], [1, 2]]]\\r\\n      }\\r\\n    },\\r\\n    {\\r\\n      \\\"type\\\": \\\"Feature\\\",\\r\\n      \\\"properties\\\": {},\\r\\n      \\\"geometry\\\": {\\r\\n        \\\"type\\\": \\\"Polygon\\\",\\r\\n        \\\"coordinates\\\": [[[5, 2], [7, 2], [7, 4], [5, 4], [5, 2]]]\\r\\n      }\\r\\n    },\\r\\n    {\\r\\n      \\\"type\\\": \\\"Feature\\\",\\r\\n      \\\"properties\\\": {},\\r\\n      \\\"geometry\\\": {\\r\\n        \\\"type\\\": \\\"Polygon\\\",\\r\\n        \\\"coordinates\\\": [[[9, 2], [11, 2], [11, 4], [9, 4], [9, 2]]]\\r\\n      }\\r\\n    }\\r\\n  ]\\r\\n}\\r\\n\"","module.exports = \"{\\r\\n  \\\"type\\\": \\\"FeatureCollection\\\",\\r\\n  \\\"features\\\": [\\r\\n    {\\r\\n      \\\"type\\\": \\\"Feature\\\",\\r\\n      \\\"properties\\\": null,\\r\\n      \\\"geometry\\\": {\\r\\n        \\\"type\\\": \\\"MultiPolygon\\\",\\r\\n        \\\"coordinates\\\": [\\r\\n          [\\r\\n            [\\r\\n              [-69.006, 44.296],\\r\\n              [-69.0043512, 44.296],\\r\\n              [-69.0043512, 44.2966448],\\r\\n              [-69.00454609345942, 44.296975],\\r\\n              [-69.004, 44.298],\\r\\n              [-69.006, 44.296]\\r\\n            ]\\r\\n          ]\\r\\n        ]\\r\\n      }\\r\\n    },\\r\\n    {\\r\\n      \\\"type\\\": \\\"Feature\\\",\\r\\n      \\\"properties\\\": null,\\r\\n      \\\"geometry\\\": {\\r\\n        \\\"type\\\": \\\"Polygon\\\",\\r\\n        \\\"coordinates\\\": [\\r\\n          [\\r\\n            [-69.004, 44.296775],\\r\\n            [-69.0045759, 44.2970255],\\r\\n            [-69.00442804775413, 44.296775],\\r\\n            [-69.004, 44.296775]\\r\\n          ]\\r\\n        ]\\r\\n      }\\r\\n    }\\r\\n  ]\\r\\n}\\r\\n\"","module.exports = \"{\\r\\n\\\"type\\\": \\\"FeatureCollection\\\",\\r\\n\\\"crs\\\": { \\\"type\\\": \\\"name\\\", \\\"properties\\\": { \\\"name\\\": \\\"urn:ogc:def:crs:OGC:1.3:CRS84\\\" } },\\r\\n                                                                                \\r\\n\\\"features\\\": [\\r\\n{ \\\"type\\\": \\\"Feature\\\", \\\"properties\\\": { \\\"scalerank\\\": 0, \\\"featurecla\\\": \\\"Admin-0 country\\\", \\\"LABELRANK\\\": 2, \\\"SOVEREIGNT\\\": \\\"Indonesia\\\", \\\"SOV_A3\\\": \\\"IDN\\\", \\\"ADM0_DIF\\\": 0, \\\"LEVEL\\\": 2, \\\"TYPE\\\": \\\"Sovereign country\\\", \\\"ADMIN\\\": \\\"Indonesia\\\", \\\"ADM0_A3\\\": \\\"IDN\\\", \\\"GEOU_DIF\\\": 0, \\\"GEOUNIT\\\": \\\"Indonesia\\\", \\\"GU_A3\\\": \\\"IDN\\\", \\\"SU_DIF\\\": 0, \\\"SUBUNIT\\\": \\\"Indonesia\\\", \\\"SU_A3\\\": \\\"IDN\\\", \\\"BRK_DIFF\\\": 0, \\\"NAME\\\": \\\"Indonesia\\\", \\\"NAME_LONG\\\": \\\"Indonesia\\\", \\\"BRK_A3\\\": \\\"IDN\\\", \\\"BRK_NAME\\\": \\\"Indonesia\\\", \\\"BRK_GROUP\\\": null, \\\"ABBREV\\\": \\\"Indo.\\\", \\\"POSTAL\\\": \\\"INDO\\\", \\\"FORMAL_EN\\\": \\\"Republic of Indonesia\\\", \\\"FORMAL_FR\\\": null, \\\"NOTE_ADM0\\\": null, \\\"NOTE_BRK\\\": null, \\\"NAME_SORT\\\": \\\"Indonesia\\\", \\\"NAME_ALT\\\": null, \\\"MAPCOLOR7\\\": 6, \\\"MAPCOLOR8\\\": 6, \\\"MAPCOLOR9\\\": 6, \\\"MAPCOLOR13\\\": 11, \\\"POP_EST\\\": 240271522, \\\"GDP_MD_EST\\\": 914600, \\\"POP_YEAR\\\": -99, \\\"LASTCENSUS\\\": 2010, \\\"GDP_YEAR\\\": -99, \\\"ECONOMY\\\": \\\"4. Emerging region: MIKT\\\", \\\"INCOME_GRP\\\": \\\"4. Lower middle income\\\", \\\"WIKIPEDIA\\\": -99, \\\"FIPS_10_\\\": \\\"ID\\\", \\\"ISO_A2\\\": \\\"ID\\\", \\\"ISO_A3\\\": \\\"IDN\\\", \\\"ISO_N3\\\": \\\"360\\\", \\\"UN_A3\\\": \\\"360\\\", \\\"WB_A2\\\": \\\"ID\\\", \\\"WB_A3\\\": \\\"IDN\\\", \\\"WOE_ID\\\": 23424846, \\\"WOE_ID_EH\\\": 23424846, \\\"WOE_NOTE\\\": \\\"Exact WOE match as country\\\", \\\"ADM0_A3_IS\\\": \\\"IDN\\\", \\\"ADM0_A3_US\\\": \\\"IDN\\\", \\\"ADM0_A3_UN\\\": -99, \\\"ADM0_A3_WB\\\": -99, \\\"CONTINENT\\\": \\\"Asia\\\", \\\"REGION_UN\\\": \\\"Asia\\\", \\\"SUBREGION\\\": \\\"South-Eastern Asia\\\", \\\"REGION_WB\\\": \\\"East Asia & Pacific\\\", \\\"NAME_LEN\\\": 9, \\\"LONG_LEN\\\": 9, \\\"ABBREV_LEN\\\": 5, \\\"TINY\\\": -99, \\\"HOMEPART\\\": 1 }, \\\"geometry\\\": { \\\"type\\\": \\\"MultiPolygon\\\", \\\"coordinates\\\": [ [ [ [ 121.59742272200015, -10.60116952899989 ], [ 121.61410566500012, -10.602471612999864 ], [ 121.62159264400009, -10.601332289999846 ], [ 121.6333113940002, -10.604180596999868 ], [ 121.63111412900025, -10.615329684999892 ], [ 121.61500084700015, -10.626641533999873 ], [ 121.59522545700008, -10.634535414999846 ], [ 121.57455488400024, -10.63982512799987 ], [ 121.55274498800009, -10.640394789999903 ], [ 121.53142337300005, -10.638441664999846 ], [ 121.52719160200002, -10.629571221999811 ], [ 121.54102623800031, -10.61484140399989 ], [ 121.56495201900009, -10.603692315999808 ], [ 121.59742272200015, -10.60116952899989 ] ] ], [ [ [ 123.37159264400009, -10.57170989399981 ], [ 123.36133873800031, -10.580336195999791 ], [ 123.35596764400009, -10.58123137799987 ], [ 123.35938561300009, -10.590752862999807 ], [ 123.3676863940002, -10.591973565999808 ], [ 123.37875410200002, -10.590427341999884 ], [ 123.3901473320002, -10.591485283999816 ], [ 123.41309655000009, -10.604587497999887 ], [ 123.42042076900009, -10.619073174999869 ], [ 123.41732832100001, -10.663506768999866 ], [ 123.4091903000002, -10.679131768999866 ], [ 123.38941491000014, -10.680108330999815 ], [ 123.36654707100013, -10.675469658999873 ], [ 123.34864342500009, -10.674086195999791 ], [ 123.3315535820002, -10.682305596999811 ], [ 123.27686608200008, -10.725030205999815 ], [ 123.26742597700013, -10.729424737999807 ], [ 123.25473066500012, -10.733086846999868 ], [ 123.24341881600003, -10.737725518999866 ], [ 123.2387801440002, -10.745375257999797 ], [ 123.23780358200031, -10.768812757999797 ], [ 123.23585045700008, -10.778985283999816 ], [ 123.23194420700008, -10.789483330999815 ], [ 123.20915774800017, -10.813083591999828 ], [ 123.17701256600014, -10.820407809999836 ], [ 123.13982181100005, -10.822686455999815 ], [ 122.98804772200003, -10.865004164999903 ], [ 122.96753991000026, -10.875909112999807 ], [ 122.95769290500016, -10.888116143999866 ], [ 122.9716903000002, -10.899346612999864 ], [ 122.9716903000002, -10.906182549999869 ], [ 122.88021894600001, -10.922621351999794 ], [ 122.84180748800009, -10.92107512799987 ], [ 122.82097415500027, -10.893243096999811 ], [ 122.81470787900014, -10.803806247999887 ], [ 122.8100692070002, -10.784844658999873 ], [ 122.8125106130002, -10.778415622999887 ], [ 122.83334394600013, -10.773207289999846 ], [ 122.85499108200031, -10.75530364399981 ], [ 122.91765384200016, -10.73748137799987 ], [ 122.9414168630002, -10.734958591999828 ], [ 122.96265709700003, -10.736016533999873 ], [ 122.97364342500009, -10.735121351999794 ], [ 122.98170006600014, -10.73154062299983 ], [ 122.9941512380002, -10.723565362999864 ], [ 123.00505618600016, -10.72210051899981 ], [ 123.01531009200016, -10.722914320999791 ], [ 123.0263778000002, -10.72185637799987 ], [ 123.04916425900001, -10.711358330999872 ], [ 123.09839928500003, -10.663506768999866 ], [ 123.11947675900012, -10.650648695999848 ], [ 123.1616317070002, -10.633396091999828 ], [ 123.1772567070002, -10.618829033999816 ], [ 123.18116295700031, -10.609063408999873 ], [ 123.18433678500014, -10.588962497999887 ], [ 123.19092858200008, -10.577813408999873 ], [ 123.20036868600016, -10.573500257999797 ], [ 123.20915774800017, -10.575941664999903 ], [ 123.21558678500014, -10.574965101999851 ], [ 123.21810957100013, -10.560479424999812 ], [ 123.22510826900009, -10.543633721999811 ], [ 123.24195397200015, -10.52890390399989 ], [ 123.28028405000009, -10.508965752999814 ], [ 123.33545983200031, -10.490329684999836 ], [ 123.35230553500014, -10.478204033999873 ], [ 123.3740340500002, -10.443536065999865 ], [ 123.38648522200003, -10.433038018999866 ], [ 123.39625084700015, -10.447523695999848 ], [ 123.39714603000016, -10.463474216999828 ], [ 123.39226321700028, -10.47568124799983 ], [ 123.37582441500001, -10.495863539999846 ], [ 123.39389082100001, -10.509209893999866 ], [ 123.38803144600013, -10.529717705999815 ], [ 123.37525475400003, -10.54843515399989 ], [ 123.37281334700015, -10.556817315999865 ], [ 123.37818444100026, -10.56161874799983 ], [ 123.37159264400009, -10.57170989399981 ] ] ], [ [ [ 121.94019616000003, -10.430108330999872 ], [ 121.95980879000001, -10.440118096999868 ], [ 121.97950280000032, -10.437920830999872 ], [ 121.99594160200024, -10.441338799999869 ], [ 122.0053817070002, -10.467950127999814 ], [ 121.99789472700013, -10.508965752999814 ], [ 121.99089603000027, -10.521579684999892 ], [ 121.95281009200005, -10.553399346999868 ], [ 121.93002363400012, -10.566664320999791 ], [ 121.91968834700026, -10.574395440999865 ], [ 121.91504967500032, -10.577080987999864 ], [ 121.90992272200003, -10.578057549999812 ], [ 121.89893639400009, -10.577813408999873 ], [ 121.89185631600014, -10.580743096999811 ], [ 121.88746178500014, -10.587497653999833 ], [ 121.88453209700015, -10.594414971999868 ], [ 121.88184655000032, -10.598321221999868 ], [ 121.85971113400024, -10.604099216999884 ], [ 121.79688561300009, -10.598321221999868 ], [ 121.75318444100014, -10.60100676899981 ], [ 121.73210696700028, -10.597344658999873 ], [ 121.7104598320002, -10.584649346999811 ], [ 121.69906660200013, -10.57577890399989 ], [ 121.6943465500002, -10.571058851999851 ], [ 121.69011478000004, -10.564222914999903 ], [ 121.70622806100016, -10.552422783999873 ], [ 121.82642662900025, -10.493829033999816 ], [ 121.8613387380002, -10.44060637799987 ], [ 121.87964928500026, -10.42888762799987 ], [ 121.90162194100014, -10.420993747999887 ], [ 121.92310631600014, -10.420342705999758 ], [ 121.94019616000003, -10.430108330999872 ] ] ], [ [ [ 123.45923912900014, -10.214613539999846 ], [ 123.45167076900032, -10.224379164999903 ], [ 123.44662519600001, -10.239678643999866 ], [ 123.43506920700008, -10.242771091999828 ], [ 123.42156009200016, -10.23593515399989 ], [ 123.41065514400032, -10.220961195999848 ], [ 123.39625084700015, -10.227797132999797 ], [ 123.41863040500016, -10.27304452899989 ], [ 123.42448978000004, -10.299004815999808 ], [ 123.41065514400032, -10.310316664999903 ], [ 123.41675866000003, -10.324639580999872 ], [ 123.41342207100013, -10.332614841999828 ], [ 123.40357506600014, -10.334405205999815 ], [ 123.3901473320002, -10.330824476999851 ], [ 123.38738040500016, -10.324639580999872 ], [ 123.3774520190002, -10.310804945999791 ], [ 123.36703535200013, -10.301202080999815 ], [ 123.36215254000012, -10.306898695999791 ], [ 123.35474694100014, -10.322442315999808 ], [ 123.33838951900009, -10.33749765399989 ], [ 123.3217879570002, -10.338962497999887 ], [ 123.31430097700024, -10.313409112999864 ], [ 123.31519616000003, -10.283949476999794 ], [ 123.31999759200005, -10.267754815999865 ], [ 123.33228600400025, -10.254571221999868 ], [ 123.35596764400009, -10.234633070999791 ], [ 123.36980228000016, -10.216892184999892 ], [ 123.38941491000014, -10.175225518999866 ], [ 123.4038192070002, -10.15764739399981 ], [ 123.41724694100003, -10.149672132999854 ], [ 123.43824303500014, -10.141289971999811 ], [ 123.4575301440002, -10.139336846999868 ], [ 123.4658309250002, -10.149834893999866 ], [ 123.47380618600005, -10.162855726999851 ], [ 123.50464928500026, -10.171319268999866 ], [ 123.50611412900025, -10.186781507999797 ], [ 123.49496504000012, -10.198174737999864 ], [ 123.45923912900014, -10.214613539999846 ] ] ], [ [ [ 120.0117293630002, -9.357598565999865 ], [ 120.07097415500004, -9.44101327899989 ], [ 120.0942488940002, -9.461195570999792 ], [ 120.11085045700008, -9.470635674999812 ], [ 120.12940514400009, -9.47812265399989 ], [ 120.14828535200013, -9.479668877999814 ], [ 120.16529381600014, -9.470879815999865 ], [ 120.1831160820002, -9.466892184999892 ], [ 120.20679772200015, -9.476169528999833 ], [ 120.22925866000014, -9.492282809999892 ], [ 120.24390709700003, -9.509047132999854 ], [ 120.24390709700003, -9.54998137799987 ], [ 120.25114993600005, -9.57537200299987 ], [ 120.25342858200008, -9.613864841999884 ], [ 120.25896243600005, -9.630791924999869 ], [ 120.27116946700016, -9.642510674999869 ], [ 120.33033287900003, -9.66936614399981 ], [ 120.34693444100014, -9.670505466999884 ], [ 120.35377037900025, -9.655857028999833 ], [ 120.36475670700031, -9.645277601999794 ], [ 120.39014733200008, -9.637953382999797 ], [ 120.43628991000026, -9.631280205999872 ], [ 120.4585067070002, -9.632500908999873 ], [ 120.47828209700015, -9.641045830999872 ], [ 120.49236087300017, -9.657647393999866 ], [ 120.49773196700005, -9.683200778999833 ], [ 120.50855553500014, -9.696954033999873 ], [ 120.58033287900003, -9.734958591999828 ], [ 120.60678144600001, -9.769463799999869 ], [ 120.64576256600014, -9.852308851999794 ], [ 120.66968834700015, -9.885186455999872 ], [ 120.69760175900001, -9.904473565999808 ], [ 120.76441491000014, -9.938897393999866 ], [ 120.7924910820002, -9.960870049999869 ], [ 120.81226647200015, -9.983575127999814 ], [ 120.8315535820002, -10.014418226999851 ], [ 120.83985436300009, -10.051364841999828 ], [ 120.8266707690002, -10.091241143999866 ], [ 120.81739342500009, -10.101820570999848 ], [ 120.7851668630002, -10.124769789999903 ], [ 120.74187259200005, -10.17099374799983 ], [ 120.72461998800031, -10.196872653999833 ], [ 120.71119225400014, -10.206719658999873 ], [ 120.65056399800017, -10.223565362999864 ], [ 120.6416121750002, -10.231215101999794 ], [ 120.63054446700016, -10.23593515399989 ], [ 120.56609134200016, -10.227797132999797 ], [ 120.54737389400009, -10.233330987999807 ], [ 120.50074303500014, -10.256768487999864 ], [ 120.49146569100014, -10.265883070999791 ], [ 120.4897567070002, -10.285251559999892 ], [ 120.48316491000003, -10.300957940999865 ], [ 120.47046959700015, -10.310316664999903 ], [ 120.44996178500014, -10.310316664999903 ], [ 120.43230228000016, -10.300062757999854 ], [ 120.40935306100016, -10.269626559999892 ], [ 120.39161217500009, -10.26311614399981 ], [ 120.24187259200005, -10.241631768999866 ], [ 120.23023522200015, -10.245212497999887 ], [ 120.22046959700003, -10.23943450299987 ], [ 120.15560957100024, -10.220961195999848 ], [ 120.15015709700015, -10.21445077899989 ], [ 120.13990319100014, -10.193942966999828 ], [ 120.13461347700013, -10.186781507999797 ], [ 120.09310957100013, -10.168389580999872 ], [ 120.0869246750002, -10.162855726999851 ], [ 120.05941816500012, -10.118584893999866 ], [ 120.04835045700008, -10.113213799999812 ], [ 120.03980553500003, -10.114678643999866 ], [ 120.0341903000002, -10.112074476999851 ], [ 120.02719160200013, -10.067640882999854 ], [ 120.01490319100003, -10.043226820999791 ], [ 119.97632897200003, -9.992445570999848 ], [ 119.96729576900009, -9.983575127999814 ], [ 119.95728600400003, -9.976983330999815 ], [ 119.94654381600014, -9.974541924999812 ], [ 119.93148847700013, -9.973565362999807 ], [ 119.92066491000014, -9.969496351999851 ], [ 119.91325931100016, -9.961358330999872 ], [ 119.9087020190002, -9.947198174999812 ], [ 119.89625084700026, -9.955336195999848 ], [ 119.89047285200013, -9.951267184999892 ], [ 119.88689212300005, -9.941582940999808 ], [ 119.88070722700013, -9.933526299999869 ], [ 119.8603621750002, -9.922539971999868 ], [ 119.85084069100014, -9.920098565999808 ], [ 119.81137129000001, -9.91716887799987 ], [ 119.7939559250002, -9.910577080999815 ], [ 119.75782311300009, -9.885186455999872 ], [ 119.69711347700013, -9.852634372999887 ], [ 119.6889754570002, -9.841078382999797 ], [ 119.6850692070002, -9.812758070999848 ], [ 119.67408287900014, -9.800225518999866 ], [ 119.63445071700005, -9.789646091999884 ], [ 119.63363691500024, -9.786228122999887 ], [ 119.63502037900014, -9.772637627999814 ], [ 119.63445071700005, -9.769138278999833 ], [ 119.62810306100016, -9.76864999799983 ], [ 119.62208092500009, -9.771172783999873 ], [ 119.61687259200028, -9.774183851999851 ], [ 119.61312910200013, -9.775323174999812 ], [ 119.58887780000009, -9.770277601999851 ], [ 119.54004967500009, -9.765883070999792 ], [ 119.49903405000009, -9.752129815999865 ], [ 119.47730553500003, -9.748630466999884 ], [ 119.46029707100013, -9.750095309999836 ], [ 119.43978925900012, -9.754652601999794 ], [ 119.42253665500016, -9.762139580999872 ], [ 119.41529381600014, -9.772230726999851 ], [ 119.40609785200002, -9.790134372999887 ], [ 119.38559004000012, -9.782891533999873 ], [ 119.34693444100026, -9.75546640399989 ], [ 119.3383895190002, -9.75505950299987 ], [ 119.32789147200015, -9.761814059999836 ], [ 119.31910241000014, -9.761651299999869 ], [ 119.31080162900003, -9.758070570999792 ], [ 119.28484134200005, -9.741143487999807 ], [ 119.26148522200026, -9.745782158999873 ], [ 119.21973717500009, -9.746189059999836 ], [ 119.17709394600001, -9.74138762799987 ], [ 119.1367293630002, -9.724053643999866 ], [ 119.09685306100005, -9.717543226999851 ], [ 119.08253014400009, -9.71054452899989 ], [ 119.03736412900003, -9.675876559999892 ], [ 119.02475019600013, -9.659274997999887 ], [ 119.00717207100001, -9.62810637799987 ], [ 118.99781334700026, -9.61679452899989 ], [ 118.98389733200008, -9.60466887799987 ], [ 118.95573978000004, -9.58505624799983 ], [ 118.94157962300017, -9.570489190999808 ], [ 118.93539472700002, -9.553399346999868 ], [ 118.94190514400009, -9.525567315999808 ], [ 118.9580184250002, -9.49960702899989 ], [ 118.97917728000027, -9.476250908999816 ], [ 119.02466881600014, -9.437676690999865 ], [ 119.05079186300031, -9.424004815999808 ], [ 119.07894941500001, -9.415622653999833 ], [ 119.11011803500026, -9.412774346999811 ], [ 119.12354576900009, -9.40935637799987 ], [ 119.1533309250002, -9.392266533999873 ], [ 119.16871178500003, -9.385511976999851 ], [ 119.20687910200013, -9.379001559999892 ], [ 119.2402449880002, -9.378106377999814 ], [ 119.24634850400014, -9.375909112999864 ], [ 119.25977623800031, -9.366469007999854 ], [ 119.26783287900014, -9.36443450299987 ], [ 119.30543053500026, -9.36443450299987 ], [ 119.38453209700015, -9.378106377999814 ], [ 119.39429772200015, -9.375909112999864 ], [ 119.40756269600013, -9.366469007999854 ], [ 119.45679772200026, -9.357598565999865 ], [ 119.47608483200008, -9.361097914999846 ], [ 119.51734459700003, -9.374932549999869 ], [ 119.52857506600014, -9.374932549999869 ], [ 119.54753665500004, -9.362888278999833 ], [ 119.57081139400009, -9.354099216999884 ], [ 119.62924238400024, -9.341892184999892 ], [ 119.6474715500002, -9.342217705999815 ], [ 119.66236412900025, -9.347914320999848 ], [ 119.66846764400009, -9.361016533999873 ], [ 119.68043053500003, -9.370782158999816 ], [ 119.79948978000004, -9.383721612999864 ], [ 119.82129967500009, -9.378594658999816 ], [ 119.94597415500004, -9.288262627999814 ], [ 119.95875084700026, -9.29045989399981 ], [ 119.96387780000009, -9.313164971999868 ], [ 119.9707137380002, -9.323011976999794 ], [ 120.0117293630002, -9.357598565999865 ] ] ], [ [ [ 124.93302494300019, -9.074483743999849 ], [ 124.94785608000029, -9.078514505999863 ], [ 124.96589115400013, -9.077274271999897 ], [ 124.97891361500024, -9.072003274999872 ], [ 125.00444177300017, -9.055570169999896 ], [ 125.05182906100026, -9.035002949999807 ], [ 125.0653166100002, -9.023220723999827 ], [ 125.06857222500014, -9.015882669999826 ], [ 125.07301639900004, -8.996452331999819 ], [ 125.07647871900008, -8.990767923999897 ], [ 125.08681400600028, -8.986220397999887 ], [ 125.09151656100016, -8.988597513999821 ], [ 125.09528894100026, -8.994798684999807 ], [ 125.10252364200016, -9.001309915999855 ], [ 125.12133386200026, -9.011851907999812 ], [ 125.13942061400019, -9.024771015999818 ], [ 125.15399336800033, -9.040790709999897 ], [ 125.16236495000032, -9.060634460999893 ], [ 125.16200321400004, -9.082338561999904 ], [ 125.14500166900018, -9.145177103999856 ], [ 125.14696537300006, -9.154478861999792 ], [ 125.15120284100021, -9.165020852999874 ], [ 125.15265373200032, -9.170824418999871 ], [ 125.15389001500012, -9.17576955099986 ], [ 125.15063440000017, -9.185381367999867 ], [ 125.14252120000003, -9.189102070999809 ], [ 125.11792321800033, -9.187551777999886 ], [ 125.10696781400009, -9.188481953999826 ], [ 125.09146488400006, -9.196750182999892 ], [ 125.08257653800013, -9.205535176999831 ], [ 125.07394657400016, -9.211322936999807 ], [ 125.0596838790002, -9.210496113999795 ], [ 125.05337935400019, -9.206672057999867 ], [ 125.04144209800006, -9.193236185999808 ], [ 125.034517456, -9.188171895999858 ], [ 125.02769616800003, -9.186311543999807 ], [ 125.00723230100016, -9.186104837999892 ], [ 124.97446944200033, -9.191892598999857 ], [ 124.95793298400019, -9.211943053999903 ], [ 124.95410892800021, -9.241501973999903 ], [ 124.96015507000027, -9.27602182999982 ], [ 124.96599450700012, -9.293385111999839 ], [ 124.9728157960003, -9.30465057299989 ], [ 124.9966903080001, -9.325837910999837 ], [ 125.01787764500023, -9.338963724999815 ], [ 125.02340702400022, -9.345578307999801 ], [ 125.02480228700006, -9.351986184999873 ], [ 125.02278690600019, -9.367695820999813 ], [ 125.02376875800007, -9.374723815999801 ], [ 125.04629968300014, -9.409863788999871 ], [ 125.05093075400009, -9.424696842999879 ], [ 125.06162548343514, -9.485765301020933 ], [ 125.06161543100006, -9.48577239399981 ], [ 125.06128991000014, -9.486016533999873 ], [ 125.0307723320002, -9.507500908999873 ], [ 125.0019637380002, -9.536309502999814 ], [ 124.98658287900003, -9.577325127999814 ], [ 124.97974694100003, -9.649021091999828 ], [ 124.97071373800009, -9.662367445999848 ], [ 124.87476647200003, -9.724704684999892 ], [ 124.84693444100014, -9.748223565999865 ], [ 124.75847415500004, -9.85076262799987 ], [ 124.74781334700015, -9.886163018999866 ], [ 124.73454837300005, -9.899509372999887 ], [ 124.67847741000003, -9.930108330999872 ], [ 124.64128665500016, -9.956638278999833 ], [ 124.60808353000016, -9.986748955999872 ], [ 124.56031334700015, -10.01523202899989 ], [ 124.54078209700003, -10.036553643999866 ], [ 124.52466881600003, -10.08342864399981 ], [ 124.51002037900014, -10.096286716999828 ], [ 124.49935957100001, -10.111993096999868 ], [ 124.45199629000012, -10.146416924999812 ], [ 124.41846764400009, -10.163832289999903 ], [ 124.3808699880002, -10.170505466999828 ], [ 124.27198326900009, -10.166192315999865 ], [ 124.1967879570002, -10.173760674999869 ], [ 124.16480553500003, -10.180596612999807 ], [ 124.15365644600013, -10.17880624799983 ], [ 124.13412519600001, -10.172133070999848 ], [ 124.12240644600001, -10.172539971999868 ], [ 124.10767662900003, -10.184340101999851 ], [ 124.0874129570002, -10.225681247999887 ], [ 124.07813561300009, -10.234633070999791 ], [ 124.05738366000026, -10.238946221999811 ], [ 124.04851321700016, -10.249607028999833 ], [ 124.0434676440002, -10.26311614399981 ], [ 124.03386478000004, -10.276136976999794 ], [ 124.01978600400014, -10.281019789999903 ], [ 123.93279056100016, -10.294854424999869 ], [ 123.82634524800005, -10.363946221999868 ], [ 123.7993270190002, -10.374688408999816 ], [ 123.78736412900014, -10.36834075299987 ], [ 123.77816816500012, -10.358330987999864 ], [ 123.75709069100014, -10.360446872999887 ], [ 123.71908613400012, -10.371758721999868 ], [ 123.69898522200015, -10.367364190999865 ], [ 123.67872155000009, -10.35662200299987 ], [ 123.65886478000027, -10.349297783999873 ], [ 123.63965905000032, -10.355075778999833 ], [ 123.61744225400025, -10.36630624799983 ], [ 123.6020613940002, -10.361423434999892 ], [ 123.57447350400003, -10.337660414999789 ], [ 123.55941816500001, -10.333754164999846 ], [ 123.53646894600001, -10.331963799999869 ], [ 123.51539147200003, -10.335544528999833 ], [ 123.50220787900014, -10.353204033999873 ], [ 123.49293053500014, -10.36077239399981 ], [ 123.48161868600005, -10.366143487999864 ], [ 123.47201582100013, -10.364922783999873 ], [ 123.46859785200013, -10.356215101999794 ], [ 123.47242272200003, -10.345147393999866 ], [ 123.48568769600013, -10.323907158999873 ], [ 123.49341881600014, -10.301934502999814 ], [ 123.49496504000012, -10.282159112999807 ], [ 123.49252363400012, -10.245212497999887 ], [ 123.49952233200008, -10.230726820999848 ], [ 123.51539147200003, -10.213067315999808 ], [ 123.54712975400014, -10.186781507999797 ], [ 123.59791100400014, -10.166680596999868 ], [ 123.6123153000002, -10.156426690999808 ], [ 123.62037194100003, -10.153008721999811 ], [ 123.65699303500003, -10.146416924999812 ], [ 123.66570071700016, -10.143161716999884 ], [ 123.7485457690002, -10.097751559999892 ], [ 123.7646590500002, -10.074965101999851 ], [ 123.74577884200016, -10.050388278999833 ], [ 123.72608483200031, -10.039239190999808 ], [ 123.70582116000003, -10.03069426899981 ], [ 123.68433678500003, -10.024997653999833 ], [ 123.66041100400014, -10.02304452899989 ], [ 123.63835696700005, -10.029961846999868 ], [ 123.60564212300028, -10.054294528999833 ], [ 123.58814537900014, -10.050388278999833 ], [ 123.57740319100014, -10.03435637799987 ], [ 123.5761824880002, -10.013929945999791 ], [ 123.58375084700015, -9.944024346999868 ], [ 123.59229576900009, -9.928806247999887 ], [ 123.62907962300017, -9.906345309999892 ], [ 123.65015709700015, -9.889418226999794 ], [ 123.66041100400014, -9.871270440999808 ], [ 123.66374759200016, -9.850844007999854 ], [ 123.66382897200015, -9.827243747999887 ], [ 123.66041100400014, -9.816582940999865 ], [ 123.64576256600003, -9.796807549999812 ], [ 123.64332116000003, -9.78281015399989 ], [ 123.64649498800009, -9.77499765399989 ], [ 123.65259850400025, -9.770277601999851 ], [ 123.65919030000032, -9.766534112999864 ], [ 123.66382897200015, -9.761651299999869 ], [ 123.66993248800031, -9.740492445999848 ], [ 123.67156009200005, -9.650160414999846 ], [ 123.67660566500001, -9.629652601999851 ], [ 123.68881269600013, -9.611423434999836 ], [ 123.71168053500014, -9.591566664999903 ], [ 123.74691816500001, -9.573988539999903 ], [ 123.7563582690002, -9.567071221999811 ], [ 123.78394616000026, -9.525811455999872 ], [ 123.79379316500012, -9.517022393999866 ], [ 123.80111738400012, -9.514418226999794 ], [ 123.80933678500014, -9.513278903999833 ], [ 123.82154381600014, -9.509047132999854 ], [ 123.82699629000012, -9.504652601999851 ], [ 123.83668053500014, -9.492608330999815 ], [ 123.84205162900014, -9.487969658999816 ], [ 123.8466903000002, -9.487237237999864 ], [ 123.85865319100014, -9.489027601999851 ], [ 123.86304772200003, -9.487969658999816 ], [ 123.89576256600026, -9.440524997999887 ], [ 123.9072371750002, -9.433282158999873 ], [ 123.9126082690002, -9.425957940999865 ], [ 123.95866946700016, -9.385511976999851 ], [ 123.9795028000002, -9.358493747999887 ], [ 123.99146569100014, -9.348077080999872 ], [ 124.01010175900001, -9.343926690999865 ], [ 124.03003991000014, -9.34197356549987 ], [ 124.06269047000012, -9.397874856999806 ], [ 124.09028568500003, -9.421542662999855 ], [ 124.1210848390001, -9.426917012999809 ], [ 124.13374556500014, -9.41926889999985 ], [ 124.15379602100018, -9.391880391999791 ], [ 124.16723189300012, -9.380614928999819 ], [ 124.18361332300015, -9.373896992999903 ], [ 124.19746260600004, -9.373173522999821 ], [ 124.21069177300012, -9.378857930999857 ], [ 124.2257812910002, -9.391570332999891 ], [ 124.23715010600017, -9.405212910999808 ], [ 124.24686527500012, -9.421542662999855 ], [ 124.25399662300003, -9.438699238999902 ], [ 124.25751062100016, -9.455442402999836 ], [ 124.25689050300002, -9.462883808999891 ], [ 124.25337650600022, -9.480557148999878 ], [ 124.25337650600022, -9.486448261999897 ], [ 124.25658044500017, -9.499367370999892 ], [ 124.25751062100016, -9.501227721999896 ], [ 124.26159305900012, -9.497920429999795 ], [ 124.2738403730001, -9.494923196999878 ], [ 124.29306400600012, -9.493062844999884 ], [ 124.3100655520002, -9.488722025999891 ], [ 124.32355310100002, -9.480350443999839 ], [ 124.33233809500018, -9.46660451199989 ], [ 124.33337162300018, -9.457199401999844 ], [ 124.32882409700017, -9.439836119999825 ], [ 124.32861739100008, -9.433014831999856 ], [ 124.33207971200022, -9.425470071999825 ], [ 124.34174320500006, -9.411827493999795 ], [ 124.34541223200017, -9.404179381999825 ], [ 124.34789270000022, -9.374620462999815 ], [ 124.3545589600003, -9.364181823999843 ], [ 124.35807295800021, -9.362218118999806 ], [ 124.36262048400022, -9.362011413999881 ], [ 124.37187056500011, -9.357050475999813 ], [ 124.40168786600032, -9.331832376999842 ], [ 124.42091149900023, -9.306924336999884 ], [ 124.4247872320002, -9.303513691999797 ], [ 124.42793949400016, -9.299482929999897 ], [ 124.43181522700013, -9.29080128999982 ], [ 124.43662113400012, -9.255868021999845 ], [ 124.45150394800021, -9.20057423899982 ], [ 124.45053144600024, -9.180189710999855 ], [ 124.4658309250002, -9.179375908999816 ], [ 124.51783287900014, -9.177829684999892 ], [ 124.56324303500003, -9.170830987999807 ], [ 124.60434004000001, -9.156345309999836 ], [ 124.6679793630002, -9.113051039999846 ], [ 124.67115319100003, -9.107517184999836 ], [ 124.67318769600013, -9.099297783999873 ], [ 124.6836043630002, -9.074802341999828 ], [ 124.6879988940002, -9.06951262799987 ], [ 124.69157962300017, -9.067803643999866 ], [ 124.75806725400003, -9.04794687299983 ], [ 124.76734459700015, -9.042901299999812 ], [ 124.78882897200015, -9.018975518999866 ], [ 124.82496178500003, -9.008070570999848 ], [ 124.8403426440002, -9.001071872999887 ], [ 124.86988366000003, -8.994398695999848 ], [ 124.89714603000004, -8.974541924999812 ], [ 124.91928144600013, -8.962090752999814 ], [ 124.91950720677642, -8.962015499916788 ], [ 124.92248295100012, -8.986323750999873 ], [ 124.90915043100028, -9.02032684299985 ], [ 124.90791019700009, -9.037483418999898 ], [ 124.91297448700027, -9.052779641999848 ], [ 124.92129439300015, -9.065492044999814 ], [ 124.93302494300019, -9.074483743999849 ] ] ], [ [ [ 115.57309004000012, -8.671970309999836 ], [ 115.58915338800011, -8.695665505999898 ], [ 115.59774535300005, -8.718726089999791 ], [ 115.61573089800004, -8.739627448999897 ], [ 115.62420393700006, -8.768908689999876 ], [ 115.6069442070002, -8.78655364399981 ], [ 115.5888778000002, -8.807305596999811 ], [ 115.56080162900025, -8.799004815999865 ], [ 115.50538170700008, -8.76091887799987 ], [ 115.4887801440002, -8.740655205999872 ], [ 115.4746199880002, -8.736586195999792 ], [ 115.46827233200008, -8.731866143999866 ], [ 115.47136478000016, -8.72380950299987 ], [ 115.50700931100005, -8.678969007999854 ], [ 115.51758873800009, -8.670179945999848 ], [ 115.53505544700033, -8.673678329999859 ], [ 115.55014082100013, -8.666192315999865 ], [ 115.57309004000012, -8.671970309999836 ] ] ], [ [ [ 119.67530358200008, -8.658786716999884 ], [ 119.69548587300017, -8.667087497999887 ], [ 119.71062259200016, -8.65976327899989 ], [ 119.71989993600005, -8.642510674999869 ], [ 119.72299238400012, -8.621189059999892 ], [ 119.7378035820002, -8.617120049999869 ], [ 119.7675887380002, -8.617120049999869 ], [ 119.79151451900009, -8.624200127999814 ], [ 119.78858483200008, -8.641534112999864 ], [ 119.75806725400003, -8.661065362999864 ], [ 119.74732506600003, -8.672133070999792 ], [ 119.75049889400009, -8.685967705999815 ], [ 119.73560631600003, -8.689222914999846 ], [ 119.72095787900003, -8.689711195999848 ], [ 119.70915774800005, -8.693536065999865 ], [ 119.7026473320002, -8.706475518999866 ], [ 119.70508873800009, -8.724053643999866 ], [ 119.72339928500014, -8.74179452899989 ], [ 119.72299238400012, -8.761814059999836 ], [ 119.7187606130002, -8.770440362999864 ], [ 119.7026473320002, -8.792413018999866 ], [ 119.6982528000002, -8.801527601999851 ], [ 119.68864993600027, -8.799248955999872 ], [ 119.6792098320002, -8.792657158999816 ], [ 119.66895592500032, -8.781996351999794 ], [ 119.66293379000024, -8.772556247999887 ], [ 119.65552819100014, -8.766859632999797 ], [ 119.6445418630002, -8.771661065999865 ], [ 119.63477623800009, -8.778415622999887 ], [ 119.62484785200024, -8.780531507999854 ], [ 119.6152449880002, -8.777520440999808 ], [ 119.60629316500024, -8.768649997999887 ], [ 119.6142684250002, -8.739841403999833 ], [ 119.6206160820002, -8.73007577899989 ], [ 119.63445071700005, -8.726983330999815 ], [ 119.62924238400024, -8.717543226999794 ], [ 119.62680097700002, -8.71396249799983 ], [ 119.64210045700008, -8.70614999799983 ], [ 119.65699303500003, -8.695489190999808 ], [ 119.66041100400003, -8.685479424999812 ], [ 119.64128665500016, -8.679131768999866 ], [ 119.64673912900003, -8.657159112999864 ], [ 119.62720787900014, -8.61834075299987 ], [ 119.63445071700005, -8.596612237999864 ], [ 119.65512129000024, -8.611586195999848 ], [ 119.66098066500012, -8.617771091999884 ], [ 119.66480553500003, -8.627373955999872 ], [ 119.66895592500032, -8.649672132999797 ], [ 119.67530358200008, -8.658786716999884 ] ] ], [ [ [ 122.40919030000009, -8.486748955999815 ], [ 122.37680097700002, -8.501722914999846 ], [ 122.35222415500016, -8.480157158999816 ], [ 122.34392337300028, -8.44841887799987 ], [ 122.36085045700008, -8.432875257999854 ], [ 122.38705488400012, -8.435642184999836 ], [ 122.41016686300009, -8.443942966999828 ], [ 122.42074629000012, -8.46013762799987 ], [ 122.40919030000009, -8.486748955999815 ] ] ], [ [ [ 113.37191816500012, -8.494724216999884 ], [ 113.2924910820002, -8.494805596999868 ], [ 113.28199303500014, -8.488213799999869 ], [ 113.27800540500016, -8.473321221999811 ], [ 113.28199303500014, -8.457207940999865 ], [ 113.2959090500002, -8.447035414999903 ], [ 113.29175866000003, -8.439711195999792 ], [ 113.28907311300031, -8.43279387799987 ], [ 113.3398543630002, -8.444024346999811 ], [ 113.39519290500004, -8.447035414999903 ], [ 113.40609785200002, -8.453220309999892 ], [ 113.4121199880002, -8.466892184999892 ], [ 113.4130965500002, -8.480564059999836 ], [ 113.40919030000009, -8.486748955999815 ], [ 113.39665774800017, -8.488376559999836 ], [ 113.37191816500012, -8.494724216999884 ] ] ], [ [ [ 119.4687606130002, -8.479180596999868 ], [ 119.48031660200002, -8.486748955999815 ], [ 119.52881920700008, -8.479261976999851 ], [ 119.54566491000014, -8.481133721999811 ], [ 119.55453535200024, -8.484551690999808 ], [ 119.56023196700005, -8.487969658999816 ], [ 119.56983483200008, -8.497979424999812 ], [ 119.5747176440002, -8.507012627999814 ], [ 119.57048587300005, -8.512139580999815 ], [ 119.56299889400009, -8.515313408999873 ], [ 119.55925540500004, -8.518161716999828 ], [ 119.56177819100014, -8.532159112999807 ], [ 119.56836998800031, -8.540297132999854 ], [ 119.57740319100014, -8.548435153999833 ], [ 119.58716881600014, -8.562432549999869 ], [ 119.57260175900024, -8.56560637799987 ], [ 119.57056725400003, -8.575372002999814 ], [ 119.57243899800017, -8.585625908999816 ], [ 119.56983483200008, -8.590427341999828 ], [ 119.53785241000014, -8.593682549999869 ], [ 119.52515709700003, -8.590427341999828 ], [ 119.51587975400025, -8.572686455999815 ], [ 119.50668379000001, -8.56585051899981 ], [ 119.49398847700013, -8.573011976999851 ], [ 119.47999108200008, -8.591729424999812 ], [ 119.47095787900014, -8.59677499799983 ], [ 119.45679772200026, -8.596612237999864 ], [ 119.46273847700002, -8.609307549999869 ], [ 119.47071373800031, -8.615411065999865 ], [ 119.47828209700026, -8.614027601999851 ], [ 119.48357181100005, -8.604099216999884 ], [ 119.49097741000003, -8.61093515399989 ], [ 119.48023522200003, -8.635430596999811 ], [ 119.47315514400009, -8.647230726999851 ], [ 119.46648196700016, -8.648532809999892 ], [ 119.45533287900014, -8.644301039999846 ], [ 119.4482528000002, -8.653578382999797 ], [ 119.44255618600005, -8.679131768999866 ], [ 119.44361412900003, -8.690606377999814 ], [ 119.44849694100014, -8.709161065999865 ], [ 119.45736738400001, -8.728122653999833 ], [ 119.46989993600005, -8.740655205999872 ], [ 119.44662519600001, -8.746351820999848 ], [ 119.39909915500016, -8.726495049999812 ], [ 119.38111412900014, -8.740655205999872 ], [ 119.37370853000016, -8.734470309999892 ], [ 119.38111412900014, -8.734470309999892 ], [ 119.37720787900025, -8.722426039999846 ], [ 119.38119550900012, -8.708916924999869 ], [ 119.40015709700015, -8.67498137799987 ], [ 119.40211022200015, -8.66757577899989 ], [ 119.40154056100016, -8.641534112999864 ], [ 119.39844811300009, -8.634372653999833 ], [ 119.39136803500014, -8.632094007999854 ], [ 119.3842879570002, -8.631117445999792 ], [ 119.38111412900014, -8.628024997999887 ], [ 119.38111412900014, -8.600355726999851 ], [ 119.37818444100003, -8.573988539999903 ], [ 119.37964928500003, -8.56585051899981 ], [ 119.38795006600026, -8.556329033999816 ], [ 119.39356530000009, -8.554945570999848 ], [ 119.40943444100014, -8.557386976999851 ], [ 119.41529381600014, -8.556329033999816 ], [ 119.41504967500009, -8.553155205999872 ], [ 119.42156009200028, -8.535739841999884 ], [ 119.42212975400014, -8.535251559999892 ], [ 119.4223738940002, -8.52646249799983 ], [ 119.4184676440002, -8.494805596999868 ], [ 119.42701256600003, -8.488051039999903 ], [ 119.42481530000032, -8.472588799999869 ], [ 119.41529381600014, -8.443291924999869 ], [ 119.42156009200028, -8.441501559999892 ], [ 119.45679772200026, -8.425957940999865 ], [ 119.46078535200002, -8.441094658999873 ], [ 119.4633895190002, -8.461195570999848 ], [ 119.4687606130002, -8.479180596999868 ] ] ], [ [ [ 123.16976972700013, -8.431329033999816 ], [ 123.17994225400003, -8.444431247999887 ], [ 123.17750084700015, -8.460219007999854 ], [ 123.1635848320002, -8.47372812299983 ], [ 123.12175540500027, -8.486260674999812 ], [ 123.03785241000014, -8.491875908999816 ], [ 123.00660241000014, -8.507907809999892 ], [ 122.95525149800005, -8.585625908999816 ], [ 122.93083743600016, -8.604099216999884 ], [ 122.91391035200002, -8.608330987999864 ], [ 122.90259850400003, -8.60458749799983 ], [ 122.88298587300005, -8.582940362999864 ], [ 122.91041100400003, -8.51474374799983 ], [ 122.99984785200013, -8.44866301899981 ], [ 123.00904381600026, -8.448174737999864 ], [ 123.01832116000003, -8.451267184999892 ], [ 123.02979576900009, -8.453220309999892 ], [ 123.04249108200031, -8.451429945999792 ], [ 123.07422936300009, -8.439629815999808 ], [ 123.08578535200002, -8.438571872999887 ], [ 123.10474694100003, -8.440687757999854 ], [ 123.11589603000004, -8.439629815999808 ], [ 123.12435957100001, -8.436293226999794 ], [ 123.14039147200026, -8.427666924999869 ], [ 123.14625084700015, -8.425957940999865 ], [ 123.16976972700013, -8.431329033999816 ] ] ], [ [ [ 121.7314559250002, -8.35076262799987 ], [ 121.70899498800031, -8.354750257999854 ], [ 121.69385826900032, -8.344333591999884 ], [ 121.67611738400012, -8.309258721999868 ], [ 121.68531334700003, -8.30380624799983 ], [ 121.69166100400014, -8.297784112999864 ], [ 121.6987410820002, -8.292250257999854 ], [ 121.71029707100013, -8.288750908999816 ], [ 121.73406009200005, -8.293145440999808 ], [ 121.74529056100016, -8.311700127999814 ], [ 121.74439537900014, -8.334405205999872 ], [ 121.7314559250002, -8.35076262799987 ] ] ], [ [ [ 123.28785241000014, -8.246351820999848 ], [ 123.31430097700024, -8.261407158999873 ], [ 123.32154381600014, -8.255629164999903 ], [ 123.33082116000014, -8.254652601999851 ], [ 123.34058678500014, -8.25888437299983 ], [ 123.34864342500009, -8.268812757999854 ], [ 123.35027103000004, -8.280043226999851 ], [ 123.34538821700005, -8.287774346999868 ], [ 123.33871504000012, -8.293715101999794 ], [ 123.33545983200031, -8.299248955999815 ], [ 123.32748457100001, -8.367608330999872 ], [ 123.32113691500012, -8.384942315999865 ], [ 123.28931725400014, -8.404473565999865 ], [ 123.24488366000003, -8.404717705999872 ], [ 123.1635848320002, -8.39177825299987 ], [ 123.08155358200008, -8.408623955999872 ], [ 123.0410262380002, -8.410821221999868 ], [ 123.01954186300031, -8.39177825299987 ], [ 123.02084394600013, -8.358330987999864 ], [ 123.03646894600024, -8.332289320999848 ], [ 123.12582441500012, -8.258721612999864 ], [ 123.14161217500009, -8.249932549999812 ], [ 123.15650475400014, -8.243584893999866 ], [ 123.18824303500003, -8.234958591999884 ], [ 123.20443769600024, -8.23349374799983 ], [ 123.2373153000002, -8.234063408999873 ], [ 123.26368248800031, -8.23788827899989 ], [ 123.28785241000014, -8.246351820999848 ] ] ], [ [ [ 116.7431746750002, -8.39177825299987 ], [ 116.73511803500003, -8.408868096999868 ], [ 116.7021590500002, -8.457452080999872 ], [ 116.69166100400025, -8.467461846999868 ], [ 116.68523196700005, -8.480564059999836 ], [ 116.68100019600013, -8.556329033999816 ], [ 116.66879316500024, -8.57382577899989 ], [ 116.62777754000024, -8.61484140399989 ], [ 116.61898847700013, -8.634860934999836 ], [ 116.59952836700006, -8.666385866999804 ], [ 116.58161992600003, -8.697813045999794 ], [ 116.55530487600026, -8.744972475999816 ], [ 116.5194038740002, -8.778563501999884 ], [ 116.50043781400018, -8.802687801999866 ], [ 116.50831139400009, -8.832940362999807 ], [ 116.50611412900003, -8.847588799999812 ], [ 116.50912519600001, -8.858005466999884 ], [ 116.52003014400009, -8.859470309999836 ], [ 116.52915414500023, -8.842353687999889 ], [ 116.54079663800007, -8.83603797499984 ], [ 116.54718187800017, -8.845433179999873 ], [ 116.55990644600013, -8.848809502999814 ], [ 116.5717879570002, -8.85881926899981 ], [ 116.5888778000002, -8.863213799999869 ], [ 116.56536852100021, -8.895582838999815 ], [ 116.52404660200011, -8.902006540999821 ], [ 116.50917661100016, -8.89682905799981 ], [ 116.4755965500002, -8.920017184999836 ], [ 116.44661086600013, -8.920080377999852 ], [ 116.43278890000022, -8.910705027999825 ], [ 116.45290485600015, -8.88655881499983 ], [ 116.46026020200009, -8.864555973999813 ], [ 116.47187992400018, -8.83939923499986 ], [ 116.4555770190002, -8.833672783999816 ], [ 116.42311581200022, -8.836406400999863 ], [ 116.39769974600017, -8.855322488999832 ], [ 116.39772762900009, -8.882544563999886 ], [ 116.40200819700021, -8.916042998999899 ], [ 116.40308678500014, -8.95419687299983 ], [ 116.38917076900009, -8.949151299999812 ], [ 116.3881942070002, -8.937595309999892 ], [ 116.38868248800009, -8.923516533999816 ], [ 116.37956790500016, -8.911879164999903 ], [ 116.3701278000002, -8.911065362999807 ], [ 116.36060631600026, -8.924493096999811 ], [ 116.35141035200002, -8.926202080999815 ], [ 116.34742272200003, -8.921319268999866 ], [ 116.34310957100013, -8.912041924999869 ], [ 116.33716881600003, -8.903008721999868 ], [ 116.32789147200015, -8.898858330999872 ], [ 116.3100692070002, -8.902439059999892 ], [ 116.27230879000012, -8.917250257999797 ], [ 116.25521894600001, -8.920017184999836 ], [ 116.24935957100024, -8.917413018999866 ], [ 116.24268639400009, -8.907891533999873 ], [ 116.23609459700015, -8.905694268999866 ], [ 116.22486412900014, -8.907972914999903 ], [ 116.21192467500009, -8.917738539999846 ], [ 116.20476321700005, -8.920017184999836 ], [ 116.19646243600016, -8.914320570999848 ], [ 116.17847741000003, -8.887790622999887 ], [ 116.16724694100003, -8.878513278999833 ], [ 116.15235436300009, -8.875664971999811 ], [ 116.10572350400025, -8.874688408999816 ], [ 116.10132897200026, -8.888929945999848 ], [ 116.09066816500024, -8.89592864399981 ], [ 116.0771590500002, -8.894626559999892 ], [ 116.06421959700015, -8.88396575299987 ], [ 116.07553144600024, -8.879489841999828 ], [ 116.0825301440002, -8.872735283999873 ], [ 116.08375084700015, -8.865004164999903 ], [ 116.07781009200005, -8.858005466999884 ], [ 116.06861412900014, -8.855726820999848 ], [ 116.05925540500004, -8.858493747999887 ], [ 116.0498153000002, -8.86272551899981 ], [ 116.04029381600014, -8.864678643999866 ], [ 116.0361434250002, -8.870538018999866 ], [ 116.03687584700003, -8.883070570999792 ], [ 116.04029381600014, -8.902276299999869 ], [ 116.02995853000016, -8.908135674999869 ], [ 116.01929772200026, -8.908135674999869 ], [ 116.00953209700003, -8.904473565999865 ], [ 116.00212649800017, -8.898858330999872 ], [ 115.99642988400012, -8.88974374799983 ], [ 115.98853600400014, -8.867282809999836 ], [ 115.98161868600016, -8.858005466999884 ], [ 115.9692488940002, -8.849379164999903 ], [ 115.96436608200008, -8.850274346999868 ], [ 115.95875084700015, -8.85507577899989 ], [ 115.94434655000032, -8.858005466999884 ], [ 115.9282332690002, -8.85491301899981 ], [ 115.86744225400014, -8.821221612999807 ], [ 115.83926184100028, -8.81685651499987 ], [ 115.82863780700018, -8.791785517999813 ], [ 115.83069647400021, -8.7698117569999 ], [ 115.833821339, -8.748873542999831 ], [ 115.84859164500017, -8.724792571999899 ], [ 115.86890709700015, -8.730645440999865 ], [ 115.8794051440002, -8.724786065999808 ], [ 115.88445071700016, -8.732842705999872 ], [ 115.88746178500026, -8.745782158999873 ], [ 115.89226321700028, -8.754815362999864 ], [ 115.91846409200025, -8.753740461999826 ], [ 115.9417594360001, -8.754876932999821 ], [ 115.9544494700001, -8.753719628999875 ], [ 115.96820292200016, -8.747449558999904 ], [ 115.98302589600007, -8.737059159999831 ], [ 115.99301191500024, -8.742364190999865 ], [ 116.00261478000004, -8.742771091999884 ], [ 116.01384524800005, -8.746677341999884 ], [ 116.02320397200015, -8.748142184999892 ], [ 116.02784264400009, -8.744724216999884 ], [ 116.0337020190002, -8.738864841999884 ], [ 116.04118899800017, -8.734144789999846 ], [ 116.05054772200003, -8.734470309999892 ], [ 116.0532332690002, -8.739515882999797 ], [ 116.05746504000012, -8.749932549999812 ], [ 116.06566998700021, -8.759974082999861 ], [ 116.07728005000013, -8.743198231999884 ], [ 116.08757571700028, -8.737237237999864 ], [ 116.09148196700005, -8.726983330999815 ], [ 116.06027107900013, -8.713907240999902 ], [ 116.0633485310002, -8.673058821999859 ], [ 116.07067293000023, -8.638494197999876 ], [ 116.07264452500021, -8.577783690999866 ], [ 116.06299408200005, -8.521300971999892 ], [ 116.03859148100003, -8.500403088999804 ], [ 116.02793675600014, -8.445007651999902 ], [ 116.05004674600013, -8.414638435999791 ], [ 116.06908823800018, -8.406236988999808 ], [ 116.09791100400025, -8.408461195999848 ], [ 116.10572350400025, -8.405450127999814 ], [ 116.11060631600014, -8.399183851999851 ], [ 116.1171981130002, -8.38201262799987 ], [ 116.12281334700015, -8.37444426899981 ], [ 116.13843834700015, -8.362969658999873 ], [ 116.16797936300009, -8.346937757999854 ], [ 116.18091881600026, -8.337172132999854 ], [ 116.26970462300017, -8.247735283999816 ], [ 116.28638756600014, -8.236260674999869 ], [ 116.37623131600026, -8.201836846999868 ], [ 116.39380944100003, -8.201104424999812 ], [ 116.42465254000024, -8.217705987999864 ], [ 116.49740644600001, -8.237399997999887 ], [ 116.5390731130002, -8.243829033999816 ], [ 116.55445397200015, -8.251234632999797 ], [ 116.57300866000003, -8.264092705999872 ], [ 116.59099368600027, -8.269707940999865 ], [ 116.63331139400009, -8.275079033999873 ], [ 116.66822350400003, -8.289239190999808 ], [ 116.70622806100016, -8.317071221999868 ], [ 116.73511803500003, -8.352959893999866 ], [ 116.7431746750002, -8.39177825299987 ] ] ], [ [ [ 128.22193444100014, -8.208916924999812 ], [ 128.22641035200024, -8.239678643999866 ], [ 128.23121178500014, -8.251234632999797 ], [ 128.23764082100013, -8.264092705999872 ], [ 128.23145592500009, -8.27288176899981 ], [ 128.21900475400014, -8.278578382999797 ], [ 128.20728600400025, -8.281914971999811 ], [ 128.18197675900012, -8.285088799999869 ], [ 128.15162194100014, -8.284600518999866 ], [ 128.12330162900014, -8.280938408999873 ], [ 128.10368899800005, -8.275079033999873 ], [ 128.09685306100005, -8.270928643999866 ], [ 128.08822675900012, -8.263848565999808 ], [ 128.08326256600014, -8.254571221999868 ], [ 128.08716881600026, -8.244317315999808 ], [ 128.09457441500024, -8.232354424999869 ], [ 128.09799238400012, -8.220961195999848 ], [ 128.10377037900014, -8.211846612999864 ], [ 128.11793053500014, -8.206801039999903 ], [ 128.13917076900032, -8.216485283999873 ], [ 128.1660262380002, -8.210544528999833 ], [ 128.19271894600024, -8.200941664999846 ], [ 128.21355228000016, -8.199395440999808 ], [ 128.22193444100014, -8.208916924999812 ] ] ], [ [ [ 123.94117272200015, -8.243747653999833 ], [ 123.9375106130002, -8.26523202899989 ], [ 123.93238366000014, -8.271416924999869 ], [ 123.92058353000004, -8.276136976999851 ], [ 123.8764754570002, -8.286228122999887 ], [ 123.81128991000014, -8.288750908999816 ], [ 123.78988691500001, -8.293633721999811 ], [ 123.7754012380002, -8.30584075299987 ], [ 123.76587975400003, -8.32170989399981 ], [ 123.7509871750002, -8.356377862999864 ], [ 123.72885175900012, -8.393324476999851 ], [ 123.68751061300009, -8.436211846999811 ], [ 123.6767684250002, -8.438164971999868 ], [ 123.66879316500001, -8.427422783999873 ], [ 123.66277103000016, -8.413344007999797 ], [ 123.65699303500003, -8.405450127999814 ], [ 123.6430770190002, -8.411228122999887 ], [ 123.62468509200016, -8.427666924999869 ], [ 123.60865319100014, -8.445896091999884 ], [ 123.60181725400003, -8.456963799999812 ], [ 123.59620201900009, -8.461846612999864 ], [ 123.58383222700013, -8.465997002999814 ], [ 123.57211347700024, -8.471612237999807 ], [ 123.56763756600014, -8.481133721999811 ], [ 123.57374108200008, -8.491875908999816 ], [ 123.60922285200013, -8.535251559999892 ], [ 123.59791100400014, -8.555352471999868 ], [ 123.58301842500032, -8.565524997999887 ], [ 123.56470787900014, -8.568942966999884 ], [ 123.54346764400009, -8.569268487999807 ], [ 123.53386478000016, -8.563083591999828 ], [ 123.51148522200015, -8.532810153999833 ], [ 123.50001061300009, -8.521579684999836 ], [ 123.4550887380002, -8.569268487999807 ], [ 123.44532311300031, -8.572523695999848 ], [ 123.43051191500012, -8.58709075299987 ], [ 123.42074629000012, -8.590427341999828 ], [ 123.4067488940002, -8.589450778999833 ], [ 123.3994246750002, -8.586032809999836 ], [ 123.3833113940002, -8.569268487999807 ], [ 123.34685306100016, -8.543226820999848 ], [ 123.32439212300017, -8.534600518999866 ], [ 123.31080162900025, -8.549248955999872 ], [ 123.30201256600026, -8.552829684999892 ], [ 123.29175866000014, -8.555352471999868 ], [ 123.28337649800017, -8.556329033999816 ], [ 123.27914472700024, -8.554945570999848 ], [ 123.26685631600014, -8.548272393999866 ], [ 123.26319420700008, -8.545505466999884 ], [ 123.25611412900014, -8.541924737999864 ], [ 123.25074303500014, -8.544691664999903 ], [ 123.24545332100024, -8.548760674999869 ], [ 123.2387801440002, -8.548923434999892 ], [ 123.22730553500026, -8.526055596999811 ], [ 123.25269616000003, -8.497002862999864 ], [ 123.31430097700024, -8.453220309999892 ], [ 123.35759524800017, -8.41130950299987 ], [ 123.37281334700015, -8.405450127999814 ], [ 123.38705488400012, -8.401788018999866 ], [ 123.46810957100013, -8.365980726999851 ], [ 123.48015384200005, -8.358086846999868 ], [ 123.48568769600013, -8.35076262799987 ], [ 123.48365319100014, -8.330173434999836 ], [ 123.47331790500004, -8.320977471999868 ], [ 123.43783613400024, -8.316664320999848 ], [ 123.3696395190002, -8.316664320999848 ], [ 123.36638431100016, -8.304457289999903 ], [ 123.38005618600016, -8.28826262799987 ], [ 123.39966881600026, -8.273858330999872 ], [ 123.41423587300017, -8.267185153999833 ], [ 123.42758222700002, -8.270277601999794 ], [ 123.44288170700008, -8.27695077899989 ], [ 123.45679772200015, -8.279066664999903 ], [ 123.4658309250002, -8.268812757999854 ], [ 123.48015384200005, -8.267510674999869 ], [ 123.50220787900014, -8.246270440999865 ], [ 123.5161238940002, -8.240899346999811 ], [ 123.54273522200015, -8.242771091999884 ], [ 123.56763756600014, -8.247735283999816 ], [ 123.56234785200013, -8.255059502999814 ], [ 123.5634871750002, -8.271905205999815 ], [ 123.56080162900003, -8.281914971999811 ], [ 123.55298912900003, -8.291761976999851 ], [ 123.52662194100014, -8.316664320999848 ], [ 123.5171004570002, -8.337497653999833 ], [ 123.51791425900001, -8.352959893999866 ], [ 123.52849368600016, -8.364027601999794 ], [ 123.54712975400014, -8.371270440999865 ], [ 123.5683699880002, -8.374932549999869 ], [ 123.58912194100003, -8.373630466999884 ], [ 123.60466556100005, -8.364190362999864 ], [ 123.60922285200013, -8.34335702899989 ], [ 123.60059655000009, -8.32927825299987 ], [ 123.58676191500001, -8.317152601999851 ], [ 123.58228600400014, -8.30608489399981 ], [ 123.60181725400003, -8.295586846999868 ], [ 123.61402428500014, -8.309258721999868 ], [ 123.6279403000002, -8.307305596999868 ], [ 123.63917076900032, -8.29412200299987 ], [ 123.64332116000003, -8.275079033999873 ], [ 123.63892662900014, -8.261407158999873 ], [ 123.63086998800009, -8.252699476999851 ], [ 123.62533613400024, -8.244886976999794 ], [ 123.62907962300017, -8.23349374799983 ], [ 123.6342879570002, -8.22812265399989 ], [ 123.64161217500009, -8.223077080999815 ], [ 123.64966881600014, -8.219984632999854 ], [ 123.65699303500003, -8.220472914999903 ], [ 123.66570071700016, -8.226983330999815 ], [ 123.66749108200008, -8.234551690999865 ], [ 123.66724694100014, -8.241957289999846 ], [ 123.67066491000014, -8.247735283999816 ], [ 123.6840926440002, -8.251560153999833 ], [ 123.70134524800005, -8.251234632999797 ], [ 123.71168053500014, -8.245538018999866 ], [ 123.70484459700026, -8.23349374799983 ], [ 123.70484459700026, -8.227308851999851 ], [ 123.73072350400025, -8.223321221999868 ], [ 123.7504988940002, -8.208754164999846 ], [ 123.76710045700031, -8.193047783999873 ], [ 123.78394616000026, -8.185723565999865 ], [ 123.78882897200015, -8.18466562299983 ], [ 123.79818769600024, -8.179945570999848 ], [ 123.80445397200015, -8.17888762799987 ], [ 123.81031334700015, -8.18124765399989 ], [ 123.81316165500027, -8.185967705999815 ], [ 123.8149520190002, -8.191013278999833 ], [ 123.81812584700003, -8.193129164999846 ], [ 123.82309004000001, -8.195733330999872 ], [ 123.8398543630002, -8.20842864399981 ], [ 123.84880618600005, -8.213636976999851 ], [ 123.86402428500003, -8.218682549999869 ], [ 123.88404381600014, -8.222914320999848 ], [ 123.92798912900003, -8.227308851999851 ], [ 123.93881269600001, -8.232191664999903 ], [ 123.94117272200015, -8.243747653999833 ] ] ], [ [ [ 124.23218834700003, -8.381280205999815 ], [ 124.2187606130002, -8.401543877999814 ], [ 124.20883222700002, -8.42302825299987 ], [ 124.20134524800005, -8.465590101999794 ], [ 124.19166100400014, -8.489353122999887 ], [ 124.17872155000009, -8.511325778999833 ], [ 124.16480553500003, -8.528252862999807 ], [ 124.14958743600005, -8.539320570999848 ], [ 124.12989342500009, -8.548272393999866 ], [ 124.10759524800017, -8.55413176899981 ], [ 124.0849715500002, -8.556329033999816 ], [ 124.05933678500003, -8.551527601999851 ], [ 124.0512801440002, -8.539157809999892 ], [ 124.05494225400003, -8.501071872999887 ], [ 124.05062910200013, -8.482110283999873 ], [ 124.03126061300031, -8.45647551899981 ], [ 124.02702884200028, -8.443291924999869 ], [ 124.01880944100003, -8.429945570999848 ], [ 123.9995223320002, -8.430271091999884 ], [ 123.97689863400001, -8.437920830999815 ], [ 123.93897545700008, -8.457777601999851 ], [ 123.93116295700008, -8.460056247999887 ], [ 123.92115319100003, -8.460625908999873 ], [ 123.9072371750002, -8.454847914999903 ], [ 123.91285241000003, -8.442152601999851 ], [ 123.9253035820002, -8.430271091999884 ], [ 123.93140709700003, -8.425957940999865 ], [ 123.96697024800017, -8.360772393999866 ], [ 123.98511803500003, -8.338311455999872 ], [ 124.02328535200013, -8.313409112999807 ], [ 124.04420006600003, -8.304864190999808 ], [ 124.05836022200003, -8.30608489399981 ], [ 124.06910241000014, -8.315606377999814 ], [ 124.0737410820002, -8.320977471999868 ], [ 124.0830184250002, -8.349867445999792 ], [ 124.0825301440002, -8.352471612999864 ], [ 124.08326256600026, -8.355889580999872 ], [ 124.0971785820002, -8.377211195999848 ], [ 124.1020613940002, -8.381442966999884 ], [ 124.10938561300031, -8.384942315999865 ], [ 124.11036217500009, -8.363702080999872 ], [ 124.12208092500009, -8.349786065999808 ], [ 124.15056399800028, -8.329766533999873 ], [ 124.18441816500012, -8.271172783999873 ], [ 124.2041121750002, -8.251722914999903 ], [ 124.23178144600001, -8.209079684999892 ], [ 124.2470809250002, -8.196221612999864 ], [ 124.25123131600014, -8.189141533999873 ], [ 124.25814863400001, -8.182061455999815 ], [ 124.27027428500003, -8.17888762799987 ], [ 124.2846785820002, -8.183282158999873 ], [ 124.29493248800009, -8.193942966999884 ], [ 124.3081160820002, -8.220472914999903 ], [ 124.29379316500024, -8.257989190999865 ], [ 124.29102623800009, -8.280531507999854 ], [ 124.29761803500014, -8.299248955999815 ], [ 124.29997806100016, -8.319268487999864 ], [ 124.28345787900014, -8.338555596999811 ], [ 124.24675540500004, -8.364515882999797 ], [ 124.23218834700003, -8.381280205999815 ] ] ], [ [ [ 129.03614342500009, -8.22031015399989 ], [ 129.03500410200013, -8.236097914999903 ], [ 129.02767988400012, -8.250909112999864 ], [ 129.01596113400012, -8.261407158999873 ], [ 129.00619550900001, -8.263604424999869 ], [ 128.99341881600026, -8.261488539999846 ], [ 128.97901451900009, -8.255059502999814 ], [ 128.96461022200015, -8.244317315999808 ], [ 128.9492293630002, -8.236016533999816 ], [ 128.93913821700016, -8.240655205999872 ], [ 128.92969811300009, -8.249688408999873 ], [ 128.91635175900001, -8.254652601999851 ], [ 128.8877059250002, -8.244886976999794 ], [ 128.85230553500003, -8.222914320999848 ], [ 128.8344832690002, -8.199802341999828 ], [ 128.85840905000009, -8.185723565999865 ], [ 128.88949629000012, -8.177829684999892 ], [ 128.9853621750002, -8.185723565999865 ], [ 128.98951256600014, -8.188897393999866 ], [ 129.02963300900001, -8.206801039999903 ], [ 129.03614342500009, -8.22031015399989 ] ] ], [ [ [ 138.90447024800028, -8.351739190999865 ], [ 138.91089928500003, -8.374769789999903 ], [ 138.90984134200005, -8.39609140399989 ], [ 138.8940535820002, -8.405450127999814 ], [ 138.69996178500003, -8.394626559999836 ], [ 138.65406334700015, -8.376153252999814 ], [ 138.62989342500032, -8.371270440999865 ], [ 138.58236738400012, -8.372979424999869 ], [ 138.55836022200015, -8.36663176899981 ], [ 138.54802493600016, -8.34710051899981 ], [ 138.5522567070002, -8.322686455999872 ], [ 138.56421959700003, -8.307305596999868 ], [ 138.63998457100013, -8.25701262799987 ], [ 138.6572371750002, -8.241143487999864 ], [ 138.66472415500016, -8.223890882999854 ], [ 138.66716556100005, -8.203057549999869 ], [ 138.67505944100026, -8.189141533999873 ], [ 138.68881269600013, -8.181329033999873 ], [ 138.72852623800031, -8.176690362999864 ], [ 138.78532962300017, -8.158949476999851 ], [ 138.81690514400009, -8.161879164999903 ], [ 138.83139082100001, -8.185642184999892 ], [ 138.83529707100013, -8.219008070999848 ], [ 138.83529707100013, -8.251234632999797 ], [ 138.84197024800005, -8.27695077899989 ], [ 138.85816491000014, -8.297458591999828 ], [ 138.89730879000012, -8.337172132999854 ], [ 138.90447024800028, -8.351739190999865 ] ] ], [ [ [ 127.68913821700028, -8.23788827899989 ], [ 127.66920006600014, -8.240899346999811 ], [ 127.64812259200016, -8.235772393999866 ], [ 127.62077884200016, -8.212660414999846 ], [ 127.60401451900009, -8.206801039999903 ], [ 127.68295332100013, -8.155205987999864 ], [ 127.7026473320002, -8.151462497999887 ], [ 127.72291100400014, -8.153008721999868 ], [ 127.74187259200016, -8.158949476999851 ], [ 127.76059004000024, -8.173923434999892 ], [ 127.7719832690002, -8.194431247999887 ], [ 127.76880944100014, -8.212579033999873 ], [ 127.74488366000003, -8.220472914999903 ], [ 127.72437584700003, -8.223728122999887 ], [ 127.68913821700028, -8.23788827899989 ] ] ], [ [ [ 117.55372155000009, -8.379001559999836 ], [ 117.53394616000026, -8.384942315999865 ], [ 117.52613366000014, -8.381768487999807 ], [ 117.49252363400012, -8.361016533999816 ], [ 117.48487389400009, -8.350192966999884 ], [ 117.48560631600003, -8.343031507999854 ], [ 117.49594160200013, -8.329766533999873 ], [ 117.5112410820002, -8.295505466999884 ], [ 117.51075280000009, -8.281019789999903 ], [ 117.49976647200015, -8.26523202899989 ], [ 117.4897567070002, -8.25741952899989 ], [ 117.48462975400014, -8.255059502999814 ], [ 117.48267662900003, -8.250664971999868 ], [ 117.4804793630002, -8.209161065999865 ], [ 117.48161868600005, -8.195000908999816 ], [ 117.48682701900032, -8.182875257999854 ], [ 117.49390709700003, -8.176202080999872 ], [ 117.5483504570002, -8.149021091999884 ], [ 117.5634871750002, -8.145196221999868 ], [ 117.66431725400014, -8.148125908999873 ], [ 117.67310631600014, -8.154066664999903 ], [ 117.68336022200015, -8.158623955999872 ], [ 117.69174238400012, -8.164727471999868 ], [ 117.69532311300009, -8.175876559999836 ], [ 117.69255618600016, -8.183526299999869 ], [ 117.68539472700013, -8.189222914999846 ], [ 117.66732832100013, -8.199395440999808 ], [ 117.64031009200005, -8.22405364399981 ], [ 117.62061608200008, -8.253594658999873 ], [ 117.56657962300028, -8.363946221999811 ], [ 117.55372155000009, -8.379001559999836 ] ] ], [ [ [ 119.10035241000003, -8.251560153999833 ], [ 119.07878665500004, -8.262139580999872 ], [ 119.05152428500003, -8.261407158999873 ], [ 119.02279707100001, -8.234307549999812 ], [ 119.02027428500026, -8.189711195999848 ], [ 119.04200280000032, -8.148532809999892 ], [ 119.0864363940002, -8.131524346999811 ], [ 119.11304772200003, -8.146661065999808 ], [ 119.13152103000016, -8.166273695999792 ], [ 119.13746178500014, -8.19060637799987 ], [ 119.12720787900003, -8.220472914999903 ], [ 119.11654707100013, -8.235609632999854 ], [ 119.10035241000003, -8.251560153999833 ] ] ], [ [ [ 124.56869550900012, -8.131036065999865 ], [ 124.58570397200015, -8.145765882999854 ], [ 124.58920332100001, -8.19060637799987 ], [ 124.60303795700008, -8.206801039999903 ], [ 124.64340254000024, -8.180433851999794 ], [ 124.66504967500032, -8.169691664999903 ], [ 124.6879988940002, -8.165215752999814 ], [ 124.77361087300017, -8.158949476999851 ], [ 124.89828535200024, -8.168145440999865 ], [ 124.93816165500004, -8.158949476999851 ], [ 124.9453231130002, -8.154554945999792 ], [ 124.9477645190002, -8.151136976999794 ], [ 124.95232181100005, -8.149834893999866 ], [ 124.96607506600014, -8.15154387799987 ], [ 124.97087649800005, -8.154229424999869 ], [ 124.97624759200016, -8.158868096999868 ], [ 124.98422285200013, -8.16326262799987 ], [ 124.99675540500016, -8.165215752999814 ], [ 125.04656009200005, -8.157810153999833 ], [ 125.08082116000014, -8.159437757999854 ], [ 125.08692467500009, -8.158786716999884 ], [ 125.09253991000003, -8.161553643999866 ], [ 125.10320071700005, -8.172621351999794 ], [ 125.1245223320002, -8.205824476999851 ], [ 125.13404381600003, -8.217054945999848 ], [ 125.13917076900032, -8.233575127999814 ], [ 125.13746178500014, -8.321384372999887 ], [ 125.13428795700031, -8.33904387799987 ], [ 125.12330162900003, -8.352308851999851 ], [ 125.09978274800017, -8.357598565999808 ], [ 125.07886803500014, -8.359307549999812 ], [ 125.02125084700003, -8.371270440999865 ], [ 124.93238366000014, -8.377373955999815 ], [ 124.7661238940002, -8.408461195999848 ], [ 124.72535241000026, -8.409763278999833 ], [ 124.67009524800017, -8.403090101999851 ], [ 124.66163170700031, -8.403415622999887 ], [ 124.65015709700015, -8.405450127999814 ], [ 124.6391707690002, -8.410251559999892 ], [ 124.6167098320002, -8.423109632999854 ], [ 124.59644616000003, -8.428155205999872 ], [ 124.57601972700013, -8.437432549999812 ], [ 124.55909264400009, -8.440687757999854 ], [ 124.54957116000014, -8.445896091999884 ], [ 124.54460696700016, -8.447035414999903 ], [ 124.53842207100013, -8.445000908999873 ], [ 124.52654056100016, -8.435642184999836 ], [ 124.52035566500012, -8.43279387799987 ], [ 124.50196373800009, -8.429782809999892 ], [ 124.49545332100013, -8.430352471999868 ], [ 124.48633873800009, -8.43279387799987 ], [ 124.46070397200003, -8.445082289999846 ], [ 124.45541425900024, -8.447035414999903 ], [ 124.44955488400001, -8.45029062299983 ], [ 124.44418379000012, -8.457207940999865 ], [ 124.43751061300009, -8.46428801899981 ], [ 124.42790774800005, -8.467461846999868 ], [ 124.41822350400014, -8.464613539999903 ], [ 124.40691165500016, -8.451104424999869 ], [ 124.39682050900001, -8.447035414999903 ], [ 124.39096113400001, -8.448907158999873 ], [ 124.37322024800028, -8.458265882999797 ], [ 124.37029056100005, -8.460625908999873 ], [ 124.35710696700016, -8.456312757999854 ], [ 124.35075931100016, -8.44882577899989 ], [ 124.3462020190002, -8.439222914999903 ], [ 124.33855228000016, -8.429375908999873 ], [ 124.3335067070002, -8.413018487999864 ], [ 124.34538821700005, -8.396416924999812 ], [ 124.3764754570002, -8.371270440999865 ], [ 124.38607832100001, -8.358330987999864 ], [ 124.40674889400032, -8.320570570999848 ], [ 124.41049238400012, -8.30608489399981 ], [ 124.4726668630002, -8.268812757999854 ], [ 124.50440514400032, -8.264092705999872 ], [ 124.5141707690002, -8.261407158999873 ], [ 124.51929772200015, -8.257500908999873 ], [ 124.53296959700003, -8.243829033999816 ], [ 124.54297936300009, -8.23788827899989 ], [ 124.54761803500003, -8.230726820999848 ], [ 124.54761803500003, -8.223728122999887 ], [ 124.53777103000027, -8.220472914999903 ], [ 124.5156356130002, -8.22568124799983 ], [ 124.4931746750002, -8.23349374799983 ], [ 124.42123457100013, -8.267510674999869 ], [ 124.39242597700013, -8.26523202899989 ], [ 124.39682050900001, -8.220472914999903 ], [ 124.40552819100014, -8.211114190999808 ], [ 124.41968834700003, -8.20224374799983 ], [ 124.43279056100027, -8.191094658999816 ], [ 124.43848717500009, -8.175876559999836 ], [ 124.4419051440002, -8.162041924999869 ], [ 124.45069420700031, -8.149021091999884 ], [ 124.46265709700015, -8.138604424999869 ], [ 124.47527103000016, -8.132582289999903 ], [ 124.49634850400025, -8.138604424999869 ], [ 124.5454207690002, -8.130140882999854 ], [ 124.56869550900012, -8.131036065999865 ] ] ], [ [ [ 127.8325301440002, -8.098565362999864 ], [ 127.86793053500003, -8.106215101999851 ], [ 127.94027754000001, -8.131036065999865 ], [ 128.01783287900003, -8.143161716999828 ], [ 128.05738366000014, -8.142022393999866 ], [ 128.09058678500014, -8.131036065999865 ], [ 128.12354576900009, -8.150323174999869 ], [ 128.1274520190002, -8.161309502999814 ], [ 128.11793053500014, -8.17888762799987 ], [ 128.06641686300009, -8.220472914999903 ], [ 128.05396569100014, -8.226820570999848 ], [ 128.04151451900032, -8.255059502999814 ], [ 128.02564537900014, -8.261407158999873 ], [ 128.00863691500012, -8.258721612999864 ], [ 127.9941512380002, -8.251885674999869 ], [ 127.95199629000012, -8.223890882999854 ], [ 127.93930097700013, -8.218194268999866 ], [ 127.92530358200031, -8.215101820999792 ], [ 127.86378014400009, -8.210707289999903 ], [ 127.84359785200013, -8.205743096999868 ], [ 127.82699629000001, -8.196384372999887 ], [ 127.80209394600024, -8.176202080999872 ], [ 127.79322350400003, -8.162367445999792 ], [ 127.78956139400032, -8.141371351999851 ], [ 127.7851668630002, -8.131605726999794 ], [ 127.77556399800017, -8.12460702899989 ], [ 127.76156660200013, -8.117445570999792 ], [ 127.76563561300009, -8.108086846999868 ], [ 127.77418053500014, -8.103448174999812 ], [ 127.7851668630002, -8.102308851999794 ], [ 127.79639733200008, -8.103773695999848 ], [ 127.8325301440002, -8.098565362999864 ] ] ], [ [ [ 117.9712020190002, -8.100355726999851 ], [ 117.97754967500009, -8.109144789999903 ], [ 117.98609459700015, -8.107191664999846 ], [ 117.99610436300009, -8.100681247999887 ], [ 118.00505618600005, -8.100192966999884 ], [ 118.02418053500014, -8.103773695999848 ], [ 118.07154381600003, -8.105401299999869 ], [ 118.1152449880002, -8.113864841999884 ], [ 118.14966881600014, -8.134454033999873 ], [ 118.16822350400014, -8.172621351999794 ], [ 118.17269941500001, -8.213148695999848 ], [ 118.17725670700008, -8.232679945999792 ], [ 118.18506920700008, -8.240899346999811 ], [ 118.18913821700016, -8.248223565999808 ], [ 118.22291100400003, -8.288750908999816 ], [ 118.24390709700015, -8.328708591999884 ], [ 118.25359134200016, -8.340264580999815 ], [ 118.25953209700003, -8.342868747999887 ], [ 118.2641707690002, -8.34099700299987 ], [ 118.26807701900032, -8.338067315999808 ], [ 118.27068118600005, -8.337172132999854 ], [ 118.30396569100003, -8.36825937299983 ], [ 118.31226647200015, -8.371270440999865 ], [ 118.32781009200016, -8.367608330999872 ], [ 118.34701582100001, -8.357354424999869 ], [ 118.36524498800009, -8.344659112999807 ], [ 118.39161217500009, -8.318454684999836 ], [ 118.39828535200002, -8.309014580999872 ], [ 118.40113366000014, -8.299248955999815 ], [ 118.40642337300005, -8.295586846999868 ], [ 118.41814212300017, -8.290134372999887 ], [ 118.42986087300028, -8.282484632999797 ], [ 118.44361412900003, -8.257907809999892 ], [ 118.46338951900032, -8.24944426899981 ], [ 118.48609459700003, -8.246189059999892 ], [ 118.50342858200008, -8.247735283999816 ], [ 118.5131942070002, -8.253187757999854 ], [ 118.52955162900003, -8.266289971999811 ], [ 118.5410262380002, -8.268812757999854 ], [ 118.58228600400014, -8.268812757999854 ], [ 118.59017988400001, -8.270684502999814 ], [ 118.59644616000014, -8.274672132999797 ], [ 118.60173587300005, -8.279066664999903 ], [ 118.6064559250002, -8.281914971999811 ], [ 118.63941491000003, -8.28630950299987 ], [ 118.6474715500002, -8.288750908999816 ], [ 118.66374759200016, -8.305759372999887 ], [ 118.6958113940002, -8.371270440999865 ], [ 118.68913821700028, -8.38787200299987 ], [ 118.68474368600016, -8.412692966999828 ], [ 118.68148847700002, -8.456963799999812 ], [ 118.65650475400014, -8.52646249799983 ], [ 118.6543074880002, -8.542087497999887 ], [ 118.66732832100013, -8.547295830999872 ], [ 118.6831160820002, -8.533461195999792 ], [ 118.69646243600005, -8.514580987999864 ], [ 118.70199629000012, -8.504489841999884 ], [ 118.70427493600027, -8.497002862999864 ], [ 118.71517988400012, -8.471449476999851 ], [ 118.72689863400001, -8.451836846999868 ], [ 118.72584069100014, -8.441989841999884 ], [ 118.72095787900025, -8.432061455999872 ], [ 118.7163192070002, -8.41912200299987 ], [ 118.71697024800017, -8.379571221999811 ], [ 118.73145592500009, -8.349297783999816 ], [ 118.7539168630002, -8.326429945999848 ], [ 118.7778426440002, -8.309258721999868 ], [ 118.81267337300005, -8.295586846999868 ], [ 118.85922285200013, -8.288832289999903 ], [ 118.90805097700013, -8.288832289999903 ], [ 118.94971764400009, -8.295586846999868 ], [ 118.97250410200002, -8.302015882999854 ], [ 118.9882918630002, -8.309014580999872 ], [ 118.99830162900014, -8.321221612999807 ], [ 119.0044051440002, -8.34335702899989 ], [ 119.00733483200008, -8.372002862999864 ], [ 119.02165774800005, -8.41952890399989 ], [ 119.05111738400012, -8.470472914999903 ], [ 119.04558353000004, -8.50896575299987 ], [ 119.03052819100003, -8.547784112999864 ], [ 119.03842207100001, -8.582940362999864 ], [ 119.03834069100003, -8.607679945999848 ], [ 119.04151451900009, -8.629815362999807 ], [ 119.0522567070002, -8.645684502999814 ], [ 119.0756942070002, -8.65195077899989 ], [ 119.09050540500016, -8.649102471999868 ], [ 119.1108504570002, -8.642266533999816 ], [ 119.13013756600026, -8.633396091999884 ], [ 119.14087975400025, -8.62460702899989 ], [ 119.14039147200015, -8.615329684999836 ], [ 119.13542728000004, -8.606215101999851 ], [ 119.13396243600005, -8.599379164999846 ], [ 119.15455162900014, -8.594414971999868 ], [ 119.1596785820002, -8.588067315999865 ], [ 119.16138756600003, -8.578383070999792 ], [ 119.16138756600003, -8.56585051899981 ], [ 119.16732832100013, -8.559747002999814 ], [ 119.18091881600014, -8.573011976999851 ], [ 119.19507897200003, -8.594008070999792 ], [ 119.20362389400032, -8.61093515399989 ], [ 119.1992293630002, -8.61239999799983 ], [ 119.19312584700026, -8.615980726999794 ], [ 119.18930097700013, -8.617771091999884 ], [ 119.1943465500002, -8.626071872999887 ], [ 119.1894637380002, -8.631280205999872 ], [ 119.18091881600014, -8.636488539999846 ], [ 119.17497806100016, -8.645114841999884 ], [ 119.17408287900025, -8.659926039999903 ], [ 119.17701256600003, -8.674493096999868 ], [ 119.18246504000012, -8.688164971999811 ], [ 119.18930097700013, -8.700290622999887 ], [ 119.18100019600013, -8.703383070999792 ], [ 119.17774498800031, -8.706801039999903 ], [ 119.1782332690002, -8.71209075299987 ], [ 119.18181399800017, -8.720798434999836 ], [ 119.16456139400009, -8.731540622999887 ], [ 119.15162194100026, -8.742364190999865 ], [ 119.13843834700003, -8.745782158999873 ], [ 119.12037194100003, -8.734470309999892 ], [ 119.1167098320002, -8.747816664999903 ], [ 119.11003665500027, -8.753594658999873 ], [ 119.10059655000009, -8.752129815999808 ], [ 119.08969160200002, -8.744317315999808 ], [ 119.07789147200003, -8.73935312299983 ], [ 119.0654403000002, -8.741143487999864 ], [ 119.05298912900003, -8.74553801899981 ], [ 118.99154707100013, -8.755059502999814 ], [ 118.97185306100016, -8.751153252999814 ], [ 118.94597415500016, -8.730645440999865 ], [ 118.92359459700003, -8.698500257999797 ], [ 118.9155379570002, -8.692152601999851 ], [ 118.8984481130002, -8.688409112999864 ], [ 118.89193769600001, -8.693454684999892 ], [ 118.88851972700013, -8.703301690999808 ], [ 118.8808699880002, -8.71396249799983 ], [ 118.85710696700016, -8.72177499799983 ], [ 118.81332441500012, -8.710219007999797 ], [ 118.79135175900024, -8.720798434999836 ], [ 118.7651473320002, -8.710870049999869 ], [ 118.74642988400012, -8.71786874799983 ], [ 118.72779381600014, -8.733168226999794 ], [ 118.70199629000012, -8.748142184999892 ], [ 118.7119246750002, -8.754815362999864 ], [ 118.7265731130002, -8.769789320999792 ], [ 118.73617597700002, -8.774672132999854 ], [ 118.74659264400009, -8.776299737999807 ], [ 118.82569420700008, -8.77654387799987 ], [ 118.9072371750002, -8.789727471999868 ], [ 118.92693118600016, -8.796563408999816 ], [ 118.93539472700002, -8.80608489399981 ], [ 118.93775475400025, -8.812269789999903 ], [ 118.94752037900003, -8.82537200299987 ], [ 118.94971764400009, -8.833672783999816 ], [ 118.94459069100014, -8.841485283999816 ], [ 118.93246504000001, -8.846449476999851 ], [ 118.90805097700013, -8.850518487999807 ], [ 118.89682050900024, -8.849786065999808 ], [ 118.87696373800031, -8.845391533999816 ], [ 118.86719811300009, -8.844333591999884 ], [ 118.85173587300017, -8.838148695999792 ], [ 118.84595787900014, -8.836846612999864 ], [ 118.84669030000032, -8.839125257999854 ], [ 118.8422957690002, -8.843926690999865 ], [ 118.83562259200028, -8.848402601999851 ], [ 118.82927493600016, -8.850518487999807 ], [ 118.81763756600026, -8.843519789999846 ], [ 118.77735436300009, -8.81161874799983 ], [ 118.7573348320002, -8.802015882999854 ], [ 118.71404056100005, -8.799981377999814 ], [ 118.66895592500009, -8.806898695999848 ], [ 118.46501712300028, -8.865004164999903 ], [ 118.41423587300005, -8.853610934999892 ], [ 118.38738040500004, -8.795830987999864 ], [ 118.39112389400009, -8.770196221999811 ], [ 118.40503991000014, -8.750420830999872 ], [ 118.42212975400014, -8.731052341999884 ], [ 118.43523196700005, -8.706475518999866 ], [ 118.43873131600014, -8.690036716999884 ], [ 118.43970787900003, -8.674574476999851 ], [ 118.43832441500012, -8.65976327899989 ], [ 118.43523196700005, -8.645114841999884 ], [ 118.42855879000001, -8.629815362999807 ], [ 118.42042076900009, -8.615655205999872 ], [ 118.41456139400032, -8.600518487999864 ], [ 118.41472415500016, -8.582940362999864 ], [ 118.4004012380002, -8.596123955999872 ], [ 118.3969832690002, -8.617933851999851 ], [ 118.40113366000014, -8.662367445999848 ], [ 118.3935653000002, -8.674574476999851 ], [ 118.37623131600014, -8.680759372999887 ], [ 118.35564212300017, -8.684991143999866 ], [ 118.33904056100005, -8.692152601999851 ], [ 118.31226647200015, -8.726983330999815 ], [ 118.2993270190002, -8.757907809999836 ], [ 118.2949324880002, -8.76523202899989 ], [ 118.2866317070002, -8.770440362999864 ], [ 118.27491295700008, -8.772149346999868 ], [ 118.15772545700008, -8.867852471999811 ], [ 118.14031009200016, -8.87224700299987 ], [ 118.11947675900012, -8.862969658999873 ], [ 118.09799238400001, -8.850274346999868 ], [ 118.07886803500014, -8.844333591999884 ], [ 118.07016035200024, -8.846286716999884 ], [ 118.03728274800005, -8.858005466999884 ], [ 118.03858483200008, -8.856052341999828 ], [ 118.0351668630002, -8.853122653999833 ], [ 118.02955162900014, -8.850844007999854 ], [ 118.02418053500014, -8.850518487999807 ], [ 118.01677493600016, -8.862562757999854 ], [ 118.00847415500016, -8.867771091999828 ], [ 117.99838300900012, -8.880954684999892 ], [ 117.89047285200013, -8.936781507999854 ], [ 117.88013756600003, -8.928317966999828 ], [ 117.87289472700013, -8.927829684999836 ], [ 117.8662215500002, -8.930922132999854 ], [ 117.85670006600014, -8.93303801899981 ], [ 117.8530379570002, -8.929131768999866 ], [ 117.84498131600014, -8.910902601999851 ], [ 117.8393660820002, -8.905694268999866 ], [ 117.82545006600026, -8.905450127999814 ], [ 117.81763756600003, -8.911228122999887 ], [ 117.81202233200008, -8.919203382999854 ], [ 117.80518639400009, -8.926202080999815 ], [ 117.79558353000016, -8.930759372999887 ], [ 117.78793379000012, -8.93279387799987 ], [ 117.77442467500009, -8.93303801899981 ], [ 117.7675887380002, -8.931247653999833 ], [ 117.75717207100013, -8.926527601999851 ], [ 117.74781334700026, -8.920993747999887 ], [ 117.73780358200008, -8.90976327899989 ], [ 117.7251082690002, -8.912041924999869 ], [ 117.71290123800031, -8.917413018999866 ], [ 117.7089949880002, -8.920017184999836 ], [ 117.66765384200016, -8.93710702899989 ], [ 117.55811608200008, -9.001885674999869 ], [ 117.5180770190002, -9.017836195999792 ], [ 117.47388756600003, -9.029961846999811 ], [ 117.38886774800017, -9.05373871199987 ], [ 117.33413203800012, -9.059354224999822 ], [ 117.30050792500026, -9.047070401999861 ], [ 117.27385838900011, -9.040239581999856 ], [ 117.22614543300006, -9.023780684999792 ], [ 117.19240561200013, -9.023726812999882 ], [ 117.17144575300006, -9.032049267999867 ], [ 117.15346468000007, -9.061166275999824 ], [ 117.14096893700003, -9.076417890999892 ], [ 117.12680097700024, -9.09124114399981 ], [ 117.07129967500009, -9.101739190999865 ], [ 117.00973561500007, -9.107292888999837 ], [ 116.99142139600008, -9.085126613999876 ], [ 116.97039034600027, -9.071334698999863 ], [ 116.94922936300009, -9.06015390399989 ], [ 116.9282332690002, -9.063897393999866 ], [ 116.90642337300005, -9.063409112999864 ], [ 116.85027103000027, -9.045342705999872 ], [ 116.82829837300005, -9.042901299999812 ], [ 116.8061629570002, -9.036309502999814 ], [ 116.7739363940002, -9.012790622999887 ], [ 116.76303144600013, -9.015557549999812 ], [ 116.75855553500003, -9.004571221999868 ], [ 116.74537194100014, -8.983086846999868 ], [ 116.728451662, -8.963095719999899 ], [ 116.73119975700001, -8.946521530999803 ], [ 116.74790651800026, -8.922928004999903 ], [ 116.74086780600021, -8.905055321999839 ], [ 116.73661259900007, -8.883020736999868 ], [ 116.73517982600015, -8.873397366999882 ], [ 116.75883945400017, -8.849859070999798 ], [ 116.7769085550002, -8.826346783999838 ], [ 116.81714928500003, -8.818129164999903 ], [ 116.82447350400014, -8.799004815999865 ], [ 116.82129967500009, -8.787286065999865 ], [ 116.8144637380002, -8.780043226999851 ], [ 116.8076278000002, -8.775485934999892 ], [ 116.80453535200013, -8.771661065999865 ], [ 116.80250084700003, -8.764580987999807 ], [ 116.7973738940002, -8.754571221999811 ], [ 116.79070071700005, -8.745375257999854 ], [ 116.77107815800014, -8.747815281999863 ], [ 116.76407471300013, -8.73818931399984 ], [ 116.77234298600013, -8.705071437999891 ], [ 116.7722673630002, -8.680257197999822 ], [ 116.74851672300008, -8.666544377999855 ], [ 116.79009149300009, -8.583704495999825 ], [ 116.8320418630002, -8.574802341999828 ], [ 116.83936608200008, -8.554864190999865 ], [ 116.83814537900025, -8.507907809999892 ], [ 116.85726972700013, -8.524021091999884 ], [ 116.86589603000004, -8.527601820999848 ], [ 116.87964928500026, -8.528252862999807 ], [ 116.89039147200026, -8.526299737999864 ], [ 116.98454837300017, -8.495782158999816 ], [ 117.03199303500014, -8.46835702899989 ], [ 117.09017988400024, -8.425225518999866 ], [ 117.12614993600005, -8.405450127999814 ], [ 117.1176863940002, -8.383477471999811 ], [ 117.14047285200013, -8.372002862999864 ], [ 117.17351321700005, -8.365166924999869 ], [ 117.19507897200015, -8.357598565999808 ], [ 117.21558678500003, -8.384942315999865 ], [ 117.22901451900032, -8.388116143999866 ], [ 117.26197350400003, -8.390313408999816 ], [ 117.27377363400012, -8.395196221999811 ], [ 117.28736412900003, -8.404961846999868 ], [ 117.31609134200016, -8.419691664999903 ], [ 117.35320071700016, -8.446709893999866 ], [ 117.43392988400001, -8.481133721999811 ], [ 117.4277449880002, -8.465264580999872 ], [ 117.4311629570002, -8.453301690999865 ], [ 117.43775475400014, -8.442315362999807 ], [ 117.4414168630002, -8.429375908999873 ], [ 117.44271894600024, -8.410739841999884 ], [ 117.4472762380002, -8.408623955999872 ], [ 117.45573978000004, -8.414239190999865 ], [ 117.46876061300031, -8.41912200299987 ], [ 117.51970462300005, -8.418715101999851 ], [ 117.54411868600016, -8.414239190999865 ], [ 117.55811608200008, -8.405450127999814 ], [ 117.56788170700008, -8.422295830999815 ], [ 117.57691491000014, -8.487074476999851 ], [ 117.59229576900032, -8.51474374799983 ], [ 117.5981551440002, -8.493910414999846 ], [ 117.59994550900012, -8.446058851999851 ], [ 117.61280358200008, -8.43279387799987 ], [ 117.62330162900014, -8.438409112999807 ], [ 117.62907962300017, -8.457452080999872 ], [ 117.63550866000003, -8.52499765399989 ], [ 117.6396590500002, -8.540622653999833 ], [ 117.64909915500016, -8.55185312299983 ], [ 117.69874108200031, -8.576755466999884 ], [ 117.71111087300017, -8.573907158999873 ], [ 117.72087649800017, -8.568536065999865 ], [ 117.73072350400014, -8.565362237999807 ], [ 117.74382571700016, -8.569268487999807 ], [ 117.73943118600016, -8.576267184999892 ], [ 117.73633873800009, -8.582940362999864 ], [ 117.74756920700031, -8.585707289999903 ], [ 117.75619550900001, -8.589532158999816 ], [ 117.76368248800009, -8.59531015399989 ], [ 117.77165774800005, -8.604099216999884 ], [ 117.76889082100001, -8.607110283999873 ], [ 117.76465905000032, -8.614190362999807 ], [ 117.76465905000032, -8.621270440999865 ], [ 117.77442467500009, -8.62460702899989 ], [ 117.78207441500001, -8.625258070999848 ], [ 117.78630618600005, -8.627699476999794 ], [ 117.78874759200016, -8.631931247999887 ], [ 117.7915145190002, -8.638116143999866 ], [ 117.7807723320002, -8.637627862999807 ], [ 117.77149498800009, -8.638604424999869 ], [ 117.76368248800009, -8.641045830999815 ], [ 117.7573348320002, -8.645114841999884 ], [ 117.76531009200016, -8.659926039999903 ], [ 117.7783309250002, -8.695977471999868 ], [ 117.78785241000014, -8.710219007999797 ], [ 117.80518639400009, -8.719984632999854 ], [ 117.82349694100003, -8.719333591999884 ], [ 117.88656660200013, -8.699476820999792 ], [ 117.89389082100013, -8.700290622999887 ], [ 117.90007571700005, -8.706719658999816 ], [ 117.90235436300009, -8.715590101999851 ], [ 117.90308678500014, -8.723565362999807 ], [ 117.90447024800017, -8.726983330999815 ], [ 117.91684004000012, -8.727308851999851 ], [ 117.93425540500016, -8.729750257999854 ], [ 117.95289147200015, -8.736016533999816 ], [ 117.96900475400025, -8.748142184999892 ], [ 117.98861738400024, -8.732354424999869 ], [ 118.0302840500002, -8.688246351999794 ], [ 118.04786217500009, -8.679131768999866 ], [ 118.04859459700015, -8.675957940999808 ], [ 118.05486087300028, -8.669203382999797 ], [ 118.06185957100001, -8.663344007999854 ], [ 118.06527754000012, -8.662367445999848 ], [ 118.06812584700015, -8.655938408999873 ], [ 118.07496178500003, -8.653741143999866 ], [ 118.08375084700015, -8.653252862999864 ], [ 118.12281334700015, -8.645765882999797 ], [ 118.15772545700008, -8.645114841999884 ], [ 118.16578209700015, -8.647230726999851 ], [ 118.18376712300005, -8.656508070999848 ], [ 118.1919051440002, -8.658786716999884 ], [ 118.2461043630002, -8.657159112999864 ], [ 118.2656356130002, -8.652032158999873 ], [ 118.2817488940002, -8.641534112999864 ], [ 118.29127037900014, -8.62460702899989 ], [ 118.29086347700002, -8.605889580999872 ], [ 118.28288821700005, -8.587985934999892 ], [ 118.26954186300031, -8.574476820999792 ], [ 118.25359134200016, -8.569268487999807 ], [ 118.25025475400014, -8.564548434999892 ], [ 118.24187259200005, -8.555108330999872 ], [ 118.23316491000003, -8.548516533999816 ], [ 118.22917728000004, -8.552504164999903 ], [ 118.22706139400032, -8.558363539999846 ], [ 118.22234134200016, -8.564873955999815 ], [ 118.20923912900014, -8.576755466999884 ], [ 118.19288170700008, -8.549493096999868 ], [ 118.1489363940002, -8.512139580999815 ], [ 118.13355553500026, -8.486748955999815 ], [ 118.12671959700015, -8.486748955999815 ], [ 118.1171981130002, -8.496514580999872 ], [ 118.10328209700026, -8.488376559999836 ], [ 118.07545006600003, -8.456963799999812 ], [ 118.05746504000012, -8.450616143999866 ], [ 118.03638756600026, -8.457289320999848 ], [ 118.00318444100014, -8.47372812299983 ], [ 117.98845462300005, -8.469984632999797 ], [ 117.9702254570002, -8.461358330999872 ], [ 117.95492597700002, -8.451267184999892 ], [ 117.9399520190002, -8.43279387799987 ], [ 117.88152103000004, -8.398614190999808 ], [ 117.82252037900025, -8.354180596999868 ], [ 117.81006920700031, -8.340020440999865 ], [ 117.78663170700008, -8.305596612999864 ], [ 117.77165774800005, -8.288750908999816 ], [ 117.74382571700016, -8.268812757999854 ], [ 117.73080488400012, -8.252699476999851 ], [ 117.72217858200008, -8.244561455999872 ], [ 117.71225019600001, -8.240899346999811 ], [ 117.70630944100014, -8.229668877999814 ], [ 117.71111087300017, -8.203871351999851 ], [ 117.7207137380002, -8.176202080999872 ], [ 117.7295028000002, -8.158949476999851 ], [ 117.74097741000003, -8.147881768999866 ], [ 117.74968509200016, -8.144952080999815 ], [ 117.75684655000009, -8.145603122999887 ], [ 117.76351972700002, -8.144789320999848 ], [ 117.78980553500003, -8.127373955999872 ], [ 117.79493248800031, -8.124932549999869 ], [ 117.81251061300009, -8.121840101999851 ], [ 117.89527428500003, -8.090020440999808 ], [ 117.91781660200002, -8.085870049999869 ], [ 117.95875084700003, -8.083265882999797 ], [ 117.96558678500014, -8.088962497999887 ], [ 117.9712020190002, -8.100355726999851 ] ] ], [ [ [ 131.0771590500002, -8.142022393999866 ], [ 131.07943769600013, -8.148858330999815 ], [ 131.0888778000002, -8.15154387799987 ], [ 131.09400475400003, -8.148370049999812 ], [ 131.1040145190002, -8.13437265399989 ], [ 131.10938561300009, -8.131036065999865 ], [ 131.12484785200002, -8.127699476999794 ], [ 131.14161217500009, -8.121677341999884 ], [ 131.16016686300031, -8.11874765399989 ], [ 131.18165123800031, -8.124932549999869 ], [ 131.16081790500016, -8.152276299999812 ], [ 131.13168379000001, -8.167657158999873 ], [ 131.10092207100013, -8.179620049999869 ], [ 131.06120853000016, -8.205824476999851 ], [ 130.99105879000024, -8.234795830999815 ], [ 130.97966556100016, -8.236097914999903 ], [ 130.9516707690002, -8.23349374799983 ], [ 130.90211022200003, -8.249688408999873 ], [ 130.89372806100016, -8.251234632999797 ], [ 130.89625084700026, -8.28435637799987 ], [ 130.89242597700013, -8.29607512799987 ], [ 130.8794051440002, -8.309258721999868 ], [ 130.83472741000003, -8.335625908999873 ], [ 130.8212996750002, -8.34710051899981 ], [ 130.81088300900024, -8.351332289999846 ], [ 130.76335696700016, -8.35076262799987 ], [ 130.7744246750002, -8.334161065999808 ], [ 130.81527754000024, -8.285332940999808 ], [ 130.83578535200013, -8.268649997999887 ], [ 130.8442488940002, -8.254327080999872 ], [ 130.85499108200031, -8.240004164999903 ], [ 130.86939537900003, -8.23349374799983 ], [ 130.87907962300005, -8.231215101999851 ], [ 130.90552819100014, -8.219414971999868 ], [ 130.91342207100001, -8.213636976999851 ], [ 130.92221113400012, -8.19841887799987 ], [ 130.92107181100005, -8.187758070999792 ], [ 130.91602623800031, -8.176446221999811 ], [ 130.91342207100001, -8.158949476999851 ], [ 130.9174910820002, -8.141289971999868 ], [ 130.92644290500027, -8.132500908999873 ], [ 130.9384871750002, -8.132582289999903 ], [ 130.9516707690002, -8.141371351999851 ], [ 130.97380618600016, -8.145277601999851 ], [ 131.01441491000014, -8.095391533999873 ], [ 131.03760826900009, -8.083265882999797 ], [ 131.05095462300017, -8.091241143999866 ], [ 131.0854598320002, -8.124932549999869 ], [ 131.07984459700015, -8.133233330999815 ], [ 131.0771590500002, -8.142022393999866 ] ] ], [ [ [ 122.9829207690002, -8.160332940999865 ], [ 122.97787519600001, -8.196384372999887 ], [ 123.00660241000014, -8.261407158999873 ], [ 123.02149498800009, -8.278985283999873 ], [ 123.0263778000002, -8.288750908999816 ], [ 123.02800540500016, -8.297051690999808 ], [ 123.0263778000002, -8.320082289999903 ], [ 123.01872806100005, -8.334079684999836 ], [ 123.00074303500003, -8.34099700299987 ], [ 122.94288170700008, -8.343926690999865 ], [ 122.92115319100003, -8.349704684999836 ], [ 122.90414472700024, -8.363376559999892 ], [ 122.89730879000012, -8.388360283999873 ], [ 122.90381920700031, -8.42693450299987 ], [ 122.90455162900014, -8.447035414999903 ], [ 122.89730879000012, -8.460625908999873 ], [ 122.8784285820002, -8.462090752999814 ], [ 122.85287519600001, -8.454278252999814 ], [ 122.8305770190002, -8.443454684999836 ], [ 122.82097415500027, -8.436211846999811 ], [ 122.81771894600013, -8.426446221999868 ], [ 122.81080162900014, -8.428643487999864 ], [ 122.80355879000012, -8.437920830999815 ], [ 122.80054772200003, -8.450127862999864 ], [ 122.80111738400012, -8.469496351999794 ], [ 122.80307050900024, -8.47763437299983 ], [ 122.80738366000026, -8.486748955999815 ], [ 122.84937584700003, -8.552015882999797 ], [ 122.84839928500014, -8.58359140399989 ], [ 122.80738366000026, -8.61093515399989 ], [ 122.79712975400003, -8.613539320999848 ], [ 122.74732506600014, -8.620049737999864 ], [ 122.74097741000003, -8.623630466999828 ], [ 122.72852623800009, -8.634860934999836 ], [ 122.72103925900012, -8.636651299999812 ], [ 122.68751061300009, -8.631442966999828 ], [ 122.67920983200031, -8.632907809999892 ], [ 122.65642337300017, -8.645114841999884 ], [ 122.64966881600014, -8.65195077899989 ], [ 122.6381942070002, -8.65195077899989 ], [ 122.56544030000032, -8.669122002999814 ], [ 122.55494225400014, -8.676527601999794 ], [ 122.5254012380002, -8.706312757999797 ], [ 122.51514733200008, -8.71209075299987 ], [ 122.44947350400014, -8.734307549999812 ], [ 122.40788821700028, -8.741469007999854 ], [ 122.30388431100027, -8.739027601999851 ], [ 122.28711998800031, -8.740655205999872 ], [ 122.26531009200016, -8.748142184999892 ], [ 122.25277754000001, -8.749688408999873 ], [ 122.2270613940002, -8.737237237999864 ], [ 122.16293379000001, -8.726983330999815 ], [ 122.11451256600003, -8.732354424999869 ], [ 122.07781009200016, -8.753838799999812 ], [ 122.04420006600014, -8.780694268999866 ], [ 122.0053817070002, -8.802015882999854 ], [ 121.87614993600005, -8.837660414999903 ], [ 121.83472741000003, -8.858005466999884 ], [ 121.79371178500003, -8.88396575299987 ], [ 121.78044681100027, -8.887953382999854 ], [ 121.76978600400025, -8.887627862999864 ], [ 121.75977623800009, -8.885349216999884 ], [ 121.74870853000004, -8.88396575299987 ], [ 121.73406009200005, -8.879978122999887 ], [ 121.7158309250002, -8.870538018999866 ], [ 121.69922936300009, -8.859470309999836 ], [ 121.69011478000004, -8.850518487999807 ], [ 121.6743270190002, -8.86272551899981 ], [ 121.65935306100005, -8.898207289999903 ], [ 121.6460067070002, -8.905694268999866 ], [ 121.6406356130002, -8.896661065999865 ], [ 121.6308699880002, -8.85263437299983 ], [ 121.62175540500016, -8.836846612999864 ], [ 121.58106530000032, -8.817640882999854 ], [ 121.54086347700013, -8.814873955999872 ], [ 121.5000106130002, -8.816501559999892 ], [ 121.45671634200005, -8.81015390399989 ], [ 121.42017662900025, -8.79802825299987 ], [ 121.3960067070002, -8.79412200299987 ], [ 121.37818444100014, -8.799004815999865 ], [ 121.36703535200002, -8.81991952899989 ], [ 121.37012780000009, -8.842380466999884 ], [ 121.37623131600026, -8.86435312299983 ], [ 121.37476647200026, -8.88396575299987 ], [ 121.34058678500003, -8.918064059999892 ], [ 121.29851321700016, -8.918389580999815 ], [ 121.21094811300009, -8.89202239399981 ], [ 121.16529381600014, -8.895114841999884 ], [ 121.12867272200003, -8.908623955999872 ], [ 121.06690514400032, -8.940524997999887 ], [ 121.04810631600026, -8.944105726999851 ], [ 120.99488366000014, -8.940524997999887 ], [ 120.96387780000009, -8.929620049999812 ], [ 120.9585067070002, -8.925957940999865 ], [ 120.9321395190002, -8.92693450299987 ], [ 120.92286217500009, -8.926202080999815 ], [ 120.90650475400014, -8.913832289999903 ], [ 120.86329186300009, -8.869317315999865 ], [ 120.8545028000002, -8.854180596999868 ], [ 120.84839928500014, -8.829766533999816 ], [ 120.83318118600016, -8.816989841999884 ], [ 120.81299889400009, -8.815036716999828 ], [ 120.7924910820002, -8.823174737999864 ], [ 120.78052819100003, -8.836683851999851 ], [ 120.77312259200005, -8.852471612999864 ], [ 120.76417076900009, -8.865492445999848 ], [ 120.74781334700026, -8.871026299999869 ], [ 120.72584069100014, -8.867445570999792 ], [ 120.71159915500004, -8.859551690999865 ], [ 120.69939212300017, -8.850681247999887 ], [ 120.68336022200003, -8.844333591999884 ], [ 120.67310631600026, -8.843845309999892 ], [ 120.65162194100014, -8.845635674999869 ], [ 120.6416121750002, -8.844333591999884 ], [ 120.62427819100026, -8.826267184999836 ], [ 120.61784915500016, -8.823174737999864 ], [ 120.60108483200031, -8.802015882999854 ], [ 120.59392337300028, -8.795830987999864 ], [ 120.58619225400014, -8.792250257999797 ], [ 120.57789147200003, -8.79021575299987 ], [ 120.55640709700015, -8.788995049999869 ], [ 120.53386478000027, -8.791599216999884 ], [ 120.4926863940002, -8.801364841999884 ], [ 120.47046959700015, -8.802015882999854 ], [ 120.43783613400012, -8.796563408999816 ], [ 120.4257918630002, -8.795830987999864 ], [ 120.41431725400014, -8.797621351999851 ], [ 120.4043074880002, -8.800713799999869 ], [ 120.39372806100016, -8.801202080999872 ], [ 120.38160241000003, -8.795830987999864 ], [ 120.32300866000003, -8.830661716999828 ], [ 120.27906334700015, -8.829359632999854 ], [ 120.24390709700003, -8.823174737999864 ], [ 120.22364342500009, -8.811455987999864 ], [ 120.18262780000009, -8.776055596999868 ], [ 120.16529381600014, -8.768649997999887 ], [ 120.14478600400014, -8.76873137799987 ], [ 120.13103274800005, -8.770765882999797 ], [ 120.0942488940002, -8.788995049999869 ], [ 120.05884850400003, -8.79989999799983 ], [ 119.97575931100005, -8.81389739399981 ], [ 119.94711347700013, -8.832696221999868 ], [ 119.94336998800031, -8.832289320999848 ], [ 119.93930097700013, -8.832696221999868 ], [ 119.93588300900012, -8.836846612999864 ], [ 119.93637129000012, -8.842543226999851 ], [ 119.94369550900012, -8.853122653999833 ], [ 119.94271894600001, -8.858005466999884 ], [ 119.93376712300005, -8.864434502999814 ], [ 119.91993248800009, -8.870782158999816 ], [ 119.90739993600016, -8.871677341999828 ], [ 119.90186608200008, -8.861260674999869 ], [ 119.89185631600026, -8.806735934999836 ], [ 119.88363691500001, -8.802992445999848 ], [ 119.8725692070002, -8.803399346999811 ], [ 119.8603621750002, -8.802015882999854 ], [ 119.83969160200013, -8.792901299999869 ], [ 119.82398522200015, -8.780368747999887 ], [ 119.81275475400014, -8.76327890399989 ], [ 119.80567467500009, -8.740655205999872 ], [ 119.8037215500002, -8.59677499799983 ], [ 119.80779056100016, -8.570000908999873 ], [ 119.82064863400012, -8.546563408999873 ], [ 119.87110436300009, -8.494073174999812 ], [ 119.87370853000016, -8.47226327899989 ], [ 119.8676863940002, -8.447849216999884 ], [ 119.8671981130002, -8.412855726999794 ], [ 119.8979598320002, -8.44475676899981 ], [ 119.91944420700008, -8.461195570999848 ], [ 119.9292098320002, -8.456963799999812 ], [ 119.93425540500016, -8.455824476999851 ], [ 119.96387780000009, -8.439629815999808 ], [ 119.97046959700015, -8.437595309999892 ], [ 119.97730553500014, -8.436293226999794 ], [ 119.98414147200003, -8.43865325299987 ], [ 119.99057050900024, -8.447035414999903 ], [ 120.00269616000014, -8.438734632999854 ], [ 120.00977623800009, -8.424737237999864 ], [ 120.01514733200031, -8.405450127999814 ], [ 120.01783287900014, -8.402520440999808 ], [ 120.02222741000003, -8.388848565999865 ], [ 120.02475019600001, -8.384942315999865 ], [ 120.03345787900014, -8.383477471999811 ], [ 120.04175866000014, -8.386000257999854 ], [ 120.04916425900012, -8.38982512799987 ], [ 120.05600019600001, -8.39177825299987 ], [ 120.05909264400009, -8.390720309999836 ], [ 120.06332441500001, -8.388360283999873 ], [ 120.06918379000012, -8.386000257999854 ], [ 120.07650800900012, -8.384942315999865 ], [ 120.08432050900012, -8.387383721999811 ], [ 120.08814537900025, -8.39755624799983 ], [ 120.0942488940002, -8.398614190999808 ], [ 120.1088973320002, -8.391859632999854 ], [ 120.11402428500014, -8.380954684999892 ], [ 120.11597741000014, -8.366875908999873 ], [ 120.12094160200024, -8.35076262799987 ], [ 120.12614993600005, -8.35466887799987 ], [ 120.13697350400025, -8.364678643999866 ], [ 120.1421004570002, -8.371270440999865 ], [ 120.14893639400009, -8.371270440999865 ], [ 120.16089928500003, -8.349867445999792 ], [ 120.19605553500014, -8.315687757999797 ], [ 120.20346113400012, -8.299248955999815 ], [ 120.21290123800009, -8.292738539999903 ], [ 120.27702884200005, -8.269219658999873 ], [ 120.37794030000009, -8.275079033999873 ], [ 120.39193769600013, -8.267836195999848 ], [ 120.41098066500012, -8.23552825299987 ], [ 120.42204837300005, -8.227308851999851 ], [ 120.43726647200003, -8.232354424999869 ], [ 120.44467207100013, -8.247002862999807 ], [ 120.44971764400009, -8.263767184999892 ], [ 120.45736738400012, -8.275079033999873 ], [ 120.48340905000009, -8.278741143999866 ], [ 120.52173912900014, -8.255466403999833 ], [ 120.54273522200003, -8.26523202899989 ], [ 120.55290774800017, -8.27288176899981 ], [ 120.56771894600024, -8.280531507999854 ], [ 120.58301842500032, -8.284600518999866 ], [ 120.59392337300028, -8.281914971999811 ], [ 120.60108483200031, -8.269789320999848 ], [ 120.60141035200024, -8.25701262799987 ], [ 120.59392337300028, -8.23349374799983 ], [ 120.63575280000009, -8.24960702899989 ], [ 120.65455162900025, -8.261651299999812 ], [ 120.66228274800028, -8.278497002999814 ], [ 120.67310631600026, -8.292250257999854 ], [ 120.72584069100014, -8.322686455999872 ], [ 120.74463951900032, -8.329766533999873 ], [ 120.81251061300009, -8.320977471999868 ], [ 120.83008873800031, -8.326592705999872 ], [ 120.84644616000014, -8.334161065999808 ], [ 120.87037194100003, -8.339288018999866 ], [ 120.9091903000002, -8.34335702899989 ], [ 120.95435631600014, -8.337497653999833 ], [ 120.97608483200008, -8.337497653999833 ], [ 120.99488366000014, -8.34710051899981 ], [ 121.01783287900014, -8.37851327899989 ], [ 121.03093509200005, -8.392673434999892 ], [ 121.05323326900009, -8.405450127999814 ], [ 121.10629316500012, -8.423923434999836 ], [ 121.12501061300009, -8.425957940999865 ], [ 121.14730879000024, -8.426039320999848 ], [ 121.15707441500012, -8.428887627999814 ], [ 121.16618899800005, -8.436211846999811 ], [ 121.1753035820002, -8.440362237999864 ], [ 121.19996178500003, -8.438734632999854 ], [ 121.21094811300009, -8.439629815999808 ], [ 121.21843509200005, -8.444594007999854 ], [ 121.22339928500014, -8.451755466999884 ], [ 121.22982832100024, -8.457940362999864 ], [ 121.24154707100001, -8.460625908999873 ], [ 121.25123131600026, -8.461114190999865 ], [ 121.27051842500009, -8.464532158999873 ], [ 121.27914472700002, -8.467461846999868 ], [ 121.2905379570002, -8.477471612999864 ], [ 121.31641686300009, -8.51474374799983 ], [ 121.33716881600014, -8.525323174999869 ], [ 121.38054446700005, -8.572198174999869 ], [ 121.40886478000016, -8.582940362999864 ], [ 121.42465254000012, -8.57927825299987 ], [ 121.4370223320002, -8.571954033999873 ], [ 121.45085696700016, -8.566664320999848 ], [ 121.47095787900003, -8.569268487999807 ], [ 121.48943118600005, -8.576104424999812 ], [ 121.49577884200016, -8.582452080999872 ], [ 121.49830162900014, -8.593519789999903 ], [ 121.50171959700015, -8.601820570999792 ], [ 121.50953209700015, -8.602146091999884 ], [ 121.52247155000009, -8.596612237999864 ], [ 121.52808678500003, -8.59124114399981 ], [ 121.56568444100014, -8.568942966999884 ], [ 121.57455488400024, -8.56585051899981 ], [ 121.57349694100014, -8.547295830999872 ], [ 121.57447350400025, -8.537855726999794 ], [ 121.58375084700015, -8.536390882999854 ], [ 121.60816491000026, -8.542087497999887 ], [ 121.60271243600005, -8.52109140399989 ], [ 121.60271243600005, -8.496351820999792 ], [ 121.60962975400014, -8.47600676899981 ], [ 121.6254988940002, -8.467461846999868 ], [ 121.63868248800031, -8.472751559999836 ], [ 121.68043053500014, -8.511325778999833 ], [ 121.69629967500009, -8.510674737999864 ], [ 121.75131269600013, -8.490817966999884 ], [ 121.77271569100003, -8.486748955999815 ], [ 121.78443444100014, -8.48943450299987 ], [ 121.79029381600003, -8.492608330999872 ], [ 121.7959090500002, -8.494724216999884 ], [ 121.80681399800028, -8.494805596999868 ], [ 121.81397545700031, -8.491794528999833 ], [ 121.83472741000003, -8.47372812299983 ], [ 121.8515731130002, -8.484551690999808 ], [ 121.87159264400009, -8.491957289999903 ], [ 121.89275149800017, -8.492852471999811 ], [ 121.93197675900012, -8.47421640399989 ], [ 121.94011478000004, -8.46795012799987 ], [ 121.94320722700013, -8.456963799999812 ], [ 121.94825280000009, -8.45256926899981 ], [ 121.98487389400009, -8.447035414999903 ], [ 121.99333743600005, -8.441501559999892 ], [ 122.0004988940002, -8.433851820999848 ], [ 122.00814863400001, -8.427504164999903 ], [ 122.01905358200008, -8.425957940999865 ], [ 122.02865644600013, -8.430922132999854 ], [ 122.03728274800017, -8.440199476999794 ], [ 122.04118899800005, -8.449151299999812 ], [ 122.02654056100005, -8.461114190999865 ], [ 122.02214603000016, -8.479261976999851 ], [ 122.02564537900014, -8.499769789999903 ], [ 122.0395613940002, -8.51474374799983 ], [ 122.04908287900014, -8.516534112999807 ], [ 122.07105553500014, -8.514092705999872 ], [ 122.0810653000002, -8.51474374799983 ], [ 122.09205162900014, -8.519707940999865 ], [ 122.11247806100005, -8.532647393999866 ], [ 122.12549889400032, -8.535251559999892 ], [ 122.14112389400032, -8.541680596999811 ], [ 122.22974694100003, -8.616875908999873 ], [ 122.25806725400025, -8.631280205999872 ], [ 122.28842207100013, -8.633884372999887 ], [ 122.45101972700002, -8.604099216999884 ], [ 122.47738691500001, -8.594984632999854 ], [ 122.50074303500014, -8.576267184999892 ], [ 122.5146590500002, -8.552666924999869 ], [ 122.51246178500003, -8.528252862999807 ], [ 122.50619550900012, -8.52255624799983 ], [ 122.49048912900014, -8.518324476999794 ], [ 122.48511803500003, -8.51474374799983 ], [ 122.48121178500003, -8.506117445999848 ], [ 122.48170006600003, -8.500583591999884 ], [ 122.48389733200031, -8.494398695999848 ], [ 122.48511803500003, -8.483982028999833 ], [ 122.4941512380002, -8.475030205999815 ], [ 122.54656009200028, -8.453220309999892 ], [ 122.5615340500002, -8.441338799999812 ], [ 122.59815514400009, -8.395196221999811 ], [ 122.61402428500014, -8.386407158999816 ], [ 122.6528426440002, -8.384209893999866 ], [ 122.67017662900014, -8.377536716999884 ], [ 122.68824303500014, -8.384698174999812 ], [ 122.70411217500032, -8.379082940999808 ], [ 122.71941165500016, -8.369561455999815 ], [ 122.73560631600014, -8.364515882999797 ], [ 122.75814863400012, -8.361016533999816 ], [ 122.77222741000026, -8.351983330999872 ], [ 122.79371178500014, -8.323500257999797 ], [ 122.82016035200013, -8.305433851999851 ], [ 122.88086998800031, -8.285739841999828 ], [ 122.94410241000003, -8.215427341999884 ], [ 122.9506942070002, -8.203057549999869 ], [ 122.94044030000032, -8.193129164999846 ], [ 122.91700280000009, -8.187676690999808 ], [ 122.87614993600016, -8.185723565999865 ], [ 122.8530379570002, -8.191501559999836 ], [ 122.83041425900012, -8.201592705999815 ], [ 122.80933678500014, -8.214939059999892 ], [ 122.79029381600003, -8.230401299999869 ], [ 122.78549238400001, -8.229424737999864 ], [ 122.74887129000001, -8.23349374799983 ], [ 122.74138431100005, -8.230238539999903 ], [ 122.74040774800017, -8.222426039999903 ], [ 122.74512780000032, -8.206801039999903 ], [ 122.77515709700003, -8.162774346999868 ], [ 122.78003991000026, -8.148125908999873 ], [ 122.7841903000002, -8.123955987999864 ], [ 122.79566491000014, -8.110039971999868 ], [ 122.83464603000016, -8.089532158999816 ], [ 122.85320071700016, -8.074314059999836 ], [ 122.86255944100026, -8.06975676899981 ], [ 122.87614993600016, -8.069594007999854 ], [ 122.88559004000024, -8.074965101999794 ], [ 122.89429772200003, -8.093031507999854 ], [ 122.9004012380002, -8.096937757999854 ], [ 122.9174910820002, -8.101332289999903 ], [ 122.9365340500002, -8.111504815999865 ], [ 122.9643660820002, -8.131036065999865 ], [ 122.97966556100016, -8.146905205999872 ], [ 122.9829207690002, -8.160332940999865 ] ] ], [ [ [ 115.50245201900009, -8.172621351999794 ], [ 115.53532962300028, -8.194594007999854 ], [ 115.56511478000016, -8.221612237999864 ], [ 115.6191512380002, -8.288750908999816 ], [ 115.65251712300005, -8.318454684999836 ], [ 115.69109134200016, -8.344414971999868 ], [ 115.71420332100013, -8.375176690999865 ], [ 115.70093834700003, -8.41912200299987 ], [ 115.69068444100014, -8.429457289999846 ], [ 115.65845787900025, -8.455498955999872 ], [ 115.63990319100014, -8.466241143999866 ], [ 115.61548912900003, -8.492445570999792 ], [ 115.60482832100001, -8.501071872999887 ], [ 115.53370201900032, -8.506524346999868 ], [ 115.52295983200031, -8.511325778999833 ], [ 115.51596113400012, -8.53435637799987 ], [ 115.49878991000003, -8.548435153999833 ], [ 115.36402428500014, -8.596937757999797 ], [ 115.32260175900001, -8.623793226999794 ], [ 115.29078209700015, -8.658786716999884 ], [ 115.26880944100014, -8.699151299999869 ], [ 115.25391686300009, -8.714613539999903 ], [ 115.23170006600014, -8.720798434999836 ], [ 115.21241295700008, -8.728448174999869 ], [ 115.2031356130002, -8.747002862999864 ], [ 115.20533287900025, -8.769463799999869 ], [ 115.22055097700002, -8.788995049999869 ], [ 115.22803795700008, -8.782159112999864 ], [ 115.22348066500012, -8.778008721999811 ], [ 115.21436608200008, -8.761814059999836 ], [ 115.23243248800009, -8.754001559999892 ], [ 115.23796634200028, -8.772230726999851 ], [ 115.23552493600005, -8.819756768999866 ], [ 115.2290145190002, -8.830254815999808 ], [ 115.21322675900012, -8.839939059999892 ], [ 115.19507897200015, -8.84710051899981 ], [ 115.18091881600003, -8.850518487999807 ], [ 115.15739993600005, -8.851820570999848 ], [ 115.13453209700003, -8.85076262799987 ], [ 115.11345462300017, -8.845391533999816 ], [ 115.09498131600014, -8.833672783999816 ], [ 115.09424889400032, -8.818454684999836 ], [ 115.11491946700005, -8.803399346999811 ], [ 115.1591903000002, -8.782159112999864 ], [ 115.17066491000026, -8.76873137799987 ], [ 115.18189537900014, -8.746351820999848 ], [ 115.18628991000014, -8.722344658999873 ], [ 115.17693118600016, -8.703383070999792 ], [ 115.1723738940002, -8.696547132999854 ], [ 115.15609785200013, -8.662041924999869 ], [ 115.14869225400014, -8.658135674999869 ], [ 115.13982181100027, -8.655368747999887 ], [ 115.1318465500002, -8.65195077899989 ], [ 115.10336347700013, -8.629652601999851 ], [ 115.09009850400003, -8.61484140399989 ], [ 115.08472741000014, -8.600355726999851 ], [ 115.0766707690002, -8.58513762799987 ], [ 115.0581160820002, -8.570733330999872 ], [ 115.02263431100016, -8.548923434999892 ], [ 114.95313561300009, -8.485121351999794 ], [ 114.92701256600014, -8.467461846999868 ], [ 114.79664147200015, -8.405450127999814 ], [ 114.7558699880002, -8.397719007999797 ], [ 114.63900800900001, -8.398614190999808 ], [ 114.6045028000002, -8.386488539999903 ], [ 114.57422936300009, -8.36248137799987 ], [ 114.54908287900014, -8.334242445999792 ], [ 114.46843509200016, -8.218519789999903 ], [ 114.44792728000004, -8.121840101999851 ], [ 114.45240319100014, -8.095147393999866 ], [ 114.4814559250002, -8.089532158999816 ], [ 114.50473066500001, -8.090427341999828 ], [ 114.51783287900014, -8.099704684999892 ], [ 114.5273543630002, -8.113539320999792 ], [ 114.53972415500016, -8.12802499799983 ], [ 114.55534915500027, -8.133884372999887 ], [ 114.57097415500004, -8.129489841999884 ], [ 114.59742272200003, -8.110609632999854 ], [ 114.61255944100003, -8.121840101999851 ], [ 114.63404381600014, -8.127211195999848 ], [ 114.67310631600014, -8.131036065999865 ], [ 114.6914168630002, -8.135023695999792 ], [ 114.85759524800005, -8.193129164999846 ], [ 114.89291425900024, -8.180271091999828 ], [ 114.9843856130002, -8.180433851999794 ], [ 115.02263431100016, -8.172621351999794 ], [ 115.06324303500003, -8.143243096999811 ], [ 115.13591556100016, -8.072849216999884 ], [ 115.1728621750002, -8.055352471999868 ], [ 115.19312584700015, -8.055108330999815 ], [ 115.21550540500016, -8.059502862999864 ], [ 115.23617597700013, -8.067966403999833 ], [ 115.2519637380002, -8.079522393999866 ], [ 115.26880944100014, -8.089450778999833 ], [ 115.33790123800009, -8.103773695999848 ], [ 115.50245201900009, -8.172621351999794 ] ] ], [ [ [ 127.22494550900012, -8.108575127999814 ], [ 127.2021590500002, -8.111260674999812 ], [ 127.15211022200026, -8.096937757999854 ], [ 127.15211022200026, -8.089532158999816 ], [ 127.15756269600001, -8.079359632999797 ], [ 127.15560957100013, -8.048435153999833 ], [ 127.15894616000003, -8.034926039999903 ], [ 127.17074629000012, -8.023858330999815 ], [ 127.18588300900012, -8.018731377999814 ], [ 127.20191491000026, -8.019789320999792 ], [ 127.2163192070002, -8.02695077899989 ], [ 127.22641035200002, -8.039239190999865 ], [ 127.23210696700005, -8.05429452899989 ], [ 127.23422285200024, -8.070407809999892 ], [ 127.23462975400014, -8.086521091999828 ], [ 127.22494550900012, -8.108575127999814 ] ] ], [ [ [ 129.7661238940002, -7.813083591999884 ], [ 129.77523847700002, -7.817071221999868 ], [ 129.8105574880002, -7.816501559999892 ], [ 129.8193465500002, -7.819268487999864 ], [ 129.82984459700026, -7.823907158999816 ], [ 129.83920332100001, -7.829847914999903 ], [ 129.84457441500001, -7.836195570999848 ], [ 129.8442488940002, -7.84685637799987 ], [ 129.83838951900009, -7.872735283999816 ], [ 129.84115644600013, -7.877862237999807 ], [ 129.8545028000002, -7.884047132999797 ], [ 129.86101321700016, -7.898858330999872 ], [ 129.86207116000003, -7.916924737999864 ], [ 129.85906009200016, -7.932549737999864 ], [ 129.84791100400014, -7.946547132999854 ], [ 129.81153405000032, -7.983005466999884 ], [ 129.78223717500009, -8.04607512799987 ], [ 129.77637780000032, -8.055352471999868 ], [ 129.7587996750002, -8.054457289999846 ], [ 129.69385826900032, -8.038262627999814 ], [ 129.68848717500009, -8.028415622999887 ], [ 129.59424889400009, -7.924004815999865 ], [ 129.58521569100003, -7.902032158999816 ], [ 129.58757571700005, -7.835625908999873 ], [ 129.60124759200016, -7.807305596999868 ], [ 129.63249759200005, -7.795993747999887 ], [ 129.72486412900014, -7.795993747999887 ], [ 129.7329207690002, -7.79802825299987 ], [ 129.7587996750002, -7.808689059999836 ], [ 129.7661238940002, -7.813083591999884 ] ] ], [ [ [ 130.06666100400014, -7.762627862999864 ], [ 130.07748457100013, -7.765883070999848 ], [ 130.08375084700003, -7.772556247999887 ], [ 130.08033287900003, -7.787367445999848 ], [ 130.06592858200031, -7.787855726999851 ], [ 130.05250084700026, -7.777113539999846 ], [ 130.04517662900014, -7.775079033999816 ], [ 130.03248131600026, -7.774997653999833 ], [ 130.02564537900014, -7.772556247999887 ], [ 130.02906334700015, -7.767836195999792 ], [ 130.03093509200016, -7.762627862999864 ], [ 130.03711998800031, -7.761651299999812 ], [ 130.0468856130002, -7.763360283999816 ], [ 130.05591881600014, -7.761488539999846 ], [ 130.06666100400014, -7.762627862999864 ] ] ], [ [ [ 130.01539147200003, -7.744073174999869 ], [ 130.00847415500004, -7.750420830999815 ], [ 129.99724368600016, -7.748223565999808 ], [ 129.99415123800009, -7.744398695999792 ], [ 129.99268639400009, -7.738539320999848 ], [ 129.98316491000003, -7.732354424999869 ], [ 129.97974694100014, -7.722100518999866 ], [ 129.97885175900012, -7.712660414999846 ], [ 129.98259524800017, -7.704847914999846 ], [ 129.99195397200015, -7.702080987999807 ], [ 130.0009871750002, -7.706719658999816 ], [ 130.0058699880002, -7.714043877999814 ], [ 130.00782311300009, -7.724867445999848 ], [ 130.01539147200003, -7.744073174999869 ] ] ], [ [ [ 108.95777428500014, -7.72014739399981 ], [ 109.0109969410002, -7.750258070999848 ], [ 109.01929772199998, -7.758070570999848 ], [ 109.02369225399997, -7.762383721999868 ], [ 109.04273522200015, -7.761488539999846 ], [ 109.04664147200003, -7.767998955999872 ], [ 109.04314212300017, -7.778903903999833 ], [ 109.03581790500004, -7.780368747999887 ], [ 109.02621504000018, -7.777520440999865 ], [ 108.99927819100009, -7.77288176899981 ], [ 108.9448348320002, -7.754327080999815 ], [ 108.88607832100013, -7.743910414999903 ], [ 108.87281334699998, -7.737237237999864 ], [ 108.85743248800003, -7.73202890399989 ], [ 108.81527754000018, -7.737725518999866 ], [ 108.80014082100018, -7.733819268999866 ], [ 108.7941186860001, -7.719414971999868 ], [ 108.79704837300028, -7.701592705999815 ], [ 108.80689537900003, -7.686211846999868 ], [ 108.82154381600014, -7.678643487999807 ], [ 108.87387129000024, -7.703220309999836 ], [ 108.92505944100026, -7.710381768999866 ], [ 108.95777428500014, -7.72014739399981 ] ] ], [ [ [ 131.13257897200003, -7.623304945999848 ], [ 131.11939537900014, -7.66326262799987 ], [ 131.10922285200002, -7.681817315999865 ], [ 131.0922957690002, -7.692315362999864 ], [ 131.0498153000002, -7.683770440999865 ], [ 131.03589928500014, -7.687595309999836 ], [ 131.04379316500012, -7.713474216999884 ], [ 130.9868270190002, -7.711846612999864 ], [ 130.97120201900032, -7.701348565999865 ], [ 130.9824324880002, -7.671807549999812 ], [ 130.98951256600014, -7.663832289999846 ], [ 130.99952233200008, -7.657484632999854 ], [ 131.01189212300005, -7.65349700299987 ], [ 131.04029381600014, -7.650160414999903 ], [ 131.05494225400025, -7.645603122999887 ], [ 131.06853274800005, -7.638848565999865 ], [ 131.07789147200026, -7.630791924999812 ], [ 131.07837975400014, -7.633396091999884 ], [ 131.0825301440002, -7.635023695999848 ], [ 131.0903426440002, -7.635918877999814 ], [ 131.09376061300009, -7.635023695999848 ], [ 131.1049910820002, -7.629001559999892 ], [ 131.11898847700013, -7.619317315999865 ], [ 131.12647545700031, -7.617771091999884 ], [ 131.13257897200003, -7.623304945999848 ] ] ], [ [ [ 126.7216903000002, -7.668064059999892 ], [ 126.73755944100003, -7.671807549999812 ], [ 126.7988387380002, -7.664239190999865 ], [ 126.81324303500014, -7.668633721999868 ], [ 126.82162519600013, -7.680271091999828 ], [ 126.8291121750002, -7.695489190999808 ], [ 126.83432050900012, -7.711846612999864 ], [ 126.83676191500012, -7.726332289999903 ], [ 126.84001712300017, -7.73943450299987 ], [ 126.83920332100013, -7.748223565999808 ], [ 126.83334394600013, -7.758070570999848 ], [ 126.82349694100014, -7.762383721999868 ], [ 126.81348717500032, -7.758070570999848 ], [ 126.80298912900014, -7.75115325299987 ], [ 126.79232832100013, -7.747491143999866 ], [ 126.74903405000032, -7.754001559999892 ], [ 126.72787519600024, -7.754652601999851 ], [ 126.71338951900009, -7.747491143999866 ], [ 126.6313582690002, -7.775485934999892 ], [ 126.62045332100001, -7.781345309999836 ], [ 126.59734134200005, -7.802178643999866 ], [ 126.5893660820002, -7.80624765399989 ], [ 126.56836998800009, -7.814141533999873 ], [ 126.55933678500014, -7.819919528999833 ], [ 126.50440514400009, -7.888116143999866 ], [ 126.50220787900014, -7.894789320999792 ], [ 126.50416100400003, -7.903090101999794 ], [ 126.50424238400001, -7.912367445999848 ], [ 126.49732506600014, -7.922539971999868 ], [ 126.48812910200024, -7.93271249799983 ], [ 126.47527103000004, -7.955336195999792 ], [ 126.46615644600001, -7.966566664999903 ], [ 126.45476321700005, -7.958184502999814 ], [ 126.43327884200016, -7.936700127999814 ], [ 126.42188561300009, -7.932549737999864 ], [ 126.37378991000014, -7.932549737999864 ], [ 126.35027103000016, -7.92929452899989 ], [ 126.30054772200015, -7.91521575299987 ], [ 126.2744246750002, -7.911879164999846 ], [ 126.18978925900001, -7.923516533999873 ], [ 126.16895592500009, -7.915704033999873 ], [ 126.15552819100014, -7.901625257999854 ], [ 126.13689212300005, -7.888604424999869 ], [ 126.11451256600014, -7.882989190999865 ], [ 126.09009850400014, -7.891534112999864 ], [ 126.07496178500014, -7.88388437299983 ], [ 126.05396569100003, -7.884698174999869 ], [ 125.99878991000014, -7.89373137799987 ], [ 125.98031660200024, -7.90349700299987 ], [ 125.96941165500016, -7.905857028999833 ], [ 125.94613691500024, -7.906019789999903 ], [ 125.9350692070002, -7.907891533999873 ], [ 125.92505944100014, -7.911879164999846 ], [ 125.92400149800017, -7.915134372999887 ], [ 125.92139733200008, -7.927504164999903 ], [ 125.91814212300005, -7.932549737999864 ], [ 125.91285241000026, -7.93499114399981 ], [ 125.90202884200028, -7.937269789999903 ], [ 125.89771569100026, -7.939222914999903 ], [ 125.8120223320002, -8.007582289999903 ], [ 125.78931725400014, -8.016045830999872 ], [ 125.77418053500014, -8.007582289999903 ], [ 125.7758895190002, -7.991794528999833 ], [ 125.78630618600005, -7.971123955999872 ], [ 125.79818769600013, -7.953220309999892 ], [ 125.80518639400009, -7.945489190999865 ], [ 125.80844160200013, -7.934258721999868 ], [ 125.80836022200015, -7.864190362999864 ], [ 125.81421959700015, -7.850274346999811 ], [ 125.82504316500001, -7.837009372999887 ], [ 125.83887780000009, -7.827080987999864 ], [ 125.85328209700026, -7.82333749799983 ], [ 125.86980228000016, -7.814711195999848 ], [ 125.87623131600014, -7.794691664999846 ], [ 125.8789168630002, -7.771905205999872 ], [ 125.88404381600003, -7.754327080999815 ], [ 125.88803144600001, -7.751885674999869 ], [ 125.90259850400014, -7.74724700299987 ], [ 125.90821373800031, -7.744073174999869 ], [ 125.91439863400001, -7.736586195999848 ], [ 125.92115319100014, -7.721123955999872 ], [ 125.94792728000004, -7.678317966999884 ], [ 125.95720462300028, -7.667901299999812 ], [ 125.96892337300017, -7.660088799999812 ], [ 125.98064212300017, -7.658623955999872 ], [ 125.99268639400009, -7.661553643999866 ], [ 126.02271569100014, -7.676039320999848 ], [ 126.03126061300009, -7.682305596999868 ], [ 126.03492272200015, -7.689141533999873 ], [ 126.04615319100003, -7.693454684999892 ], [ 126.20313561300009, -7.713474216999884 ], [ 126.2148543630002, -7.709405205999815 ], [ 126.24537194100014, -7.691176039999903 ], [ 126.26148522200015, -7.686130466999884 ], [ 126.28003991000003, -7.688083591999828 ], [ 126.30437259200005, -7.693454684999892 ], [ 126.32837975400003, -7.695733330999872 ], [ 126.34644616000003, -7.689141533999873 ], [ 126.3979598320002, -7.643812757999797 ], [ 126.45240319100003, -7.619561455999872 ], [ 126.48454837300005, -7.59726327899989 ], [ 126.50375410200002, -7.590427341999828 ], [ 126.6035262380002, -7.569431247999887 ], [ 126.61744225400014, -7.56210702899989 ], [ 126.6269637380002, -7.559991143999866 ], [ 126.6313582690002, -7.565362237999864 ], [ 126.63021894600024, -7.587172132999797 ], [ 126.63086998800009, -7.598565362999864 ], [ 126.63453209700026, -7.606866143999866 ], [ 126.6469832690002, -7.616957289999903 ], [ 126.69271894600013, -7.637627862999807 ], [ 126.7031356130002, -7.647719007999797 ], [ 126.71159915500004, -7.658868096999811 ], [ 126.7216903000002, -7.668064059999892 ] ] ], [ [ [ 129.68067467500009, -7.554131768999866 ], [ 129.69068444100026, -7.559991143999866 ], [ 129.70004316500012, -7.558363539999846 ], [ 129.70679772200015, -7.554782809999892 ], [ 129.71387780000032, -7.55820077899989 ], [ 129.71216881600014, -7.56951262799987 ], [ 129.69459069100014, -7.57756926899981 ], [ 129.68197675900001, -7.577243747999887 ], [ 129.67514082100001, -7.571547132999797 ], [ 129.65528405000009, -7.560479424999869 ], [ 129.65357506600014, -7.547051690999865 ], [ 129.65853925900024, -7.535088799999869 ], [ 129.66374759200016, -7.53655364399981 ], [ 129.68067467500009, -7.554131768999866 ] ] ], [ [ [ 127.38949629000012, -7.649672132999854 ], [ 127.37330162900014, -7.656182549999812 ], [ 127.35767662900014, -7.655694268999866 ], [ 127.35075931100016, -7.640801690999865 ], [ 127.3476668630002, -7.622979424999812 ], [ 127.34839928500026, -7.615329684999892 ], [ 127.3545028000002, -7.606866143999866 ], [ 127.36198978000027, -7.602797132999854 ], [ 127.36988366000026, -7.600274346999868 ], [ 127.37614993600016, -7.595879815999865 ], [ 127.37867272200003, -7.585870049999869 ], [ 127.37574303500014, -7.56991952899989 ], [ 127.36443118600005, -7.536797783999873 ], [ 127.36443118600005, -7.521579684999892 ], [ 127.37273196700005, -7.506117445999848 ], [ 127.38493899800017, -7.502862237999807 ], [ 127.4184676440002, -7.507907809999836 ], [ 127.44068444100014, -7.520603122999887 ], [ 127.4541121750002, -7.525648695999848 ], [ 127.47022545700008, -7.527764580999872 ], [ 127.4843856130002, -7.53240325299987 ], [ 127.48926842500032, -7.54452890399989 ], [ 127.48780358200008, -7.579278252999814 ], [ 127.48170006600014, -7.590101820999848 ], [ 127.4672957690002, -7.599053643999866 ], [ 127.43116295700008, -7.613051039999903 ], [ 127.41863040500027, -7.61467864399981 ], [ 127.41285241000003, -7.617771091999884 ], [ 127.40837649800017, -7.623304945999848 ], [ 127.39861087300005, -7.643812757999797 ], [ 127.38949629000012, -7.649672132999854 ] ] ], [ [ [ 130.86475670700008, -7.489190362999864 ], [ 130.89372806100016, -7.514092705999815 ], [ 130.90674889400009, -7.507500908999816 ], [ 130.92042076900009, -7.51091887799987 ], [ 130.9336043630002, -7.517836195999848 ], [ 130.94483483200031, -7.521579684999892 ], [ 130.9775496750002, -7.515313408999816 ], [ 130.98462975400014, -7.518161716999884 ], [ 130.96859785200013, -7.534600518999866 ], [ 130.97657311300009, -7.536390882999854 ], [ 130.98422285200013, -7.539971612999807 ], [ 130.98829186300009, -7.545179945999848 ], [ 130.98585045700008, -7.55193450299987 ], [ 130.97917728000016, -7.555271091999884 ], [ 130.97339928500003, -7.551202080999815 ], [ 130.96705162900003, -7.545179945999848 ], [ 130.9585067070002, -7.54208749799983 ], [ 130.95386803500014, -7.544203382999854 ], [ 130.94166100400025, -7.553480726999794 ], [ 130.93767337300028, -7.555759372999887 ], [ 130.89771569100026, -7.554457289999846 ], [ 130.85661868600016, -7.546970309999892 ], [ 130.84522545700008, -7.54208749799983 ], [ 130.84099368600016, -7.52874114399981 ], [ 130.84449303500026, -7.513848565999865 ], [ 130.85865319100014, -7.486911716999884 ], [ 130.86475670700008, -7.489190362999864 ] ] ], [ [ [ 131.18287194100014, -7.415948174999812 ], [ 131.16586347700002, -7.424493096999868 ], [ 131.12696373800009, -7.466403903999833 ], [ 131.11646569100003, -7.47185637799987 ], [ 131.10515384200016, -7.47600676899981 ], [ 131.09595787900025, -7.481377862999864 ], [ 131.0888778000002, -7.497735283999873 ], [ 131.08033287900003, -7.503676039999903 ], [ 131.06918379000012, -7.507500908999816 ], [ 131.05738366000003, -7.507907809999836 ], [ 131.05738366000003, -7.500420830999872 ], [ 131.06316165500016, -7.497002862999864 ], [ 131.06666100400014, -7.492852471999811 ], [ 131.0717879570002, -7.479424737999864 ], [ 131.04721113400024, -7.480401299999812 ], [ 131.02458743600027, -7.485284112999864 ], [ 131.00489342500032, -7.485772393999866 ], [ 130.98926842500009, -7.473239841999884 ], [ 130.98519941500001, -7.455987237999864 ], [ 130.99105879000024, -7.43889739399981 ], [ 131.00326582100013, -7.424493096999868 ], [ 131.01823978000016, -7.41521575299987 ], [ 131.02711022200003, -7.413018487999807 ], [ 131.03500410200002, -7.413506768999866 ], [ 131.0512801440002, -7.41716887799987 ], [ 131.0673934250002, -7.417738539999903 ], [ 131.12476647200003, -7.410414320999792 ], [ 131.14144941500012, -7.405368747999887 ], [ 131.15365644600001, -7.404229424999812 ], [ 131.16016686300031, -7.402927341999828 ], [ 131.16342207100024, -7.400485934999892 ], [ 131.16724694100014, -7.39999765399989 ], [ 131.1748153000002, -7.404229424999812 ], [ 131.17750084700015, -7.406670830999872 ], [ 131.18140709700003, -7.41130950299987 ], [ 131.18287194100014, -7.415948174999812 ] ] ], [ [ [ 138.8925887380002, -8.041273695999792 ], [ 138.90414472700024, -8.075860283999873 ], [ 138.85767662900003, -8.07529062299983 ], [ 138.83668053500026, -8.080010674999869 ], [ 138.81820722700013, -8.093194268999866 ], [ 138.78834069100026, -8.13005950299987 ], [ 138.77182050900001, -8.143161716999828 ], [ 138.7465926440002, -8.15154387799987 ], [ 138.70093834700003, -8.153985283999816 ], [ 138.67969811300031, -8.157484632999797 ], [ 138.66089928500014, -8.16904062299983 ], [ 138.64616946700028, -8.188734632999854 ], [ 138.62126712300005, -8.233819268999866 ], [ 138.6025496750002, -8.254652601999851 ], [ 138.53581790500004, -8.30217864399981 ], [ 138.5175887380002, -8.309258721999868 ], [ 138.50782311300009, -8.315687757999797 ], [ 138.47217858200031, -8.357598565999808 ], [ 138.44418379000001, -8.379082940999808 ], [ 138.4121199880002, -8.396254164999846 ], [ 138.37598717500009, -8.409600518999866 ], [ 138.33570397200003, -8.41912200299987 ], [ 138.29346764400009, -8.418715101999851 ], [ 138.22339928500014, -8.391859632999854 ], [ 138.17798912900003, -8.384942315999865 ], [ 138.03419030000009, -8.381931247999887 ], [ 137.8491317070002, -8.377536716999884 ], [ 137.80160566500012, -8.382989190999808 ], [ 137.75953209700015, -8.393975518999866 ], [ 137.67709394600013, -8.425957940999865 ], [ 137.6381942070002, -8.425876559999892 ], [ 137.63697350400003, -8.389418226999851 ], [ 137.72624759200016, -8.144789320999848 ], [ 137.74976647200003, -8.101169528999833 ], [ 137.75277754000012, -8.086521091999828 ], [ 137.75904381600014, -8.07341887799987 ], [ 137.78939863400012, -8.052341403999833 ], [ 137.80054772200015, -8.041680596999811 ], [ 137.80974368600016, -7.98357512799987 ], [ 137.81820722700013, -7.973402601999794 ], [ 137.82439212300005, -7.96428801899981 ], [ 137.89486738400012, -7.816176039999903 ], [ 137.91797936300009, -7.781670830999872 ], [ 137.96583092500032, -7.73943450299987 ], [ 137.9726668630002, -7.723321221999868 ], [ 137.97624759200028, -7.702894789999903 ], [ 137.98519941500012, -7.67929452899989 ], [ 138.00668379000024, -7.637627862999807 ], [ 138.02808678500014, -7.610039971999811 ], [ 138.08863366000003, -7.559828382999854 ], [ 138.2441512380002, -7.456475518999866 ], [ 138.39503014400009, -7.404880466999884 ], [ 138.52906334700026, -7.386488539999846 ], [ 138.55648847700013, -7.377048434999892 ], [ 138.62086022200003, -7.364678643999866 ], [ 138.71705162900014, -7.359551690999865 ], [ 138.80453535200002, -7.37420012799987 ], [ 138.84278405000009, -7.421644789999903 ], [ 138.8481551440002, -7.435235283999873 ], [ 138.89600670700008, -7.50505950299987 ], [ 138.90870201900032, -7.519789320999792 ], [ 138.92286217500032, -7.531914971999868 ], [ 138.93897545700031, -7.54208749799983 ], [ 138.9741317070002, -7.553399346999811 ], [ 139.0463973320002, -7.561944268999866 ], [ 139.07553144600001, -7.576267184999892 ], [ 139.05738366000003, -7.594659112999864 ], [ 139.0444442070002, -7.611423434999892 ], [ 139.03516686300031, -7.629571221999868 ], [ 139.02027428500014, -7.671970309999892 ], [ 138.99366295700008, -7.72014739399981 ], [ 138.98878014400009, -7.737969658999873 ], [ 138.98267662900003, -7.829847914999903 ], [ 138.97722415500016, -7.840915622999887 ], [ 138.9663192070002, -7.850518487999864 ], [ 138.9106551440002, -7.87851327899989 ], [ 138.89112389400009, -7.898044528999833 ], [ 138.88379967500009, -7.932549737999864 ], [ 138.88648522200015, -8.007012627999814 ], [ 138.8925887380002, -8.041273695999792 ] ] ], [ [ [ 121.81031334700015, -7.404229424999812 ], [ 121.77588951900009, -7.416924737999807 ], [ 121.75904381600014, -7.415785414999846 ], [ 121.75180097700024, -7.394301039999903 ], [ 121.75407962300017, -7.379082940999865 ], [ 121.75993899800005, -7.363539320999848 ], [ 121.76889082100013, -7.350762627999814 ], [ 121.7797957690002, -7.343438408999873 ], [ 121.81820722700013, -7.33359140399989 ], [ 121.83708743600027, -7.356540622999887 ], [ 121.83480879000001, -7.388278903999833 ], [ 121.81031334700015, -7.404229424999812 ] ] ], [ [ [ 131.28223717500009, -7.323500257999797 ], [ 131.28394616000026, -7.329766533999873 ], [ 131.29273522200003, -7.318047783999873 ], [ 131.29761803500014, -7.319105726999851 ], [ 131.29916425900024, -7.327406507999797 ], [ 131.29761803500014, -7.336602471999868 ], [ 131.2934676440002, -7.340590101999851 ], [ 131.27100670700008, -7.357110283999816 ], [ 131.27711022200015, -7.370782158999873 ], [ 131.22754967500032, -7.36248137799987 ], [ 131.2158309250002, -7.357110283999816 ], [ 131.22348066500012, -7.351250908999873 ], [ 131.2309676440002, -7.344170830999815 ], [ 131.24301191500012, -7.329766533999873 ], [ 131.25757897200015, -7.303969007999854 ], [ 131.26498457100013, -7.297133070999848 ], [ 131.26954186300009, -7.302911065999865 ], [ 131.28223717500009, -7.323500257999797 ] ] ], [ [ [ 120.87110436300031, -7.273532809999892 ], [ 120.96045983200008, -7.281996351999851 ], [ 121.01986738400001, -7.280368747999887 ], [ 121.04997806100005, -7.285821221999868 ], [ 121.06690514400032, -7.302504164999903 ], [ 121.05689537900014, -7.321058851999794 ], [ 121.02564537900014, -7.331638278999833 ], [ 120.99268639400009, -7.33359140399989 ], [ 120.97738691500012, -7.326348565999865 ], [ 120.96387780000009, -7.313897393999866 ], [ 120.9004012380002, -7.30388762799987 ], [ 120.88135826900009, -7.295017184999892 ], [ 120.86410566500012, -7.301934502999814 ], [ 120.84017988400001, -7.304457289999903 ], [ 120.81625410200013, -7.302422783999873 ], [ 120.79932701900009, -7.295017184999892 ], [ 120.79395592500009, -7.287692966999884 ], [ 120.79232832100013, -7.279473565999808 ], [ 120.79428144600001, -7.271172783999816 ], [ 120.79965254000012, -7.263848565999808 ], [ 120.81568444100014, -7.257500908999873 ], [ 120.83464603000027, -7.260511976999794 ], [ 120.87110436300031, -7.273532809999892 ] ] ], [ [ [ 114.6245223320002, -7.147881768999866 ], [ 114.62305748800009, -7.16326262799987 ], [ 114.61882571700016, -7.167250257999854 ], [ 114.5327254570002, -7.158461195999792 ], [ 114.5112410820002, -7.15927499799983 ], [ 114.50017337300005, -7.158298434999836 ], [ 114.49537194100003, -7.154717705999872 ], [ 114.49634850400003, -7.143812757999797 ], [ 114.49919681100016, -7.13787200299987 ], [ 114.50464928500003, -7.13437265399989 ], [ 114.54102623800009, -7.118584893999866 ], [ 114.55005944100014, -7.116875908999816 ], [ 114.55909264400009, -7.119073174999812 ], [ 114.58130944100014, -7.128350518999866 ], [ 114.5937606130002, -7.130547783999873 ], [ 114.60474694100003, -7.130629164999846 ], [ 114.61459394600013, -7.132094007999797 ], [ 114.62183678500014, -7.137302341999884 ], [ 114.6245223320002, -7.147881768999866 ] ] ], [ [ [ 131.65357506600003, -7.166192315999808 ], [ 131.65463300900012, -7.172133070999848 ], [ 131.66822350400014, -7.166680596999811 ], [ 131.67652428500003, -7.160577080999815 ], [ 131.6919051440002, -7.141208591999884 ], [ 131.7041121750002, -7.131524346999868 ], [ 131.7099715500002, -7.137465101999851 ], [ 131.71371504000001, -7.150485934999836 ], [ 131.73951256600003, -7.195977471999811 ], [ 131.74333743600005, -7.196058851999794 ], [ 131.7382918630002, -7.20663827899989 ], [ 131.72608483200031, -7.216566664999846 ], [ 131.71119225400014, -7.223890882999854 ], [ 131.69857832100001, -7.226739190999808 ], [ 131.6836043630002, -7.225030205999815 ], [ 131.67457116000026, -7.222588799999869 ], [ 131.6665145190002, -7.223890882999854 ], [ 131.65463300900012, -7.233575127999814 ], [ 131.6455184250002, -7.244805596999811 ], [ 131.64275149800017, -7.254815362999807 ], [ 131.64722741000014, -7.281996351999851 ], [ 131.64649498800009, -7.302178643999866 ], [ 131.64722741000014, -7.309258721999811 ], [ 131.64869225400014, -7.310316664999846 ], [ 131.66944420700008, -7.344008070999848 ], [ 131.67505944100014, -7.358168226999794 ], [ 131.6733504570002, -7.371840101999851 ], [ 131.66089928500003, -7.38388437299983 ], [ 131.6684676440002, -7.394219658999873 ], [ 131.67790774800028, -7.400811455999815 ], [ 131.68726647200003, -7.405857028999833 ], [ 131.69499759200005, -7.411797783999873 ], [ 131.6992293630002, -7.413995049999869 ], [ 131.70313561300009, -7.412774346999868 ], [ 131.70630944100014, -7.412692966999884 ], [ 131.70923912900025, -7.417901299999869 ], [ 131.70875084700015, -7.424574476999851 ], [ 131.70362389400032, -7.425388278999833 ], [ 131.69776451900009, -7.425062757999797 ], [ 131.69499759200005, -7.42880624799983 ], [ 131.68344160200002, -7.451592705999872 ], [ 131.67986087300005, -7.473077080999872 ], [ 131.67554772200003, -7.480157158999873 ], [ 131.66911868600005, -7.484551690999865 ], [ 131.66089928500003, -7.486911716999884 ], [ 131.66871178500003, -7.509209893999866 ], [ 131.66293379000012, -7.531833591999884 ], [ 131.65259850400014, -7.554945570999848 ], [ 131.64332116000003, -7.599053643999866 ], [ 131.63306725400025, -7.620049737999864 ], [ 131.61890709700015, -7.636976820999848 ], [ 131.60279381600026, -7.643812757999797 ], [ 131.59864342500032, -7.648532809999892 ], [ 131.57935631600003, -7.688897393999866 ], [ 131.57422936300009, -7.69491952899989 ], [ 131.55836022200015, -7.706638278999833 ], [ 131.53858483200031, -7.712579033999873 ], [ 131.51335696700016, -7.716973565999865 ], [ 131.49691816500001, -7.726332289999903 ], [ 131.50318444100003, -7.747491143999866 ], [ 131.49740644600024, -7.756117445999792 ], [ 131.49000084700026, -7.763278903999833 ], [ 131.48072350400003, -7.766208591999884 ], [ 131.46900475400014, -7.761814059999892 ], [ 131.47494550900012, -7.782972914999903 ], [ 131.46412194100026, -7.794366143999866 ], [ 131.44890384200028, -7.800225518999866 ], [ 131.44117272200026, -7.80584075299987 ], [ 131.43433678500014, -7.81406015399989 ], [ 131.38990319100014, -7.847100518999866 ], [ 131.38257897200003, -7.859551690999865 ], [ 131.38021894600013, -7.873223565999808 ], [ 131.37964928500014, -7.891534112999864 ], [ 131.36866295700008, -7.903985283999873 ], [ 131.35808353000004, -7.912286065999865 ], [ 131.3481551440002, -7.922133070999792 ], [ 131.33863366000014, -7.939222914999903 ], [ 131.34864342500009, -7.93906015399989 ], [ 131.35726972700013, -7.941582940999865 ], [ 131.36085045700008, -7.947360934999836 ], [ 131.35572350400014, -7.956312757999854 ], [ 131.34978274800017, -7.964125257999854 ], [ 131.34848066500012, -7.969903252999814 ], [ 131.34839928500014, -7.976657809999836 ], [ 131.34546959700003, -7.987074476999851 ], [ 131.33521569100003, -8.000909112999864 ], [ 131.31674238400001, -8.017998955999872 ], [ 131.2993270190002, -8.025648695999848 ], [ 131.29151451900032, -8.011325778999833 ], [ 131.30600019600013, -7.973402601999794 ], [ 131.31080162900014, -7.954034112999807 ], [ 131.30144290500004, -7.945489190999865 ], [ 131.2939559250002, -7.942478122999887 ], [ 131.28931725400003, -7.937188408999873 ], [ 131.28345787900025, -7.936130466999828 ], [ 131.27100670700008, -7.945489190999865 ], [ 131.26587975400014, -7.954359632999854 ], [ 131.26189212300017, -7.976983330999872 ], [ 131.2573348320002, -7.987074476999851 ], [ 131.22966556100005, -8.003513278999833 ], [ 131.19076582100024, -8.006605726999851 ], [ 131.1162215500002, -8.000746351999794 ], [ 131.10661868600027, -7.991306247999887 ], [ 131.11158287900014, -7.969496351999851 ], [ 131.12696373800009, -7.929131768999866 ], [ 131.12387129000001, -7.913669528999833 ], [ 131.11597741000014, -7.898695570999792 ], [ 131.10474694100003, -7.889580987999807 ], [ 131.0922957690002, -7.891534112999864 ], [ 131.08570397200015, -7.871758721999868 ], [ 131.09017988400001, -7.84880950299987 ], [ 131.10254967500032, -7.828545830999815 ], [ 131.11963951900009, -7.816501559999892 ], [ 131.13298587300028, -7.816582940999808 ], [ 131.14380944100014, -7.821221612999864 ], [ 131.1528426440002, -7.82187265399989 ], [ 131.16114342500009, -7.809665622999887 ], [ 131.16114342500009, -7.799574476999851 ], [ 131.1552840500002, -7.791599216999884 ], [ 131.14714603000004, -7.785577080999872 ], [ 131.13998457100001, -7.781670830999872 ], [ 131.13998457100001, -7.775485934999892 ], [ 131.15699303500026, -7.774346612999864 ], [ 131.15674889400009, -7.766045830999872 ], [ 131.15137780000032, -7.753838799999812 ], [ 131.15365644600001, -7.740655205999872 ], [ 131.1440535820002, -7.744398695999792 ], [ 131.13738040500027, -7.743422132999854 ], [ 131.13355553500014, -7.737481377999814 ], [ 131.13314863400012, -7.726332289999903 ], [ 131.12696373800009, -7.726332289999903 ], [ 131.12696373800009, -7.733819268999866 ], [ 131.11963951900009, -7.733819268999866 ], [ 131.1147567070002, -7.706963799999869 ], [ 131.1225692070002, -7.69101327899989 ], [ 131.1391707690002, -7.686130466999884 ], [ 131.16114342500009, -7.692315362999864 ], [ 131.20386803500003, -7.713311455999815 ], [ 131.22331790500016, -7.714450778999833 ], [ 131.24984785200013, -7.706638278999833 ], [ 131.23210696700016, -7.702569268999866 ], [ 131.21168053500003, -7.69491952899989 ], [ 131.19483483200008, -7.683770440999865 ], [ 131.18132571700005, -7.64959075299987 ], [ 131.18140709700003, -7.641208591999884 ], [ 131.19157962300005, -7.637627862999807 ], [ 131.18970787900014, -7.632419528999833 ], [ 131.19516035200002, -7.596774997999887 ], [ 131.20248457100001, -7.579522393999866 ], [ 131.22478274800005, -7.546319268999866 ], [ 131.2295028000002, -7.531182549999869 ], [ 131.23267662900003, -7.507094007999854 ], [ 131.24154707100013, -7.48772551899981 ], [ 131.25473066500024, -7.47226327899989 ], [ 131.31519616000003, -7.422946872999887 ], [ 131.32813561300031, -7.417901299999869 ], [ 131.33570397200026, -7.422539971999868 ], [ 131.34115644600013, -7.431573174999812 ], [ 131.34701582100013, -7.438246351999851 ], [ 131.35572350400014, -7.435316664999846 ], [ 131.36060631600003, -7.427666924999812 ], [ 131.37281334700015, -7.39804452899989 ], [ 131.37964928500014, -7.389336846999868 ], [ 131.38428795700031, -7.386000257999854 ], [ 131.38835696700016, -7.381931247999887 ], [ 131.39332116000014, -7.370782158999873 ], [ 131.39136803500003, -7.36834075299987 ], [ 131.38982181100016, -7.358656507999854 ], [ 131.39079837300017, -7.348321221999868 ], [ 131.3969832690002, -7.343438408999873 ], [ 131.45313561300031, -7.334405205999872 ], [ 131.45411217500009, -7.328301690999808 ], [ 131.44971764400009, -7.319594007999854 ], [ 131.44849694100026, -7.309258721999811 ], [ 131.4550887380002, -7.291192315999865 ], [ 131.46265709700015, -7.278741143999866 ], [ 131.48267662900014, -7.254652601999851 ], [ 131.48682701900032, -7.245375257999797 ], [ 131.48902428500003, -7.236504815999865 ], [ 131.49398847700013, -7.22958749799983 ], [ 131.5068465500002, -7.226739190999808 ], [ 131.52670332100013, -7.225518487999864 ], [ 131.53581790500016, -7.223402601999794 ], [ 131.54476972700013, -7.21990325299987 ], [ 131.53207441500012, -7.190362237999807 ], [ 131.52881920700008, -7.170098565999808 ], [ 131.53695722700002, -7.154229424999869 ], [ 131.56861412900003, -7.130954684999892 ], [ 131.58985436300009, -7.120212497999887 ], [ 131.6171981130002, -7.112237237999807 ], [ 131.63754316500012, -7.109063408999873 ], [ 131.65430748800009, -7.112888278999833 ], [ 131.66098066500001, -7.128594658999816 ], [ 131.65357506600003, -7.166192315999808 ] ] ], [ [ [ 115.89600670700008, -7.124932549999869 ], [ 115.89429772200015, -7.164483330999815 ], [ 115.87574303500014, -7.185723565999808 ], [ 115.83773847700013, -7.197198174999869 ], [ 115.79590905000009, -7.190036716999884 ], [ 115.75733483200008, -7.169691664999903 ], [ 115.74301191500001, -7.150323174999869 ], [ 115.75294030000009, -7.140313408999816 ], [ 115.76221764400009, -7.139092705999872 ], [ 115.76596113400001, -7.143975518999866 ], [ 115.76986738400012, -7.14218515399989 ], [ 115.77816816500012, -7.115492445999848 ], [ 115.78598066500012, -7.115980726999851 ], [ 115.79127037900025, -7.125664971999811 ], [ 115.79476972700024, -7.13787200299987 ], [ 115.80103600400014, -7.146416924999869 ], [ 115.80795332100001, -7.14983489399981 ], [ 115.8227645190002, -7.149509372999887 ], [ 115.8427840500002, -7.15764739399981 ], [ 115.87012780000009, -7.159844658999873 ], [ 115.88021894600024, -7.158461195999792 ], [ 115.8837996750002, -7.153252862999807 ], [ 115.88135826900009, -7.152927341999884 ], [ 115.87517337300005, -7.153578382999854 ], [ 115.86939537900025, -7.147149346999811 ], [ 115.86670983200008, -7.137302341999884 ], [ 115.8696395190002, -7.128676039999903 ], [ 115.87745201900009, -7.123467705999815 ], [ 115.88355553500014, -7.123955987999807 ], [ 115.88599694100014, -7.129571221999868 ], [ 115.88697350400003, -7.12656015399989 ], [ 115.88900800900024, -7.113702080999872 ], [ 115.89087975400014, -7.107110283999873 ], [ 115.89429772200015, -7.111586195999848 ], [ 115.89600670700008, -7.124932549999869 ] ] ], [ [ [ 131.9184676440002, -7.103610934999892 ], [ 131.93384850400025, -7.111586195999848 ], [ 131.94418379000001, -7.126641533999873 ], [ 131.94809004000012, -7.141208591999884 ], [ 131.95346113400024, -7.154066664999903 ], [ 131.9770613940002, -7.174086195999792 ], [ 131.98218834700015, -7.188897393999866 ], [ 131.98601321700028, -7.225274346999868 ], [ 131.98170006600014, -7.24570077899989 ], [ 131.96558678500014, -7.254652601999851 ], [ 131.95590254000012, -7.249200127999814 ], [ 131.92164147200026, -7.223890882999854 ], [ 131.91407311300031, -7.216485283999873 ], [ 131.90398196700016, -7.180352471999868 ], [ 131.87794030000009, -7.164483330999815 ], [ 131.84278405000032, -7.161797783999816 ], [ 131.77222741000026, -7.164971612999807 ], [ 131.74268639400009, -7.158379815999808 ], [ 131.73218834700003, -7.141208591999884 ], [ 131.75700931100027, -7.110039971999811 ], [ 131.87842858200008, -7.106052341999828 ], [ 131.9004012380002, -7.110039971999811 ], [ 131.9184676440002, -7.103610934999892 ] ] ], [ [ [ 128.67652428500014, -7.17888762799987 ], [ 128.6386824880002, -7.21990325299987 ], [ 128.62232506600003, -7.21013762799987 ], [ 128.58399498800009, -7.17888762799987 ], [ 128.54664147200015, -7.162692966999828 ], [ 128.5327254570002, -7.151055596999811 ], [ 128.52881920700008, -7.130547783999873 ], [ 128.53939863400012, -7.112237237999807 ], [ 128.56324303500014, -7.091241143999866 ], [ 128.59245853000004, -7.073011976999794 ], [ 128.61963951900032, -7.063164971999868 ], [ 128.62859134200016, -7.068536065999808 ], [ 128.64340254000012, -7.082777601999851 ], [ 128.65235436300009, -7.089532158999873 ], [ 128.66081790500016, -7.092461846999868 ], [ 128.67896569100014, -7.093845309999892 ], [ 128.68637129000001, -7.096368096999868 ], [ 128.6997176440002, -7.109551690999808 ], [ 128.70134524800005, -7.122816664999846 ], [ 128.69125410200002, -7.133233330999872 ], [ 128.66968834700015, -7.137383721999868 ], [ 128.65853925900012, -7.143812757999797 ], [ 128.66822350400014, -7.158135674999869 ], [ 128.68051191500024, -7.172458591999884 ], [ 128.67652428500014, -7.17888762799987 ] ] ], [ [ [ 114.39685522900027, -7.131462291999867 ], [ 114.39465789400026, -7.157564834999903 ], [ 114.39185631600003, -7.17888762799987 ], [ 114.37826582100013, -7.178155205999872 ], [ 114.35726972700013, -7.167413018999866 ], [ 114.33179772200015, -7.159356377999814 ], [ 114.3252059250002, -7.147637627999814 ], [ 114.30655821900018, -7.148779183999864 ], [ 114.29282201900003, -7.143151295999871 ], [ 114.28476081600013, -7.126164773999847 ], [ 114.27324774500005, -7.1012473199998 ], [ 114.2697620480003, -7.080834943999832 ], [ 114.29482566800016, -7.054665923999892 ], [ 114.32225455000014, -7.050030942999854 ], [ 114.34294681100005, -7.055759372999887 ], [ 114.35775148900007, -7.069202446999896 ], [ 114.3692554820002, -7.089582670999846 ], [ 114.38306849500032, -7.113356878999809 ], [ 114.39685522900027, -7.131462291999867 ] ] ], [ [ [ 120.74496504000012, -7.074151299999812 ], [ 120.75782311300009, -7.075941664999903 ], [ 120.77263431100005, -7.058851820999848 ], [ 120.78126061300031, -7.055922132999854 ], [ 120.7851668630002, -7.072442315999808 ], [ 120.78305097700013, -7.088636976999851 ], [ 120.77377363400012, -7.115817966999884 ], [ 120.77149498800009, -7.130547783999873 ], [ 120.74226145100022, -7.134935144999872 ], [ 120.70558207900024, -7.133380463999856 ], [ 120.68336022200003, -7.124281507999854 ], [ 120.68189537900014, -7.139418226999851 ], [ 120.67034946900026, -7.150959797999803 ], [ 120.63348911200012, -7.131528227999809 ], [ 120.62040736900019, -7.108675148999851 ], [ 120.62417124100011, -7.093960320999884 ], [ 120.59842208200007, -7.098033898999859 ], [ 120.58092290500031, -7.091815049999809 ], [ 120.56290620300001, -7.094537751999894 ], [ 120.5562530640002, -7.072889484999848 ], [ 120.56586410600005, -7.067054209999867 ], [ 120.59111302900021, -7.079589061999798 ], [ 120.61369512200019, -7.069816589999903 ], [ 120.6198936310002, -7.044242793999899 ], [ 120.61572917600006, -7.022561127999893 ], [ 120.62125566200018, -6.998245237999811 ], [ 120.63550866000014, -7.00701262799987 ], [ 120.65361520400006, -7.010104614999875 ], [ 120.67767356200011, -7.043671315999859 ], [ 120.73023522200003, -7.067152601999851 ], [ 120.74496504000012, -7.074151299999812 ] ] ], [ [ [ 129.1425887380002, -6.997491143999866 ], [ 129.13542728000027, -6.998142184999892 ], [ 129.12501061300009, -6.99325937299983 ], [ 129.1162215500002, -6.983330987999864 ], [ 129.11744225400014, -6.972751559999892 ], [ 129.12501061300009, -6.965752862999807 ], [ 129.1342879570002, -6.961114190999865 ], [ 129.14478600400003, -6.96209075299987 ], [ 129.1528426440002, -6.97616952899989 ], [ 129.1504012380002, -6.991469007999854 ], [ 129.1425887380002, -6.997491143999866 ] ] ], [ [ [ 113.98991946700016, -6.877862237999864 ], [ 114.00961347700024, -6.886976820999848 ], [ 114.02800540500016, -6.899021091999828 ], [ 114.04566491000014, -6.914646091999828 ], [ 114.06568444100026, -6.922621351999794 ], [ 114.09353610000028, -6.932656869999846 ], [ 114.10979032100022, -6.946898122999869 ], [ 114.12480136100021, -6.98161029899984 ], [ 114.09668590600018, -6.982878634999793 ], [ 114.05110424100019, -7.011430963999885 ], [ 113.98113040500004, -7.02068450299987 ], [ 113.95556836000014, -7.044948626999883 ], [ 113.93558346700001, -7.049914273999889 ], [ 113.90997853900012, -7.048063177999893 ], [ 113.89187473100003, -7.059225490999893 ], [ 113.8706545120001, -7.095177104999834 ], [ 113.8862558200002, -7.099515480999855 ], [ 113.89499926500002, -7.109432092999896 ], [ 113.89535566500001, -7.120538018999866 ], [ 113.87281334700003, -7.128838799999869 ], [ 113.83253315700006, -7.132019753999884 ], [ 113.77671570200016, -7.125256053999806 ], [ 113.70624848300008, -7.113613321999878 ], [ 113.68666778000011, -7.112641921999796 ], [ 113.66521243600005, -7.110039971999811 ], [ 113.64532689200007, -7.131133891999866 ], [ 113.61005227600026, -7.129187025999897 ], [ 113.59337868000011, -7.138901022999903 ], [ 113.58276663400022, -7.15348644199986 ], [ 113.57728379800005, -7.168367782999894 ], [ 113.57044638000002, -7.181896028999859 ], [ 113.56588242900023, -7.193622593999862 ], [ 113.55948926100007, -7.212117351999893 ], [ 113.54898420600011, -7.233778153999822 ], [ 113.53394127900026, -7.240101743999901 ], [ 113.51342534300022, -7.247781563999865 ], [ 113.507057809, -7.240109507999875 ], [ 113.49521340900003, -7.230636771999798 ], [ 113.47247064700014, -7.222049961999858 ], [ 113.42269941500001, -7.226739190999808 ], [ 113.26905358200031, -7.217461846999868 ], [ 113.25123131600026, -7.209649346999868 ], [ 113.2343856130002, -7.207614841999828 ], [ 113.1865340500002, -7.223321221999811 ], [ 113.1655379570002, -7.21990325299987 ], [ 113.15870201900009, -7.185235283999816 ], [ 113.15316816500024, -7.177422783999816 ], [ 113.14633222700013, -7.171563408999873 ], [ 113.14576256600026, -7.165785414999903 ], [ 113.15870201900009, -7.158461195999792 ], [ 113.15870201900009, -7.151055596999811 ], [ 113.1460067070002, -7.14959075299987 ], [ 113.12232506600003, -7.139418226999851 ], [ 113.1142684250002, -7.141208591999884 ], [ 113.10962975400003, -7.15146249799983 ], [ 113.10971113400001, -7.17148202899989 ], [ 113.10336347700013, -7.17888762799987 ], [ 113.11638431100016, -7.190687757999854 ], [ 113.1352645190002, -7.20273202899989 ], [ 113.14869225400014, -7.214776299999869 ], [ 113.1450301440002, -7.226739190999808 ], [ 113.12794030000009, -7.231052341999884 ], [ 112.81812584700015, -7.161390882999854 ], [ 112.77808678500026, -7.158461195999792 ], [ 112.74252363400012, -7.161390882999854 ], [ 112.72641035200013, -7.158786716999828 ], [ 112.71989993600016, -7.147881768999866 ], [ 112.71705162900014, -7.117608330999872 ], [ 112.71876061300009, -7.103285414999903 ], [ 112.72730553500014, -7.089532158999873 ], [ 112.71989993600016, -7.082777601999851 ], [ 112.7099715500002, -7.097344658999873 ], [ 112.70134524800005, -7.092054945999792 ], [ 112.69499759200016, -7.076104424999869 ], [ 112.69263756600014, -7.058526299999869 ], [ 112.69450931100016, -7.038995049999869 ], [ 112.70093834700003, -7.033298434999892 ], [ 112.71363366000026, -7.03240325299987 ], [ 112.73414147200003, -7.028090101999794 ], [ 112.76351972700013, -7.011000257999854 ], [ 112.79265384200016, -6.984063408999873 ], [ 112.84400475400003, -6.925062757999854 ], [ 112.84197024800017, -6.908868096999868 ], [ 112.87322024800005, -6.897719007999854 ], [ 112.91529381600014, -6.89169687299983 ], [ 112.94402103000027, -6.890964450999888 ], [ 112.98170006600003, -6.891289971999868 ], [ 113.06739342500009, -6.881036065999808 ], [ 113.14601986800017, -6.894371211999896 ], [ 113.27335673500011, -6.892996303999894 ], [ 113.44558230000018, -6.882377938999809 ], [ 113.52622788700012, -6.896293042999901 ], [ 113.67205189100002, -6.879398963999904 ], [ 113.79311278800003, -6.882479059999866 ], [ 113.92367597700013, -6.86484140399989 ], [ 113.96802819100026, -6.870538018999866 ], [ 113.98991946700016, -6.877862237999864 ] ] ], [ [ [ 115.37924238400012, -6.834730726999851 ], [ 115.46078535200013, -6.842543226999851 ], [ 115.48357181100005, -6.851657809999892 ], [ 115.55347741000026, -6.889418226999851 ], [ 115.57064863400001, -6.904554945999848 ], [ 115.5722762380002, -6.930596612999864 ], [ 115.5571395190002, -6.940036716999884 ], [ 115.5127059250002, -6.938734632999854 ], [ 115.50318444100014, -6.93661874799983 ], [ 115.48316491000026, -6.92734140399989 ], [ 115.46705162900014, -6.923923434999892 ], [ 115.45484459700015, -6.917575778999833 ], [ 115.45118248800031, -6.914646091999828 ], [ 115.44410241000014, -6.910088799999869 ], [ 115.4389754570002, -6.911797783999873 ], [ 115.43409264400009, -6.918226820999792 ], [ 115.4257918630002, -6.920098565999865 ], [ 115.41911868600027, -6.925062757999854 ], [ 115.41309655000009, -6.925062757999854 ], [ 115.40512129000001, -6.921644789999903 ], [ 115.40040123800009, -6.916924737999807 ], [ 115.39429772200003, -6.912692966999884 ], [ 115.3823348320002, -6.910821221999811 ], [ 115.35043379000024, -6.927504164999846 ], [ 115.3447371750002, -6.928155205999815 ], [ 115.34815514400009, -6.940606377999814 ], [ 115.35661868600016, -6.945407809999892 ], [ 115.36784915500004, -6.947686455999872 ], [ 115.37891686300009, -6.952406507999797 ], [ 115.39096113400001, -6.961195570999848 ], [ 115.3960067070002, -6.966078382999854 ], [ 115.40064537900025, -6.972914320999848 ], [ 115.37826582100013, -6.987399997999887 ], [ 115.35531660200024, -6.982028903999833 ], [ 115.3173934250002, -6.952406507999797 ], [ 115.3032332690002, -6.966078382999854 ], [ 115.30103600400003, -6.97226327899989 ], [ 115.30054772200015, -6.977959893999866 ], [ 115.30152428500026, -6.981215101999851 ], [ 115.3032332690002, -6.980401299999812 ], [ 115.30355879000001, -6.985935153999833 ], [ 115.31137129000001, -6.99553801899981 ], [ 115.31055748800009, -7.000746351999794 ], [ 115.30600019600013, -7.004164320999848 ], [ 115.29948978000004, -7.00701262799987 ], [ 115.29330488400001, -7.007582289999903 ], [ 115.29078209700015, -7.004001559999836 ], [ 115.2871199880002, -7.003024997999887 ], [ 115.26563561300009, -6.983493747999887 ], [ 115.26531009200016, -6.976006768999866 ], [ 115.27588951900032, -6.938734632999854 ], [ 115.23804772200026, -6.942315362999864 ], [ 115.22144616000003, -6.939711195999848 ], [ 115.21436608200008, -6.928155205999815 ], [ 115.21851647200015, -6.904392184999892 ], [ 115.22877037900003, -6.891534112999864 ], [ 115.24203535200013, -6.880954684999836 ], [ 115.25538170700008, -6.863051039999903 ], [ 115.24431399800017, -6.846449476999851 ], [ 115.25505618600005, -6.838148695999848 ], [ 115.27572675900024, -6.835381768999866 ], [ 115.29493248800009, -6.835625908999816 ], [ 115.37924238400012, -6.834730726999851 ] ] ], [ [ [ 129.52906334700026, -6.723077080999872 ], [ 129.53077233200008, -6.731215101999794 ], [ 129.52906334700026, -6.739190362999864 ], [ 129.5180770190002, -6.76311614399981 ], [ 129.51156660200013, -6.769707940999865 ], [ 129.50131269600001, -6.770603122999887 ], [ 129.49317467500009, -6.765720309999892 ], [ 129.48812910200024, -6.76083749799983 ], [ 129.48617597700002, -6.754571221999868 ], [ 129.48454837300017, -6.75530364399981 ], [ 129.4809676440002, -6.760023695999848 ], [ 129.47787519600013, -6.756036065999865 ], [ 129.47877037900003, -6.744073174999812 ], [ 129.4863387380002, -6.729099216999884 ], [ 129.4970809250002, -6.722588799999869 ], [ 129.5097762380002, -6.723402601999794 ], [ 129.52019290500004, -6.721123955999815 ], [ 129.52906334700026, -6.723077080999872 ] ] ], [ [ [ 138.7465926440002, -6.863051039999903 ], [ 138.72828209700015, -6.867771091999884 ], [ 138.71631920700031, -6.86467864399981 ], [ 138.70655358200008, -6.859144789999903 ], [ 138.69507897200026, -6.856215101999851 ], [ 138.68197675900001, -6.847751559999892 ], [ 138.67286217500009, -6.81015390399989 ], [ 138.66089928500014, -6.801527601999794 ], [ 138.65015709700015, -6.797295830999872 ], [ 138.63892662900014, -6.787367445999792 ], [ 138.6230574880002, -6.767347914999903 ], [ 138.61695397200003, -6.748142184999892 ], [ 138.61850019600001, -6.729099216999884 ], [ 138.6269637380002, -6.720147393999866 ], [ 138.64128665500027, -6.730645440999808 ], [ 138.66553795700008, -6.750258070999792 ], [ 138.6792098320002, -6.758070570999848 ], [ 138.69507897200026, -6.76132577899989 ], [ 138.73121178500003, -6.76311614399981 ], [ 138.74683678500026, -6.768161716999828 ], [ 138.7534285820002, -6.778252862999807 ], [ 138.75904381600026, -6.791680596999868 ], [ 138.78305097700002, -6.814222914999903 ], [ 138.78744550900001, -6.829522393999866 ], [ 138.78150475400014, -6.83896249799983 ], [ 138.76872806100016, -6.849379164999846 ], [ 138.7465926440002, -6.863051039999903 ] ] ], [ [ [ 131.6245223320002, -6.709730726999851 ], [ 131.60621178500014, -6.727146091999828 ], [ 131.5839949880002, -6.719496351999794 ], [ 131.56869550900001, -6.732598565999865 ], [ 131.56617272200026, -6.751641533999873 ], [ 131.5913192070002, -6.767673434999836 ], [ 131.58204186300009, -6.781670830999815 ], [ 131.56478925900012, -6.795586846999868 ], [ 131.55103600400014, -6.801527601999794 ], [ 131.5273543630002, -6.78085702899989 ], [ 131.53736412900003, -6.738051039999903 ], [ 131.56568444100014, -6.696465752999814 ], [ 131.59742272200003, -6.679131768999866 ], [ 131.61931399800005, -6.682549737999864 ], [ 131.62867272200026, -6.693942966999884 ], [ 131.6245223320002, -6.709730726999851 ] ] ], [ [ [ 134.67603600400014, -6.757500908999873 ], [ 134.6694442070002, -6.772881768999866 ], [ 134.65365644600013, -6.768812757999797 ], [ 134.62142988400001, -6.747002862999864 ], [ 134.63005618600027, -6.73577239399981 ], [ 134.63160241000014, -6.727227471999811 ], [ 134.62826582100001, -6.709405205999815 ], [ 134.63257897200003, -6.700372002999814 ], [ 134.66578209700003, -6.650485934999892 ], [ 134.67660566500012, -6.610528252999814 ], [ 134.68148847700002, -6.599867445999792 ], [ 134.68767337300005, -6.591973565999808 ], [ 134.69605553500003, -6.587985934999836 ], [ 134.70736738400001, -6.58904387799987 ], [ 134.72006269600024, -6.595310153999833 ], [ 134.73015384200005, -6.604750257999854 ], [ 134.73633873800009, -6.616875908999873 ], [ 134.73755944100003, -6.630954684999892 ], [ 134.7295028000002, -6.664808851999851 ], [ 134.72217858200008, -6.68279387799987 ], [ 134.71363366000014, -6.695733330999872 ], [ 134.70329837300017, -6.707777601999794 ], [ 134.68043053500014, -6.743259372999887 ], [ 134.67603600400014, -6.757500908999873 ] ] ], [ [ [ 105.26417076900009, -6.527927341999828 ], [ 105.26563561300014, -6.553317966999884 ], [ 105.26384524800011, -6.592380466999884 ], [ 105.25603274800011, -6.628187757999854 ], [ 105.23991946700011, -6.643975518999866 ], [ 105.22242272200009, -6.649346612999864 ], [ 105.20386803500008, -6.673272393999866 ], [ 105.19214928499997, -6.678806247999887 ], [ 105.18295332100013, -6.671563408999873 ], [ 105.1850692070002, -6.655043226999794 ], [ 105.19353274800017, -6.636651299999869 ], [ 105.20215905000015, -6.623467705999815 ], [ 105.18995201900009, -6.617852471999811 ], [ 105.18295332100013, -6.607679945999848 ], [ 105.17546634200011, -6.583103122999887 ], [ 105.13209069100009, -6.626885674999812 ], [ 105.12012780000015, -6.630954684999892 ], [ 105.11768639400009, -6.612399997999887 ], [ 105.1379500660002, -6.587334893999866 ], [ 105.1884871750002, -6.547621351999851 ], [ 105.1958113940002, -6.555108330999872 ], [ 105.2041121750002, -6.545179945999848 ], [ 105.21558678500014, -6.538832289999903 ], [ 105.22559655000015, -6.536390882999854 ], [ 105.22999108200014, -6.538181247999887 ], [ 105.23357181099999, -6.531833591999828 ], [ 105.24203535200013, -6.528415622999887 ], [ 105.25318444100003, -6.527276299999869 ], [ 105.26417076900009, -6.527927341999828 ] ] ], [ [ [ 134.72982832100001, -6.546156507999797 ], [ 134.71534264400009, -6.552992445999848 ], [ 134.70248457100013, -6.550957940999808 ], [ 134.6938582690002, -6.553480726999851 ], [ 134.6884871750002, -6.558526299999869 ], [ 134.67481530000032, -6.563083591999884 ], [ 134.65626061300031, -6.559014580999815 ], [ 134.64812259200005, -6.541924737999864 ], [ 134.64429772200015, -6.520765882999797 ], [ 134.63591556100016, -6.506280205999872 ], [ 134.62614993600016, -6.49716562299983 ], [ 134.62378991000026, -6.486097914999903 ], [ 134.63135826900009, -6.475844007999797 ], [ 134.64478600400003, -6.46445077899989 ], [ 134.66325931100005, -6.454847914999846 ], [ 134.68433678500003, -6.457777601999851 ], [ 134.70484459700026, -6.470472914999903 ], [ 134.71949303500003, -6.486260674999869 ], [ 134.72779381600026, -6.504571221999868 ], [ 134.73096764400032, -6.514336846999868 ], [ 134.7343856130002, -6.525811455999815 ], [ 134.72982832100001, -6.546156507999797 ] ] ], [ [ [ 130.02165774800017, -6.324965101999794 ], [ 130.0136824880002, -6.328383070999792 ], [ 130.00611412900003, -6.324883721999811 ], [ 129.99870853000027, -6.317152601999794 ], [ 129.99781334700015, -6.309747002999814 ], [ 130.00375410200024, -6.306247653999833 ], [ 130.02076256600014, -6.312432549999812 ], [ 130.02605228000016, -6.318454684999892 ], [ 130.02165774800017, -6.324965101999794 ] ] ], [ [ [ 134.60775800900012, -6.42148202899989 ], [ 134.60222415500016, -6.441582940999808 ], [ 134.58814537900003, -6.455254815999865 ], [ 134.55372155000009, -6.473239841999884 ], [ 134.56568444100003, -6.49138762799987 ], [ 134.56055748800009, -6.516045830999872 ], [ 134.54175866000003, -6.529473565999865 ], [ 134.51156660200002, -6.513604424999869 ], [ 134.50228925900012, -6.500176690999865 ], [ 134.49586022200026, -6.485284112999807 ], [ 134.49236087300005, -6.471612237999864 ], [ 134.4912215500002, -6.46233489399981 ], [ 134.48658287900014, -6.454359632999854 ], [ 134.46387780000032, -6.424899997999887 ], [ 134.45142662900014, -6.424899997999887 ], [ 134.43799889400032, -6.427504164999846 ], [ 134.42725670700031, -6.426364841999828 ], [ 134.42286217500032, -6.414646091999828 ], [ 134.41773522200003, -6.406426690999865 ], [ 134.35840905000009, -6.379489841999884 ], [ 134.35035241000003, -6.371758721999868 ], [ 134.34717858200008, -6.359633070999792 ], [ 134.34986412900014, -6.35068124799983 ], [ 134.3564559250002, -6.341566664999846 ], [ 134.36451256600026, -6.33359140399989 ], [ 134.37208092500009, -6.327813408999873 ], [ 134.3867293630002, -6.319594007999854 ], [ 134.39136803500003, -6.316094658999873 ], [ 134.40642337300005, -6.299574476999851 ], [ 134.41342207100024, -6.294528903999833 ], [ 134.42115319100014, -6.290134372999887 ], [ 134.42937259200005, -6.286716403999833 ], [ 134.43775475400014, -6.285088799999812 ], [ 134.44613691500012, -6.285414320999848 ], [ 134.4521590500002, -6.288018487999864 ], [ 134.46355228000016, -6.296970309999892 ], [ 134.49496504000012, -6.313897393999866 ], [ 134.50473066500012, -6.321221612999864 ], [ 134.52865644600013, -6.350274346999868 ], [ 134.54420006600014, -6.363864841999884 ], [ 134.56316165500016, -6.369561455999872 ], [ 134.57471764400009, -6.374769789999903 ], [ 134.58961022200015, -6.387790622999887 ], [ 134.60230553500014, -6.404554945999792 ], [ 134.60775800900012, -6.42148202899989 ] ] ], [ [ [ 134.83765709700026, -6.46005624799983 ], [ 134.82634524800017, -6.473239841999884 ], [ 134.81177819100014, -6.464288018999866 ], [ 134.7983504570002, -6.45224374799983 ], [ 134.7939559250002, -6.440524997999887 ], [ 134.80640709700015, -6.431735934999892 ], [ 134.80640709700015, -6.424899997999887 ], [ 134.79411868600005, -6.40195077899989 ], [ 134.79900149800017, -6.370538018999866 ], [ 134.81421959700015, -6.345798434999892 ], [ 134.83375084700015, -6.342380466999884 ], [ 134.83366946700016, -6.311455987999807 ], [ 134.83562259200005, -6.296563408999873 ], [ 134.84058678500026, -6.287692966999828 ], [ 134.85613040500016, -6.283786716999828 ], [ 134.87183678500014, -6.288506768999866 ], [ 134.8837996750002, -6.299493096999868 ], [ 134.8881942070002, -6.314060153999833 ], [ 134.88591556100016, -6.336358330999872 ], [ 134.8789168630002, -6.355889580999872 ], [ 134.86109459700003, -6.390069268999866 ], [ 134.83765709700026, -6.46005624799983 ] ] ], [ [ [ 134.4365340500002, -6.445245049999869 ], [ 134.44263756600026, -6.446384372999887 ], [ 134.44605553500014, -6.443454684999892 ], [ 134.44996178500026, -6.441338799999869 ], [ 134.4570418630002, -6.445245049999869 ], [ 134.46127363400012, -6.450860283999873 ], [ 134.46208743600027, -6.455661716999884 ], [ 134.46208743600027, -6.460381768999866 ], [ 134.46387780000032, -6.465752862999807 ], [ 134.48170006600003, -6.497735283999816 ], [ 134.4853621750002, -6.506931247999887 ], [ 134.4878035820002, -6.508558851999794 ], [ 134.49000084700015, -6.51132577899989 ], [ 134.4912215500002, -6.517266533999873 ], [ 134.48902428500003, -6.520684502999814 ], [ 134.4843856130002, -6.52263762799987 ], [ 134.47974694100014, -6.525485934999892 ], [ 134.4775496750002, -6.531345309999836 ], [ 134.4843856130002, -6.575616143999866 ], [ 134.51050866000014, -6.580661716999828 ], [ 134.5214949880002, -6.586846612999807 ], [ 134.51539147200003, -6.599541924999869 ], [ 134.5083113940002, -6.609063408999873 ], [ 134.50416100400003, -6.627536716999884 ], [ 134.49927819100014, -6.637790622999887 ], [ 134.4721785820002, -6.661797783999873 ], [ 134.45036868600016, -6.660577080999815 ], [ 134.4287215500002, -6.652764580999872 ], [ 134.40170332100013, -6.657484632999854 ], [ 134.40170332100013, -6.664971612999807 ], [ 134.4204207690002, -6.664157809999892 ], [ 134.43376712300017, -6.677015882999854 ], [ 134.4365340500002, -6.682061455999872 ], [ 134.43213951900009, -6.691582940999865 ], [ 134.42156009200005, -6.70419687299983 ], [ 134.40894616000026, -6.715020440999865 ], [ 134.39828535200024, -6.719659112999864 ], [ 134.34717858200008, -6.801527601999794 ], [ 134.36426842500009, -6.80779387799987 ], [ 134.3588973320002, -6.820733330999872 ], [ 134.31072024800017, -6.859470309999892 ], [ 134.24480228000004, -6.883477471999868 ], [ 134.20736738400012, -6.911309502999814 ], [ 134.18506920700008, -6.918633721999811 ], [ 134.15845787900014, -6.873630466999828 ], [ 134.14616946700016, -6.85898202899989 ], [ 134.14047285200013, -6.854913018999866 ], [ 134.1274520190002, -6.849379164999846 ], [ 134.08985436300031, -6.838311455999872 ], [ 134.07341556100016, -6.826755466999884 ], [ 134.06446373800009, -6.795586846999868 ], [ 134.05502363400012, -6.775160414999903 ], [ 134.05298912900025, -6.764336846999811 ], [ 134.05445397200003, -6.751641533999873 ], [ 134.06657962300017, -6.719659112999864 ], [ 134.0859481130002, -6.64202239399981 ], [ 134.10377037900014, -6.474867445999792 ], [ 134.11060631600003, -6.459161065999865 ], [ 134.11752363400001, -6.452080987999864 ], [ 134.12061608200008, -6.46233489399981 ], [ 134.13111412900025, -6.479750257999854 ], [ 134.18580162900014, -6.489190362999807 ], [ 134.2099715500002, -6.50741952899989 ], [ 134.20826256600003, -6.489841403999833 ], [ 134.19117272200015, -6.462823174999869 ], [ 134.1894637380002, -6.445245049999869 ], [ 134.13697350400014, -6.45037200299987 ], [ 134.12037194100026, -6.419854424999869 ], [ 134.1274520190002, -6.32529062299983 ], [ 134.12159264400009, -6.291924737999864 ], [ 134.0991317070002, -6.225681247999887 ], [ 134.09750410200013, -6.192071221999868 ], [ 134.10271243600005, -6.180108330999815 ], [ 134.11198978000016, -6.172946872999887 ], [ 134.12378991000014, -6.171563408999873 ], [ 134.13599694100003, -6.17693450299987 ], [ 134.1460067070002, -6.188734632999854 ], [ 134.15406334700026, -6.203057549999812 ], [ 134.16382897200015, -6.215020440999865 ], [ 134.1987410820002, -6.224297783999873 ], [ 134.21404056100016, -6.234795830999872 ], [ 134.24724368600027, -6.268324476999794 ], [ 134.27711022200015, -6.29021575299987 ], [ 134.28882897200015, -6.294528903999833 ], [ 134.29460696700016, -6.297784112999864 ], [ 134.29883873800031, -6.305840752999814 ], [ 134.2998153000002, -6.31585051899981 ], [ 134.2959090500002, -6.32529062299983 ], [ 134.2880965500002, -6.336032809999836 ], [ 134.28777103000004, -6.341892184999892 ], [ 134.31275475400003, -6.374200127999814 ], [ 134.32976321700028, -6.389336846999811 ], [ 134.34937584700026, -6.399834893999866 ], [ 134.39242597700013, -6.408298434999892 ], [ 134.40723717500009, -6.419122002999814 ], [ 134.4204207690002, -6.43279387799987 ], [ 134.4365340500002, -6.445245049999869 ] ] ], [ [ [ 134.15528405000009, -6.006524346999868 ], [ 134.15528405000009, -6.04802825299987 ], [ 134.1606551440002, -6.043552341999828 ], [ 134.20679772200015, -6.025323174999869 ], [ 134.21778405000009, -6.023614190999865 ], [ 134.22584069100014, -6.028741143999866 ], [ 134.2358504570002, -6.062676690999808 ], [ 134.24048912900014, -6.073500257999797 ], [ 134.24480228000004, -6.075941664999903 ], [ 134.2509871750002, -6.070977471999868 ], [ 134.2714949880002, -6.061700127999814 ], [ 134.26579837300028, -6.077406507999797 ], [ 134.24634850400003, -6.096449476999794 ], [ 134.23731530000009, -6.110121351999851 ], [ 134.23414147200003, -6.130059502999814 ], [ 134.24252363400012, -6.144219658999816 ], [ 134.25700931100005, -6.158379815999865 ], [ 134.2714949880002, -6.178399346999811 ], [ 134.28630618600005, -6.174981377999814 ], [ 134.2998153000002, -6.184502862999807 ], [ 134.33326256600014, -6.234551690999808 ], [ 134.34278405000009, -6.239353122999887 ], [ 134.36150149800017, -6.239353122999887 ], [ 134.35320071700016, -6.250420830999872 ], [ 134.3559676440002, -6.254571221999868 ], [ 134.3779403000002, -6.254082940999808 ], [ 134.38591556100027, -6.257500908999816 ], [ 134.39568118600005, -6.264906507999797 ], [ 134.40788821700016, -6.271905205999872 ], [ 134.42286217500032, -6.274021091999884 ], [ 134.42286217500032, -6.28085702899989 ], [ 134.3974715500002, -6.284926039999846 ], [ 134.38086998800009, -6.298760674999869 ], [ 134.36646569100014, -6.315687757999854 ], [ 134.34717858200008, -6.329278252999814 ], [ 134.33765709700015, -6.331963799999869 ], [ 134.33480879000012, -6.328871351999794 ], [ 134.33318118600016, -6.320570570999848 ], [ 134.3266707690002, -6.30820077899989 ], [ 134.30396569100014, -6.287530205999872 ], [ 134.29078209700003, -6.280043226999794 ], [ 134.28500410200013, -6.284274997999887 ], [ 134.27759850400025, -6.275079033999873 ], [ 134.23389733200008, -6.239353122999887 ], [ 134.21794681100027, -6.207614841999884 ], [ 134.20281009200028, -6.194268487999864 ], [ 134.1826278000002, -6.205743096999868 ], [ 134.16228274800005, -6.196547132999854 ], [ 134.1660262380002, -6.183038018999866 ], [ 134.17986087300017, -6.16708749799983 ], [ 134.1894637380002, -6.150485934999892 ], [ 134.18604576900032, -6.133965752999814 ], [ 134.17164147200015, -6.136488539999903 ], [ 134.1411238940002, -6.157891533999873 ], [ 134.12037194100026, -6.12216562299983 ], [ 134.11491946700016, -6.076836846999811 ], [ 134.1259871750002, -6.034274997999887 ], [ 134.15528405000009, -6.006524346999868 ] ] ], [ [ [ 106.15919030000009, -6.009535414999903 ], [ 106.17603600399997, -6.013929945999792 ], [ 106.20948326900015, -5.998304945999792 ], [ 106.23145592500003, -5.966973565999865 ], [ 106.25652103000016, -5.941582940999808 ], [ 106.29883873800014, -5.945000908999816 ], [ 106.36101321700005, -5.993422132999854 ], [ 106.38493899800022, -6.000258070999848 ], [ 106.4093530610001, -6.004327080999815 ], [ 106.47006269600013, -6.03435637799987 ], [ 106.49537194099997, -6.034844658999873 ], [ 106.51205488400018, -6.024834893999866 ], [ 106.52767988400018, -6.012465101999851 ], [ 106.54932701900009, -6.006524346999868 ], [ 106.66293379000012, -6.007989190999865 ], [ 106.68539472700019, -6.012465101999851 ], [ 106.70582116, -6.020196221999811 ], [ 106.72087649800011, -6.030938408999873 ], [ 106.72901451900009, -6.047539971999811 ], [ 106.7310490240003, -6.058851820999792 ], [ 106.7324324880002, -6.066582940999808 ], [ 106.73780358200014, -6.083916924999869 ], [ 106.75196373800009, -6.095879815999808 ], [ 106.79322350400014, -6.104099216999884 ], [ 106.83773847700013, -6.102715752999814 ], [ 106.98829186300009, -6.079359632999854 ], [ 106.99350019600018, -6.078545830999815 ], [ 107.00513756600009, -6.072360934999836 ], [ 107.0085555350002, -6.053155205999815 ], [ 107.01392662899997, -6.040459893999866 ], [ 107.01498457100013, -6.028985283999873 ], [ 107.00513756600009, -6.013929945999792 ], [ 106.99903405000009, -6.00351327899989 ], [ 107.00456790500016, -5.988213799999812 ], [ 107.02564537900008, -5.958672783999873 ], [ 107.02125084700009, -5.924086195999848 ], [ 107.04444420700008, -5.914320570999848 ], [ 107.0803328790002, -5.921563408999873 ], [ 107.11443118600022, -5.938164971999811 ], [ 107.12574303500008, -5.948907158999816 ], [ 107.13648522200009, -5.961602471999868 ], [ 107.15007571700005, -5.973077080999815 ], [ 107.16968834700015, -5.979750257999797 ], [ 107.18775475400003, -5.980157158999873 ], [ 107.20533287900008, -5.977308851999851 ], [ 107.28093509200011, -5.954766533999873 ], [ 107.32064731700024, -5.962415976999864 ], [ 107.35413648700023, -5.975994692999905 ], [ 107.37963099700022, -6.008516380999879 ], [ 107.41307761500019, -6.063173971999902 ], [ 107.44565470100002, -6.104322740999862 ], [ 107.47026793800023, -6.145432463999896 ], [ 107.51077896500021, -6.164443739999854 ], [ 107.56317927900011, -6.184246526999857 ], [ 107.62113228600015, -6.187473681999848 ], [ 107.65522183400003, -6.225378002999833 ], [ 107.67822384900018, -6.238022903999877 ], [ 107.69966144000011, -6.226997790999803 ], [ 107.71552606800003, -6.235689939999872 ], [ 107.73219448300028, -6.232548475999806 ], [ 107.74490028600025, -6.223092012999871 ], [ 107.76807701900003, -6.213311455999872 ], [ 107.77369225400003, -6.207940362999864 ], [ 107.7829695970002, -6.205743096999868 ], [ 107.79297936300009, -6.207940362999864 ], [ 107.80290774800011, -6.211521091999884 ], [ 107.81031334700009, -6.211195570999848 ], [ 107.8132430350002, -6.20232512799987 ], [ 107.81083632800011, -6.189346824999859 ], [ 107.82626293400017, -6.185130075999837 ], [ 107.847683851, -6.191952341999865 ], [ 107.84940290500015, -6.205527749999817 ], [ 107.86396034600017, -6.206397675999881 ], [ 107.87766123600011, -6.191151889999901 ], [ 107.88535929500017, -6.186922216999903 ], [ 107.89563098100024, -6.209830572999863 ], [ 107.89562430100023, -6.23102471899989 ], [ 107.94727623800009, -6.26311614399981 ], [ 107.99047130700012, -6.281091899999865 ], [ 108.04934250100018, -6.309907120999867 ], [ 108.07406950600017, -6.318379011999866 ], [ 108.09368265800009, -6.326846921999902 ], [ 108.11328863600016, -6.326847264999856 ], [ 108.12947950200004, -6.326001111999801 ], [ 108.14226053200008, -6.322614955999882 ], [ 108.15844983600005, -6.311609683999848 ], [ 108.18360436300009, -6.296970309999892 ], [ 108.1870223320002, -6.294528903999833 ], [ 108.19507653400012, -6.287061085999881 ], [ 108.20359445600019, -6.276057684999898 ], [ 108.20699858400013, -6.262513256999853 ], [ 108.20529439700005, -6.249816209999835 ], [ 108.19848087200023, -6.240504778999878 ], [ 108.18655716400025, -6.231192666999903 ], [ 108.19848107500013, -6.227807820999885 ], [ 108.21636382600013, -6.237965338999857 ], [ 108.24872349800012, -6.247274812999876 ], [ 108.31088199700014, -6.248956414999839 ], [ 108.33217267500009, -6.261646979999853 ], [ 108.33898106000009, -6.250641592999898 ], [ 108.36026907700011, -6.246400944999891 ], [ 108.36453480500006, -6.272639433999871 ], [ 108.37222736900009, -6.340352902999882 ], [ 108.45541425900018, -6.442071221999811 ], [ 108.47461998800003, -6.452080987999864 ], [ 108.4878035820002, -6.456801039999903 ], [ 108.5395613940002, -6.486911716999828 ], [ 108.57455488400012, -6.669610283999873 ], [ 108.60547936300003, -6.761651299999869 ], [ 108.6630965500002, -6.767347914999903 ], [ 108.70533287900014, -6.795993747999887 ], [ 108.74878991, -6.812188408999873 ], [ 108.7922469410002, -6.811130466999884 ], [ 108.83497155000003, -6.787855726999851 ], [ 108.84327233200014, -6.79794687299983 ], [ 108.85865319100009, -6.802422783999816 ], [ 108.87614993600027, -6.804864190999865 ], [ 108.88965905000015, -6.809014580999872 ], [ 108.89519290499999, -6.814222914999903 ], [ 108.90357506600014, -6.822198174999812 ], [ 108.91187584700015, -6.834893487999864 ], [ 108.92302493600005, -6.844659112999864 ], [ 108.9448348320002, -6.849379164999846 ], [ 108.96892337300011, -6.848321221999868 ], [ 108.98340905000009, -6.841729424999812 ], [ 108.99073326900009, -6.827894789999903 ], [ 108.99268639400015, -6.805352471999811 ], [ 109.00131269600013, -6.789157809999892 ], [ 109.02084394600018, -6.78866952899989 ], [ 109.04151451900015, -6.795586846999868 ], [ 109.05347741000008, -6.801527601999794 ], [ 109.09205162900003, -6.831475518999866 ], [ 109.1154891290002, -6.838555596999868 ], [ 109.14283287900008, -6.856215101999851 ], [ 109.15040123800003, -6.85702890399989 ], [ 109.1769311860001, -6.856215101999851 ], [ 109.35189863400018, -6.875664971999868 ], [ 109.43824303500014, -6.860121351999851 ], [ 109.49293053500008, -6.801527601999794 ], [ 109.53199303500003, -6.835137627999814 ], [ 109.72559655000015, -6.863051039999903 ], [ 109.89633222700013, -6.918226820999792 ], [ 109.94068444100003, -6.92343515399989 ], [ 109.98389733200014, -6.922621351999794 ], [ 110.11426842500009, -6.90390390399989 ], [ 110.13884524800011, -6.897149346999868 ], [ 110.14958743599999, -6.887302341999884 ], [ 110.15284264400003, -6.881768487999864 ], [ 110.16976972700024, -6.86093515399989 ], [ 110.17750084700003, -6.856215101999851 ], [ 110.18832441500012, -6.860284112999807 ], [ 110.1920679050001, -6.869805596999811 ], [ 110.19353274800022, -6.881117445999792 ], [ 110.1980086600002, -6.890883070999848 ], [ 110.21257571700011, -6.899997653999833 ], [ 110.2587996750002, -6.920993747999887 ], [ 110.29297936300014, -6.93124765399989 ], [ 110.33464603000016, -6.961358330999815 ], [ 110.35572350400008, -6.972914320999848 ], [ 110.38103274800022, -6.975681247999887 ], [ 110.39909915500016, -6.967868747999887 ], [ 110.41504967500009, -6.957452080999815 ], [ 110.43458092500015, -6.952406507999797 ], [ 110.45606530000009, -6.950941664999903 ], [ 110.47242272200026, -6.946384372999887 ], [ 110.48617597700019, -6.937920830999872 ], [ 110.52702884200005, -6.895196221999868 ], [ 110.57154381600014, -6.836195570999792 ], [ 110.64470462300011, -6.688164971999868 ], [ 110.6573999360001, -6.643975518999866 ], [ 110.66325931100022, -6.606052341999828 ], [ 110.66480553500008, -6.565362237999864 ], [ 110.66968834700015, -6.546319268999866 ], [ 110.6784774100002, -6.534600518999866 ], [ 110.68189537900014, -6.521905205999815 ], [ 110.67107181100022, -6.499932549999812 ], [ 110.69166100400014, -6.496026299999812 ], [ 110.70199629000018, -6.488702080999815 ], [ 110.7187606130002, -6.465752862999807 ], [ 110.73047936300009, -6.456963799999869 ], [ 110.78109785200024, -6.436455987999807 ], [ 110.8081160820002, -6.431735934999892 ], [ 110.81812584699998, -6.428155205999815 ], [ 110.83375084699998, -6.420668226999851 ], [ 110.8422957690002, -6.418064059999836 ], [ 110.90316816500012, -6.410821221999811 ], [ 110.9248153000002, -6.403741143999866 ], [ 110.93409264400003, -6.411065362999864 ], [ 110.96176191500012, -6.427911065999865 ], [ 110.97250410200013, -6.431735934999892 ], [ 110.99219811300009, -6.432305596999868 ], [ 111.00245201900015, -6.43124765399989 ], [ 111.0068465500002, -6.428317966999884 ], [ 111.01075280000009, -6.420993747999887 ], [ 111.01929772200015, -6.426364841999828 ], [ 111.02670332100013, -6.435316664999846 ], [ 111.02784264400015, -6.438409112999864 ], [ 111.04086347700024, -6.447360934999892 ], [ 111.05176842500009, -6.456719658999816 ], [ 111.05925540499999, -6.46990325299987 ], [ 111.06544030000003, -6.509372653999833 ], [ 111.08236738400012, -6.543877862999864 ], [ 111.11931399800017, -6.649672132999854 ], [ 111.13705488400007, -6.685479424999869 ], [ 111.14437910200019, -6.691827080999872 ], [ 111.15056399800017, -6.692966403999833 ], [ 111.15691165499999, -6.692071221999868 ], [ 111.34253991000014, -6.712823174999869 ], [ 111.36638431100027, -6.71200937299983 ], [ 111.40805097700024, -6.701755466999884 ], [ 111.42872155000015, -6.699151299999812 ], [ 111.4441024100002, -6.689060153999833 ], [ 111.4777938160002, -6.640313408999816 ], [ 111.4934188160002, -6.623467705999815 ], [ 111.51986738400007, -6.639906507999797 ], [ 111.57699629000024, -6.650974216999884 ], [ 111.61011803500008, -6.664971612999807 ], [ 111.62142988400018, -6.674574476999794 ], [ 111.65463300900018, -6.716241143999866 ], [ 111.67269941500018, -6.733656507999854 ], [ 111.69499759200016, -6.755140882999854 ], [ 111.71680748800009, -6.77068450299987 ], [ 111.74040774800022, -6.781670830999815 ], [ 111.80730228000016, -6.799493096999868 ], [ 111.84945722700013, -6.80388762799987 ], [ 111.86622155000015, -6.80779387799987 ], [ 111.8823348320002, -6.808689059999836 ], [ 111.90430748800014, -6.801527601999794 ], [ 111.93653405000009, -6.784926039999846 ], [ 111.95850670700008, -6.779392184999836 ], [ 111.97624759200005, -6.784844658999873 ], [ 112.00993899800005, -6.818617445999848 ], [ 112.0678817070002, -6.893649997999887 ], [ 112.08399498800009, -6.906019789999903 ], [ 112.10694420700008, -6.910821221999811 ], [ 112.15064537900025, -6.910088799999869 ], [ 112.19288170700008, -6.904554945999848 ], [ 112.22657311300009, -6.892673434999892 ], [ 112.23707116000014, -6.890883070999848 ], [ 112.27816816500012, -6.890883070999848 ], [ 112.29867597700002, -6.887465101999851 ], [ 112.33969160200002, -6.873142184999836 ], [ 112.36353600400003, -6.870538018999866 ], [ 112.40007571700005, -6.876722914999903 ], [ 112.4150496750002, -6.882500908999873 ], [ 112.4223738940002, -6.878838799999812 ], [ 112.42920983200008, -6.873223565999808 ], [ 112.43523196700016, -6.870538018999866 ], [ 112.45484459700026, -6.875420830999815 ], [ 112.4712020190002, -6.887139580999872 ], [ 112.48601321700005, -6.900567315999865 ], [ 112.50074303500014, -6.910821221999811 ], [ 112.52271569100014, -6.917657158999816 ], [ 112.54281660200002, -6.917575778999833 ], [ 112.55713951900009, -6.907891533999873 ], [ 112.56283613400012, -6.887302341999884 ], [ 112.56218509200005, -6.87420012799987 ], [ 112.56251061300009, -6.86679452899989 ], [ 112.56812584700015, -6.865411065999808 ], [ 112.58277428500026, -6.870538018999866 ], [ 112.5898543630002, -6.876071872999887 ], [ 112.59620201900009, -6.885186455999872 ], [ 112.60108483200031, -6.89560312299983 ], [ 112.60377037900014, -6.904554945999848 ], [ 112.6025496750002, -6.925957940999808 ], [ 112.58668053500014, -6.965590101999851 ], [ 112.58277428500026, -6.989922783999816 ], [ 112.58716881600026, -6.99960702899989 ], [ 112.60954837300005, -7.033379815999865 ], [ 112.61801191500001, -7.041192315999865 ], [ 112.62867272200015, -7.045342705999872 ], [ 112.64332116000014, -7.039483330999872 ], [ 112.65739993600027, -7.037855726999851 ], [ 112.66578209700015, -7.054864190999865 ], [ 112.6337996750002, -7.063734632999854 ], [ 112.6176863940002, -7.070570570999848 ], [ 112.61060631600003, -7.079359632999797 ], [ 112.61410566500001, -7.091241143999866 ], [ 112.6225692070002, -7.108493747999887 ], [ 112.6328231130002, -7.123793226999851 ], [ 112.6416121750002, -7.130547783999873 ], [ 112.65837649800005, -7.137627862999864 ], [ 112.67465254000001, -7.154473565999865 ], [ 112.68384850400014, -7.174899997999887 ], [ 112.67896569100014, -7.192640882999797 ], [ 112.66431725400003, -7.19882577899989 ], [ 112.60377037900014, -7.192640882999797 ], [ 112.6201278000002, -7.214939059999836 ], [ 112.64551842500032, -7.230157158999816 ], [ 112.70069420700008, -7.254652601999851 ], [ 112.71631920700008, -7.239190362999807 ], [ 112.7295028000002, -7.220472914999846 ], [ 112.74512780000009, -7.205173434999892 ], [ 112.76823978000004, -7.199395440999865 ], [ 112.78443444100014, -7.205498955999815 ], [ 112.7978621750002, -7.218926690999808 ], [ 112.8086043630002, -7.234551690999808 ], [ 112.82325280000009, -7.262627862999807 ], [ 112.8266707690002, -7.277927341999884 ], [ 112.82634524800017, -7.293226820999848 ], [ 112.81812584700015, -7.32952239399981 ], [ 112.81617272200026, -7.346937757999797 ], [ 112.81609134200028, -7.387139580999872 ], [ 112.80746504000012, -7.407321872999887 ], [ 112.7700301440002, -7.43271249799983 ], [ 112.76148522200015, -7.448907158999873 ], [ 112.76148522200015, -7.531182549999869 ], [ 112.84489993600027, -7.592868747999887 ], [ 112.97201582100013, -7.647637627999814 ], [ 112.99048912900003, -7.65195077899989 ], [ 113.01628665500004, -7.652276299999812 ], [ 113.0371199880002, -7.655043226999794 ], [ 113.05600019600024, -7.663018487999864 ], [ 113.07618248800009, -7.678643487999807 ], [ 113.11150149800017, -7.713148695999848 ], [ 113.13266035200002, -7.727797132999854 ], [ 113.16537519600013, -7.73593515399989 ], [ 113.18726647200026, -7.745049737999864 ], [ 113.19955488400012, -7.747491143999866 ], [ 113.20826256600014, -7.746270440999865 ], [ 113.22974694100014, -7.740817966999828 ], [ 113.24122155000009, -7.740655205999872 ], [ 113.26099694100003, -7.750176690999865 ], [ 113.28532962300017, -7.781670830999872 ], [ 113.2993270190002, -7.78850676899981 ], [ 113.32309004000012, -7.785577080999872 ], [ 113.34253991000014, -7.777764580999872 ], [ 113.37777754000012, -7.754327080999815 ], [ 113.41374759200005, -7.736260674999869 ], [ 113.43580162900014, -7.729180596999811 ], [ 113.45687910200002, -7.726332289999903 ], [ 113.47282962300017, -7.722100518999866 ], [ 113.50456790500004, -7.703789971999811 ], [ 113.52857506600026, -7.70037200299987 ], [ 113.65894616000003, -7.72014739399981 ], [ 113.67107181100016, -7.717950127999814 ], [ 113.6909285820002, -7.709079684999892 ], [ 113.69996178500003, -7.706638278999833 ], [ 113.72299238400001, -7.708265882999854 ], [ 113.76303144600001, -7.722832940999808 ], [ 113.78589928500003, -7.726332289999903 ], [ 113.80388431100016, -7.72177499799983 ], [ 113.81657962300005, -7.710625908999816 ], [ 113.83716881600026, -7.686130466999884 ], [ 113.85474694100003, -7.677015882999797 ], [ 113.8696395190002, -7.677992445999792 ], [ 113.88607832100024, -7.68303801899981 ], [ 113.90943444100003, -7.686130466999884 ], [ 113.93051191500012, -7.683851820999848 ], [ 113.94507897200003, -7.677992445999792 ], [ 114.0161238940002, -7.618096612999864 ], [ 114.04558353000016, -7.611993096999868 ], [ 114.07732181100016, -7.630791924999812 ], [ 114.11695397200003, -7.680596612999864 ], [ 114.14039147200003, -7.700860283999873 ], [ 114.17221113400012, -7.713474216999884 ], [ 114.19597415500004, -7.714125257999797 ], [ 114.2368270190002, -7.703301690999808 ], [ 114.25855553500014, -7.70037200299987 ], [ 114.27361087300017, -7.705498955999815 ], [ 114.31006920700031, -7.740655205999872 ], [ 114.3252059250002, -7.750258070999848 ], [ 114.3344832690002, -7.753187757999854 ], [ 114.34750410200013, -7.754327080999815 ], [ 114.36963951900032, -7.753187757999854 ], [ 114.38111412900003, -7.754164320999848 ], [ 114.38892662900025, -7.758070570999848 ], [ 114.4067488940002, -7.773207289999846 ], [ 114.44597415500016, -7.794691664999846 ], [ 114.46021569100014, -7.809665622999887 ], [ 114.46729576900032, -7.830987237999864 ], [ 114.46648196700005, -7.85271575299987 ], [ 114.46021569100014, -7.894952080999872 ], [ 114.45736738400012, -7.902520440999808 ], [ 114.44459069100014, -7.920668226999851 ], [ 114.4404403000002, -7.932549737999864 ], [ 114.44027754000001, -7.943780205999872 ], [ 114.44255618600027, -7.952406507999854 ], [ 114.44548587300017, -7.959649346999868 ], [ 114.4472762380002, -7.966566664999903 ], [ 114.44678795700008, -8.014255466999884 ], [ 114.4047957690002, -8.158379815999808 ], [ 114.36597741000003, -8.357191664999903 ], [ 114.36353600400014, -8.386163018999866 ], [ 114.35865319100026, -8.409112237999864 ], [ 114.3579207690002, -8.41912200299987 ], [ 114.36011803500026, -8.430596612999807 ], [ 114.37159264400009, -8.453220309999892 ], [ 114.37338300900001, -8.498467705999872 ], [ 114.37671959700003, -8.519463799999869 ], [ 114.38892662900025, -8.528252862999807 ], [ 114.40113366000014, -8.51718515399989 ], [ 114.40512129000012, -8.491794528999833 ], [ 114.40560957100001, -8.447035414999903 ], [ 114.42318769600024, -8.465020440999865 ], [ 114.42741946700028, -8.496840101999851 ], [ 114.42611738400012, -8.562432549999869 ], [ 114.43287194100003, -8.582614841999828 ], [ 114.4453231130002, -8.602797132999854 ], [ 114.46119225400014, -8.61834075299987 ], [ 114.4780379570002, -8.62460702899989 ], [ 114.4980574880002, -8.625258070999848 ], [ 114.51075280000009, -8.628350518999866 ], [ 114.53598066500024, -8.645114841999884 ], [ 114.58912194100026, -8.664239190999865 ], [ 114.59742272200003, -8.675713799999869 ], [ 114.60336347700024, -8.688164971999811 ], [ 114.61557050900012, -8.700127862999864 ], [ 114.62566165500027, -8.716078382999854 ], [ 114.62476647200015, -8.740655205999872 ], [ 114.59717858200008, -8.775567315999865 ], [ 114.55534915500027, -8.777927341999828 ], [ 114.46762129000012, -8.748142184999892 ], [ 114.4453231130002, -8.744073174999869 ], [ 114.38892662900025, -8.748142184999892 ], [ 114.36695397200015, -8.741469007999854 ], [ 114.36980228000016, -8.726332289999846 ], [ 114.39193769600001, -8.700290622999887 ], [ 114.3852645190002, -8.664727471999811 ], [ 114.3496199880002, -8.632500908999873 ], [ 114.30258222700024, -8.611911716999828 ], [ 114.2617293630002, -8.61093515399989 ], [ 114.22087649800005, -8.636488539999846 ], [ 114.19703209700026, -8.64560312299983 ], [ 114.18653405000032, -8.634860934999836 ], [ 114.1748153000002, -8.619805596999811 ], [ 114.14820397200026, -8.622328382999854 ], [ 114.10401451900032, -8.638116143999866 ], [ 114.09489993600016, -8.63787200299987 ], [ 114.05933678500014, -8.631442966999828 ], [ 114.05079186300031, -8.627129815999808 ], [ 114.0415145190002, -8.608330987999864 ], [ 114.03199303500026, -8.604099216999884 ], [ 114.01238040500016, -8.609470309999892 ], [ 113.99488366000014, -8.61834075299987 ], [ 113.9799910820002, -8.62021249799983 ], [ 113.96802819100026, -8.604099216999884 ], [ 113.96924889400009, -8.593519789999903 ], [ 113.97315514400009, -8.57968515399989 ], [ 113.97388756600003, -8.567559502999814 ], [ 113.9643660820002, -8.562432549999869 ], [ 113.95427493600027, -8.564711195999848 ], [ 113.93376712300017, -8.574476820999792 ], [ 113.92286217500032, -8.576755466999884 ], [ 113.90560957100024, -8.573907158999873 ], [ 113.87964928500014, -8.566176039999903 ], [ 113.85377037900003, -8.555108330999872 ], [ 113.83716881600026, -8.542087497999887 ], [ 113.83204186300009, -8.546807549999812 ], [ 113.82846113400001, -8.548923434999892 ], [ 113.82593834700015, -8.551039320999848 ], [ 113.82349694100003, -8.556329033999816 ], [ 113.8188582690002, -8.541761976999794 ], [ 113.81381269600001, -8.507745049999869 ], [ 113.80616295700031, -8.501071872999887 ], [ 113.79078209700003, -8.50302499799983 ], [ 113.77369225400014, -8.508070570999792 ], [ 113.76010175900001, -8.515801690999865 ], [ 113.75456790500027, -8.52499765399989 ], [ 113.75074303500014, -8.528090101999851 ], [ 113.74170983200008, -8.528985283999816 ], [ 113.72388756600026, -8.528252862999807 ], [ 113.71973717500032, -8.524672132999854 ], [ 113.72185306100005, -8.507419528999833 ], [ 113.72046959700015, -8.501071872999887 ], [ 113.70728600400003, -8.492364190999808 ], [ 113.69874108200008, -8.49358489399981 ], [ 113.6889754570002, -8.496840101999851 ], [ 113.67261803500014, -8.494805596999868 ], [ 113.65845787900003, -8.484958591999828 ], [ 113.64047285200013, -8.458591403999833 ], [ 113.6279403000002, -8.453220309999892 ], [ 113.59693444100014, -8.447035414999903 ], [ 113.59058678500003, -8.442071221999868 ], [ 113.5791121750002, -8.42880624799983 ], [ 113.57300866000014, -8.425957940999865 ], [ 113.54086347700013, -8.430596612999807 ], [ 113.52719160200013, -8.42929452899989 ], [ 113.49048912900014, -8.408379815999865 ], [ 113.4838973320002, -8.402032158999816 ], [ 113.47885175900001, -8.394707940999808 ], [ 113.47242272200026, -8.382094007999854 ], [ 113.46656334700003, -8.377536716999884 ], [ 113.44605553500026, -8.375583591999828 ], [ 113.42945397200015, -8.384047132999854 ], [ 113.41358483200008, -8.390232028999833 ], [ 113.39519290500004, -8.381280205999815 ], [ 113.34595787900014, -8.324151299999869 ], [ 113.32309004000012, -8.309258721999868 ], [ 113.28199303500014, -8.292087497999887 ], [ 113.24073326900009, -8.280938408999873 ], [ 113.19792728000016, -8.277276299999869 ], [ 113.07007897200015, -8.292413018999866 ], [ 113.02670332100024, -8.302992445999848 ], [ 112.98731530000032, -8.323500257999797 ], [ 112.93677819100014, -8.381280205999815 ], [ 112.90267988400012, -8.403985283999873 ], [ 112.87061608200008, -8.39177825299987 ], [ 112.8574324880002, -8.392673434999892 ], [ 112.83383222700013, -8.375746351999794 ], [ 112.82976321700028, -8.381280205999815 ], [ 112.82634524800017, -8.390069268999866 ], [ 112.8178817070002, -8.396579684999892 ], [ 112.80787194100014, -8.398858330999872 ], [ 112.79908287900014, -8.395196221999811 ], [ 112.78980553500014, -8.38787200299987 ], [ 112.78419030000032, -8.386814059999836 ], [ 112.76921634200016, -8.395196221999811 ], [ 112.75513756600026, -8.407972914999846 ], [ 112.74781334700026, -8.412855726999794 ], [ 112.73316491000014, -8.417657158999873 ], [ 112.71680748800031, -8.41912200299987 ], [ 112.70191491000014, -8.422295830999815 ], [ 112.6904403000002, -8.429864190999865 ], [ 112.67269941500024, -8.447035414999903 ], [ 112.6562606130002, -8.436455987999864 ], [ 112.61215254000012, -8.416436455999872 ], [ 112.57341556100016, -8.410088799999869 ], [ 112.52068118600005, -8.39177825299987 ], [ 112.44239342500032, -8.39177825299987 ], [ 112.42652428500003, -8.387627862999864 ], [ 112.4135848320002, -8.379082940999808 ], [ 112.39869225400014, -8.371758721999811 ], [ 112.37663821700028, -8.371270440999865 ], [ 112.3813582690002, -8.361423434999892 ], [ 112.38404381600014, -8.357598565999808 ], [ 112.3662215500002, -8.341973565999808 ], [ 112.34156334700026, -8.332696221999868 ], [ 112.3159285820002, -8.329034112999807 ], [ 112.29525800900001, -8.329766533999873 ], [ 112.28451582100001, -8.332696221999868 ], [ 112.2578231130002, -8.34335702899989 ], [ 112.24439537900014, -8.341973565999808 ], [ 112.23755944100014, -8.338474216999828 ], [ 112.23308353000027, -8.333916924999869 ], [ 112.2270613940002, -8.329766533999873 ], [ 112.2089949880002, -8.323663018999866 ], [ 112.02475019600001, -8.304945570999792 ], [ 112.00269616000014, -8.297784112999864 ], [ 111.97071373800014, -8.277764580999872 ], [ 111.96119225400014, -8.278252862999864 ], [ 111.93620853000016, -8.294854424999812 ], [ 111.9316512380002, -8.299574476999851 ], [ 111.92725670700008, -8.302504164999846 ], [ 111.91863040500027, -8.302992445999848 ], [ 111.8986922540002, -8.296482028999833 ], [ 111.87476647200015, -8.273858330999872 ], [ 111.8598738940002, -8.268812757999854 ], [ 111.83375084700015, -8.270684502999814 ], [ 111.82243899800005, -8.268812757999854 ], [ 111.81128991000003, -8.264418226999851 ], [ 111.8015242850002, -8.25888437299983 ], [ 111.79200280000009, -8.256524346999868 ], [ 111.78142337300005, -8.261407158999873 ], [ 111.77100670700008, -8.281508070999792 ], [ 111.77222741000026, -8.301690362999864 ], [ 111.77035566500018, -8.317315362999807 ], [ 111.75066165500016, -8.323500257999797 ], [ 111.7465926440002, -8.318047783999873 ], [ 111.74187259200028, -8.30608489399981 ], [ 111.73536217500009, -8.294040622999887 ], [ 111.72608483200014, -8.288750908999816 ], [ 111.71729576900009, -8.292738539999903 ], [ 111.71192467500015, -8.30217864399981 ], [ 111.7057397800001, -8.323500257999797 ], [ 111.70248457100013, -8.327406507999797 ], [ 111.69678795700003, -8.336846612999807 ], [ 111.6948348320002, -8.346368096999811 ], [ 111.70923912899997, -8.354099216999884 ], [ 111.71127363400018, -8.361016533999816 ], [ 111.70753014400009, -8.368096612999864 ], [ 111.69581139400015, -8.371270440999865 ], [ 111.67335045700008, -8.367852471999811 ], [ 111.65406334700015, -8.358086846999868 ], [ 111.63917076900015, -8.343031507999854 ], [ 111.63054446700016, -8.323500257999797 ], [ 111.62370853000004, -8.323500257999797 ], [ 111.61255944100014, -8.337009372999887 ], [ 111.59587649800011, -8.334405205999872 ], [ 111.56169681100027, -8.316664320999848 ], [ 111.54802493600016, -8.315606377999814 ], [ 111.53288821700016, -8.326592705999872 ], [ 111.51783287900008, -8.329766533999873 ], [ 111.44874108200014, -8.312920830999872 ], [ 111.4416610040002, -8.296807549999869 ], [ 111.44353274800017, -8.284844658999816 ], [ 111.44206790499999, -8.276055596999868 ], [ 111.42505944100014, -8.268812757999854 ], [ 111.4174910820002, -8.26913827899989 ], [ 111.39991295700014, -8.274346612999864 ], [ 111.39039147200003, -8.275079033999873 ], [ 111.38412519600013, -8.27288176899981 ], [ 111.37240644600018, -8.264418226999851 ], [ 111.36304772199998, -8.261407158999873 ], [ 111.31153405000009, -8.261407158999873 ], [ 111.30062910200019, -8.262953382999797 ], [ 111.29493248800014, -8.260430596999868 ], [ 111.2841903000002, -8.251234632999797 ], [ 111.27613366000008, -8.248304945999792 ], [ 111.26579837300017, -8.249281507999854 ], [ 111.25700931100022, -8.253024997999887 ], [ 111.25318444100009, -8.257989190999865 ], [ 111.17123457100024, -8.282647393999866 ], [ 111.16195722700019, -8.281914971999811 ], [ 111.1582137380002, -8.272067966999884 ], [ 111.1554468110001, -8.261000257999854 ], [ 111.14828535200007, -8.25351327899989 ], [ 111.13843834700009, -8.24920012799987 ], [ 111.12720787900008, -8.247735283999816 ], [ 111.11475670700014, -8.241957289999846 ], [ 111.11117597700019, -8.229180596999811 ], [ 111.10971113400018, -8.215427341999884 ], [ 111.10303795700008, -8.206801039999903 ], [ 111.09555097700019, -8.20818450299987 ], [ 111.09083092500009, -8.215508721999868 ], [ 111.0871688160002, -8.225274346999811 ], [ 111.08236738400012, -8.23349374799983 ], [ 111.07276451900009, -8.247002862999807 ], [ 111.06666100399997, -8.252536716999884 ], [ 111.05827884200028, -8.254652601999851 ], [ 111.01734459700009, -8.254652601999851 ], [ 110.998220248, -8.250176690999865 ], [ 110.93100019600018, -8.220472914999903 ], [ 110.8479110040002, -8.201104424999812 ], [ 110.71534264400009, -8.193129164999846 ], [ 110.70557701900003, -8.190036716999884 ], [ 110.69125410200024, -8.175876559999836 ], [ 110.68148847700019, -8.172621351999794 ], [ 110.66065514400015, -8.169854424999869 ], [ 110.63941491000003, -8.162774346999868 ], [ 110.60271243600016, -8.144789320999848 ], [ 110.60271243600016, -8.15154387799987 ], [ 110.54908287900008, -8.127618096999811 ], [ 110.52116946700028, -8.12021249799983 ], [ 110.49626712300005, -8.117445570999792 ], [ 110.476735873, -8.111911716999884 ], [ 110.41089928500003, -8.075860283999873 ], [ 110.40056399800011, -8.074639580999872 ], [ 110.38941491000008, -8.074883721999811 ], [ 110.38038170700008, -8.073174737999807 ], [ 110.37671959700015, -8.066176039999846 ], [ 110.3523055350002, -8.041680596999811 ], [ 110.3474227220002, -8.038832289999846 ], [ 110.32837975400003, -8.021172783999873 ], [ 110.31910241, -8.018731377999814 ], [ 110.2873641290002, -8.015069268999866 ], [ 110.03419030000009, -7.884698174999869 ], [ 109.93189537900025, -7.854913018999866 ], [ 109.90601647199998, -7.837660414999903 ], [ 109.88306725400025, -7.844821872999887 ], [ 109.84742272200015, -7.836683851999851 ], [ 109.81177819100009, -7.823418877999814 ], [ 109.7524520190002, -7.811944268999866 ], [ 109.65674889400009, -7.781670830999872 ], [ 109.48609459700003, -7.761814059999892 ], [ 109.44678795700014, -7.772067966999884 ], [ 109.4262801440002, -7.774183851999851 ], [ 109.41724694099997, -7.764906507999854 ], [ 109.41472415500016, -7.757907809999892 ], [ 109.40853925900018, -7.754978122999887 ], [ 109.40170332100018, -7.752618096999811 ], [ 109.39665774800022, -7.747491143999866 ], [ 109.39722741000014, -7.741875908999873 ], [ 109.40455162900014, -7.731052341999884 ], [ 109.40349368600005, -7.726332289999903 ], [ 109.3976343110001, -7.722832940999808 ], [ 109.36882571699999, -7.713474216999884 ], [ 109.19723358700014, -7.696216842999888 ], [ 109.0981458660001, -7.686861173999887 ], [ 109.04655524300028, -7.701853287999882 ], [ 109.03296959700009, -7.72014739399981 ], [ 109.0212508470002, -7.73202890399989 ], [ 109.01441491000008, -7.732598565999865 ], [ 108.98389733200014, -7.707207940999808 ], [ 108.97364342500003, -7.702243747999887 ], [ 108.96159915500021, -7.70037200299987 ], [ 108.93897545700008, -7.699476820999792 ], [ 108.91830488400012, -7.69638437299983 ], [ 108.9015405610001, -7.689629815999865 ], [ 108.88965905000015, -7.678643487999807 ], [ 108.88160241000003, -7.632500908999816 ], [ 108.87322024800017, -7.610609632999854 ], [ 108.85865319100009, -7.614027601999794 ], [ 108.85206139400009, -7.618829033999873 ], [ 108.82748457100024, -7.630791924999812 ], [ 108.82048587300011, -7.63787200299987 ], [ 108.80697675900018, -7.658135674999869 ], [ 108.79900149800017, -7.664727471999868 ], [ 108.78825931100016, -7.673516533999816 ], [ 108.76105384500016, -7.692764579999903 ], [ 108.7353621750002, -7.678643487999807 ], [ 108.72901451900009, -7.675957940999865 ], [ 108.72193444100009, -7.670342705999872 ], [ 108.71387780000009, -7.665704033999816 ], [ 108.70394941500024, -7.665622653999833 ], [ 108.69174238400018, -7.672295830999872 ], [ 108.68171394000018, -7.68224426199987 ], [ 108.67314890500018, -7.690752519999876 ], [ 108.67953535200019, -7.710219007999854 ], [ 108.6777449880002, -7.718926690999808 ], [ 108.67261803500008, -7.720635674999812 ], [ 108.65174052100019, -7.716271036999899 ], [ 108.64649498800009, -7.69296640399989 ], [ 108.63892662900008, -7.687920830999872 ], [ 108.62549889400009, -7.686130466999884 ], [ 108.55941816500012, -7.687432549999869 ], [ 108.5395613940002, -7.692315362999864 ], [ 108.50782311300003, -7.719496351999851 ], [ 108.50383388100022, -7.764224063999905 ], [ 108.49526643100012, -7.792922989999795 ], [ 108.45371146800022, -7.81850140899985 ], [ 108.32682945600004, -7.817471294999848 ], [ 108.13791037300012, -7.786661276999894 ], [ 107.95353055200013, -7.739873403999866 ], [ 107.90528615500011, -7.738783636999813 ], [ 107.86453418900015, -7.745130128999847 ], [ 107.83022842600019, -7.729167343999905 ], [ 107.82814549600016, -7.700493919999872 ], [ 107.8067390180002, -7.686675730999866 ], [ 107.77879648400011, -7.68024853799983 ], [ 107.71439665500014, -7.671659197999873 ], [ 107.68654876600016, -7.662075041999856 ], [ 107.67801324100014, -7.6397533949999 ], [ 107.66083976400017, -7.614208032999898 ], [ 107.6254686040001, -7.598219571999834 ], [ 107.59096020900012, -7.570433912999818 ], [ 107.55544769800014, -7.561823282999853 ], [ 107.52851427600012, -7.548963287999868 ], [ 107.4811514700001, -7.538193522999904 ], [ 107.47050903500019, -7.51690987399985 ], [ 107.45207948700016, -7.51253699799986 ], [ 107.43189537900003, -7.506524346999868 ], [ 107.42603600400008, -7.507907809999836 ], [ 107.42017662900014, -7.505629164999846 ], [ 107.41138756600026, -7.495863539999903 ], [ 107.36153061900023, -7.503713305999895 ], [ 107.29778959399999, -7.496136852999882 ], [ 107.24632553600014, -7.489654141999893 ], [ 107.21200781200019, -7.485328705999848 ], [ 107.17985941700022, -7.475696022999898 ], [ 107.14558584200012, -7.467119921999824 ], [ 107.10704903400011, -7.456406114999879 ], [ 106.87141725099997, -7.437711292999893 ], [ 106.79102156000022, -7.435331375999795 ], [ 106.60792076900015, -7.417901299999869 ], [ 106.52266213700005, -7.410957330999793 ], [ 106.48082591500008, -7.375669131999814 ], [ 106.4593311600002, -7.365995098999804 ], [ 106.43392988400012, -7.361993096999811 ], [ 106.40747974700014, -7.375316991999853 ], [ 106.39776049699998, -7.378465401999904 ], [ 106.39889456100019, -7.36036349699981 ], [ 106.39905776800009, -7.334824459999879 ], [ 106.37536532100006, -7.310194341999875 ], [ 106.38314863400024, -7.267673434999836 ], [ 106.38070722700013, -7.24724700299987 ], [ 106.38607832100024, -7.230645440999808 ], [ 106.3984481130002, -7.207777601999794 ], [ 106.41488691500018, -7.187676690999865 ], [ 106.4326278000002, -7.17888762799987 ], [ 106.45004316500024, -7.17913176899981 ], [ 106.46729576900009, -7.176446221999868 ], [ 106.47299238400024, -7.166599216999828 ], [ 106.45655358200008, -7.144789320999848 ], [ 106.47437584700003, -7.128106377999814 ], [ 106.51396716500005, -7.079596706999894 ], [ 106.54050382500014, -7.054612118999899 ], [ 106.54200280000009, -7.01677825299987 ], [ 106.53714925700024, -6.982961612999816 ], [ 106.5108042130002, -6.963798794999889 ], [ 106.4814559250002, -6.967054945999792 ], [ 106.45170181000009, -6.955059068999901 ], [ 106.42386967900001, -6.963220839999849 ], [ 106.40463300900018, -6.991306247999887 ], [ 106.40162194100009, -6.993096612999864 ], [ 106.37891686300014, -6.999769789999903 ], [ 106.35450280000009, -7.002699476999851 ], [ 106.33301842500015, -7.000746351999794 ], [ 106.31967207100024, -6.996189059999892 ], [ 106.31104576900003, -6.991469007999854 ], [ 106.30241946700022, -6.987969658999873 ], [ 106.28858483200014, -6.986504815999808 ], [ 106.28337649800011, -6.983330987999864 ], [ 106.27320397200026, -6.969333591999884 ], [ 106.26783287900003, -6.966078382999854 ], [ 106.25424238400007, -6.964288018999866 ], [ 106.25033613400018, -6.959567966999828 ], [ 106.24935957100013, -6.952813408999873 ], [ 106.2441512380002, -6.945570570999792 ], [ 106.23755944100003, -6.940606377999814 ], [ 106.20116190500016, -6.913679238999862 ], [ 106.16837141600018, -6.915809251999804 ], [ 106.12470716300021, -6.896279079999886 ], [ 106.0529849940001, -6.836805569999797 ], [ 106.0083113940002, -6.821954033999873 ], [ 105.97870617700016, -6.817711560999896 ], [ 105.95957332400008, -6.81762837399981 ], [ 105.93962649800011, -6.820977471999811 ], [ 105.91895592500015, -6.823988539999903 ], [ 105.90162194099997, -6.829522393999866 ], [ 105.89819202700005, -6.843176040999879 ], [ 105.88437996900018, -6.847672883999792 ], [ 105.87373494300027, -6.834708033999903 ], [ 105.8545028000002, -6.838148695999848 ], [ 105.82313270100013, -6.839039911999862 ], [ 105.79241752600007, -6.845743527999844 ], [ 105.77474377900012, -6.850226666999902 ], [ 105.75560366100012, -6.844816069999865 ], [ 105.72331790500004, -6.838555596999868 ], [ 105.70289147200009, -6.835707289999903 ], [ 105.59653182000011, -6.849073272999874 ], [ 105.55518770700007, -6.855680446999827 ], [ 105.53512074200017, -6.872326969999904 ], [ 105.49846030200018, -6.860727447999807 ], [ 105.48613478600021, -6.8675155009999 ], [ 105.47095787900008, -6.853448174999869 ], [ 105.4604598320002, -6.84531015399989 ], [ 105.44223066500012, -6.842543226999851 ], [ 105.43881269600018, -6.845961195999848 ], [ 105.4296981130002, -6.85271575299987 ], [ 105.42009524800011, -6.85686614399981 ], [ 105.41553795700008, -6.852797132999854 ], [ 105.41358483200003, -6.845798434999892 ], [ 105.40894616000008, -6.838148695999848 ], [ 105.40308678500014, -6.832126559999836 ], [ 105.39795983200003, -6.829522393999866 ], [ 105.35612567800007, -6.812872490999894 ], [ 105.3107844590001, -6.810354247999896 ], [ 105.30111738400024, -6.814141533999873 ], [ 105.29639733200014, -6.833265882999854 ], [ 105.29118899800017, -6.84099700299987 ], [ 105.2837020190002, -6.846937757999797 ], [ 105.27466881599997, -6.849379164999846 ], [ 105.25611412899997, -6.842380466999884 ], [ 105.24708092500009, -6.825453382999854 ], [ 105.23617597700019, -6.787855726999851 ], [ 105.22217858200014, -6.77849700299987 ], [ 105.21680748800014, -6.772067966999828 ], [ 105.2197371750002, -6.764336846999811 ], [ 105.2270613940002, -6.762627862999807 ], [ 105.2607528000002, -6.767347914999903 ], [ 105.27466881599997, -6.761651299999869 ], [ 105.29184004000018, -6.748223565999865 ], [ 105.31934655000003, -6.719659112999864 ], [ 105.32886803500014, -6.70273202899989 ], [ 105.33627363400012, -6.684828382999854 ], [ 105.34636478, -6.670668226999794 ], [ 105.36378014400015, -6.664971612999807 ], [ 105.37623131600009, -6.670017184999836 ], [ 105.38982181100022, -6.681410414999903 ], [ 105.40137780000003, -6.695000908999873 ], [ 105.40821373800009, -6.705987237999807 ], [ 105.41081790500016, -6.718438408999873 ], [ 105.41041100399997, -6.728773695999848 ], [ 105.4116317070002, -6.738946221999868 ], [ 105.43539472700007, -6.778252862999807 ], [ 105.44068444100009, -6.794122002999814 ], [ 105.45362389400015, -6.808770440999865 ], [ 105.4712020190002, -6.81585051899981 ], [ 105.49008222700019, -6.809014580999872 ], [ 105.50261478000021, -6.791110934999892 ], [ 105.51726321700011, -6.744235934999892 ], [ 105.5285750660002, -6.723321221999811 ], [ 105.60743248800014, -6.65146249799983 ], [ 105.62224368600016, -6.631605726999851 ], [ 105.6279403000002, -6.615980726999851 ], [ 105.61897438500006, -6.532504875999848 ], [ 105.64385850000014, -6.482333287999893 ], [ 105.65624206700022, -6.473264317999849 ], [ 105.67778979500014, -6.474924131999899 ], [ 105.68223819200006, -6.511534528999903 ], [ 105.69911100100018, -6.520773518999874 ], [ 105.71136412400017, -6.534563343999821 ], [ 105.73908515500011, -6.530148685999848 ], [ 105.78223428000024, -6.512107304999859 ], [ 105.8085343150002, -6.477215533999868 ], [ 105.82409120800014, -6.434645719999878 ], [ 105.82129967500015, -6.401136976999851 ], [ 105.83236738400012, -6.228692315999865 ], [ 105.83961022200003, -6.192071221999868 ], [ 105.86719811300014, -6.110121351999851 ], [ 105.88786868600005, -6.070570570999848 ], [ 105.95704186300014, -5.998711846999811 ], [ 105.9668074880002, -5.992852471999868 ], [ 105.97730553500008, -5.98349374799983 ], [ 105.99724368600016, -5.917738539999846 ], [ 106.02003014400009, -5.893243096999811 ], [ 106.05274498800009, -5.881036065999865 ], [ 106.08521569100009, -5.885511976999794 ], [ 106.10710696700022, -5.910902601999851 ], [ 106.1115828790002, -5.975192966999828 ], [ 106.11793053500014, -5.986016533999873 ], [ 106.12867272200015, -5.990329684999836 ], [ 106.15919030000009, -6.009535414999903 ] ] ], [ [ [ 124.07113691500012, -6.01132577899989 ], [ 124.05933678500003, -6.027439059999836 ], [ 124.04127037900003, -6.020765882999797 ], [ 124.03744550900012, -6.011651299999812 ], [ 124.03589928500014, -5.98739999799983 ], [ 124.03044681100016, -5.976006768999866 ], [ 124.0185653000002, -5.967950127999814 ], [ 123.99293053500026, -5.961195570999792 ], [ 123.98259524800028, -5.955254815999865 ], [ 123.96892337300017, -5.935316664999903 ], [ 123.96607506600014, -5.915459893999866 ], [ 123.9707137380002, -5.893975518999866 ], [ 123.97917728000027, -5.869886976999851 ], [ 123.98609459700015, -5.879815362999807 ], [ 124.03744550900012, -5.914320570999848 ], [ 124.04639733200031, -5.925713799999869 ], [ 124.0576278000002, -5.951104424999812 ], [ 124.06519616000014, -5.96249765399989 ], [ 124.07398522200015, -5.985284112999807 ], [ 124.07113691500012, -6.01132577899989 ] ] ], [ [ [ 110.44988040500021, -5.874444268999866 ], [ 110.43799889400009, -5.881036065999865 ], [ 110.4303491550001, -5.873711846999811 ], [ 110.42660566500018, -5.861504815999865 ], [ 110.42164147200003, -5.851332289999903 ], [ 110.42066491000008, -5.843682549999869 ], [ 110.43132571700011, -5.837334893999866 ], [ 110.45923912900003, -5.83163827899989 ], [ 110.46558678499997, -5.839532158999873 ], [ 110.46363366000014, -5.857110283999873 ], [ 110.44988040500021, -5.874444268999866 ] ] ], [ [ [ 120.49048912900003, -6.471449476999794 ], [ 120.48129316500012, -6.477308851999851 ], [ 120.47510826900009, -6.434502862999864 ], [ 120.46566816500012, -6.402764580999872 ], [ 120.46363366000026, -6.383884372999887 ], [ 120.47087649800005, -6.275160414999903 ], [ 120.46810957100001, -6.264336846999811 ], [ 120.4604598320002, -6.259698174999812 ], [ 120.44825280000009, -6.256524346999868 ], [ 120.44483483200008, -6.248467705999815 ], [ 120.44507897200003, -6.237725518999866 ], [ 120.44369550900024, -6.22616952899989 ], [ 120.43083743600005, -6.19451262799987 ], [ 120.42945397200015, -6.185804945999792 ], [ 120.43336022200026, -6.174004815999865 ], [ 120.44695071700028, -6.154473565999865 ], [ 120.44996178500014, -6.140801690999808 ], [ 120.45215905000009, -6.080824476999794 ], [ 120.44141686300009, -5.977634372999887 ], [ 120.44825280000009, -5.843926690999808 ], [ 120.45736738400012, -5.801039320999848 ], [ 120.47046959700015, -5.766859632999854 ], [ 120.48047936300031, -5.764092705999872 ], [ 120.48861738400012, -5.767266533999873 ], [ 120.49439537900003, -5.774509372999887 ], [ 120.49708092500009, -5.783298434999836 ], [ 120.49561608200031, -5.806410414999903 ], [ 120.50342858200031, -5.822686455999872 ], [ 120.51335696700005, -5.836602471999811 ], [ 120.5180770190002, -5.852634372999887 ], [ 120.52149498800009, -5.874688408999816 ], [ 120.54615319100026, -5.938164971999811 ], [ 120.55518639400009, -5.979424737999864 ], [ 120.55933678500003, -6.022556247999887 ], [ 120.5586043630002, -6.066338799999869 ], [ 120.55298912900014, -6.110121351999851 ], [ 120.52979576900032, -6.173109632999854 ], [ 120.52621504000024, -6.195489190999865 ], [ 120.53207441500001, -6.248304945999848 ], [ 120.53012129000012, -6.287286065999808 ], [ 120.5224715500002, -6.336521091999828 ], [ 120.51498457100013, -6.352471612999864 ], [ 120.50261478000004, -6.373467705999872 ], [ 120.50098717500009, -6.392510674999869 ], [ 120.50513756600014, -6.431735934999892 ], [ 120.5000106130002, -6.451592705999872 ], [ 120.49048912900003, -6.471449476999794 ] ] ], [ [ [ 134.20687910200013, -5.82732512799987 ], [ 134.19459069100014, -5.830173434999892 ], [ 134.18051191500012, -5.82732512799987 ], [ 134.16968834700003, -5.811130466999884 ], [ 134.16749108200031, -5.788995049999869 ], [ 134.16968834700003, -5.768324476999851 ], [ 134.17774498800009, -5.754489841999828 ], [ 134.19206790500016, -5.753024997999887 ], [ 134.2002059250002, -5.755303643999866 ], [ 134.20484459700015, -5.756117445999848 ], [ 134.21273847700013, -5.758721612999864 ], [ 134.22559655000009, -5.771172783999873 ], [ 134.22828209700015, -5.773370049999869 ], [ 134.22779381600014, -5.789320570999848 ], [ 134.22038821700016, -5.81560637799987 ], [ 134.20687910200013, -5.82732512799987 ] ] ], [ [ [ 104.84644616000008, -5.811211846999868 ], [ 104.83838951900003, -5.820407809999892 ], [ 104.82016035200013, -5.812269789999846 ], [ 104.7900496750002, -5.787692966999828 ], [ 104.77670332100013, -5.771579684999892 ], [ 104.77165774800017, -5.761651299999869 ], [ 104.77035566500018, -5.752048434999892 ], [ 104.77654056100016, -5.741143487999807 ], [ 104.78679446700016, -5.742120049999869 ], [ 104.80787194100009, -5.754327080999872 ], [ 104.82699629000018, -5.757907809999836 ], [ 104.83277428500014, -5.760023695999848 ], [ 104.8463647800001, -5.77255624799983 ], [ 104.84978274800011, -5.783298434999836 ], [ 104.84644616000008, -5.811211846999868 ] ] ], [ [ [ 112.71469160200013, -5.736097914999903 ], [ 112.72706139400009, -5.747328382999854 ], [ 112.73617597700013, -5.76311614399981 ], [ 112.74040774800017, -5.787367445999848 ], [ 112.73853600400003, -5.809991143999866 ], [ 112.7314559250002, -5.828383070999848 ], [ 112.71876061300009, -5.841566664999846 ], [ 112.70069420700008, -5.84880950299987 ], [ 112.69109134200028, -5.849541924999812 ], [ 112.66391035200013, -5.848321221999811 ], [ 112.65837649800005, -5.845391533999873 ], [ 112.65479576900009, -5.837172132999797 ], [ 112.64625084700015, -5.83928801899981 ], [ 112.63054446700016, -5.84880950299987 ], [ 112.60425866000014, -5.847426039999903 ], [ 112.59620201900009, -5.836032809999836 ], [ 112.59343509200028, -5.817315362999864 ], [ 112.58277428500026, -5.794203382999854 ], [ 112.59009850400025, -5.785577080999815 ], [ 112.61801191500001, -5.763441664999846 ], [ 112.62110436300009, -5.757907809999836 ], [ 112.64535566500012, -5.732110283999873 ], [ 112.65707441500001, -5.736748955999815 ], [ 112.67017662900003, -5.733493747999887 ], [ 112.68458092500009, -5.727959893999866 ], [ 112.70069420700008, -5.72600676899981 ], [ 112.71469160200013, -5.736097914999903 ] ] ], [ [ [ 132.70289147200026, -5.61679452899989 ], [ 132.69947350400025, -5.631524346999868 ], [ 132.69239342500032, -5.642022393999866 ], [ 132.69060306100016, -5.650079033999873 ], [ 132.70289147200026, -5.657647393999866 ], [ 132.71111087300017, -5.658623955999815 ], [ 132.72632897200015, -5.654961846999868 ], [ 132.73357181100027, -5.655043226999851 ], [ 132.74048912900003, -5.660088799999869 ], [ 132.74366295700008, -5.668389580999872 ], [ 132.74537194100014, -5.686455987999864 ], [ 132.75717207100013, -5.722914320999848 ], [ 132.75757897200003, -5.732110283999873 ], [ 132.76238040500016, -5.722426039999846 ], [ 132.7636824880002, -5.718438408999873 ], [ 132.77125084700015, -5.718438408999873 ], [ 132.7763778000002, -5.738457940999865 ], [ 132.7793074880002, -5.761000257999797 ], [ 132.78589928500014, -5.779717705999872 ], [ 132.80201256600026, -5.787367445999848 ], [ 132.81104576900009, -5.797051690999865 ], [ 132.81226647200015, -5.819594007999854 ], [ 132.80543053500014, -5.862481377999814 ], [ 132.79712975400025, -5.88583749799983 ], [ 132.78736412900014, -5.90585702899989 ], [ 132.77556399800017, -5.923923434999892 ], [ 132.76059004000012, -5.941582940999808 ], [ 132.74154707100013, -5.95037200299987 ], [ 132.73072350400014, -5.934177341999828 ], [ 132.72364342500009, -5.910332940999865 ], [ 132.71599368600005, -5.896661065999808 ], [ 132.71648196700016, -5.906996351999851 ], [ 132.71420332100013, -5.918389580999872 ], [ 132.70866946700005, -5.927504164999903 ], [ 132.6992293630002, -5.931329033999873 ], [ 132.6919051440002, -5.928806247999887 ], [ 132.6860457690002, -5.922051690999865 ], [ 132.67505944100003, -5.904066664999903 ], [ 132.67505944100003, -5.910902601999851 ], [ 132.66968834700026, -5.899997653999833 ], [ 132.66781660200013, -5.88811614399981 ], [ 132.66822350400003, -5.862481377999814 ], [ 132.66700280000009, -5.857517184999892 ], [ 132.66480553500014, -5.855157158999816 ], [ 132.66236412900014, -5.852146091999828 ], [ 132.66138756600003, -5.845391533999873 ], [ 132.66342207100013, -5.838555596999868 ], [ 132.6679793630002, -5.836521091999828 ], [ 132.67269941500012, -5.836358330999872 ], [ 132.67505944100003, -5.835707289999903 ], [ 132.67164147200003, -5.783379815999865 ], [ 132.67448978000016, -5.760023695999848 ], [ 132.68873131600014, -5.760023695999848 ], [ 132.68336022200015, -5.749118747999887 ], [ 132.67505944100003, -5.712172132999797 ], [ 132.67017662900014, -5.711521091999884 ], [ 132.66138756600003, -5.711114190999865 ], [ 132.65503991000014, -5.708754164999903 ], [ 132.65796959700015, -5.701755466999828 ], [ 132.66041100400003, -5.697198174999869 ], [ 132.66195722700024, -5.69101327899989 ], [ 132.66236412900014, -5.684340101999851 ], [ 132.66138756600003, -5.67880624799983 ], [ 132.65748131600014, -5.677422783999873 ], [ 132.6504012380002, -5.677504164999846 ], [ 132.64380944100014, -5.675469658999816 ], [ 132.64087975400014, -5.667901299999869 ], [ 132.64193769600013, -5.648532809999836 ], [ 132.64087975400014, -5.643324476999851 ], [ 132.63412519600013, -5.633396091999828 ], [ 132.62761478000004, -5.625583591999884 ], [ 132.62232506600003, -5.61663176899981 ], [ 132.61980228000004, -5.602959893999866 ], [ 132.65691165500016, -5.620375257999854 ], [ 132.66138756600003, -5.623467705999872 ], [ 132.6753035820002, -5.61288827899989 ], [ 132.68783613400012, -5.600030205999872 ], [ 132.69752037900003, -5.597426039999846 ], [ 132.70289147200026, -5.61679452899989 ] ] ], [ [ [ 132.78939863400001, -5.552911065999865 ], [ 132.78492272200003, -5.561455987999807 ], [ 132.78980553500026, -5.557305596999868 ], [ 132.7973738940002, -5.553969007999854 ], [ 132.80518639400032, -5.552992445999848 ], [ 132.81104576900009, -5.555596612999864 ], [ 132.81185957100013, -5.56552499799983 ], [ 132.7973738940002, -5.609063408999873 ], [ 132.79672285200013, -5.625664971999868 ], [ 132.7993270190002, -5.641534112999864 ], [ 132.80453535200013, -5.656670830999872 ], [ 132.81275475400025, -5.671319268999866 ], [ 132.80746504000001, -5.679864190999865 ], [ 132.80543053500014, -5.68499114399981 ], [ 132.7978621750002, -5.680433851999851 ], [ 132.7920028000002, -5.674493096999868 ], [ 132.78785241000003, -5.666680596999868 ], [ 132.78492272200003, -5.657647393999866 ], [ 132.78492272200003, -5.672539971999868 ], [ 132.78052819100014, -5.680352471999868 ], [ 132.77279707100001, -5.682224216999828 ], [ 132.7636824880002, -5.67880624799983 ], [ 132.75847415500004, -5.670668226999851 ], [ 132.7431746750002, -5.630303643999866 ], [ 132.7431746750002, -5.604424737999864 ], [ 132.75082441500001, -5.573500257999797 ], [ 132.76531009200016, -5.545342705999815 ], [ 132.78492272200003, -5.527276299999812 ], [ 132.78980553500026, -5.535821221999811 ], [ 132.79127037900014, -5.544366143999866 ], [ 132.78939863400001, -5.552911065999865 ] ] ], [ [ [ 132.34620201900032, -5.535902601999794 ], [ 132.36117597700024, -5.540297132999797 ], [ 132.38070722700013, -5.534112237999807 ], [ 132.37761478000027, -5.544203382999797 ], [ 132.37142988400012, -5.554131768999866 ], [ 132.36329186300009, -5.562920830999872 ], [ 132.35352623800031, -5.568942966999884 ], [ 132.34001712300017, -5.573663018999866 ], [ 132.33432050900001, -5.572930596999868 ], [ 132.3315535820002, -5.568291924999812 ], [ 132.31739342500009, -5.551039320999792 ], [ 132.30884850400025, -5.535739841999828 ], [ 132.30713951900009, -5.521172783999816 ], [ 132.31861412900003, -5.513604424999869 ], [ 132.34620201900032, -5.535902601999794 ] ] ], [ [ [ 127.55518639400009, -5.506605726999794 ], [ 127.56137129000012, -5.517266533999816 ], [ 127.55128014400009, -5.512383721999868 ], [ 127.55518639400009, -5.506605726999794 ] ] ], [ [ [ 127.55486087300017, -5.490492445999848 ], [ 127.55697675900001, -5.499769789999846 ], [ 127.54590905000032, -5.495293877999814 ], [ 127.55486087300017, -5.490492445999848 ] ] ], [ [ [ 123.80925540500016, -5.571954033999873 ], [ 123.81470787900003, -5.595635674999869 ], [ 123.79330488400012, -5.589125257999797 ], [ 123.77816816500012, -5.572686455999872 ], [ 123.75318444100014, -5.534112237999807 ], [ 123.73462975400014, -5.518324476999851 ], [ 123.71664472700002, -5.506524346999811 ], [ 123.7016707690002, -5.493096612999807 ], [ 123.69117272200015, -5.472751559999892 ], [ 123.70484459700026, -5.472751559999892 ], [ 123.73324629000001, -5.475274346999868 ], [ 123.74976647200015, -5.48984140399989 ], [ 123.76197350400003, -5.505954684999836 ], [ 123.77711022200003, -5.513604424999869 ], [ 123.80144290500016, -5.522719007999854 ], [ 123.80836022200003, -5.545017184999892 ], [ 123.80925540500016, -5.571954033999873 ] ] ], [ [ [ 134.58122806100027, -5.424248955999872 ], [ 134.62826582100001, -5.44475676899981 ], [ 134.63591556100016, -5.455254815999865 ], [ 134.64820397200003, -5.493096612999807 ], [ 134.65894616000014, -5.504652601999851 ], [ 134.6884871750002, -5.523858330999872 ], [ 134.69654381600003, -5.534112237999807 ], [ 134.68897545700008, -5.536879164999903 ], [ 134.66863040500016, -5.547784112999864 ], [ 134.6753035820002, -5.552178643999866 ], [ 134.67896569100026, -5.557875257999854 ], [ 134.68238366000014, -5.575127862999864 ], [ 134.67603600400014, -5.575127862999864 ], [ 134.67603600400014, -5.568942966999884 ], [ 134.65170332100013, -5.574639580999872 ], [ 134.64144941500012, -5.579196872999887 ], [ 134.63510175900012, -5.588799737999864 ], [ 134.64429772200015, -5.586195570999848 ], [ 134.67237389400009, -5.588799737999864 ], [ 134.68034915500016, -5.590915622999887 ], [ 134.69117272200026, -5.596368096999811 ], [ 134.71021569100014, -5.609144789999846 ], [ 134.7368270190002, -5.637953382999797 ], [ 134.75806725400025, -5.671319268999866 ], [ 134.73975670700031, -5.68515390399989 ], [ 134.72641035200013, -5.711195570999848 ], [ 134.7187606130002, -5.737562757999854 ], [ 134.71705162900025, -5.752618096999868 ], [ 134.72624759200016, -5.754327080999872 ], [ 134.73316491000003, -5.756605726999851 ], [ 134.73755944100003, -5.760023695999848 ], [ 134.73861738400012, -5.765557549999869 ], [ 134.73878014400032, -5.773532809999892 ], [ 134.73755944100003, -5.787367445999848 ], [ 134.73121178500014, -5.802911065999808 ], [ 134.71111087300017, -5.82366301899981 ], [ 134.70289147200003, -5.835707289999903 ], [ 134.72396894600013, -5.837823174999869 ], [ 134.74333743600016, -5.846937757999854 ], [ 134.7544051440002, -5.86077239399981 ], [ 134.75123131600014, -5.876722914999903 ], [ 134.75586998800009, -5.879327080999815 ], [ 134.76002037900003, -5.885674737999864 ], [ 134.76490319100014, -5.890394789999846 ], [ 134.75424238400012, -5.898370049999812 ], [ 134.7343856130002, -5.909844658999873 ], [ 134.72388756600014, -5.917738539999846 ], [ 134.72022545700031, -5.900567315999808 ], [ 134.70964603000016, -5.896172783999816 ], [ 134.69947350400003, -5.902601820999848 ], [ 134.69654381600003, -5.917738539999846 ], [ 134.70289147200003, -5.925957940999865 ], [ 134.72779381600026, -5.93694426899981 ], [ 134.73755944100003, -5.945000908999816 ], [ 134.7270613940002, -5.944756768999866 ], [ 134.72388756600014, -5.945000908999816 ], [ 134.73609459700015, -5.969496351999851 ], [ 134.72095787900014, -5.971612237999864 ], [ 134.69532311300009, -5.962172132999854 ], [ 134.67603600400014, -5.951836846999868 ], [ 134.6684676440002, -5.944756768999866 ], [ 134.66277103000004, -5.938164971999811 ], [ 134.6543074880002, -5.933282158999873 ], [ 134.63884524800005, -5.931329033999873 ], [ 134.62598717500032, -5.93303801899981 ], [ 134.61451256600003, -5.937432549999869 ], [ 134.60572350400003, -5.943942966999884 ], [ 134.6010848320002, -5.951836846999868 ], [ 134.64258873800009, -5.947523695999848 ], [ 134.65699303500014, -5.953871351999794 ], [ 134.66236412900003, -5.976006768999866 ], [ 134.67066491000003, -5.986748955999872 ], [ 134.7114363940002, -6.020277601999794 ], [ 134.72730553500003, -6.027601820999848 ], [ 134.7651473320002, -6.076836846999811 ], [ 134.77222741000014, -6.089613539999846 ], [ 134.76823978000004, -6.112969658999873 ], [ 134.75464928500014, -6.135511976999851 ], [ 134.73601321700016, -6.153985283999873 ], [ 134.71705162900025, -6.164727471999868 ], [ 134.71314537900014, -6.16171640399989 ], [ 134.71021569100014, -6.160088799999869 ], [ 134.70289147200003, -6.157891533999873 ], [ 134.70142662900025, -6.170586846999811 ], [ 134.69727623800031, -6.18084075299987 ], [ 134.69109134200028, -6.188083591999884 ], [ 134.74073326900009, -6.171156507999797 ], [ 134.75806725400025, -6.157891533999873 ], [ 134.75814863400024, -6.167901299999869 ], [ 134.75660241000014, -6.175957940999865 ], [ 134.75318444100003, -6.182793877999814 ], [ 134.74781334700015, -6.189060153999833 ], [ 134.7436629570002, -6.19882577899989 ], [ 134.75131269600013, -6.219170830999872 ], [ 134.74781334700015, -6.22991301899981 ], [ 134.73959394600013, -6.241957289999903 ], [ 134.72087649800017, -6.281833591999884 ], [ 134.71705162900025, -6.29794687299983 ], [ 134.70183353000027, -6.32187265399989 ], [ 134.63021894600024, -6.351250908999816 ], [ 134.60775800900012, -6.369561455999872 ], [ 134.58366946700005, -6.352308851999851 ], [ 134.57056725400025, -6.34880950299987 ], [ 134.55933678500014, -6.355889580999872 ], [ 134.55372155000009, -6.355889580999872 ], [ 134.54037519600024, -6.338067315999865 ], [ 134.53581790500016, -6.335381768999866 ], [ 134.53484134200005, -6.33123137799987 ], [ 134.51628665500004, -6.313897393999866 ], [ 134.51156660200002, -6.311618747999887 ], [ 134.50196373800031, -6.299248955999872 ], [ 134.45923912900003, -6.278415622999887 ], [ 134.44947350400003, -6.263767184999892 ], [ 134.43775475400014, -6.264092705999872 ], [ 134.3779403000002, -6.239353122999887 ], [ 134.3715926440002, -6.237562757999854 ], [ 134.36890709700003, -6.233168226999851 ], [ 134.36736087300017, -6.227959893999866 ], [ 134.36451256600026, -6.223077080999872 ], [ 134.35865319100014, -6.21982187299983 ], [ 134.3540145190002, -6.221368096999868 ], [ 134.34937584700026, -6.224541924999869 ], [ 134.3437606130002, -6.22616952899989 ], [ 134.3335067070002, -6.221449476999851 ], [ 134.3266707690002, -6.210625908999873 ], [ 134.32146243600005, -6.198174737999864 ], [ 134.31609134200005, -6.189060153999833 ], [ 134.29135175900012, -6.156345309999892 ], [ 134.27662194100014, -6.119317315999865 ], [ 134.27588951900009, -6.08359140399989 ], [ 134.2924910820002, -6.054864190999808 ], [ 134.31202233200008, -6.047133070999792 ], [ 134.33057701900009, -6.050388278999833 ], [ 134.34888756600014, -6.050876559999836 ], [ 134.36768639400032, -6.03435637799987 ], [ 134.36931399800017, -6.023858330999872 ], [ 134.33326256600014, -6.026055596999868 ], [ 134.3129988940002, -6.027601820999848 ], [ 134.30176842500009, -6.016289971999868 ], [ 134.3056746750002, -6.001234632999854 ], [ 134.31511478000016, -5.98398202899989 ], [ 134.31910241000014, -5.966078382999854 ], [ 134.31226647200003, -5.954359632999854 ], [ 134.2880965500002, -5.923923434999892 ], [ 134.28882897200015, -5.917738539999846 ], [ 134.29916425900012, -5.913018487999864 ], [ 134.3125106130002, -5.90195077899989 ], [ 134.32252037900014, -5.889418226999794 ], [ 134.32349694100014, -5.868259372999887 ], [ 134.3603621750002, -5.849541924999812 ], [ 134.3540145190002, -5.835707289999903 ], [ 134.3540145190002, -5.828301690999865 ], [ 134.3764754570002, -5.805596612999807 ], [ 134.37826582100024, -5.793715101999851 ], [ 134.36150149800017, -5.780531507999797 ], [ 134.35238691500024, -5.793389580999815 ], [ 134.34099368600016, -5.80429452899989 ], [ 134.33090254000024, -5.803969007999854 ], [ 134.3266707690002, -5.783949476999794 ], [ 134.31820722700013, -5.77255624799983 ], [ 134.29916425900012, -5.768243096999868 ], [ 134.26514733200031, -5.766859632999854 ], [ 134.24789472700013, -5.760430596999868 ], [ 134.23267662900014, -5.750909112999864 ], [ 134.2065535820002, -5.729099216999884 ], [ 134.20199629000012, -5.712497653999833 ], [ 134.21550540500004, -5.695896091999884 ], [ 134.23731530000009, -5.683282158999873 ], [ 134.25782311300031, -5.67880624799983 ], [ 134.27719160200013, -5.685723565999865 ], [ 134.30974368600016, -5.712579033999816 ], [ 134.3300887380002, -5.718438408999873 ], [ 134.35181725400003, -5.71445077899989 ], [ 134.35873457100013, -5.703545830999815 ], [ 134.36068769600013, -5.688409112999807 ], [ 134.36768639400032, -5.671319268999866 ], [ 134.37818444100026, -5.661797783999873 ], [ 134.39185631600014, -5.652113539999903 ], [ 134.40406334700003, -5.640883070999848 ], [ 134.4091903000002, -5.626885674999869 ], [ 134.41244550900012, -5.613946221999868 ], [ 134.4570418630002, -5.534112237999807 ], [ 134.46265709700003, -5.552829684999892 ], [ 134.47250410200013, -5.557875257999854 ], [ 134.48316491000003, -5.552829684999892 ], [ 134.4912215500002, -5.540948174999869 ], [ 134.49480228000016, -5.543226820999848 ], [ 134.50473066500012, -5.547784112999864 ], [ 134.5058699880002, -5.528252862999864 ], [ 134.50505618600016, -5.517754815999808 ], [ 134.50196373800031, -5.510349216999828 ], [ 134.49463951900032, -5.500746351999851 ], [ 134.49203535200013, -5.495782158999873 ], [ 134.4912215500002, -5.448174737999807 ], [ 134.49252363400024, -5.441827080999872 ], [ 134.49659264400009, -5.436130466999884 ], [ 134.50212649800028, -5.431735934999892 ], [ 134.5083113940002, -5.429375908999873 ], [ 134.51547285200002, -5.429457289999846 ], [ 134.51929772200003, -5.432305596999868 ], [ 134.52247155000009, -5.436293226999851 ], [ 134.52711022200003, -5.440036716999884 ], [ 134.53972415500027, -5.44060637799987 ], [ 134.56788170700008, -5.427829684999892 ], [ 134.58122806100027, -5.424248955999872 ] ] ], [ [ [ 127.80339603000004, -5.407647393999866 ], [ 127.79004967500032, -5.409600518999866 ], [ 127.79851321700016, -5.400160414999903 ], [ 127.80339603000004, -5.407647393999866 ] ] ], [ [ [ 127.77906334700026, -5.342868747999887 ], [ 127.7851668630002, -5.352959893999866 ], [ 127.77686608200008, -5.348809502999814 ], [ 127.77906334700026, -5.342868747999887 ] ] ], [ [ [ 131.97510826900032, -5.387465101999851 ], [ 131.96558678500014, -5.388767184999836 ], [ 131.9594832690002, -5.372979424999812 ], [ 131.96241295700008, -5.343519789999903 ], [ 131.97738691500001, -5.323337497999887 ], [ 131.98650149800017, -5.317640882999854 ], [ 131.99724368600016, -5.312432549999812 ], [ 132.00863691500024, -5.312758070999848 ], [ 132.01628665500027, -5.330824476999851 ], [ 132.00033613400001, -5.373223565999865 ], [ 131.99203535200013, -5.377373955999872 ], [ 131.98519941500001, -5.377862237999864 ], [ 131.98072350400014, -5.379652601999851 ], [ 131.97510826900032, -5.387465101999851 ] ] ], [ [ [ 133.04704837300005, -5.648614190999808 ], [ 133.03353925900001, -5.654392184999892 ], [ 133.02711022200015, -5.662692966999884 ], [ 133.0171004570002, -5.67880624799983 ], [ 132.99724368600027, -5.699965101999851 ], [ 132.97543379000001, -5.728692315999865 ], [ 132.95753014400009, -5.761407158999816 ], [ 132.94939212300005, -5.794203382999854 ], [ 132.95093834700015, -5.813083591999884 ], [ 132.9585067070002, -5.844333591999828 ], [ 132.95679772200003, -5.862481377999814 ], [ 132.94947350400003, -5.874281507999797 ], [ 132.85678144600001, -5.98943450299987 ], [ 132.8422957690002, -5.996840101999851 ], [ 132.84050540500004, -5.984958591999884 ], [ 132.90007571700005, -5.813897393999866 ], [ 132.92351321700005, -5.78671640399989 ], [ 132.92888431100027, -5.777113539999903 ], [ 132.93116295700008, -5.714939059999892 ], [ 132.92888431100027, -5.698011976999794 ], [ 132.96412194100003, -5.640720309999836 ], [ 132.98031660200002, -5.644626559999836 ], [ 132.9965926440002, -5.65154387799987 ], [ 133.00407962300017, -5.647149346999868 ], [ 133.01490319100014, -5.607110283999816 ], [ 133.0185653000002, -5.566176039999903 ], [ 133.0229598320002, -5.548516533999873 ], [ 133.03874759200016, -5.513604424999869 ], [ 133.07585696700016, -5.39804452899989 ], [ 133.09669030000032, -5.366306247999887 ], [ 133.10434004000012, -5.350681247999887 ], [ 133.11011803500026, -5.310967705999872 ], [ 133.12134850400014, -5.294610283999873 ], [ 133.13786868600016, -5.287286065999865 ], [ 133.15609785200013, -5.288344007999797 ], [ 133.17261803500026, -5.29648202899989 ], [ 133.18433678500014, -5.310316664999903 ], [ 133.18816165500027, -5.324802341999884 ], [ 133.18873131600014, -5.344496351999794 ], [ 133.18433678500014, -5.361993096999868 ], [ 133.17212975400003, -5.369724216999884 ], [ 133.16537519600024, -5.380140882999854 ], [ 133.13892662900025, -5.521172783999816 ], [ 133.11329186300031, -5.595635674999869 ], [ 133.1059676440002, -5.605645440999865 ], [ 133.07960045700031, -5.631768487999807 ], [ 133.06910241000014, -5.637139580999872 ], [ 133.06080162900014, -5.639336846999868 ], [ 133.04704837300005, -5.648614190999808 ] ] ], [ [ [ 102.38249759200011, -5.46624114399981 ], [ 102.39014733200014, -5.476983330999872 ], [ 102.37875410200013, -5.482191664999846 ], [ 102.33236738400012, -5.472263278999833 ], [ 102.32447350400014, -5.468926690999808 ], [ 102.32129967500015, -5.472914320999792 ], [ 102.31364993600022, -5.472914320999792 ], [ 102.3046981130002, -5.471856377999814 ], [ 102.29786217500015, -5.472751559999892 ], [ 102.29420006600014, -5.477471612999864 ], [ 102.28353925900012, -5.499281507999797 ], [ 102.27035566500012, -5.488702080999815 ], [ 102.25733483200008, -5.457207940999808 ], [ 102.24610436300014, -5.441582940999865 ], [ 102.12769616000008, -5.349541924999869 ], [ 102.09864342500009, -5.334893487999807 ], [ 102.14722741000014, -5.289646091999884 ], [ 102.17204837300011, -5.28036874799983 ], [ 102.20101972700019, -5.287204684999892 ], [ 102.22828209700009, -5.301853122999887 ], [ 102.24170983200008, -5.306084893999866 ], [ 102.25977623800009, -5.307549737999864 ], [ 102.2739363940002, -5.312269789999846 ], [ 102.28638756600014, -5.323011976999851 ], [ 102.30404707100013, -5.342380466999884 ], [ 102.36589603000016, -5.361260674999812 ], [ 102.39437910200013, -5.375909112999864 ], [ 102.40650475400014, -5.403741143999866 ], [ 102.40023847700007, -5.418389580999815 ], [ 102.38648522199998, -5.430271091999884 ], [ 102.36622155000009, -5.441582940999865 ], [ 102.36963951900015, -5.453301690999808 ], [ 102.38249759200011, -5.46624114399981 ] ] ], [ [ [ 123.63379967500009, -5.366875908999816 ], [ 123.6191512380002, -5.37656015399989 ], [ 123.59058678500014, -5.37411874799983 ], [ 123.57211347700024, -5.366143487999807 ], [ 123.55925540500004, -5.351332289999903 ], [ 123.52295983200031, -5.277439059999892 ], [ 123.51986738400024, -5.251722914999903 ], [ 123.53972415500027, -5.24553801899981 ], [ 123.5634871750002, -5.252618096999868 ], [ 123.59555097700013, -5.256768487999807 ], [ 123.62378991000014, -5.266534112999864 ], [ 123.63591556100027, -5.290785414999903 ], [ 123.63835696700005, -5.343519789999903 ], [ 123.63379967500009, -5.366875908999816 ] ] ], [ [ [ 121.91944420700031, -5.095472914999903 ], [ 121.93702233200008, -5.095879815999865 ], [ 121.94418379000001, -5.091892184999892 ], [ 121.9594832690002, -5.071221612999864 ], [ 121.96957441500012, -5.066989841999828 ], [ 121.97730553500026, -5.070489190999808 ], [ 121.98267662900003, -5.079034112999864 ], [ 121.99659264400009, -5.137872002999814 ], [ 122.00977623800031, -5.153741143999866 ], [ 122.03337649800005, -5.14999765399989 ], [ 122.04509524800005, -5.165134372999887 ], [ 122.05616295700008, -5.175713799999869 ], [ 122.06421959700003, -5.189873955999872 ], [ 122.06739342500009, -5.215020440999865 ], [ 122.06421959700003, -5.223565362999864 ], [ 122.0571395190002, -5.226657809999892 ], [ 122.05014082100001, -5.230889580999872 ], [ 122.0468856130002, -5.242364190999865 ], [ 122.05176842500009, -5.269789320999792 ], [ 122.05298912900003, -5.432305596999868 ], [ 122.0468856130002, -5.451592705999815 ], [ 122.03199303500003, -5.465264580999872 ], [ 122.01441491000014, -5.465264580999872 ], [ 121.99675540500004, -5.462823174999812 ], [ 121.98145592500009, -5.468926690999808 ], [ 121.96827233200031, -5.467950127999814 ], [ 121.93921959700015, -5.420993747999887 ], [ 121.92351321700016, -5.403741143999866 ], [ 121.90992272200003, -5.399509372999887 ], [ 121.90056399800017, -5.399102471999868 ], [ 121.8921004570002, -5.397719007999797 ], [ 121.88184655000032, -5.39023202899989 ], [ 121.8769637380002, -5.38193124799983 ], [ 121.86841881600003, -5.359958591999828 ], [ 121.82715905000009, -5.300713799999869 ], [ 121.80681399800028, -5.259860934999892 ], [ 121.81373131600003, -5.249688408999873 ], [ 121.81218509200005, -5.220961195999792 ], [ 121.81723066500012, -5.208265882999854 ], [ 121.8261824880002, -5.197686455999872 ], [ 121.83375084700015, -5.185316664999846 ], [ 121.8388778000002, -5.172539971999811 ], [ 121.8408309250002, -5.160088799999869 ], [ 121.84636478000004, -5.152764580999872 ], [ 121.87256920700008, -5.148532809999836 ], [ 121.88184655000032, -5.14373137799987 ], [ 121.88152103000016, -5.13388437299983 ], [ 121.87305748800009, -5.12224700299987 ], [ 121.85385175900012, -5.102146091999884 ], [ 121.86491946700005, -5.086521091999884 ], [ 121.88038170700008, -5.072198174999812 ], [ 121.89795983200031, -5.060967705999815 ], [ 121.9160262380002, -5.054375908999873 ], [ 121.9101668630002, -5.070570570999792 ], [ 121.91089928500003, -5.085707289999903 ], [ 121.91944420700031, -5.095472914999903 ] ] ], [ [ [ 115.80681399800017, -4.821872653999833 ], [ 115.78638756600014, -4.827813408999987 ], [ 115.7734481130002, -4.815118096999811 ], [ 115.79525800900001, -4.78630950299987 ], [ 115.85181725400003, -4.739027601999851 ], [ 115.85181725400003, -4.74553801899981 ], [ 115.84701582100013, -4.757745049999869 ], [ 115.84587649800017, -4.764092705999815 ], [ 115.84669030000032, -4.768649997999887 ], [ 115.84913170700008, -4.774672132999854 ], [ 115.8530379570002, -4.779473565999865 ], [ 115.85808353000016, -4.779961846999868 ], [ 115.80681399800017, -4.821872653999833 ] ] ], [ [ [ 131.74870853000004, -4.75904713299991 ], [ 131.73650149800005, -4.766289971999811 ], [ 131.72901451900009, -4.754652601999794 ], [ 131.7251082690002, -4.731703382999854 ], [ 131.72608483200031, -4.707777601999851 ], [ 131.73308353000004, -4.693047783999873 ], [ 131.75017337300017, -4.71054452899989 ], [ 131.75440514400009, -4.736504815999808 ], [ 131.74870853000004, -4.75904713299991 ] ] ], [ [ [ 122.77857506600014, -4.949476820999848 ], [ 122.77312259200016, -4.958184502999814 ], [ 122.76539147200015, -4.957940362999864 ], [ 122.7539168630002, -4.953871351999794 ], [ 122.74350019600024, -4.952813408999873 ], [ 122.73902428500026, -4.961846612999864 ], [ 122.7348738940002, -4.974704684999892 ], [ 122.72494550900024, -4.98967864399981 ], [ 122.66138756600003, -5.055352471999811 ], [ 122.64340254000001, -5.078789971999868 ], [ 122.60425866000014, -5.159926039999903 ], [ 122.60124759200005, -5.180922132999854 ], [ 122.60661868600016, -5.19052499799983 ], [ 122.6186629570002, -5.191176039999903 ], [ 122.63062584700026, -5.190199476999794 ], [ 122.63599694100003, -5.194268487999864 ], [ 122.63453209700015, -5.206963799999812 ], [ 122.6298934250002, -5.216729424999869 ], [ 122.62240644600013, -5.222832940999865 ], [ 122.59815514400009, -5.228448174999869 ], [ 122.60645592500032, -5.235772393999866 ], [ 122.62916100400014, -5.24553801899981 ], [ 122.64771569100014, -5.256117445999848 ], [ 122.6523543630002, -5.261814059999836 ], [ 122.65642337300017, -5.273370049999869 ], [ 122.65853925900001, -5.29648202899989 ], [ 122.65544681100016, -5.322523695999792 ], [ 122.64747155000032, -5.344903252999814 ], [ 122.63599694100003, -5.355401299999869 ], [ 122.6245223320002, -5.342461846999868 ], [ 122.61597741000014, -5.356052341999828 ], [ 122.61060631600026, -5.38046640399989 ], [ 122.60865319100003, -5.400485934999836 ], [ 122.60547936300009, -5.413018487999864 ], [ 122.59839928500014, -5.420098565999808 ], [ 122.59148196700016, -5.420668226999851 ], [ 122.58814537900014, -5.413995049999812 ], [ 122.5844832690002, -5.409112237999864 ], [ 122.5761824880002, -5.414320570999848 ], [ 122.56373131600003, -5.427666924999869 ], [ 122.5434676440002, -5.428806247999887 ], [ 122.54086347700013, -5.387953382999854 ], [ 122.54281660200013, -5.338799737999807 ], [ 122.5366317070002, -5.315036716999828 ], [ 122.5288192070002, -5.306410414999903 ], [ 122.52084394600024, -5.291680596999811 ], [ 122.51148522200015, -5.28671640399989 ], [ 122.49878991000014, -5.307549737999864 ], [ 122.49691816500001, -5.318291924999869 ], [ 122.49919681100027, -5.33928801899981 ], [ 122.49878991000014, -5.34921640399989 ], [ 122.48511803500003, -5.383233330999872 ], [ 122.46859785200013, -5.396416924999869 ], [ 122.45020592500009, -5.399346612999807 ], [ 122.43197675900024, -5.392673434999836 ], [ 122.41627037900014, -5.37656015399989 ], [ 122.4072371750002, -5.353204033999873 ], [ 122.41488691500001, -5.33928801899981 ], [ 122.45101972700002, -5.321221612999864 ], [ 122.45101972700002, -5.315036716999828 ], [ 122.43360436300031, -5.315036716999828 ], [ 122.42156009200016, -5.311944268999866 ], [ 122.41016686300009, -5.311944268999866 ], [ 122.39519290500016, -5.321221612999864 ], [ 122.38721764400009, -5.330661716999884 ], [ 122.38363691500001, -5.341566664999903 ], [ 122.38266035200013, -5.373142184999892 ], [ 122.37720787900014, -5.384942315999865 ], [ 122.36394290500016, -5.389825127999814 ], [ 122.31332441500012, -5.389580987999864 ], [ 122.30054772200003, -5.386976820999848 ], [ 122.29021243600016, -5.380791924999812 ], [ 122.27963300900012, -5.369724216999884 ], [ 122.28711998800031, -5.362888278999833 ], [ 122.27621504000001, -5.345961195999848 ], [ 122.27515709700015, -5.32756926899981 ], [ 122.28150475400014, -5.30779387799987 ], [ 122.30713951900032, -5.263929945999848 ], [ 122.31568444100003, -5.242608330999872 ], [ 122.32007897200003, -5.219496351999851 ], [ 122.32601972700013, -5.144707940999865 ], [ 122.3325301440002, -5.123793226999794 ], [ 122.34180748800009, -5.10898202899989 ], [ 122.35084069100003, -5.10507577899989 ], [ 122.37720787900014, -5.098239841999884 ], [ 122.38266035200013, -5.092461846999811 ], [ 122.38510175900012, -5.087172132999854 ], [ 122.40259850400003, -5.061781507999854 ], [ 122.3960067070002, -5.04843515399989 ], [ 122.39177493600005, -5.03045012799987 ], [ 122.38591556100016, -4.978773695999848 ], [ 122.37224368600005, -4.955010674999869 ], [ 122.3652449880002, -4.915459893999866 ], [ 122.3549910820002, -4.884860934999892 ], [ 122.34156334700015, -4.857679945999962 ], [ 122.32748457100001, -4.842054945999792 ], [ 122.32748457100001, -4.835219007999854 ], [ 122.34498131600014, -4.814629815999808 ], [ 122.36670983200031, -4.765801690999808 ], [ 122.38266035200013, -4.745863539999846 ], [ 122.40495853000016, -4.73788827899989 ], [ 122.47095787900003, -4.731377862999921 ], [ 122.49878991000014, -4.725355726999908 ], [ 122.52947024800005, -4.710056247999944 ], [ 122.60124759200005, -4.656426690999865 ], [ 122.65699303500014, -4.624281507999854 ], [ 122.69068444100014, -4.611748955999872 ], [ 122.71111087300005, -4.615492445999848 ], [ 122.72722415500016, -4.62810637799987 ], [ 122.73552493600016, -4.64373137799987 ], [ 122.75269616000014, -4.773207289999903 ], [ 122.75277754000012, -4.844333591999884 ], [ 122.75570722700013, -4.855726820999905 ], [ 122.77027428500003, -4.87428150799991 ], [ 122.77312259200016, -4.879571221999925 ], [ 122.77409915500004, -4.887790622999887 ], [ 122.77857506600014, -4.905043226999908 ], [ 122.78003991000026, -4.916599216999828 ], [ 122.78060957100013, -4.939060153999833 ], [ 122.77857506600014, -4.949476820999848 ] ] ], [ [ [ 129.77833092500009, -4.524509372999887 ], [ 129.77027428500026, -4.539320570999848 ], [ 129.75782311300031, -4.522556247999944 ], [ 129.76270592500032, -4.518812757999797 ], [ 129.77833092500009, -4.524509372999887 ] ] ], [ [ [ 129.94849694100014, -4.514336846999925 ], [ 129.94564863400012, -4.556084893999866 ], [ 129.93336022200015, -4.562920830999872 ], [ 129.9160262380002, -4.563897393999923 ], [ 129.89926191500001, -4.568291924999869 ], [ 129.89332116000003, -4.560235283999873 ], [ 129.88379967500009, -4.555596612999864 ], [ 129.87183678500014, -4.55388762799987 ], [ 129.85906009200016, -4.554782809999892 ], [ 129.87403405000032, -4.545830987999921 ], [ 129.91814212300017, -4.537204684999836 ], [ 129.92725670700031, -4.53045012799987 ], [ 129.93181399800017, -4.515069268999923 ], [ 129.94109134200016, -4.508884372999887 ], [ 129.94849694100014, -4.514336846999925 ] ] ], [ [ [ 131.68043053500014, -4.524021091999884 ], [ 131.66089928500003, -4.534274998 ], [ 131.65503991000014, -4.525648695999792 ], [ 131.61646569100014, -4.441582940999865 ], [ 131.60621178500014, -4.430433851999851 ], [ 131.61353600400014, -4.425225518999866 ], [ 131.61980228000004, -4.424493096999811 ], [ 131.62614993600016, -4.426853122999887 ], [ 131.63347415500016, -4.430433851999851 ], [ 131.64942467500009, -4.452406507999967 ], [ 131.67074629000012, -4.490166924999812 ], [ 131.68043053500014, -4.524021091999884 ] ] ], [ [ [ 123.21127363400001, -4.677504164999959 ], [ 123.21705162900014, -4.711195570999962 ], [ 123.21973717500032, -4.816664320999848 ], [ 123.21127363400001, -4.842054945999792 ], [ 123.19703209700026, -4.836846612999864 ], [ 123.18873131600003, -4.816582940999865 ], [ 123.18409264400009, -4.776543877999927 ], [ 123.18189537900014, -4.771905205999815 ], [ 123.17115319100014, -4.756036065999865 ], [ 123.1670028000002, -4.752618096999868 ], [ 123.15772545700008, -4.748467705999872 ], [ 123.15463300900001, -4.738539320999848 ], [ 123.15349368600005, -4.726983330999929 ], [ 123.14991295700008, -4.717950127999927 ], [ 123.12387129000001, -4.71021900799991 ], [ 123.10531660200013, -4.767266533999873 ], [ 123.08155358200008, -4.739027601999851 ], [ 123.07797285200013, -4.74342213299991 ], [ 123.07105553500003, -4.748304945999905 ], [ 123.0673934250002, -4.752618096999868 ], [ 123.05209394600001, -4.740329684999892 ], [ 123.0463973320002, -4.752862237999807 ], [ 123.0468856130002, -4.797051690999922 ], [ 123.04265384200028, -4.803317966999828 ], [ 123.02377363400001, -4.815118096999811 ], [ 123.01954186300031, -4.824639580999929 ], [ 123.01295006600014, -4.857110283999873 ], [ 123.01221764400032, -4.869317315999865 ], [ 123.01742597700013, -4.909844658999987 ], [ 123.0151473320002, -4.929375908999873 ], [ 122.98991946700016, -4.945082289999846 ], [ 122.97738691500001, -4.962172132999797 ], [ 122.96794681100027, -4.980889580999872 ], [ 122.9643660820002, -4.992852471999868 ], [ 122.96607506600014, -5.003838799999869 ], [ 122.96989993600005, -5.012139580999815 ], [ 122.97437584700015, -5.019219658999873 ], [ 122.97787519600001, -5.026462497999887 ], [ 122.98462975400003, -5.052504164999903 ], [ 122.9853621750002, -5.064873955999815 ], [ 122.98357181100016, -5.087823174999812 ], [ 122.97852623800031, -5.103285414999903 ], [ 122.95525149800005, -5.14999765399989 ], [ 122.94792728000016, -5.172133070999792 ], [ 122.94988040500016, -5.190199476999794 ], [ 122.96802819100026, -5.197686455999872 ], [ 122.98845462300005, -5.186700127999814 ], [ 123.00342858200008, -5.16326262799987 ], [ 123.02035566500012, -5.142185153999833 ], [ 123.0468856130002, -5.137465101999851 ], [ 123.05933678500014, -5.14413827899989 ], [ 123.06267337300017, -5.152764580999872 ], [ 123.06299889400009, -5.162041924999812 ], [ 123.0673934250002, -5.170505466999884 ], [ 123.10206139400032, -5.180922132999854 ], [ 123.10670006600026, -5.197686455999872 ], [ 123.11793053500014, -5.209161065999808 ], [ 123.14991295700008, -5.225030205999872 ], [ 123.18881269600001, -5.247816664999903 ], [ 123.20932050900012, -5.265394789999903 ], [ 123.21810957100013, -5.283786716999884 ], [ 123.21314537900025, -5.301690362999807 ], [ 123.20142662900014, -5.317071221999868 ], [ 123.1772567070002, -5.342380466999884 ], [ 123.15805097700002, -5.373793226999851 ], [ 123.1450301440002, -5.385430596999811 ], [ 123.1030379570002, -5.395277601999851 ], [ 123.06560306100027, -5.418389580999815 ], [ 123.0468856130002, -5.424248955999872 ], [ 123.03052819100014, -5.419528903999833 ], [ 123.01026451900009, -5.39568450299987 ], [ 122.99537194100014, -5.39023202899989 ], [ 122.9775496750002, -5.394219658999873 ], [ 122.89291425900024, -5.444268487999807 ], [ 122.87623131600014, -5.458428643999866 ], [ 122.8628035820002, -5.495863539999903 ], [ 122.86101321700016, -5.508070570999848 ], [ 122.86597741000014, -5.513604424999869 ], [ 122.87631269600013, -5.51091887799987 ], [ 122.90170332100001, -5.499932549999812 ], [ 122.91041100400003, -5.499281507999797 ], [ 122.91822350400003, -5.527439059999892 ], [ 122.89682050900012, -5.571221612999864 ], [ 122.84888756600014, -5.637139580999872 ], [ 122.8276473320002, -5.676202080999872 ], [ 122.8134871750002, -5.687920830999815 ], [ 122.79029381600003, -5.692478122999887 ], [ 122.78793379000024, -5.687269789999903 ], [ 122.78630618600016, -5.662692966999884 ], [ 122.78345787900014, -5.654229424999812 ], [ 122.7710067070002, -5.642022393999866 ], [ 122.76783287900014, -5.641371351999794 ], [ 122.76628665500016, -5.648125908999816 ], [ 122.75359134200016, -5.665785414999846 ], [ 122.7504988940002, -5.675388278999833 ], [ 122.74659264400032, -5.679375908999816 ], [ 122.73902428500026, -5.671319268999866 ], [ 122.73682701900009, -5.661065362999864 ], [ 122.73959394600013, -5.636895440999865 ], [ 122.73560631600014, -5.626885674999869 ], [ 122.72234134200016, -5.627699476999851 ], [ 122.69092858200008, -5.665785414999846 ], [ 122.67701256600003, -5.67880624799983 ], [ 122.65430748800009, -5.678480726999794 ], [ 122.63835696700016, -5.662204684999892 ], [ 122.56714928500014, -5.506931247999887 ], [ 122.64429772200026, -5.439385674999869 ], [ 122.65455162900014, -5.424737237999864 ], [ 122.65211022200026, -5.411390882999854 ], [ 122.62916100400014, -5.403741143999866 ], [ 122.63559004000001, -5.391045830999815 ], [ 122.66325931100016, -5.355401299999869 ], [ 122.67261803500003, -5.324151299999812 ], [ 122.67839603000016, -5.322442315999808 ], [ 122.68506920700008, -5.322930596999868 ], [ 122.69068444100014, -5.321221612999864 ], [ 122.70411217500032, -5.302911065999808 ], [ 122.72103925900012, -5.266208591999828 ], [ 122.73218834700015, -5.253024997999887 ], [ 122.75269616000014, -5.245863539999903 ], [ 122.77947024800017, -5.241143487999807 ], [ 122.8032332690002, -5.231866143999866 ], [ 122.81470787900014, -5.211358330999815 ], [ 122.81413821700016, -5.193129164999903 ], [ 122.80860436300009, -5.189385674999812 ], [ 122.76343834700015, -5.207940362999807 ], [ 122.75757897200026, -5.206719658999873 ], [ 122.76628665500016, -5.190850518999866 ], [ 122.75456790500016, -5.177666924999812 ], [ 122.75660241000003, -5.164727471999811 ], [ 122.77312259200016, -5.14373137799987 ], [ 122.77849368600016, -5.129571221999868 ], [ 122.77808678500003, -5.10458749799983 ], [ 122.78003991000026, -5.089043877999814 ], [ 122.79761803500003, -5.060642184999892 ], [ 122.80445397200015, -5.043633721999811 ], [ 122.80054772200003, -5.026462497999887 ], [ 122.79118899800028, -5.021254164999903 ], [ 122.7797957690002, -5.024997653999833 ], [ 122.7666121750002, -5.031182549999812 ], [ 122.75269616000014, -5.033868096999868 ], [ 122.76189212300028, -5.015394789999846 ], [ 122.8178817070002, -4.968682549999869 ], [ 122.82740319100014, -4.95232512799987 ], [ 122.8335067070002, -4.92913176899981 ], [ 122.8359481130002, -4.904392184999836 ], [ 122.83464603000016, -4.883070570999792 ], [ 122.83073978000004, -4.873223565999979 ], [ 122.82496178500014, -4.86288827899989 ], [ 122.82048587300017, -4.852227471999811 ], [ 122.82097415500027, -4.842054945999792 ], [ 122.82886803500026, -4.835870049999812 ], [ 122.84017988400012, -4.834649346999868 ], [ 122.85059655000032, -4.831149997999887 ], [ 122.85499108200031, -4.817803643999866 ], [ 122.84799238400012, -4.648858330999985 ], [ 122.85499108200031, -4.609551690999865 ], [ 122.86939537900003, -4.568291924999869 ], [ 122.89942467500032, -4.510023695999848 ], [ 122.90357506600026, -4.489190362999864 ], [ 122.90894616000014, -4.474541924999812 ], [ 122.92261803500014, -4.461602471999811 ], [ 123.01954186300031, -4.390232028999833 ], [ 123.04135175900001, -4.38437265399989 ], [ 123.06910241000014, -4.383233330999872 ], [ 123.08570397200003, -4.389092705999815 ], [ 123.0615340500002, -4.421319268999866 ], [ 123.06853274800028, -4.439629815999808 ], [ 123.08423912900014, -4.456149997999887 ], [ 123.14779707100024, -4.508477471999868 ], [ 123.1635848320002, -4.526788018999866 ], [ 123.19044030000009, -4.566827080999985 ], [ 123.20045006600014, -4.589043877999814 ], [ 123.20443769600024, -4.611748955999872 ], [ 123.20240319100003, -4.621514580999815 ], [ 123.19304446700016, -4.641371351999851 ], [ 123.19092858200008, -4.653008721999811 ], [ 123.1933699880002, -4.662855726999965 ], [ 123.19922936300009, -4.667413018999923 ], [ 123.2060653000002, -4.670830987999807 ], [ 123.21127363400001, -4.677504164999959 ] ] ], [ [ [ 133.55836022200003, -4.232028903999833 ], [ 133.60857181100016, -4.291761976999851 ], [ 133.62769616000026, -4.300225518999866 ], [ 133.60417728000004, -4.300713799999869 ], [ 133.5791121750002, -4.27849700299987 ], [ 133.5551863940002, -4.251722914999903 ], [ 133.53516686300009, -4.238702080999929 ], [ 133.52271569100014, -4.23992278399993 ], [ 133.49952233200031, -4.245049737999864 ], [ 133.48755944100014, -4.246189059999892 ], [ 133.47038821700028, -4.246026299999812 ], [ 133.46045983200008, -4.244073174999869 ], [ 133.4511824880002, -4.23788827899989 ], [ 133.43588300900012, -4.225192966999828 ], [ 133.4233504570002, -4.217380466999828 ], [ 133.39942467500009, -4.209893487999864 ], [ 133.38819420700008, -4.20468515399989 ], [ 133.37671959700015, -4.193536065999865 ], [ 133.36939537900025, -4.182386976999851 ], [ 133.36019941500001, -4.173923434999892 ], [ 133.3437606130002, -4.170505466999884 ], [ 133.33139082100013, -4.165215752999814 ], [ 133.32374108200031, -4.152927341999884 ], [ 133.32007897200015, -4.137627862999921 ], [ 133.3193465500002, -4.124200127999927 ], [ 133.32422936300009, -4.108330987999977 ], [ 133.3344832690002, -4.10906340899993 ], [ 133.40756269600001, -4.160332940999865 ], [ 133.41260826900032, -4.162286065999865 ], [ 133.41863040500004, -4.163018487999807 ], [ 133.42139733200031, -4.165948174999869 ], [ 133.4267684250002, -4.179864190999808 ], [ 133.42904707100013, -4.184177341999828 ], [ 133.44597415500016, -4.196954033999873 ], [ 133.45606530000009, -4.202406507999797 ], [ 133.46664472700013, -4.20468515399989 ], [ 133.49431399800005, -4.206638278999947 ], [ 133.51970462300005, -4.212172132999854 ], [ 133.54127037900014, -4.220879815999922 ], [ 133.55836022200003, -4.232028903999833 ] ] ], [ [ [ 131.39185631600003, -4.153497002999814 ], [ 131.38542728000016, -4.156182549999926 ], [ 131.35271243600005, -4.133396091999884 ], [ 131.30502363400012, -4.115329684999836 ], [ 131.29656009200005, -4.10906340899993 ], [ 131.28923587300005, -4.100030205999872 ], [ 131.2837020190002, -4.089776299999869 ], [ 131.28052819100014, -4.079522393999866 ], [ 131.28044681100016, -4.074802341999941 ], [ 131.28150475400003, -4.070000908999873 ], [ 131.2841903000002, -4.066094658999873 ], [ 131.28834069100026, -4.063409112999864 ], [ 131.29460696700028, -4.063164971999811 ], [ 131.29851321700016, -4.06585051899981 ], [ 131.30437259200005, -4.074883721999925 ], [ 131.31763756600026, -4.088067315999865 ], [ 131.36597741000026, -4.122165622999887 ], [ 131.38550866000014, -4.14023202899989 ], [ 131.39185631600003, -4.153497002999814 ] ] ], [ [ [ 131.24756920700008, -4.042657158999873 ], [ 131.23959394600024, -4.047051690999865 ], [ 131.2260848320002, -4.038344007999854 ], [ 131.21648196700016, -4.01864999799983 ], [ 131.21078535200013, -3.99578215899993 ], [ 131.20915774800028, -3.978936455999929 ], [ 131.23503665500027, -3.987562757999854 ], [ 131.24048912900003, -3.991794528999833 ], [ 131.24537194100003, -3.996840101999794 ], [ 131.24870853000016, -4.002862237999864 ], [ 131.24984785200013, -4.009698174999926 ], [ 131.2504988940002, -4.032321872999887 ], [ 131.24756920700008, -4.042657158999873 ] ] ], [ [ [ 123.08179772200003, -4.001234632999854 ], [ 123.10230553500014, -4.012465101999965 ], [ 123.11890709700026, -4.009698174999926 ], [ 123.13502037900003, -4.000176690999808 ], [ 123.15845787900014, -3.993096612999921 ], [ 123.18360436300009, -3.990329684999892 ], [ 123.20443769600024, -3.992933851999908 ], [ 123.23414147200015, -4.015313408999816 ], [ 123.25123131600003, -4.050876559999892 ], [ 123.2534285820002, -4.089776299999869 ], [ 123.2387801440002, -4.122165622999887 ], [ 123.1962996750002, -4.187676690999922 ], [ 123.16928144600013, -4.221123955999872 ], [ 123.1362410820002, -4.238702080999929 ], [ 123.08659915500016, -4.234470309999892 ], [ 123.04476972700002, -4.209649346999811 ], [ 123.00912519600024, -4.171970309999836 ], [ 122.97787519600001, -4.128838799999812 ], [ 122.96876061300009, -4.108493747999944 ], [ 122.95972741000003, -4.065118096999868 ], [ 122.9506942070002, -4.047051690999865 ], [ 122.96119225400014, -4.034844658999873 ], [ 122.98658287900014, -4.017754815999865 ], [ 122.99838300900024, -4.006605726999851 ], [ 123.0156356130002, -3.981133721999811 ], [ 123.02816816500012, -3.973809502999814 ], [ 123.0468856130002, -3.978692315999979 ], [ 123.06185957100013, -3.986504815999865 ], [ 123.08179772200003, -4.001234632999854 ] ] ], [ [ [ 131.45329837300028, -4.05575937299983 ], [ 131.44239342500009, -4.065118096999868 ], [ 131.4218856130002, -4.062920830999985 ], [ 131.40064537900014, -4.047051690999865 ], [ 131.39128665500004, -4.031508070999848 ], [ 131.3701278000002, -3.985284112999864 ], [ 131.36597741000026, -3.968438408999873 ], [ 131.36963951900032, -3.96217213299991 ], [ 131.37769616000014, -3.957126559999892 ], [ 131.39437910200002, -3.951592705999872 ], [ 131.41602623800009, -3.958591403999833 ], [ 131.42701256600014, -3.983330987999807 ], [ 131.43433678500014, -4.013604424999812 ], [ 131.4448348320002, -4.036716403999833 ], [ 131.45329837300028, -4.05575937299983 ] ] ], [ [ [ 127.24136752900006, -3.91081651099995 ], [ 127.22697055400022, -3.917062727999905 ], [ 127.20952868300003, -3.914779310999904 ], [ 127.19072684300011, -3.911730995999847 ], [ 127.17255262400033, -3.910109891999809 ], [ 127.16049974600014, -3.899030720999804 ], [ 127.14508612100019, -3.884983417999877 ], [ 127.13604776400007, -3.869858900999873 ], [ 127.13793300500015, -3.846851729999855 ], [ 127.16521243600016, -3.814141533999873 ], [ 127.18189537900025, -3.808526299999869 ], [ 127.19898522200015, -3.810316664999846 ], [ 127.23462975400014, -3.821058851999851 ], [ 127.24611869600005, -3.836224612999843 ], [ 127.25320002800004, -3.849206734999825 ], [ 127.25602091500002, -3.874534031999872 ], [ 127.24952506000011, -3.890279744999873 ], [ 127.24263984400011, -3.900407626999879 ], [ 127.24136752900006, -3.91081651099995 ] ] ], [ [ [ 128.79712975400014, -3.693780205999815 ], [ 128.77930748800009, -3.702243747999944 ], [ 128.7617293630002, -3.699639580999872 ], [ 128.7485457690002, -3.683851820999905 ], [ 128.74634850400003, -3.65976327899989 ], [ 128.75798587300005, -3.643649997999887 ], [ 128.7768660820002, -3.637302342 ], [ 128.79623457100001, -3.642836195999792 ], [ 128.79712975400014, -3.652520440999979 ], [ 128.79965254000012, -3.661390882999797 ], [ 128.80420983200031, -3.66936614399998 ], [ 128.8105574880002, -3.676446221999811 ], [ 128.79712975400014, -3.693780205999815 ] ] ], [ [ [ 123.17709394600013, -3.601006768999866 ], [ 123.15992272200015, -3.603773695999962 ], [ 123.13941491000003, -3.60271575299987 ], [ 123.1294051440002, -3.61834075299987 ], [ 123.11988366000003, -3.629164320999848 ], [ 123.09880618600027, -3.619235934999892 ], [ 123.07837975400003, -3.602634372999887 ], [ 123.06666100400025, -3.589613540000016 ], [ 123.06169681100016, -3.580254815999865 ], [ 123.06104576900032, -3.570896091999941 ], [ 123.07081139400009, -3.566582940999865 ], [ 123.08277428500003, -3.564222914999903 ], [ 123.1406356130002, -3.539157809999892 ], [ 123.1572371750002, -3.544854424999869 ], [ 123.16976972700013, -3.558282158999987 ], [ 123.1772567070002, -3.573988539999846 ], [ 123.17709394600013, -3.601006768999866 ] ] ], [ [ [ 128.43165123800009, -3.627048434999836 ], [ 128.39291425900012, -3.642836195999792 ], [ 128.38754316500024, -3.626885674999869 ], [ 128.39291425900012, -3.606622002999984 ], [ 128.40137780000009, -3.586358330999872 ], [ 128.40601647200026, -3.570245049999926 ], [ 128.40691165500016, -3.556817315999808 ], [ 128.4101668630002, -3.543226820999848 ], [ 128.41651451900009, -3.531345309999892 ], [ 128.42709394600001, -3.52271900799991 ], [ 128.4614363940002, -3.512139580999872 ], [ 128.47730553500003, -3.519789320999905 ], [ 128.51270592500009, -3.526055596999811 ], [ 128.52881920700008, -3.532972914999903 ], [ 128.54281660200013, -3.547458591999884 ], [ 128.55884850400003, -3.570489190999922 ], [ 128.56381269600013, -3.591892185 ], [ 128.5459090500002, -3.601332289999903 ], [ 128.52898196700005, -3.604424737999807 ], [ 128.49057050900012, -3.618584893999923 ], [ 128.44906660200013, -3.623142184999949 ], [ 128.43165123800009, -3.627048434999836 ] ] ], [ [ [ 122.30567467500032, -3.570733330999872 ], [ 122.29330488400012, -3.580824476999851 ], [ 122.2846785820002, -3.562920830999872 ], [ 122.29037519600013, -3.541192315999808 ], [ 122.30486087300005, -3.522067966999941 ], [ 122.32129967500032, -3.511895440999808 ], [ 122.3330184250002, -3.516696872999887 ], [ 122.34400475400014, -3.528985283999873 ], [ 122.35222415500016, -3.543877862999807 ], [ 122.3554793630002, -3.556573174999983 ], [ 122.34652754000012, -3.557305596999811 ], [ 122.32667076900009, -3.562269789999846 ], [ 122.30567467500032, -3.570733330999872 ] ] ], [ [ [ 128.32341556100027, -3.570245049999926 ], [ 128.32886803500014, -3.591729424999812 ], [ 128.33716881600014, -3.611586195999848 ], [ 128.3349715500002, -3.627211195999848 ], [ 128.30974368600027, -3.635430596999925 ], [ 128.30307050900001, -3.63396575299987 ], [ 128.28305097700013, -3.621758721999981 ], [ 128.26921634200005, -3.615817966999884 ], [ 128.26303144600013, -3.615004164999846 ], [ 128.25196373800031, -3.614922783999873 ], [ 128.24659264400009, -3.62037525799991 ], [ 128.25123131600003, -3.632582289999903 ], [ 128.27588951900009, -3.666192315999922 ], [ 128.27816816500012, -3.674411716999884 ], [ 128.27491295700031, -3.681084893999866 ], [ 128.25489342500009, -3.709567966999884 ], [ 128.23650149800005, -3.722263278999833 ], [ 128.21265709700003, -3.729261976999794 ], [ 128.1831160820002, -3.73162200299987 ], [ 128.16146894600001, -3.739027601999851 ], [ 128.14673912900014, -3.755059502999814 ], [ 128.12867272200026, -3.769626559999949 ], [ 128.09742272200003, -3.773207289999903 ], [ 128.1040145190002, -3.763767184999892 ], [ 128.12712649800017, -3.749444268999923 ], [ 128.13209069100014, -3.742282809999892 ], [ 128.15202884200016, -3.703057549999983 ], [ 128.20435631600014, -3.668145440999922 ], [ 128.22095787900014, -3.649102471999868 ], [ 128.20289147200003, -3.639336846999811 ], [ 128.18376712300017, -3.646905205999872 ], [ 128.14519290500004, -3.676446221999811 ], [ 128.10670006600014, -3.692071221999811 ], [ 128.08073978000027, -3.70818450299987 ], [ 128.05551191500001, -3.713311455999872 ], [ 128.04273522200015, -3.71803150799991 ], [ 128.02173912900003, -3.736423434999949 ], [ 128.00570722700013, -3.756768487999864 ], [ 127.98601321700016, -3.771579685 ], [ 127.95411217500009, -3.773207289999903 ], [ 127.93344160200024, -3.763441664999903 ], [ 127.92676842500009, -3.746840101999851 ], [ 127.92335045700008, -3.726006768999866 ], [ 127.91236412900003, -3.703057549999983 ], [ 127.91635175900001, -3.693942966999884 ], [ 127.96094811300009, -3.640313408999987 ], [ 127.98414147200003, -3.62053801899998 ], [ 128.03451582100013, -3.589043877999927 ], [ 128.04769941500001, -3.584730726999851 ], [ 128.0625106130002, -3.58359140399989 ], [ 128.14730879000012, -3.588474217 ], [ 128.1587020190002, -3.584649346999868 ], [ 128.2417098320002, -3.522149346999925 ], [ 128.2871199880002, -3.504571221999925 ], [ 128.33082116000003, -3.511895440999808 ], [ 128.34937584700003, -3.529473565999865 ], [ 128.34457441500001, -3.54208749799983 ], [ 128.3310653000002, -3.554131768999923 ], [ 128.32341556100027, -3.570245049999926 ] ] ], [ [ [ 128.66065514400009, -3.533379815999865 ], [ 128.6728621750002, -3.539808851999965 ], [ 128.68246504000001, -3.51702239399981 ], [ 128.69320722700013, -3.502048434999892 ], [ 128.70573978000004, -3.502536716999884 ], [ 128.72055097700013, -3.525567315999865 ], [ 128.72641035200013, -3.545993747999887 ], [ 128.7280379570002, -3.614922783999873 ], [ 128.70655358200031, -3.602959893999923 ], [ 128.6870223320002, -3.582207940999865 ], [ 128.66879316500012, -3.569268487999921 ], [ 128.65235436300009, -3.580824476999851 ], [ 128.65162194100026, -3.591485283999987 ], [ 128.65544681100016, -3.602146091999941 ], [ 128.65601647200003, -3.61239999799983 ], [ 128.64551842500009, -3.621758721999981 ], [ 128.63624108200031, -3.622816664999846 ], [ 128.62745201900032, -3.617608330999872 ], [ 128.61898847700002, -3.607517184999949 ], [ 128.61060631600014, -3.593926690999808 ], [ 128.6181746750002, -3.593926690999808 ], [ 128.60352623800009, -3.583428643999866 ], [ 128.59376061300031, -3.568617445999905 ], [ 128.58570397200003, -3.552992445999905 ], [ 128.56788170700031, -3.528008721999868 ], [ 128.5590926440002, -3.509372654 ], [ 128.5610457690002, -3.493747654 ], [ 128.58399498800009, -3.49146900799991 ], [ 128.59782962300017, -3.491794528999947 ], [ 128.60629316500012, -3.496677341999828 ], [ 128.62159264400009, -3.515720309999892 ], [ 128.63168379000024, -3.522556247999944 ], [ 128.66065514400009, -3.533379815999865 ] ] ], [ [ [ 132.6811629570002, -3.42343515399989 ], [ 132.70281009200028, -3.453301690999865 ], [ 132.71045983200031, -3.469496351999851 ], [ 132.71469160200013, -3.486993096999868 ], [ 132.71290123800009, -3.504164320999905 ], [ 132.70289147200026, -3.519301039999903 ], [ 132.68995201900009, -3.509535414999846 ], [ 132.67888431100005, -3.495863539999903 ], [ 132.67115319100003, -3.479424737999807 ], [ 132.66635175900024, -3.453383070999848 ], [ 132.6611434250002, -3.450616143999866 ], [ 132.64429772200015, -3.451104424999869 ], [ 132.63746178500003, -3.447523695999905 ], [ 132.62029056100027, -3.423760674999926 ], [ 132.62680097700013, -3.418389580999872 ], [ 132.64356530000032, -3.408623955999929 ], [ 132.65162194100014, -3.406019789999903 ], [ 132.6665145190002, -3.410251559999949 ], [ 132.6811629570002, -3.42343515399989 ] ] ], [ [ [ 122.44922936300031, -3.479750257999854 ], [ 122.43360436300031, -3.485284112999864 ], [ 122.42579186300009, -3.477308851999794 ], [ 122.41553795700031, -3.459649346999811 ], [ 122.40259850400003, -3.430596612999807 ], [ 122.40211022200003, -3.420505466999884 ], [ 122.40349368600016, -3.407972914999959 ], [ 122.40650475400003, -3.396172783999987 ], [ 122.41228274800017, -3.38779062299983 ], [ 122.41537519600024, -3.385430596999868 ], [ 122.41781660200002, -3.384535414999903 ], [ 122.42042076900009, -3.385186455999815 ], [ 122.42359459700015, -3.387465101999794 ], [ 122.42847741000003, -3.394301040000016 ], [ 122.43490644600013, -3.411390882999967 ], [ 122.43962649800005, -3.419040622999887 ], [ 122.46127363400024, -3.436130466999828 ], [ 122.46469160200024, -3.440850518999923 ], [ 122.4633895190002, -3.452243747999887 ], [ 122.45866946700005, -3.466973565999808 ], [ 122.44922936300031, -3.479750257999854 ] ] ], [ [ [ 116.3930770190002, -3.63241952899989 ], [ 116.38599694100003, -3.639580987999864 ], [ 116.3701278000002, -3.621351820999792 ], [ 116.33220462300005, -3.56170012799987 ], [ 116.32536868600016, -3.547621351999851 ], [ 116.32471764400009, -3.532972914999903 ], [ 116.3310653000002, -3.511895440999808 ], [ 116.35564212300005, -3.459730726999794 ], [ 116.3588973320002, -3.440850518999923 ], [ 116.36524498800031, -3.429131768999866 ], [ 116.3930770190002, -3.405857028999833 ], [ 116.39926191500012, -3.392754815999979 ], [ 116.40447024800005, -3.37460702899989 ], [ 116.41586347700013, -3.381768487999807 ], [ 116.43441816500001, -3.409763278999947 ], [ 116.43140709700015, -3.447523695999905 ], [ 116.41146894600001, -3.520928643999923 ], [ 116.40455162900014, -3.576836846999868 ], [ 116.39527428500014, -3.613457940999808 ], [ 116.3930770190002, -3.63241952899989 ] ] ], [ [ [ 127.53223717500009, -3.254489841999884 ], [ 127.53443444100003, -3.255791924999869 ], [ 127.5639754570002, -3.255791924999869 ], [ 127.5830184250002, -3.267998955999872 ], [ 127.61548912900014, -3.307386976999851 ], [ 127.62867272200015, -3.32187265399989 ], [ 127.6416121750002, -3.340264580999815 ], [ 127.64356530000032, -3.356052341999884 ], [ 127.62452233200031, -3.361748955999929 ], [ 127.6030379570002, -3.356866143999866 ], [ 127.56544030000032, -3.338474216999828 ], [ 127.51970462300028, -3.330254815999865 ], [ 127.50359134200005, -3.320082289999903 ], [ 127.49057050900024, -3.306817315999865 ], [ 127.48047936300009, -3.293389580999872 ], [ 127.48511803500003, -3.292087497999887 ], [ 127.50961347700013, -3.27654387799987 ], [ 127.5127059250002, -3.273614190999865 ], [ 127.52182050900001, -3.261814059999892 ], [ 127.52475019600013, -3.256117445999905 ], [ 127.5263778000002, -3.254327080999815 ], [ 127.52963300900001, -3.253350518999866 ], [ 127.53223717500009, -3.254489841999884 ] ] ], [ [ [ 116.12468509200016, -4.03036874799983 ], [ 116.11557050900001, -4.036716403999833 ], [ 116.09978274800017, -4.060642184999892 ], [ 116.09148196700005, -4.066827080999872 ], [ 116.0903426440002, -4.050551039999846 ], [ 116.08285566500024, -4.037774346999811 ], [ 116.07105553500014, -4.032891533999816 ], [ 116.05738366000014, -4.040704033999816 ], [ 116.05014082100013, -4.020196221999868 ], [ 116.05347741000014, -3.997816664999846 ], [ 116.06031334700026, -3.975355726999851 ], [ 116.06421959700015, -3.954522393999866 ], [ 116.0683699880002, -3.951104424999869 ], [ 116.07781009200005, -3.948337498 ], [ 116.08716881600014, -3.943536065999922 ], [ 116.09148196700005, -3.934340101999851 ], [ 116.08871504000001, -3.924737237999864 ], [ 116.07601972700013, -3.909844658999816 ], [ 116.07154381600014, -3.903008721999868 ], [ 116.06885826900009, -3.885511976999851 ], [ 116.07781009200005, -3.824476820999848 ], [ 116.07447350400003, -3.800876559999949 ], [ 116.06609134200016, -3.787041924999812 ], [ 116.04371178500003, -3.765801690999922 ], [ 116.02564537900003, -3.740166924999869 ], [ 116.01905358200031, -3.724867445999848 ], [ 116.01303144600013, -3.650485934999836 ], [ 116.01636803500014, -3.629164320999848 ], [ 116.0405379570002, -3.566338799999812 ], [ 116.0463973320002, -3.497491143999866 ], [ 116.05250084700026, -3.478692315999865 ], [ 116.09669030000009, -3.399672132999854 ], [ 116.11793053500026, -3.336114190999865 ], [ 116.11939537900014, -3.324151299999869 ], [ 116.12623131600003, -3.318617445999905 ], [ 116.15919030000009, -3.303643487999807 ], [ 116.17066491000003, -3.296807549999983 ], [ 116.22917728000027, -3.245538018999923 ], [ 116.24594160200002, -3.238213799999869 ], [ 116.25473066500001, -3.232598565999865 ], [ 116.26140384200016, -3.222588799999869 ], [ 116.26783287900014, -3.218845309999836 ], [ 116.27637780000009, -3.232028903999947 ], [ 116.27857506600026, -3.244724216999941 ], [ 116.27613366000003, -3.256280205999872 ], [ 116.27214603000016, -3.267754815999808 ], [ 116.25896243600016, -3.36663176899981 ], [ 116.26303144600024, -3.405531507999854 ], [ 116.28939863400012, -3.444268487999864 ], [ 116.3046981130002, -3.460137627999984 ], [ 116.3188582690002, -3.480401299999869 ], [ 116.32105553500014, -3.497735283999873 ], [ 116.27637780000009, -3.513604424999812 ], [ 116.27409915500016, -3.532891533999873 ], [ 116.28199303500014, -3.553643487999921 ], [ 116.28939863400012, -3.566582940999865 ], [ 116.29704837300028, -3.584730726999851 ], [ 116.29883873800009, -3.602146091999941 ], [ 116.29688561300031, -3.646091403999833 ], [ 116.30258222700002, -3.669854424999926 ], [ 116.3037215500002, -3.680108330999872 ], [ 116.3037215500002, -3.71803150799991 ], [ 116.30974368600005, -3.724541924999869 ], [ 116.32496178500003, -3.73202890399989 ], [ 116.3310653000002, -3.739027601999851 ], [ 116.33326256600014, -3.749769789999959 ], [ 116.32105553500014, -3.756931247999887 ], [ 116.3115340500002, -3.785739841999828 ], [ 116.29932701900009, -3.799086195999962 ], [ 116.28923587300028, -3.815606377999927 ], [ 116.28939863400012, -3.840915622999887 ], [ 116.2949324880002, -3.854587497999887 ], [ 116.30795332100013, -3.878594658999873 ], [ 116.3105574880002, -3.893324476999851 ], [ 116.30648847700002, -3.904473565999865 ], [ 116.29688561300031, -3.907972914999846 ], [ 116.28549238400001, -3.908298434999892 ], [ 116.27637780000009, -3.909844658999816 ], [ 116.26758873800031, -3.917901299999869 ], [ 116.2627059250002, -3.927015882999854 ], [ 116.25709069100014, -3.934665622999887 ], [ 116.24594160200002, -3.937758070999848 ], [ 116.23121178500003, -3.938083591999884 ], [ 116.22185306100027, -3.939629815999808 ], [ 116.21509850400014, -3.943780205999872 ], [ 116.20818118600016, -3.951348565999808 ], [ 116.20655358200031, -3.956719658999873 ], [ 116.20753014400009, -3.969496351999794 ], [ 116.20476321700005, -3.975274346999868 ], [ 116.19898522200026, -3.979261976999965 ], [ 116.18384850400014, -3.987074476999851 ], [ 116.18091881600026, -3.989353122999887 ], [ 116.1777449880002, -3.995293877999927 ], [ 116.17025800900012, -4.004001559999892 ], [ 116.15357506600014, -4.019707940999865 ], [ 116.14454186300009, -4.024102471999868 ], [ 116.12468509200016, -4.03036874799983 ] ] ], [ [ [ 127.77849368600005, -3.244235934999836 ], [ 127.76644941500012, -3.246270440999979 ], [ 127.74187259200016, -3.24570077899989 ], [ 127.67920983200008, -3.251641533999816 ], [ 127.65853925900012, -3.24570077899989 ], [ 127.64332116000014, -3.224379164999846 ], [ 127.65967858200031, -3.201429945999848 ], [ 127.68734785200013, -3.178317966999884 ], [ 127.70630944100003, -3.156345309999892 ], [ 127.74187259200016, -3.156345309999892 ], [ 127.7534285820002, -3.150567315999808 ], [ 127.75814863400012, -3.149509372999944 ], [ 127.76140384200016, -3.151543877999814 ], [ 127.76335696700005, -3.155938408999873 ], [ 127.76628665500016, -3.160414320999848 ], [ 127.77222741000014, -3.162530205999872 ], [ 127.78443444100003, -3.168715101999851 ], [ 127.78825931100005, -3.18328215899993 ], [ 127.78980553500014, -3.199639580999985 ], [ 127.79639733200008, -3.211521091999941 ], [ 127.7856551440002, -3.234307549999869 ], [ 127.77849368600005, -3.244235934999836 ] ] ], [ [ [ 100.53638756600014, -3.17685312299983 ], [ 100.5288192070002, -3.183526299999812 ], [ 100.50668379000018, -3.178399346999868 ], [ 100.49366295700014, -3.160251559999892 ], [ 100.49301191500024, -3.13827890399989 ], [ 100.5084741550001, -3.122165622999887 ], [ 100.5083113940002, -3.140801690999865 ], [ 100.51547285200019, -3.153903903999833 ], [ 100.53638756600014, -3.17685312299983 ] ] ], [ [ [ 126.87525475400025, -3.109470309999836 ], [ 126.89340254000012, -3.125583591999884 ], [ 126.91871178500014, -3.114678643999923 ], [ 126.9340926440002, -3.130547783999873 ], [ 126.95573978000004, -3.137790622999887 ], [ 126.97917728000027, -3.142266533999873 ], [ 127.00066165500016, -3.149509372999944 ], [ 127.03500410200013, -3.173516533999816 ], [ 127.05494225400014, -3.179457289999959 ], [ 127.08423912900025, -3.194268487999921 ], [ 127.09351647200003, -3.200778904 ], [ 127.10230553500003, -3.210381768999866 ], [ 127.1069442070002, -3.218845309999836 ], [ 127.10914147200015, -3.229424737999977 ], [ 127.1123153000002, -3.264418226999794 ], [ 127.11182701900009, -3.272067966999884 ], [ 127.10645592500032, -3.27304452899989 ], [ 127.09351647200003, -3.272393487999864 ], [ 127.08301842500009, -3.268161716999884 ], [ 127.0698348320002, -3.26091887799987 ], [ 127.05591881600003, -3.259535414999903 ], [ 127.04224694100014, -3.272393487999864 ], [ 127.04078209700003, -3.28671640399989 ], [ 127.04615319100003, -3.305352471999811 ], [ 127.05453535200024, -3.323011976999851 ], [ 127.06275475400014, -3.334405205999872 ], [ 127.06950931100027, -3.336683851999851 ], [ 127.08008873800031, -3.34880950299987 ], [ 127.0947371750002, -3.362074476999794 ], [ 127.11394290500016, -3.368584893999866 ], [ 127.12476647200015, -3.363213799999812 ], [ 127.13786868600027, -3.339776299999869 ], [ 127.14828535200013, -3.334405205999872 ], [ 127.15894616000003, -3.337172132999854 ], [ 127.19312584700026, -3.355564059999892 ], [ 127.23853600400025, -3.363213799999812 ], [ 127.25977623800009, -3.371189059999892 ], [ 127.26880944100014, -3.38591887799987 ], [ 127.2646590500002, -3.404717705999815 ], [ 127.24634850400025, -3.449965101999851 ], [ 127.24089603000004, -3.470961195999905 ], [ 127.24341881600014, -3.606052341999828 ], [ 127.22722415500016, -3.642836195999792 ], [ 127.20573978000016, -3.65960051899981 ], [ 127.18580162900014, -3.659926039999846 ], [ 127.16521243600016, -3.653415622999944 ], [ 127.14144941500012, -3.649102471999868 ], [ 127.12159264400032, -3.653252862999807 ], [ 127.0019637380002, -3.713799737999864 ], [ 126.9907332690002, -3.71803150799991 ], [ 126.98072350400014, -3.724541924999869 ], [ 126.95679772200026, -3.755629164999903 ], [ 126.94605553500014, -3.765801690999922 ], [ 126.90699955900004, -3.787341139999796 ], [ 126.8269292880002, -3.810093289999941 ], [ 126.77708639000014, -3.832694756999899 ], [ 126.74218531500014, -3.859378355999809 ], [ 126.71889610400012, -3.854854321999881 ], [ 126.69657344000018, -3.863792105999949 ], [ 126.67427504300019, -3.842502851999825 ], [ 126.65629280300004, -3.834851643999855 ], [ 126.58932542100001, -3.816639322999833 ], [ 126.55852750400015, -3.793291256999794 ], [ 126.52505747300029, -3.789916427999799 ], [ 126.43887944400012, -3.750449915999923 ], [ 126.38062584700003, -3.703057549999983 ], [ 126.36443118600016, -3.697198174999812 ], [ 126.32466369400004, -3.687644316999808 ], [ 126.274895582, -3.663260553999862 ], [ 126.25879663700016, -3.642255465999881 ], [ 126.24391844900015, -3.631398868999952 ], [ 126.20302084400009, -3.630993787999898 ], [ 126.17356062000033, -3.602527212999917 ], [ 126.16529381600014, -3.567966403999833 ], [ 126.14855361100001, -3.52550066099991 ], [ 126.08812775800016, -3.48362328599984 ], [ 126.06850725100014, -3.467379435999817 ], [ 126.05262796, -3.446320133999905 ], [ 126.04175866000003, -3.420098565999865 ], [ 126.04118899800017, -3.412855726999851 ], [ 126.00722645200028, -3.361011827999903 ], [ 125.99174240300033, -3.248191339999835 ], [ 126.01726321700016, -3.171156507999854 ], [ 126.03656216900004, -3.153592708999952 ], [ 126.06460853800024, -3.132931362999898 ], [ 126.09092117500029, -3.112098279999941 ], [ 126.1108672270002, -3.121706119999885 ], [ 126.121615228, -3.147897929999942 ], [ 126.13631850200011, -3.16062363199984 ], [ 126.16134390700029, -3.17231678499985 ], [ 126.18508540000016, -3.180893844999844 ], [ 126.20200119800018, -3.181841811999902 ], [ 126.22774030100027, -3.174758609999856 ], [ 126.22657311300009, -3.149509372999944 ], [ 126.2583113940002, -3.122002862999864 ], [ 126.29712975400014, -3.105889580999872 ], [ 126.42139733200008, -3.070489190999865 ], [ 126.7202254570002, -3.060153903999833 ], [ 126.84001712300017, -3.07366301899981 ], [ 126.85889733200031, -3.085870049999812 ], [ 126.87525475400025, -3.109470309999836 ] ] ], [ [ [ 127.98357181100005, -2.94882577899989 ], [ 127.96908613400001, -2.972263279 ], [ 127.96404056100016, -2.97763437299983 ], [ 127.96094811300009, -2.983493747999887 ], [ 127.95093834700003, -3.01091887799987 ], [ 127.9472762380002, -3.018487237999807 ], [ 127.93425540500027, -3.025567315999865 ], [ 127.9184676440002, -3.029229424999812 ], [ 127.83838951900032, -3.033298434999892 ], [ 127.82699629000001, -3.028985283999873 ], [ 127.82545006600014, -3.016534112999921 ], [ 127.83716881600003, -3.001885674999926 ], [ 127.85401451900032, -2.989434502999814 ], [ 127.86801191500001, -2.984307549999926 ], [ 127.87525475400003, -2.983005466999884 ], [ 127.87964928500014, -2.979424737999864 ], [ 127.88892662900014, -2.967217705999872 ], [ 127.8964949880002, -2.961846612999807 ], [ 127.90235436300031, -2.962497653999833 ], [ 127.90739993600016, -2.964532158999873 ], [ 127.91236412900003, -2.963799737999864 ], [ 127.92530358200031, -2.955173434999949 ], [ 127.93287194100026, -2.945977471999868 ], [ 127.93376712300017, -2.934014580999872 ], [ 127.92603600400014, -2.916680596999868 ], [ 127.95411217500009, -2.916680596999868 ], [ 127.96998131600014, -2.920179945999962 ], [ 127.98536217500032, -2.929457289999903 ], [ 127.99439537900014, -2.939060153999947 ], [ 127.99154707100001, -2.943454684999836 ], [ 127.98357181100005, -2.94882577899989 ] ] ], [ [ [ 106.8658960300001, -3.026543877999814 ], [ 106.86117597700013, -3.028985283999873 ], [ 106.81576582100024, -3.018487237999807 ], [ 106.7985945970002, -3.011000257999854 ], [ 106.75806725400025, -2.978204033999816 ], [ 106.72266686300014, -2.966078382999854 ], [ 106.7255965500002, -2.956231377999814 ], [ 106.73406009200022, -2.946547132999854 ], [ 106.73829186300014, -2.943454684999836 ], [ 106.74561608200014, -2.92693450299987 ], [ 106.74952233200008, -2.923109632999967 ], [ 106.7722274100002, -2.90732187299983 ], [ 106.79232832100024, -2.896416924999869 ], [ 106.8125106130002, -2.892185153999833 ], [ 106.82642662899997, -2.903008721999925 ], [ 106.84351647200009, -2.911879164999846 ], [ 106.88990319100009, -2.919854424999926 ], [ 106.90894616, -2.929782809999892 ], [ 106.91570071700011, -2.950941664999903 ], [ 106.89079837300005, -2.994886976999851 ], [ 106.89527428500003, -3.018487237999807 ], [ 106.8658960300001, -3.026543877999814 ] ] ], [ [ [ 107.09075137900015, -2.9029998339999 ], [ 107.0837508470002, -2.909844658999816 ], [ 107.06999759200011, -2.907484632999797 ], [ 107.0595809250002, -2.901462497999887 ], [ 107.04437189200024, -2.896928103999869 ], [ 107.03369812700021, -2.8885747839999 ], [ 107.01707568300014, -2.880205997999894 ], [ 107.03260859400024, -2.85887015599991 ], [ 107.04574629000012, -2.840752862999807 ], [ 107.05941816500024, -2.831963799999869 ], [ 107.06104576900009, -2.82724374799983 ], [ 107.06462649800011, -2.822523695999962 ], [ 107.07349694099997, -2.820489190999922 ], [ 107.07789147200009, -2.823337497999944 ], [ 107.08621031600023, -2.840005214999792 ], [ 107.09923179600008, -2.859058011999878 ], [ 107.09676088100019, -2.885194687999899 ], [ 107.09075137900015, -2.9029998339999 ] ] ], [ [ [ 107.49488366, -2.876397393999866 ], [ 107.4809676440002, -2.898695570999905 ], [ 107.46290123800014, -2.915948174999812 ], [ 107.42798912900014, -2.925713799999869 ], [ 107.41014730800015, -2.947565211999859 ], [ 107.39845358700012, -2.938427947999855 ], [ 107.36924703000017, -2.905168980999861 ], [ 107.34129222600018, -2.88685845099991 ], [ 107.34848817300025, -2.875167492999879 ], [ 107.36605373000009, -2.882383951999941 ], [ 107.38105223200012, -2.875274658999956 ], [ 107.39503014400009, -2.868910414999903 ], [ 107.40023847700019, -2.850762627999814 ], [ 107.42579186300009, -2.835219007999797 ], [ 107.45818118600005, -2.824476820999962 ], [ 107.48438561300009, -2.820489190999922 ], [ 107.49519204699999, -2.823489319999908 ], [ 107.49383832500007, -2.837821595999856 ], [ 107.49773196699999, -2.84514739399981 ], [ 107.50473066500018, -2.854668877999927 ], [ 107.49488366, -2.876397393999866 ] ] ], [ [ [ 129.5410262380002, -2.780043226999851 ], [ 129.54371178500003, -2.789727471999925 ], [ 129.54525800900012, -2.793552341999828 ], [ 129.54957116000014, -2.796644789999903 ], [ 129.55494225400014, -2.799004815999865 ], [ 129.61182701900032, -2.806817315999979 ], [ 129.75375410200013, -2.866469007999854 ], [ 129.7661238940002, -2.868910414999903 ], [ 129.77808678500014, -2.875420830999815 ], [ 129.79802493600005, -2.906426690999808 ], [ 129.8105574880002, -2.916680596999868 ], [ 129.82545006600014, -2.917657158999816 ], [ 129.83814537900014, -2.912692966999884 ], [ 129.84986412900014, -2.906182549999983 ], [ 129.86207116000003, -2.903008721999925 ], [ 129.86833743600016, -2.906996351999794 ], [ 129.86988366000003, -2.916273695999848 ], [ 129.87330162900003, -2.927504164999846 ], [ 129.88559004000001, -2.936618747999944 ], [ 129.89503014400009, -2.925388278999833 ], [ 129.91163170700008, -2.933200778999833 ], [ 129.92758222700024, -2.946954033999873 ], [ 129.94385826900009, -2.964532158999873 ], [ 129.9648543630002, -2.973565362999864 ], [ 130.04664147200015, -2.992120049999869 ], [ 130.21265709700026, -2.990411065999865 ], [ 130.30152428500003, -2.977227471999868 ], [ 130.34498131600014, -2.97763437299983 ], [ 130.38933353000027, -2.993829033999873 ], [ 130.48894290500004, -3.087497653999833 ], [ 130.5029403000002, -3.094496351999794 ], [ 130.57846113400012, -3.122816664999846 ], [ 130.58790123800031, -3.129489841999884 ], [ 130.59197024800017, -3.138848565999865 ], [ 130.59937584700015, -3.173028252999814 ], [ 130.60222415500004, -3.180108330999872 ], [ 130.62224368600016, -3.212579033999873 ], [ 130.63103274800017, -3.252699476999794 ], [ 130.6328231130002, -3.337823174999869 ], [ 130.63721764400032, -3.353610934999836 ], [ 130.65593509200016, -3.380954685 ], [ 130.66032962300017, -3.392754815999979 ], [ 130.66667728000004, -3.403578382999854 ], [ 130.6826278000002, -3.406426690999922 ], [ 130.72234134200016, -3.403252862999864 ], [ 130.76148522200015, -3.405857028999833 ], [ 130.79297936300009, -3.416436455999872 ], [ 130.81657962300005, -3.434258721999868 ], [ 130.83155358200008, -3.457940362999807 ], [ 130.81088300900024, -3.464939059999892 ], [ 130.81080162900025, -3.484551690999865 ], [ 130.81934655000009, -3.505140882999854 ], [ 130.83139082100001, -3.52646249799983 ], [ 130.86280358200031, -3.557305596999811 ], [ 130.87322024800005, -3.573988539999846 ], [ 130.87574303500003, -3.585625908999873 ], [ 130.87623131600014, -3.59531015399989 ], [ 130.87322024800005, -3.614922783999873 ], [ 130.8686629570002, -3.625746351999851 ], [ 130.85482832100001, -3.646416924999869 ], [ 130.85206139400032, -3.652927341999941 ], [ 130.84888756600026, -3.662692966999884 ], [ 130.83472741000003, -3.682305596999868 ], [ 130.83155358200008, -3.694105726999851 ], [ 130.82471764400032, -3.824476820999848 ], [ 130.8310653000002, -3.837497653999833 ], [ 130.84148196700016, -3.852797132999797 ], [ 130.84156334700015, -3.865004164999959 ], [ 130.8178817070002, -3.868829033999816 ], [ 130.79957116000014, -3.861748955999872 ], [ 130.76734459700003, -3.834079684999949 ], [ 130.75277754000012, -3.827894789999903 ], [ 130.73121178500026, -3.825941664999903 ], [ 130.63160241000003, -3.788669528999833 ], [ 130.61646569100003, -3.786309502999814 ], [ 130.6069442070002, -3.778497002999814 ], [ 130.56470787900014, -3.73162200299987 ], [ 130.5512801440002, -3.720961195999848 ], [ 130.5351668630002, -3.711846612999864 ], [ 130.51579837300005, -3.705498955999815 ], [ 130.49268639400009, -3.703057549999983 ], [ 130.47779381600003, -3.697360934999892 ], [ 130.46558678500014, -3.683851820999905 ], [ 130.44800866000003, -3.656508070999848 ], [ 130.43531334700015, -3.645440362999807 ], [ 130.41879316500012, -3.636895440999979 ], [ 130.3989363940002, -3.631280205999872 ], [ 130.3759871750002, -3.629164320999848 ], [ 130.3564559250002, -3.624688408999816 ], [ 130.31080162900014, -3.593926690999808 ], [ 130.1264754570002, -3.532972914999903 ], [ 130.10661868600005, -3.514825127999814 ], [ 130.10189863400012, -3.511895440999808 ], [ 130.08806399800017, -3.509698174999812 ], [ 130.03711998800031, -3.49146900799991 ], [ 130.00171959700003, -3.473077080999872 ], [ 129.98316491000003, -3.459730726999794 ], [ 129.9751082690002, -3.447686455999872 ], [ 129.97291100400025, -3.441501559999892 ], [ 129.96363366000014, -3.428317966999828 ], [ 129.96127363400012, -3.420098565999865 ], [ 129.96225019600013, -3.390801690999922 ], [ 129.96127363400012, -3.38225676899981 ], [ 129.93384850400003, -3.348321221999868 ], [ 129.89047285200013, -3.333103122999887 ], [ 129.5449324880002, -3.297784112999864 ], [ 129.50961347700013, -3.302504164999846 ], [ 129.5019637380002, -3.334405205999872 ], [ 129.55144290500004, -3.403252862999864 ], [ 129.56324303500014, -3.439629815999922 ], [ 129.53003991000014, -3.464776299999812 ], [ 129.48560631600014, -3.463474216999884 ], [ 129.40154056100016, -3.422946872999887 ], [ 129.35808353000016, -3.410088799999983 ], [ 129.23617597700024, -3.401625257999854 ], [ 129.19361412900003, -3.389743747999887 ], [ 129.11353600400014, -3.34880950299987 ], [ 129.08432050900001, -3.341241143999923 ], [ 129.05844160200002, -3.340752862999921 ], [ 128.98422285200002, -3.347426039999846 ], [ 128.96078535200002, -3.355564059999892 ], [ 128.93962649800017, -3.332614841999884 ], [ 128.93767337300005, -3.320407809999892 ], [ 128.94703209700015, -3.300225518999866 ], [ 128.9819442070002, -3.251885674999869 ], [ 128.96892337300005, -3.233005466999828 ], [ 128.95289147200003, -3.220391533999873 ], [ 128.93336022200015, -3.213555596999925 ], [ 128.90951582100024, -3.211521091999941 ], [ 128.88965905000009, -3.204359632999854 ], [ 128.8774520190002, -3.202569268999866 ], [ 128.8720809250002, -3.207777601999794 ], [ 128.8691512380002, -3.213636976999908 ], [ 128.85092207100013, -3.238213799999869 ], [ 128.79216556100016, -3.260430596999925 ], [ 128.78272545700031, -3.269219658999873 ], [ 128.7768660820002, -3.279392184999892 ], [ 128.69255618600016, -3.348728122999887 ], [ 128.68637129000001, -3.35857512799987 ], [ 128.68433678500014, -3.363864841999884 ], [ 128.67953535200013, -3.368747653999833 ], [ 128.67497806100005, -3.375420830999872 ], [ 128.6728621750002, -3.38591887799987 ], [ 128.67603600400014, -3.394789321000019 ], [ 128.68327884200005, -3.401055596999868 ], [ 128.6904403000002, -3.405694268999866 ], [ 128.69385826900009, -3.410088799999983 ], [ 128.67758222700013, -3.432305596999811 ], [ 128.63591556100016, -3.43661874799983 ], [ 128.5869246750002, -3.434340101999851 ], [ 128.5493270190002, -3.437432549999869 ], [ 128.50831139400032, -3.456963799999926 ], [ 128.48414147200015, -3.462497653999833 ], [ 128.46420332100013, -3.454522393999866 ], [ 128.44971764400009, -3.443291924999983 ], [ 128.41618899800005, -3.425957940999808 ], [ 128.39918053500014, -3.410088799999983 ], [ 128.28207441500001, -3.220879815999865 ], [ 128.27214603000016, -3.211521091999941 ], [ 128.23096764400009, -3.208754164999846 ], [ 128.2114363940002, -3.20427825299987 ], [ 128.18287194100003, -3.193780205999815 ], [ 128.1787215500002, -3.194268487999921 ], [ 128.17855879000024, -3.19101327899989 ], [ 128.18018639400032, -3.166761976999794 ], [ 128.18588300900012, -3.140720309999892 ], [ 128.20004316500024, -3.111423434999892 ], [ 128.19678795700031, -3.09091562299983 ], [ 128.18433678500003, -3.074395440999865 ], [ 128.16578209700015, -3.066989841999941 ], [ 128.1357528000002, -3.075372002999814 ], [ 128.11060631600014, -3.100030205999929 ], [ 128.09066816500012, -3.132012627999927 ], [ 128.07691491000014, -3.162530205999872 ], [ 128.06657962300005, -3.196954033999873 ], [ 128.05689537900014, -3.296807549999983 ], [ 128.05307050900001, -3.310642184999892 ], [ 128.04420006600014, -3.32577890399989 ], [ 128.03150475400014, -3.357679945999905 ], [ 128.02222741000003, -3.368584893999866 ], [ 128.0141707690002, -3.371351820999905 ], [ 127.99390709700015, -3.373711846999868 ], [ 127.98755944100003, -3.376071872999944 ], [ 127.9814559250002, -3.385023695999848 ], [ 127.97559655000009, -3.405043226999851 ], [ 127.96216881600014, -3.425713799999926 ], [ 127.95289147200026, -3.443942966999828 ], [ 127.94027754000001, -3.478448174999869 ], [ 127.93588300900012, -3.497002862999864 ], [ 127.93718509200016, -3.505547783999873 ], [ 127.94385826900032, -3.515720309999892 ], [ 127.94263756600003, -3.521661065999922 ], [ 127.9292098320002, -3.542738539999846 ], [ 127.92603600400014, -3.553480726999908 ], [ 127.89861087300017, -3.523858330999929 ], [ 127.90308678500014, -3.476657809999949 ], [ 127.93344160200024, -3.389743747999887 ], [ 127.93384850400014, -3.345310153999947 ], [ 127.9301863940002, -3.32333749799983 ], [ 127.92302493600016, -3.31389739399981 ], [ 127.91570071700005, -3.307224216999884 ], [ 127.8857528000002, -3.266208591999884 ], [ 127.87525475400003, -3.208754164999846 ], [ 127.86801191500001, -3.193780205999815 ], [ 127.8422957690002, -3.173272393999866 ], [ 127.84392337300017, -3.166110934999949 ], [ 127.8647567070002, -3.156345309999892 ], [ 127.87403405000009, -3.154392184999836 ], [ 127.8964949880002, -3.152113539999846 ], [ 127.90560957100013, -3.149509372999944 ], [ 127.91627037900003, -3.139906507999797 ], [ 127.93873131600003, -3.113376559999836 ], [ 127.95069420700008, -3.107842705999815 ], [ 127.9672957690002, -3.103692315999865 ], [ 127.99293053500014, -3.082614841999941 ], [ 128.00806725400014, -3.07366301899981 ], [ 128.02564537900014, -3.068617445999962 ], [ 128.04615319100026, -3.065850518999923 ], [ 128.06666100400003, -3.066989841999941 ], [ 128.08375084700015, -3.07366301899981 ], [ 128.10368899800005, -3.066989841999941 ], [ 128.0918074880002, -3.03460051899998 ], [ 128.09058678500014, -3.022149346999868 ], [ 128.09498131600026, -3.01091887799987 ], [ 128.11410566500012, -2.993584893999866 ], [ 128.11793053500014, -2.984307549999926 ], [ 128.10629316500012, -2.975518487999864 ], [ 128.08497155000009, -2.973890882999797 ], [ 128.06999759200005, -2.970635674999983 ], [ 128.07691491000014, -2.957696221999868 ], [ 128.0854598320002, -2.954847915000016 ], [ 128.11215254000001, -2.949965101999851 ], [ 128.1211043630002, -2.944512627999814 ], [ 128.13892662900014, -2.909844658999816 ], [ 128.13648522200015, -2.911879164999846 ], [ 128.1362410820002, -2.907647393999866 ], [ 128.13746178500014, -2.901299737999921 ], [ 128.13892662900014, -2.896172783999873 ], [ 128.14323978000027, -2.894626559999836 ], [ 128.1499129570002, -2.894952080999872 ], [ 128.15609785200013, -2.893243096999868 ], [ 128.15886478000027, -2.885674737999921 ], [ 128.16089928500003, -2.874118748 ], [ 128.16667728000016, -2.863946221999868 ], [ 128.17546634200016, -2.857028903999947 ], [ 128.18677819100003, -2.854668877999927 ], [ 128.21241295700008, -2.86052825299987 ], [ 128.38103274800017, -2.859958591999884 ], [ 128.41732832100013, -2.850518487999864 ], [ 128.45972741000014, -2.846286716999828 ], [ 128.49854576900009, -2.836521091999884 ], [ 128.51587975400025, -2.834161065999865 ], [ 128.53785241000014, -2.837172132999854 ], [ 128.57545006600026, -2.851332289999903 ], [ 128.60075931100005, -2.854668877999927 ], [ 128.80054772200015, -2.856215101999965 ], [ 128.8422957690002, -2.862237237999864 ], [ 128.86524498800031, -2.862074476999794 ], [ 128.9082137380002, -2.855401299999926 ], [ 128.9472762380002, -2.844414971999868 ], [ 129.01596113400012, -2.814222914999846 ], [ 129.05290774800017, -2.804457289999903 ], [ 129.06885826900009, -2.821221612999921 ], [ 129.07056725400003, -2.854913018999923 ], [ 129.0644637380002, -2.896172783999873 ], [ 129.07943769600013, -2.905368747999944 ], [ 129.10523522200026, -2.947930596999811 ], [ 129.12183678500003, -2.957696221999868 ], [ 129.13314863400001, -2.956475518999866 ], [ 129.15259850400003, -2.951348565999922 ], [ 129.16285241000014, -2.950290622999887 ], [ 129.16911868600027, -2.951348565999922 ], [ 129.17212975400014, -2.953871351999965 ], [ 129.17416425900012, -2.956475518999866 ], [ 129.17709394600013, -2.957696221999868 ], [ 129.18539472700002, -2.955173434999949 ], [ 129.18433678500026, -2.949151299999869 ], [ 129.18051191500012, -2.942152601999851 ], [ 129.18051191500012, -2.936618747999944 ], [ 129.17994225400014, -2.934258721999868 ], [ 129.1782332690002, -2.930433851999851 ], [ 129.17945397200003, -2.926446221999868 ], [ 129.18734785200024, -2.922946873 ], [ 129.19190514400032, -2.923028252999984 ], [ 129.1953231130002, -2.928399346999868 ], [ 129.20045006600003, -2.929782809999892 ], [ 129.21159915500016, -2.940850518999866 ], [ 129.21851647200015, -2.941176039999903 ], [ 129.22144616000014, -2.926364841999884 ], [ 129.22779381600003, -2.91521575299987 ], [ 129.2431746750002, -2.906833591999828 ], [ 129.27613366000003, -2.896172783999873 ], [ 129.32837975400003, -2.86679452899989 ], [ 129.3584090500002, -2.856215101999965 ], [ 129.36410566500024, -2.842054946000019 ], [ 129.36646569100003, -2.823988540000016 ], [ 129.37289472700013, -2.806817315999979 ], [ 129.40023847700002, -2.791599217 ], [ 129.44353274800017, -2.784926039999846 ], [ 129.52320397200015, -2.786309502999814 ], [ 129.53484134200005, -2.780043226999851 ], [ 129.5410262380002, -2.780043226999851 ] ] ], [ [ [ 100.46753991000008, -3.066989841999941 ], [ 100.47331790500021, -3.087172132999797 ], [ 100.4729110040002, -3.113946221999925 ], [ 100.46452884200016, -3.13250090899993 ], [ 100.44703209700009, -3.128350518999866 ], [ 100.43718509200011, -3.134372653999947 ], [ 100.42652428500008, -3.136407158999816 ], [ 100.41586347700013, -3.134372653999947 ], [ 100.40601647200009, -3.128350518999866 ], [ 100.38640384200022, -3.143812757999797 ], [ 100.38070722700024, -3.152520440999865 ], [ 100.38868248800009, -3.156345309999892 ], [ 100.4021102220002, -3.158868096999811 ], [ 100.40316816500024, -3.16545989399998 ], [ 100.39942467500015, -3.174248955999872 ], [ 100.39861087300028, -3.183526299999812 ], [ 100.41163170700008, -3.213474216999941 ], [ 100.42652428500008, -3.238213799999869 ], [ 100.466970248, -3.287286065999865 ], [ 100.47828209700009, -3.315199476999851 ], [ 100.46070397200003, -3.334405205999872 ], [ 100.44825280000015, -3.32537200299987 ], [ 100.42937259200011, -3.303155205999815 ], [ 100.4189559250002, -3.293389580999872 ], [ 100.40788821700016, -3.286879164999903 ], [ 100.38607832100018, -3.277520440999922 ], [ 100.3786727220002, -3.272393487999864 ], [ 100.3776147800001, -3.268161716999884 ], [ 100.3786727220002, -3.248711846999811 ], [ 100.3762313160002, -3.241143487999864 ], [ 100.37037194100003, -3.239515882999854 ], [ 100.36361738400012, -3.23984140399989 ], [ 100.35824629000012, -3.238213799999869 ], [ 100.3369246750002, -3.222588799999869 ], [ 100.33041425900012, -3.212985934999892 ], [ 100.33033287900014, -3.197360934999892 ], [ 100.33716881600003, -3.197360934999892 ], [ 100.33920332100024, -3.203220309999836 ], [ 100.34245853000021, -3.207696221999811 ], [ 100.34734134200011, -3.210544528999833 ], [ 100.3545028000002, -3.211521091999941 ], [ 100.36019941500018, -3.207452080999872 ], [ 100.35580488400012, -3.198337497999944 ], [ 100.34400475400025, -3.183526299999812 ], [ 100.3376570970002, -3.161553643999866 ], [ 100.33716881600003, -3.152927341999884 ], [ 100.34351647200015, -3.136407158999816 ], [ 100.34522545700008, -3.12656015399989 ], [ 100.29232832100013, -3.077080987999864 ], [ 100.27735436300014, -3.072930596999868 ], [ 100.25928795700014, -3.073174737999864 ], [ 100.24822024800022, -3.069431248 ], [ 100.25464928500003, -3.053317966999828 ], [ 100.24415123800014, -3.044040622999887 ], [ 100.21322675900018, -3.006931247999887 ], [ 100.2067977220002, -2.994886976999851 ], [ 100.20362389400015, -2.983819268999923 ], [ 100.1894637380002, -2.966566664999903 ], [ 100.18628991000014, -2.953871351999965 ], [ 100.18848717500015, -2.941664320999848 ], [ 100.1977645190002, -2.929294528999833 ], [ 100.19996178500026, -2.919854424999926 ], [ 100.19752037900025, -2.896254164999903 ], [ 100.17945397200015, -2.827325127999814 ], [ 100.17896569100014, -2.802911065999865 ], [ 100.18913821700016, -2.791192315999808 ], [ 100.22730553500014, -2.77263762799987 ], [ 100.24024498800009, -2.778252862999864 ], [ 100.2490340500002, -2.78435637799987 ], [ 100.25538170700008, -2.791436455999929 ], [ 100.27507571700011, -2.820489190999922 ], [ 100.28150475400014, -2.826104424999812 ], [ 100.28638756599997, -2.828708591999884 ], [ 100.29086347700024, -2.830661716999884 ], [ 100.2961531910002, -2.834161065999865 ], [ 100.35434004000024, -2.894463799999869 ], [ 100.38510175900024, -2.914646091999828 ], [ 100.41586347700013, -2.965915622999887 ], [ 100.46753991000008, -3.015313408999816 ], [ 100.47144616000014, -3.037855726999794 ], [ 100.47201582100013, -3.051690362999807 ], [ 100.46753991000008, -3.066989841999941 ] ] ], [ [ [ 131.59815514400032, -2.65390390399989 ], [ 131.57886803500003, -2.656019789999903 ], [ 131.57252037900014, -2.651055596999811 ], [ 131.57935631600003, -2.644626559999892 ], [ 131.59937584700015, -2.634860934999892 ], [ 131.6259871750002, -2.619561455999815 ], [ 131.63990319100014, -2.613702080999985 ], [ 131.65463300900012, -2.613213799999983 ], [ 131.64405358200031, -2.628676040000016 ], [ 131.6225692070002, -2.643649997999944 ], [ 131.59815514400032, -2.65390390399989 ] ] ], [ [ [ 107.8481551440002, -2.54989999799983 ], [ 107.88347415500016, -2.564222915000016 ], [ 107.91968834700015, -2.568617445999905 ], [ 107.93620853000021, -2.563571872999944 ], [ 107.98845462300022, -2.574151299999812 ], [ 108.00513756600009, -2.580254815999808 ], [ 108.01400800900012, -2.591078382999797 ], [ 108.03239993600016, -2.642347914999959 ], [ 108.03980553500014, -2.642347914999959 ], [ 108.04623457100024, -2.614922783999987 ], [ 108.05307050900007, -2.602797132999797 ], [ 108.06657962300017, -2.594496351999908 ], [ 108.0979110040002, -2.608168226999851 ], [ 108.10417728000016, -2.612399997999944 ], [ 108.11451256599997, -2.630629164999846 ], [ 108.11841881600009, -2.634942315999865 ], [ 108.13559004000007, -2.639255466999884 ], [ 108.14958743600005, -2.650323174999869 ], [ 108.15894616000026, -2.665785414999903 ], [ 108.16277103, -2.683282158999873 ], [ 108.18279056100005, -2.673516533999816 ], [ 108.1977645190002, -2.678155205999929 ], [ 108.26726321700011, -2.75741952899989 ], [ 108.27613366, -2.793877862999864 ], [ 108.29086347700024, -2.828708591999884 ], [ 108.2937117850002, -2.848402601999851 ], [ 108.28874759200022, -2.866631768999866 ], [ 108.27914472700019, -2.880140882999797 ], [ 108.27003014400015, -2.890801690999865 ], [ 108.26579837300005, -2.899590752999814 ], [ 108.25668379000024, -2.926202080999872 ], [ 108.21558678500008, -2.978692315999808 ], [ 108.20435631599997, -3.005466404 ], [ 108.20492597700013, -3.014580987999921 ], [ 108.21021569100014, -3.030450127999814 ], [ 108.21062259200011, -3.039646091999884 ], [ 108.20777428500026, -3.049411716999941 ], [ 108.19939212300022, -3.068617445999962 ], [ 108.19752037900008, -3.077080987999864 ], [ 108.19532311300014, -3.081475518999923 ], [ 108.19068444100003, -3.087497653999833 ], [ 108.18604576900009, -3.095472914999903 ], [ 108.18384850400014, -3.104750257999854 ], [ 108.18767337300011, -3.112074476999851 ], [ 108.20492597700013, -3.125909112999864 ], [ 108.21062259200011, -3.13583749799983 ], [ 108.18767337300011, -3.136895440999865 ], [ 108.15219160200024, -3.15243906 ], [ 108.1320906910002, -3.156345309999892 ], [ 108.10873457100018, -3.157159112999807 ], [ 108.09083092500015, -3.161390882999854 ], [ 108.07911217500009, -3.171807549999812 ], [ 108.07398522200015, -3.190362237999807 ], [ 108.07398522200015, -3.226006768999866 ], [ 108.06413821700011, -3.231052342 ], [ 108.0361434250002, -3.232028903999947 ], [ 108.01197350400008, -3.236504815999865 ], [ 107.99398847700013, -3.242445570999848 ], [ 107.98096764400009, -3.23984140399989 ], [ 107.97095787900008, -3.217705987999864 ], [ 107.96973717500015, -3.172133070999905 ], [ 107.96607506600014, -3.150974216999828 ], [ 107.94141686300014, -3.13445403399993 ], [ 107.88843834699998, -3.087497653999833 ], [ 107.89047285200019, -3.086114190999865 ], [ 107.89136803500008, -3.079278252999814 ], [ 107.8891707690002, -3.069594007999967 ], [ 107.88217207100024, -3.060153903999833 ], [ 107.87045332100013, -3.051690362999807 ], [ 107.8650008470002, -3.052666924999983 ], [ 107.85906009200011, -3.057305596999811 ], [ 107.84473717500009, -3.060153903999833 ], [ 107.82545006600009, -3.066176039999959 ], [ 107.82545006600009, -3.080661716999884 ], [ 107.84115644600024, -3.107842705999815 ], [ 107.84180748800009, -3.145440362999921 ], [ 107.81519616000003, -3.167250257999967 ], [ 107.75314994000018, -3.198455191999926 ], [ 107.68627137700003, -3.198206957999901 ], [ 107.65883946100013, -3.232633893999832 ], [ 107.63139902600017, -3.240863766000018 ], [ 107.60279400700011, -3.22885767299988 ], [ 107.59449787800014, -3.206238452999912 ], [ 107.60526631300019, -3.176545423999869 ], [ 107.64079837300011, -3.132582289999959 ], [ 107.6425887380002, -3.128350518999866 ], [ 107.64039147200026, -3.121677341999884 ], [ 107.63559004000018, -3.117608330999929 ], [ 107.63111412900014, -3.114515882999854 ], [ 107.62468509200011, -3.105401299999869 ], [ 107.59791100400014, -3.083916924999926 ], [ 107.59359785200013, -3.074965101999851 ], [ 107.59343509200016, -3.063164971999868 ], [ 107.5944930350002, -3.050469658999873 ], [ 107.59424889400015, -3.039646091999884 ], [ 107.59034264400009, -3.029229424999812 ], [ 107.58521569100014, -3.020277601999794 ], [ 107.5810653000002, -3.010674737999807 ], [ 107.58057701900003, -2.997979424999869 ], [ 107.5859481130002, -2.98560963299991 ], [ 107.60434004000024, -2.96404387799987 ], [ 107.60840905000009, -2.953871351999965 ], [ 107.61101321699999, -2.917901299999869 ], [ 107.60531660200019, -2.913750908999816 ], [ 107.58741295700008, -2.916680596999868 ], [ 107.56267337300017, -2.927666924999812 ], [ 107.5529891290002, -2.927992445999905 ], [ 107.54712975400008, -2.916680596999868 ], [ 107.54908287900014, -2.904961846999981 ], [ 107.55795332100024, -2.89397551899981 ], [ 107.57056725400008, -2.885837497999887 ], [ 107.58399498800014, -2.882500908999873 ], [ 107.60336347700013, -2.871026299999926 ], [ 107.6096297540002, -2.843682549999869 ], [ 107.60572350400014, -2.811781507999854 ], [ 107.59424889400015, -2.786309502999814 ], [ 107.60710696700011, -2.780938408999873 ], [ 107.62305748800009, -2.770603122999887 ], [ 107.63672936300003, -2.758558851999965 ], [ 107.6425887380002, -2.748467705999872 ], [ 107.63868248800009, -2.684991143999866 ], [ 107.65455162900014, -2.584893487999864 ], [ 107.67025800900007, -2.561455987999977 ], [ 107.71143639400003, -2.552911065999865 ], [ 107.72779381600009, -2.553155205999872 ], [ 107.7566024100002, -2.560642184999836 ], [ 107.7729598320002, -2.560316664999903 ], [ 107.7890731130002, -2.55380624799983 ], [ 107.81836998800009, -2.531914971999811 ], [ 107.83432050900012, -2.525079033999873 ], [ 107.8481551440002, -2.54989999799983 ] ] ], [ [ [ 100.20411217500015, -2.759942315999808 ], [ 100.17237389400015, -2.765557549999812 ], [ 100.15894616000008, -2.77263762799987 ], [ 100.1513778000002, -2.784844658999873 ], [ 100.14519290500016, -2.811130466999884 ], [ 100.13851972700013, -2.820489190999922 ], [ 100.1152449880002, -2.827894789999903 ], [ 100.08985436300014, -2.824395440999808 ], [ 100.0666610040002, -2.815524997999887 ], [ 100.04965254000018, -2.806817315999979 ], [ 100.04476972700019, -2.820896091999941 ], [ 100.03834069100026, -2.833754164999846 ], [ 100.02930748800009, -2.840101820999962 ], [ 100.01563561300014, -2.834161065999865 ], [ 100.00782311300014, -2.81951262799987 ], [ 100.00700931100016, -2.781914971999868 ], [ 100.00131269600013, -2.765313408999873 ], [ 99.986827019000202, -2.767185153999833 ], [ 99.988454623000223, -2.744886976999794 ], [ 100.00131269600013, -2.68670012799987 ], [ 100.00049889400015, -2.658868096999925 ], [ 99.996267123000223, -2.638767184999892 ], [ 99.98601321699999, -2.624688408999816 ], [ 99.967133009000179, -2.615004164999846 ], [ 99.975759311000161, -2.603448174999869 ], [ 99.975596550000091, -2.594903252999927 ], [ 99.967133009000179, -2.580254815999808 ], [ 99.961436394000202, -2.559014580999815 ], [ 99.9609481130002, -2.552911065999865 ], [ 99.967295769000145, -2.51490650799991 ], [ 99.974619988000143, -2.493910414999903 ], [ 99.984141472000147, -2.484633070999848 ], [ 100.00294030000015, -2.490899346999868 ], [ 100.01368248800009, -2.504815362999864 ], [ 100.02173912900014, -2.51873137799987 ], [ 100.03239993600016, -2.525079033999873 ], [ 100.08708743600027, -2.576267184999836 ], [ 100.10759524800017, -2.600274346999868 ], [ 100.11744225400025, -2.608168226999851 ], [ 100.15211022200009, -2.618584893999866 ], [ 100.1666772800001, -2.627862237999807 ], [ 100.1726180350002, -2.645765882999967 ], [ 100.17798912900014, -2.655938408999873 ], [ 100.20142662900014, -2.678155205999929 ], [ 100.2067977220002, -2.693536065999808 ], [ 100.20972741000014, -2.707696221999925 ], [ 100.21517988400024, -2.723565362999921 ], [ 100.21859785200024, -2.739353122999887 ], [ 100.21517988400024, -2.752862237999864 ], [ 100.20411217500015, -2.759942315999808 ] ] ], [ [ [ 133.5390731130002, -2.440118096999868 ], [ 133.55388431100005, -2.449883721999981 ], [ 133.55396569100003, -2.44296640399989 ], [ 133.56023196700016, -2.443047783999873 ], [ 133.5708113940002, -2.450941664999846 ], [ 133.58375084700003, -2.458672783999873 ], [ 133.59180748800009, -2.461521091999884 ], [ 133.6054793630002, -2.468031507999797 ], [ 133.60580488400012, -2.488946221999868 ], [ 133.58521569100014, -2.512627862999977 ], [ 133.5629988940002, -2.512872002999927 ], [ 133.56169681100016, -2.508721612999864 ], [ 133.55738366000014, -2.504327080999872 ], [ 133.52328535200013, -2.487969658999873 ], [ 133.51351972700013, -2.476006768999866 ], [ 133.50709069100026, -2.460219007999797 ], [ 133.49789472700013, -2.446384372999887 ], [ 133.49000084700003, -2.43124765399989 ], [ 133.5058699880002, -2.424493096999868 ], [ 133.5390731130002, -2.440118096999868 ] ] ], [ [ [ 134.5669051440002, -2.450453382999967 ], [ 134.54965254000001, -2.451348565999865 ], [ 134.53728274800017, -2.445733330999872 ], [ 134.53443444100003, -2.435642184999949 ], [ 134.5463973320002, -2.422621351999794 ], [ 134.5214949880002, -2.406670830999872 ], [ 134.52426191500001, -2.392266533999816 ], [ 134.55372155000009, -2.367364190999979 ], [ 134.56023196700005, -2.351495049999926 ], [ 134.56421959700003, -2.329847914999846 ], [ 134.5669051440002, -2.292901299999812 ], [ 134.57683353000016, -2.298516533999816 ], [ 134.58130944100026, -2.307875257999854 ], [ 134.58228600400014, -2.31975676899981 ], [ 134.58122806100027, -2.332696221999925 ], [ 134.58122806100027, -2.416436455999929 ], [ 134.58366946700005, -2.438409112999864 ], [ 134.58025149800017, -2.445082289999903 ], [ 134.5669051440002, -2.450453382999967 ] ] ], [ [ [ 99.70720462300028, -2.127699476999851 ], [ 99.721364780000158, -2.159112237999864 ], [ 99.775401238000029, -2.23756275799991 ], [ 99.775889519000202, -2.242445570999905 ], [ 99.774261915000181, -2.254327080999929 ], [ 99.775401238000029, -2.258721612999807 ], [ 99.77881920700014, -2.261651299999869 ], [ 99.785817905000101, -2.263441664999903 ], [ 99.814626498000166, -2.28435637799987 ], [ 99.823252800000148, -2.292901299999812 ], [ 99.849619988000086, -2.333916924999926 ], [ 99.858734571000241, -2.35686614399981 ], [ 99.857920769000032, -2.374769789999846 ], [ 99.857920769000032, -2.367364190999979 ], [ 99.853363477000073, -2.377618096999811 ], [ 99.846202019000145, -2.38005950299987 ], [ 99.83969160200013, -2.375258070999848 ], [ 99.833343946000241, -2.352308851999965 ], [ 99.824554884000236, -2.347588799999869 ], [ 99.799571160000028, -2.347426039999903 ], [ 99.788096550000091, -2.344414971999868 ], [ 99.779958530000158, -2.337009373 ], [ 99.772146029999988, -2.328220309999836 ], [ 99.761729363000086, -2.320896091999828 ], [ 99.749766472000147, -2.318047783999873 ], [ 99.725108269000145, -2.317071221999925 ], [ 99.713389519000089, -2.313409112999864 ], [ 99.699229363000143, -2.300876559999892 ], [ 99.687022332000083, -2.284926039999959 ], [ 99.671722852000244, -2.271254165000016 ], [ 99.648448113000143, -2.265557549999869 ], [ 99.610850457000197, -2.26718515399989 ], [ 99.6035262380002, -2.265557549999869 ], [ 99.602549675000148, -2.253024997999944 ], [ 99.611582879000252, -2.242771091999884 ], [ 99.616465691000144, -2.23357512799987 ], [ 99.6035262380002, -2.224053643999866 ], [ 99.597666863000086, -2.229099216999884 ], [ 99.593923373000109, -2.227797132999854 ], [ 99.591481967000107, -2.221368096999981 ], [ 99.589854363000086, -2.211032809999836 ], [ 99.583018425000091, -2.211032809999836 ], [ 99.576182488000143, -2.224053643999866 ], [ 99.567718946000127, -2.215101820999905 ], [ 99.555674675000205, -2.183038018999866 ], [ 99.531260613000029, -2.15593840899993 ], [ 99.527679884000179, -2.145440362999864 ], [ 99.531016472000204, -2.134209893999866 ], [ 99.538422071000184, -2.131768487999807 ], [ 99.552256707000197, -2.135349216999884 ], [ 99.564463738000086, -2.131117445999848 ], [ 99.562266472000147, -2.121677341999941 ], [ 99.548838738000086, -2.10116952899989 ], [ 99.548350457000083, -2.061455987999864 ], [ 99.564952019000032, -2.030857028999833 ], [ 99.594004754000196, -2.01482512799987 ], [ 99.631358269000089, -2.018487237999807 ], [ 99.643321160000198, -2.02841562299983 ], [ 99.651866082000197, -2.042087497999944 ], [ 99.662852410000255, -2.054294528999833 ], [ 99.682627800000091, -2.059502862999807 ], [ 99.694346550000205, -2.06780364399981 ], [ 99.700531446000184, -2.087497653999833 ], [ 99.70720462300028, -2.127699476999851 ] ] ], [ [ [ 123.88786868600027, -2.050876559999892 ], [ 123.8896590500002, -2.063246351999851 ], [ 123.88697350400003, -2.073907158999873 ], [ 123.88054446700028, -2.06943124799983 ], [ 123.86931399800017, -2.053317966999884 ], [ 123.8642684250002, -2.055108330999872 ], [ 123.84986412900014, -2.054864190999922 ], [ 123.8393660820002, -2.049086195999905 ], [ 123.84538821700016, -2.035577080999872 ], [ 123.85987389400009, -2.010511976999965 ], [ 123.86744225400003, -2.005547783999816 ], [ 123.87671959700015, -2.018487237999807 ], [ 123.8789168630002, -2.032321872999887 ], [ 123.88786868600027, -2.050876559999892 ] ] ], [ [ [ 134.3774520190002, -2.14983489399981 ], [ 134.3598738940002, -2.153252862999921 ], [ 134.34034264400032, -2.135349216999884 ], [ 134.33236738400012, -2.111097914999903 ], [ 134.33326256600014, -2.083265882999854 ], [ 134.34034264400032, -2.05584075299987 ], [ 134.35059655000009, -2.032647393999866 ], [ 134.35670006600014, -2.022881768999923 ], [ 134.36451256600026, -2.013767185 ], [ 134.37378991000014, -2.006931247999887 ], [ 134.38502037900003, -2.003594658999873 ], [ 134.3974715500002, -2.005791924999869 ], [ 134.4106551440002, -2.012465101999794 ], [ 134.42156009200005, -2.022230726999851 ], [ 134.42652428500003, -2.033298434999892 ], [ 134.4262801440002, -2.039727471999925 ], [ 134.4243270190002, -2.04599374799983 ], [ 134.3974715500002, -2.091973565999808 ], [ 134.3901473320002, -2.131442966999884 ], [ 134.3774520190002, -2.14983489399981 ] ] ], [ [ [ 126.07585696700016, -2.462985934999836 ], [ 126.04615319100003, -2.474216403999833 ], [ 126.01343834700026, -2.459567966999828 ], [ 125.98454837300028, -2.431329033999873 ], [ 125.96599368600027, -2.402113539999846 ], [ 125.95777428500014, -2.369235934999949 ], [ 125.95476321700016, -2.30217864399998 ], [ 125.94613691500024, -2.271742446000019 ], [ 125.93726647200015, -2.26083749799983 ], [ 125.91187584700015, -2.23967864399981 ], [ 125.90455162900003, -2.231377862999864 ], [ 125.90040123800031, -2.217705987999921 ], [ 125.89771569100026, -2.169366143999923 ], [ 125.88770592500009, -2.142347914999846 ], [ 125.87338300900001, -2.115492445999848 ], [ 125.86255944100014, -2.086602471999868 ], [ 125.86353600400025, -2.053317966999884 ], [ 125.86996504000012, -2.035577080999872 ], [ 125.8794051440002, -2.018487237999807 ], [ 125.90259850400014, -1.98788827899989 ], [ 125.91635175900012, -1.973890882999854 ], [ 125.92457116000014, -1.968194268999866 ], [ 125.93336022200003, -1.964532158999816 ], [ 125.94459069100014, -1.965427341999884 ], [ 125.95525149800005, -1.971123955999872 ], [ 125.98536217500009, -1.993747653999947 ], [ 125.99341881600014, -2.003594658999873 ], [ 125.99878991000014, -2.01523202899989 ], [ 126.00098717500009, -2.028252862999864 ], [ 125.99732506600003, -2.055352471999868 ], [ 125.97877037900003, -2.108168226999965 ], [ 125.97282962300017, -2.135349216999884 ], [ 125.97722415500016, -2.180352471999868 ], [ 126.06511478000016, -2.363946221999868 ], [ 126.06910241000003, -2.38445403399993 ], [ 126.07447350400025, -2.406508070999905 ], [ 126.08423912900003, -2.423923434999892 ], [ 126.08806399800005, -2.441094658999816 ], [ 126.07585696700016, -2.462985934999836 ] ] ], [ [ [ 124.37208092500032, -1.992608330999929 ], [ 124.37029056100005, -2.038995049999869 ], [ 124.35840905000009, -2.033298434999892 ], [ 124.33472741000026, -2.00497812299983 ], [ 124.32545006600003, -2.001153252999814 ], [ 124.31421959700003, -1.99944426899981 ], [ 124.30469811300031, -1.996026299999812 ], [ 124.30062910200013, -1.98748137799987 ], [ 124.30567467500009, -1.973402601999851 ], [ 124.31812584700015, -1.96396249799983 ], [ 124.33383222700013, -1.959242445999905 ], [ 124.34888756600014, -1.959567966999941 ], [ 124.36622155000009, -1.971286716999828 ], [ 124.37208092500032, -1.992608330999929 ] ] ], [ [ [ 123.66382897200015, -1.963311455999985 ], [ 123.65699303500003, -1.963311455999985 ], [ 123.65162194100026, -1.949395440999808 ], [ 123.64958743600016, -1.934177341999828 ], [ 123.64958743600016, -1.90178801899981 ], [ 123.65699303500003, -1.90178801899981 ], [ 123.65699303500003, -1.90935637799987 ], [ 123.66439863400001, -1.948907158999816 ], [ 123.66382897200015, -1.963311455999985 ] ] ], [ [ [ 123.74048912900003, -1.940524997999887 ], [ 123.71168053500014, -1.957126559999892 ], [ 123.70557701900009, -1.933770440999808 ], [ 123.71290123800009, -1.911716403999947 ], [ 123.72608483200031, -1.899997653999833 ], [ 123.73804772200015, -1.907891533999816 ], [ 123.73951256600003, -1.915948174999869 ], [ 123.74634850400014, -1.92913176899981 ], [ 123.74577884200016, -1.935967705999815 ], [ 123.74048912900003, -1.940524997999887 ] ] ], [ [ [ 123.86443118600005, -1.98943450299987 ], [ 123.86931399800017, -1.998142184999836 ], [ 123.85621178500003, -1.992445570999962 ], [ 123.84782962300005, -1.99553801899981 ], [ 123.84058678500014, -2.001641533999816 ], [ 123.83179772200026, -2.00497812299983 ], [ 123.8090926440002, -1.999688408999873 ], [ 123.79420006600014, -1.992120049999926 ], [ 123.78736412900014, -1.980645440999865 ], [ 123.77328535200002, -1.922621351999794 ], [ 123.77173912900025, -1.895603122999944 ], [ 123.78736412900014, -1.873955987999864 ], [ 123.84473717500009, -1.928643487999807 ], [ 123.85238691500001, -1.938734632999854 ], [ 123.85743248800031, -1.95037200299987 ], [ 123.86443118600005, -1.98943450299987 ] ] ], [ [ [ 125.42212975400003, -1.79412200299987 ], [ 125.43083743600016, -1.79827239399998 ], [ 125.44019616000014, -1.798028252999927 ], [ 125.4594832690002, -1.792657158999873 ], [ 125.47413170700008, -1.781182549999926 ], [ 125.48324629000001, -1.77695077899989 ], [ 125.48747806100016, -1.782403252999927 ], [ 125.4878035820002, -1.79021575299987 ], [ 125.48910566500012, -1.797784112999807 ], [ 125.49195397200026, -1.803399346999868 ], [ 125.49708092500009, -1.80575937299983 ], [ 125.55884850400014, -1.798028252999927 ], [ 125.5898543630002, -1.799086195999962 ], [ 125.61036217500009, -1.813164971999925 ], [ 125.62533613400001, -1.809828382999797 ], [ 125.70289147200015, -1.819268487999807 ], [ 125.71273847700002, -1.817803643999866 ], [ 125.72396894600013, -1.814060153999947 ], [ 125.7348738940002, -1.808689059999892 ], [ 125.75562584700026, -1.794528903999833 ], [ 125.7656356130002, -1.793715101999851 ], [ 125.78785241000014, -1.799493096999811 ], [ 125.82886803500014, -1.801527601999851 ], [ 125.94613691500024, -1.785821221999868 ], [ 125.99341881600014, -1.785821221999868 ], [ 126.11670983200008, -1.80575937299983 ], [ 126.28882897200015, -1.813164971999925 ], [ 126.3291121750002, -1.819268487999807 ], [ 126.34148196700028, -1.820000908999873 ], [ 126.3452254570002, -1.817640882999797 ], [ 126.34449303500026, -1.818780205999815 ], [ 126.3432723320002, -1.829847914999959 ], [ 126.3359481130002, -1.837985934999892 ], [ 126.27214603000004, -1.86728281 ], [ 126.25806725400014, -1.869073174999869 ], [ 126.22348066500001, -1.867771091999884 ], [ 126.20150800900012, -1.870538018999866 ], [ 126.1904403000002, -1.873793226999794 ], [ 126.18572024800005, -1.877618096999925 ], [ 126.17994225400014, -1.884454033999816 ], [ 126.1670028000002, -1.885023695999905 ], [ 126.14478600400014, -1.881442966999828 ], [ 126.0590926440002, -1.888278903999833 ], [ 126.04997806100016, -1.890313408999873 ], [ 126.02426191500012, -1.90178801899981 ], [ 125.99073326900032, -1.900567315999808 ], [ 125.98023522200026, -1.90178801899981 ], [ 125.94849694100003, -1.92294687299983 ], [ 125.92758222700013, -1.931410414999846 ], [ 125.90821373800031, -1.925713799999869 ], [ 125.88770592500009, -1.909274997999887 ], [ 125.87175540500016, -1.902520440999865 ], [ 125.8559676440002, -1.90341562299983 ], [ 125.78744550900012, -1.918715101999794 ], [ 125.62029056100016, -1.915622653999833 ], [ 125.59986412900014, -1.918633721999811 ], [ 125.5527449880002, -1.93279387799987 ], [ 125.53109785200002, -1.935967705999815 ], [ 125.4834090500002, -1.935967705999815 ], [ 125.46851647200003, -1.937758070999905 ], [ 125.43213951900032, -1.949639580999872 ], [ 125.43799889400009, -1.932549737999807 ], [ 125.43970787900025, -1.913262627999984 ], [ 125.43775475400014, -1.895114841999941 ], [ 125.43213951900032, -1.881442966999828 ], [ 125.4233504570002, -1.875095309999892 ], [ 125.38062584700003, -1.854099216999884 ], [ 125.37183678500014, -1.858330987999864 ], [ 125.36638431100016, -1.877129815999922 ], [ 125.3564559250002, -1.881442966999828 ], [ 125.34880618600016, -1.877862237999977 ], [ 125.34205162900025, -1.869317315999865 ], [ 125.33716881600003, -1.859144789999903 ], [ 125.33529707100013, -1.85068124799983 ], [ 125.33814537900014, -1.828057549999869 ], [ 125.34693444100003, -1.810967705999872 ], [ 125.36207116000003, -1.802422783999816 ], [ 125.3779403000002, -1.799248955999929 ], [ 125.37891686300031, -1.789971612999807 ], [ 125.38404381600014, -1.781182549999926 ], [ 125.3906356130002, -1.775974216999828 ], [ 125.40211022200015, -1.774672132999854 ], [ 125.4096785820002, -1.779229424999869 ], [ 125.42212975400003, -1.79412200299987 ] ] ], [ [ [ 123.09669030000009, -1.895277601999908 ], [ 123.08472741000014, -1.90178801899981 ], [ 123.0727645190002, -1.901625257999854 ], [ 123.0673934250002, -1.891696872999887 ], [ 123.07007897200026, -1.840752862999864 ], [ 123.07447350400014, -1.818942966999884 ], [ 123.09017988400001, -1.779961846999925 ], [ 123.09343509200005, -1.768243096999811 ], [ 123.09457441500012, -1.75505950299987 ], [ 123.10206139400032, -1.748467705999929 ], [ 123.11744225400014, -1.752862237999864 ], [ 123.13103274800017, -1.760918877999814 ], [ 123.13282311300031, -1.76531340899993 ], [ 123.14323978000016, -1.775485934999836 ], [ 123.15154056100016, -1.798760674999983 ], [ 123.15284264400009, -1.82382577899989 ], [ 123.14242597700002, -1.839776299999869 ], [ 123.13013756600014, -1.846774997999944 ], [ 123.11703535200002, -1.857842705999872 ], [ 123.1064559250002, -1.871189059999892 ], [ 123.10206139400032, -1.884860934999836 ], [ 123.09669030000009, -1.895277601999908 ] ] ], [ [ [ 134.19166100400014, -1.92148202899989 ], [ 134.17514082100001, -1.943454684999892 ], [ 134.1616317070002, -1.895114841999941 ], [ 134.1616317070002, -1.877536716999941 ], [ 134.16895592500009, -1.829847914999959 ], [ 134.22681725400014, -1.744235934999892 ], [ 134.2358504570002, -1.738539320999905 ], [ 134.24822024800005, -1.743910414999846 ], [ 134.25001061300031, -1.761488539999903 ], [ 134.24480228000004, -1.79607512799987 ], [ 134.23633873800031, -1.799411716999828 ], [ 134.21998131600014, -1.812595309999892 ], [ 134.2080184250002, -1.826836846999868 ], [ 134.22388756600003, -1.84905364399981 ], [ 134.2124129570002, -1.884209893999866 ], [ 134.19166100400014, -1.92148202899989 ] ] ], [ [ [ 108.75879967500015, -1.717461846999981 ], [ 108.72461998800014, -1.719414971999811 ], [ 108.67725670700003, -1.713799737999921 ], [ 108.69141686300014, -1.699151299999926 ], [ 108.72315514400009, -1.693617445999905 ], [ 108.75709069100014, -1.695407809999892 ], [ 108.77808678500008, -1.702732029 ], [ 108.75879967500015, -1.717461846999981 ] ] ], [ [ [ 130.35718834700003, -1.69491952899989 ], [ 130.35181725400014, -1.74138762799987 ], [ 130.4062606130002, -1.778985283999873 ], [ 130.41797936300009, -1.793552341999884 ], [ 130.43132571700016, -1.814629815999808 ], [ 130.4399520190002, -1.835707289999903 ], [ 130.43775475400003, -1.85068124799983 ], [ 130.42807050900012, -1.855726820999905 ], [ 130.4204207690002, -1.855645440999808 ], [ 130.41570071700028, -1.858086846999868 ], [ 130.41179446700016, -1.881768487999864 ], [ 130.40577233200008, -1.885023695999905 ], [ 130.3969832690002, -1.885430596999811 ], [ 130.38648522200015, -1.888278903999833 ], [ 130.3549910820002, -1.912204684999892 ], [ 130.34424889400032, -1.928480726999965 ], [ 130.43433678500014, -1.963311455999985 ], [ 130.43685957100013, -1.976332289999959 ], [ 130.42986087300017, -1.980238539999846 ], [ 130.41797936300009, -1.980726820999848 ], [ 130.4062606130002, -1.983819268999866 ], [ 130.39844811300009, -1.989678643999866 ], [ 130.39389082100013, -1.994805596999811 ], [ 130.38990319100026, -2.000664971999868 ], [ 130.38306725400014, -2.008396091999941 ], [ 130.3735457690002, -2.01279062299983 ], [ 130.36548912900003, -2.008558851999908 ], [ 130.35759524800017, -2.001641533999816 ], [ 130.34839928500026, -1.998142184999836 ], [ 130.34001712300017, -1.99342213299991 ], [ 130.33952884200016, -1.983330987999864 ], [ 130.34245853000004, -1.973565362999921 ], [ 130.34498131600014, -1.97014739399981 ], [ 130.34302819100003, -1.96493906 ], [ 130.34107506600026, -1.955336195999905 ], [ 130.33814537900014, -1.949639580999872 ], [ 130.32699629000024, -1.960544528999947 ], [ 130.30884850400003, -1.991469007999854 ], [ 130.30054772200015, -1.998142184999836 ], [ 130.28711998800009, -2.004571221999868 ], [ 130.27523847700013, -2.01913827899989 ], [ 130.26498457100013, -2.035251559999836 ], [ 130.25611412900003, -2.045830987999864 ], [ 130.22339928500014, -2.057793877999927 ], [ 130.15430748800009, -2.058770440999808 ], [ 130.1264754570002, -2.066989841999884 ], [ 130.11947675900024, -2.059014580999929 ], [ 130.11304772200003, -2.053155205999872 ], [ 130.1064559250002, -2.048760674999812 ], [ 130.09848066500001, -2.045830987999864 ], [ 130.10857181100016, -2.040459893999923 ], [ 130.11280358200008, -2.038995049999869 ], [ 130.08692467500009, -2.026136976999965 ], [ 130.06592858200031, -2.02263762799987 ], [ 130.01286868600016, -2.025485934999892 ], [ 129.96892337300028, -2.00497812299983 ], [ 129.92554772200003, -2.003838799999812 ], [ 129.9170028000002, -2.001560153999833 ], [ 129.90406334700003, -1.993259372999944 ], [ 129.87338300900001, -1.982028903999833 ], [ 129.85621178500014, -1.969496351999851 ], [ 129.84083092500032, -1.964043877999814 ], [ 129.83432050900024, -1.960137627999927 ], [ 129.81641686300009, -1.940850518999866 ], [ 129.8105574880002, -1.935967705999815 ], [ 129.76807701900009, -1.918145440999865 ], [ 129.74382571700016, -1.912204684999892 ], [ 129.7329207690002, -1.903741143999866 ], [ 129.71485436300009, -1.881442966999828 ], [ 129.74529056100005, -1.863457940999808 ], [ 129.87256920700008, -1.819268487999807 ], [ 129.87623131600014, -1.81585051899981 ], [ 129.87720787900003, -1.811944268999923 ], [ 129.87761478000004, -1.808282158999873 ], [ 129.8794051440002, -1.80575937299983 ], [ 129.89527428500014, -1.796807549999926 ], [ 129.90503991000014, -1.793715101999851 ], [ 129.93873131600014, -1.789239190999865 ], [ 129.95875084700015, -1.780694268999923 ], [ 130.01197350400003, -1.750176690999808 ], [ 130.0307723320002, -1.743829033999873 ], [ 130.0517684250002, -1.73943450299987 ], [ 130.09603925900001, -1.73544687299983 ], [ 130.13705488400001, -1.725274346999868 ], [ 130.16049238400024, -1.724297783999873 ], [ 130.22046959700026, -1.736016533999987 ], [ 130.23170006600014, -1.734307549999983 ], [ 130.24822024800005, -1.718845309999949 ], [ 130.26775149800017, -1.704522393999866 ], [ 130.2890731130002, -1.692152601999851 ], [ 130.32154381600014, -1.679131768999866 ], [ 130.33228600400003, -1.676690362999807 ], [ 130.34294681100005, -1.676690362999807 ], [ 130.35336347700013, -1.680108330999815 ], [ 130.35718834700003, -1.69491952899989 ] ] ], [ [ [ 123.31771894600013, -1.774509372999887 ], [ 123.3012801440002, -1.788344007999854 ], [ 123.28028405000009, -1.785821221999868 ], [ 123.27100670700008, -1.769301039999903 ], [ 123.2797957690002, -1.748223565999979 ], [ 123.33025149800005, -1.69491952899989 ], [ 123.35613040500004, -1.675876559999892 ], [ 123.36109459700003, -1.673760674999869 ], [ 123.3657332690002, -1.673109632999854 ], [ 123.37614993600005, -1.67880624799983 ], [ 123.38200931100016, -1.689629815999808 ], [ 123.3828231130002, -1.702243748 ], [ 123.37818444100026, -1.712823174999869 ], [ 123.36980228000016, -1.719903252999814 ], [ 123.35027103000004, -1.730889580999872 ], [ 123.3418074880002, -1.737969658999816 ], [ 123.31771894600013, -1.774509372999887 ] ] ], [ [ [ 124.52955162900003, -1.635674737999807 ], [ 124.52784264400009, -1.655450127999814 ], [ 124.55632571700028, -1.641208591999828 ], [ 124.59278405000009, -1.633233330999872 ], [ 124.63282311300009, -1.631117445999848 ], [ 124.68767337300028, -1.638360283999987 ], [ 124.72901451900032, -1.650567315999979 ], [ 124.74293053500003, -1.658868096999868 ], [ 124.75700931100005, -1.665134372999887 ], [ 124.81519616000003, -1.669691664999846 ], [ 124.8715926440002, -1.693047783999816 ], [ 124.93816165500004, -1.703871351999851 ], [ 124.94361412900025, -1.702894789999846 ], [ 124.9506942070002, -1.697686455999872 ], [ 124.95557701900009, -1.69646575299987 ], [ 124.96070397200015, -1.698337497999887 ], [ 124.96810957100013, -1.707289320999905 ], [ 124.97291100400014, -1.71013762799987 ], [ 125.00017337300017, -1.716729424999926 ], [ 125.01042728000004, -1.717461846999981 ], [ 125.02295983200031, -1.723077080999872 ], [ 125.03467858200008, -1.752129815999865 ], [ 125.04802493600016, -1.76531340899993 ], [ 125.04981530000009, -1.760511976999851 ], [ 125.05355879000024, -1.756524346999868 ], [ 125.05543053500014, -1.751641533999987 ], [ 125.06763756600026, -1.760430596999868 ], [ 125.0815535820002, -1.764743747999944 ], [ 125.09603925900012, -1.764092705999872 ], [ 125.11003665500016, -1.758477471999868 ], [ 125.10035241000003, -1.753106377999814 ], [ 125.09644616000014, -1.751641533999987 ], [ 125.10303795700008, -1.736993096999868 ], [ 125.11491946700016, -1.692152601999851 ], [ 125.12029056100016, -1.682793877999927 ], [ 125.13070722700013, -1.68499114399981 ], [ 125.13746178500014, -1.689629815999808 ], [ 125.14226321700028, -1.694268487999864 ], [ 125.15015709700026, -1.697686455999872 ], [ 125.18523196700005, -1.703871351999851 ], [ 125.1953231130002, -1.721937757999854 ], [ 125.19646243600005, -1.744235934999892 ], [ 125.1914168630002, -1.782403252999927 ], [ 125.1967879570002, -1.788750908999873 ], [ 125.20834394600001, -1.791110934999836 ], [ 125.2202254570002, -1.788995049999812 ], [ 125.22543379000012, -1.782403252999927 ], [ 125.22730553500014, -1.77304452899989 ], [ 125.23161868600005, -1.761407158999816 ], [ 125.23975670700031, -1.744805596999868 ], [ 125.2534285820002, -1.732842705999929 ], [ 125.26872806100016, -1.728204033999873 ], [ 125.28402754000012, -1.731052341999941 ], [ 125.29810631600003, -1.74138762799987 ], [ 125.30005944100014, -1.750909112999864 ], [ 125.29363040500016, -1.760918877999814 ], [ 125.28492272200015, -1.771416924999869 ], [ 125.28077233200031, -1.782403252999927 ], [ 125.28484134200016, -1.785902601999851 ], [ 125.30583743600005, -1.777927341999884 ], [ 125.31478925900012, -1.778985283999873 ], [ 125.3198348320002, -1.793389580999815 ], [ 125.32162519600001, -1.864353123 ], [ 125.3183699880002, -1.882582289999846 ], [ 125.30884850400014, -1.884942315999808 ], [ 125.2739363940002, -1.873955987999864 ], [ 125.25123131600014, -1.873467705999872 ], [ 125.18824303500014, -1.881442966999828 ], [ 125.17953535200013, -1.88030364399981 ], [ 125.15845787900014, -1.875095309999892 ], [ 125.14763431100005, -1.873955987999864 ], [ 125.13754316500012, -1.876885674999869 ], [ 125.12094160200024, -1.890720309999892 ], [ 125.11003665500016, -1.895114841999941 ], [ 125.09115644600013, -1.893649997999887 ], [ 125.07081139400032, -1.888848565999808 ], [ 125.05046634200016, -1.887953382999854 ], [ 125.03101647200015, -1.898532809999949 ], [ 125.02263431100016, -1.916273695999848 ], [ 125.02116946700005, -1.933363539999903 ], [ 125.01351972700002, -1.944268487999807 ], [ 124.98658287900003, -1.943454684999892 ], [ 124.95923912900014, -1.922458591999828 ], [ 124.9462996750002, -1.919610283999873 ], [ 124.91456139400009, -1.922458591999828 ], [ 124.8911238940002, -1.917250257999854 ], [ 124.85328209700015, -1.896905205999929 ], [ 124.82829837300005, -1.895114841999941 ], [ 124.78598066500012, -1.907972914999903 ], [ 124.71159915500027, -1.952406507999797 ], [ 124.67115319100003, -1.97014739399981 ], [ 124.58171634200005, -1.994235934999949 ], [ 124.56519616000026, -2.001641533999816 ], [ 124.55445397200003, -2.00497812299983 ], [ 124.54322350400003, -2.006524346999868 ], [ 124.5141707690002, -2.00497812299983 ], [ 124.45281009200005, -2.012465101999794 ], [ 124.43091881600014, -2.011651299999812 ], [ 124.40601647200015, -2.004082940999865 ], [ 124.39722741000014, -1.99138762799987 ], [ 124.39258873800009, -1.974297783999873 ], [ 124.33594811300009, -1.888116143999866 ], [ 124.3291121750002, -1.870782158999873 ], [ 124.33139082100013, -1.826918226999851 ], [ 124.33822675900012, -1.80779387799987 ], [ 124.3525496750002, -1.789239190999865 ], [ 124.36890709700026, -1.750746351999794 ], [ 124.37305748800031, -1.705010674999869 ], [ 124.38493899800005, -1.667901299999926 ], [ 124.4248153000002, -1.655450127999814 ], [ 124.4423934250002, -1.654392184999949 ], [ 124.48861738400001, -1.64568450299987 ], [ 124.50326582100013, -1.638360283999987 ], [ 124.51807701900032, -1.626234632999797 ], [ 124.52654056100016, -1.625664971999811 ], [ 124.52955162900003, -1.635674737999807 ] ] ], [ [ [ 135.47730553500003, -1.58993906 ], [ 135.5830184250002, -1.613864841999884 ], [ 135.78646894600001, -1.62810637799987 ], [ 135.85596764400009, -1.643975518999866 ], [ 135.89673912900014, -1.648044528999833 ], [ 135.95728600400025, -1.631524346999868 ], [ 136.03248131600014, -1.651950778999947 ], [ 136.06031334700015, -1.64177825299987 ], [ 136.09888756600014, -1.654717705999815 ], [ 136.19125410200013, -1.653903904 ], [ 136.23218834700015, -1.662286065999865 ], [ 136.23698978000016, -1.666436455999872 ], [ 136.2456160820002, -1.678399346999811 ], [ 136.25269616000014, -1.682793877999927 ], [ 136.26351972700013, -1.683689059999892 ], [ 136.28785241000014, -1.682061455999872 ], [ 136.29704837300017, -1.686455987999864 ], [ 136.31177819100014, -1.697849216999941 ], [ 136.33269290500027, -1.709649346999868 ], [ 136.36817467500032, -1.724297783999873 ], [ 136.39031009200005, -1.72576262799987 ], [ 136.45394941500001, -1.717461846999981 ], [ 136.61890709700003, -1.737969658999816 ], [ 136.70460045700008, -1.730564059999836 ], [ 136.72315514400009, -1.734307549999983 ], [ 136.76075280000009, -1.748467705999929 ], [ 136.7768660820002, -1.751641533999987 ], [ 136.81446373800009, -1.754164320999905 ], [ 136.83082116000014, -1.758396091999884 ], [ 136.84848066500012, -1.76531340899993 ], [ 136.89926191500024, -1.794610283999816 ], [ 136.8994246750002, -1.799493096999811 ], [ 136.88835696700028, -1.802504164999903 ], [ 136.88135826900009, -1.816176039999846 ], [ 136.87232506600014, -1.819268487999807 ], [ 136.79420006600014, -1.820733330999872 ], [ 136.7597762380002, -1.826104424999869 ], [ 136.72982832100024, -1.826104424999869 ], [ 136.72559655000032, -1.829847914999959 ], [ 136.72250410200024, -1.839532158999816 ], [ 136.71501712300017, -1.847263278999947 ], [ 136.70484459700003, -1.852227471999868 ], [ 136.68287194100003, -1.856377862999864 ], [ 136.67432701900009, -1.861911716999941 ], [ 136.66635175900012, -1.868422132999854 ], [ 136.6567488940002, -1.873955987999864 ], [ 136.64486738400012, -1.876397393999923 ], [ 136.55298912900014, -1.867120049999869 ], [ 136.53256269600001, -1.867771091999884 ], [ 136.53256269600001, -1.873955987999864 ], [ 136.54004967500009, -1.879571221999981 ], [ 136.54615319100014, -1.889092705999872 ], [ 136.54639733200031, -1.89788176899981 ], [ 136.53630618600005, -1.90178801899981 ], [ 136.5249129570002, -1.899997653999833 ], [ 136.50660241000014, -1.890801690999865 ], [ 136.49854576900009, -1.888278903999833 ], [ 136.4863387380002, -1.888441664999903 ], [ 136.46583092500032, -1.89373137799987 ], [ 136.45394941500001, -1.895114841999941 ], [ 136.4438582690002, -1.892836195999905 ], [ 136.4130965500002, -1.881442966999828 ], [ 136.39714603000004, -1.87818775799991 ], [ 136.35743248800031, -1.864027601999965 ], [ 136.33765709700015, -1.86093515399989 ], [ 136.3320418630002, -1.86296965899993 ], [ 136.32300866000003, -1.871840101999851 ], [ 136.31714928500014, -1.873955987999864 ], [ 136.31706790500016, -1.874688408999873 ], [ 136.30844160200002, -1.876071872999887 ], [ 136.30030358200008, -1.876234632999854 ], [ 136.30046634200005, -1.873955987999864 ], [ 136.29029381600026, -1.880466403999947 ], [ 136.28386478000027, -1.886976820999848 ], [ 136.27865644600013, -1.89576588299991 ], [ 136.27320397200003, -1.90935637799987 ], [ 136.26636803500003, -1.90935637799987 ], [ 136.26091556100016, -1.896905205999929 ], [ 136.25269616000014, -1.892347914999903 ], [ 136.24268639400009, -1.894463799999926 ], [ 136.23218834700015, -1.90178801899981 ], [ 136.21607506600014, -1.873304945999905 ], [ 136.18482506600026, -1.855889580999872 ], [ 136.10865319100014, -1.839776299999869 ], [ 136.09831790500016, -1.839450778999833 ], [ 136.07715905000009, -1.840915622999887 ], [ 136.06714928500014, -1.839776299999869 ], [ 136.05811608200031, -1.835219007999854 ], [ 136.04322350400014, -1.822035414999903 ], [ 136.03638756600003, -1.819268487999807 ], [ 136.0141707690002, -1.818047783999816 ], [ 135.9975692070002, -1.814385674999926 ], [ 135.98414147200003, -1.80820077899989 ], [ 135.95736738400024, -1.792250257999854 ], [ 135.91236412900014, -1.771661065999865 ], [ 135.90259850400014, -1.768731377999814 ], [ 135.89486738400012, -1.757500908999816 ], [ 135.87623131600003, -1.753676039999903 ], [ 135.83432050900001, -1.751641533999987 ], [ 135.81568444100014, -1.744724216999884 ], [ 135.78386478000016, -1.727715752999814 ], [ 135.74878991000014, -1.723565362999864 ], [ 135.74154707100013, -1.720472914999903 ], [ 135.7285262380002, -1.706963799999812 ], [ 135.71802819100014, -1.703301690999865 ], [ 135.70582116000014, -1.704766533999816 ], [ 135.69092858200008, -1.71013762799987 ], [ 135.67994225400003, -1.705336195999905 ], [ 135.66830488400012, -1.694105726999794 ], [ 135.65609785200013, -1.690199476999794 ], [ 135.64616946700016, -1.693129164999903 ], [ 135.63160241000003, -1.699883721999925 ], [ 135.6162215500002, -1.70419687299983 ], [ 135.60474694100003, -1.700127862999807 ], [ 135.58082116000026, -1.684258721999981 ], [ 135.55453535200013, -1.683282158999873 ], [ 135.52662194100003, -1.686211846999811 ], [ 135.49789472700013, -1.682793877999927 ], [ 135.48389733200008, -1.674981377999814 ], [ 135.48023522200015, -1.666192315999922 ], [ 135.47868899800028, -1.655450127999814 ], [ 135.47120201900032, -1.64177825299987 ], [ 135.46599368600016, -1.640313408999816 ], [ 135.4492293630002, -1.642673434999892 ], [ 135.44320722700002, -1.64177825299987 ], [ 135.44068444100014, -1.635674737999807 ], [ 135.43962649800005, -1.62656015399989 ], [ 135.43620853000004, -1.618096612999977 ], [ 135.42652428500026, -1.614434502999814 ], [ 135.42221113400012, -1.610772393999866 ], [ 135.43392988400024, -1.603122653999947 ], [ 135.4497176440002, -1.59685637799987 ], [ 135.45753014400009, -1.597426039999846 ], [ 135.46355228000016, -1.589532158999987 ], [ 135.47730553500003, -1.58993906 ] ] ], [ [ [ 108.96420332100024, -1.573418877999814 ], [ 108.96753991000014, -1.587985934999949 ], [ 108.96436608200008, -1.604180596999811 ], [ 108.95728600400014, -1.619561455999929 ], [ 108.9482528000002, -1.631524346999868 ], [ 108.93327884200011, -1.640801690999808 ], [ 108.86980228000016, -1.662286065999865 ], [ 108.85816491000008, -1.663995049999869 ], [ 108.83122806099999, -1.662286065999865 ], [ 108.82837975399997, -1.656996351999851 ], [ 108.8252059250002, -1.645114841999828 ], [ 108.82341556100022, -1.63241952899989 ], [ 108.82439212300017, -1.624688408999873 ], [ 108.82984459700015, -1.615899346999868 ], [ 108.83228600400008, -1.605401299999812 ], [ 108.83155358200003, -1.595147393999866 ], [ 108.82748457100024, -1.586602471999981 ], [ 108.82105553500014, -1.583265882999854 ], [ 108.80420983200014, -1.584893487999977 ], [ 108.79330488400007, -1.580336195999905 ], [ 108.80713951900015, -1.565036716999884 ], [ 108.83106530000015, -1.55608489399981 ], [ 108.87598717500003, -1.546156507999854 ], [ 108.88689212300011, -1.539727471999811 ], [ 108.89283287900014, -1.534274997999887 ], [ 108.90056399800005, -1.532891533999873 ], [ 108.91684004000007, -1.53875090899993 ], [ 108.92855879000018, -1.544854424999812 ], [ 108.9557397800001, -1.563571872999887 ], [ 108.96420332100024, -1.573418877999814 ] ] ], [ [ [ 105.87574303499997, -1.489190362999807 ], [ 105.89429772199998, -1.490817966999828 ], [ 105.89437910200013, -1.490817966999828 ], [ 105.91374759200011, -1.494235934999836 ], [ 105.92172285200024, -1.504489841999941 ], [ 105.9275008470002, -1.518975518999923 ], [ 105.93946373800014, -1.535332940999922 ], [ 105.94760175900012, -1.538995049999983 ], [ 105.95883222700013, -1.539808851999794 ], [ 105.98047936300014, -1.53875090899993 ], [ 105.98707116000008, -1.542087497999887 ], [ 106.03394616000008, -1.575860283999873 ], [ 106.0415145190002, -1.58359140399989 ], [ 106.04558353000016, -1.594008070999848 ], [ 106.04444420700014, -1.604099216999828 ], [ 106.03443444100003, -1.613051039999846 ], [ 106.03191165500021, -1.624688408999873 ], [ 106.03191165500021, -1.665948174999926 ], [ 106.03549238400012, -1.678317966999828 ], [ 106.04371178500008, -1.686130466999828 ], [ 106.05290774800005, -1.691501559999892 ], [ 106.05933678500026, -1.69646575299987 ], [ 106.06373131599997, -1.705254815999808 ], [ 106.06934655000009, -1.723402601999794 ], [ 106.0730086600002, -1.730564059999836 ], [ 106.07894941500012, -1.736097914999846 ], [ 106.08570397200009, -1.740329684999892 ], [ 106.09107506600003, -1.745700778999833 ], [ 106.09343509200011, -1.75505950299987 ], [ 106.09449303500014, -1.767185153999947 ], [ 106.09839928500003, -1.77695077899989 ], [ 106.10580488400024, -1.783461196000019 ], [ 106.11793053500014, -1.785821221999868 ], [ 106.12696373800014, -1.790134372999887 ], [ 106.12647545700014, -1.799981377999984 ], [ 106.12273196700022, -1.811211846999868 ], [ 106.12134850400003, -1.819268487999807 ], [ 106.17457116000014, -1.879082940999979 ], [ 106.17945397199998, -1.888278903999833 ], [ 106.17481530000009, -1.898207289999846 ], [ 106.16236412900003, -1.963311455999985 ], [ 106.1626082690002, -2.00701262799987 ], [ 106.20069420700014, -2.178155205999872 ], [ 106.26417076900009, -2.351332289999959 ], [ 106.28907311300014, -2.393487237999864 ], [ 106.3188582690002, -2.431329033999873 ], [ 106.35401451900009, -2.462985934999836 ], [ 106.37086022200026, -2.472344658999873 ], [ 106.39616946700011, -2.48211028399993 ], [ 106.4191186860001, -2.484958591999884 ], [ 106.4292098320002, -2.47380950299987 ], [ 106.44109134200022, -2.471368096999811 ], [ 106.55339603000004, -2.510430596999868 ], [ 106.68295332100018, -2.532484632999967 ], [ 106.74838300900024, -2.557061455999872 ], [ 106.76905358200014, -2.560316664999903 ], [ 106.8154403000002, -2.560967705999872 ], [ 106.83326256600009, -2.566582940999865 ], [ 106.83326256600009, -2.580254815999808 ], [ 106.82642662899997, -2.586032809999892 ], [ 106.81869550900012, -2.586195570999905 ], [ 106.8097436860001, -2.585219007999854 ], [ 106.79908287900008, -2.587090752999814 ], [ 106.76596113400024, -2.605645440999865 ], [ 106.7553817070002, -2.608168226999851 ], [ 106.73804772200009, -2.614434502999814 ], [ 106.72193444100014, -2.629327080999929 ], [ 106.67481530000015, -2.699802341999828 ], [ 106.6119897800001, -2.870375257999854 ], [ 106.60377037900008, -2.910251559999836 ], [ 106.61304772200003, -2.94255950299987 ], [ 106.64893639400015, -2.963799737999864 ], [ 106.6599227220002, -2.965915622999887 ], [ 106.67432701900015, -2.966892184999836 ], [ 106.68295332100018, -2.970635674999983 ], [ 106.69255618600022, -2.979261976999851 ], [ 106.69825280000015, -2.988213799999812 ], [ 106.70582116, -2.995212497999887 ], [ 106.72087649800011, -2.997979424999869 ], [ 106.73845462300011, -3.004571221999811 ], [ 106.74577884200011, -3.020114841999828 ], [ 106.74496504000012, -3.038344007999797 ], [ 106.73829186300014, -3.053317966999828 ], [ 106.7475692070002, -3.068617445999962 ], [ 106.75196373800009, -3.07366301899981 ], [ 106.74447675900012, -3.080498955999872 ], [ 106.73568769600024, -3.076755466999884 ], [ 106.72828209700009, -3.082126559999892 ], [ 106.71957441500007, -3.090101820999905 ], [ 106.70728600400003, -3.094170830999872 ], [ 106.70036868600022, -3.092217705999815 ], [ 106.69369550900007, -3.088555596999868 ], [ 106.68702233200014, -3.086846612999864 ], [ 106.67066491000008, -3.096123955999815 ], [ 106.66529381600014, -3.092217705999815 ], [ 106.6613061860001, -3.085219007999967 ], [ 106.65577233200014, -3.080498955999872 ], [ 106.60124759200016, -3.071058851999851 ], [ 106.57374108200014, -3.076755466999884 ], [ 106.56641686300014, -3.101657809999949 ], [ 106.55648847700024, -3.09685637799987 ], [ 106.5527449880002, -3.094170830999872 ], [ 106.53223717500003, -3.105645440999808 ], [ 106.51710045700014, -3.09482187299983 ], [ 106.50757897200003, -3.072442315999808 ], [ 106.5044051440002, -3.049899997999944 ], [ 106.49968509200011, -3.038995049999869 ], [ 106.48902428500003, -3.030043226999851 ], [ 106.46705162900014, -3.015313408999816 ], [ 106.45899498800009, -3.004327080999985 ], [ 106.44703209700015, -2.981133721999868 ], [ 106.43604576900009, -2.970635674999983 ], [ 106.4165145190002, -2.965508721999868 ], [ 106.36866295700008, -2.966973565999922 ], [ 106.35035241000003, -2.960707289999846 ], [ 106.3020125660002, -2.91326262799987 ], [ 106.09400475399997, -2.840590101999965 ], [ 106.07390384200022, -2.836195570999905 ], [ 106.00245201900003, -2.830743096999868 ], [ 105.98650149800022, -2.821221612999921 ], [ 105.92253665500016, -2.71599700299987 ], [ 105.90756269600013, -2.674574476999908 ], [ 105.90162194099997, -2.628676040000016 ], [ 105.91236412900008, -2.585625908999873 ], [ 105.93262780000009, -2.541924737999864 ], [ 105.9443465500002, -2.498793226999965 ], [ 105.9288843110001, -2.456719658999873 ], [ 105.89747155000003, -2.436130466999884 ], [ 105.85938561300014, -2.420098565999865 ], [ 105.82878665500021, -2.395114841999884 ], [ 105.81902103, -2.347426039999903 ], [ 105.82553144600007, -2.318536065999979 ], [ 105.82593834700009, -2.307224216999884 ], [ 105.8234155610001, -2.297539971999868 ], [ 105.81470787900008, -2.282321872999887 ], [ 105.81055748800014, -2.265883070999848 ], [ 105.80079186300014, -2.245538018999866 ], [ 105.7985945970002, -2.234551690999922 ], [ 105.79908287900014, -2.200860283999816 ], [ 105.79574629000018, -2.171807549999926 ], [ 105.79029381600003, -2.159763278999833 ], [ 105.78044681100022, -2.150811455999872 ], [ 105.76441491000003, -2.142185154 ], [ 105.74756920700003, -2.136000257999854 ], [ 105.68873131600014, -2.127699476999851 ], [ 105.68384850400025, -2.125420830999985 ], [ 105.67367597700013, -2.116875908999873 ], [ 105.66944420700014, -2.11484140399989 ], [ 105.66309655000009, -2.115411065999865 ], [ 105.65219160200019, -2.120538018999923 ], [ 105.64828535200013, -2.121514580999872 ], [ 105.61622155000015, -2.117608330999872 ], [ 105.60743248800014, -2.11484140399989 ], [ 105.59376061300003, -2.103610934999892 ], [ 105.57764733200008, -2.077080987999864 ], [ 105.56576582100013, -2.066989841999884 ], [ 105.54224694100014, -2.081801039999846 ], [ 105.49122155000009, -2.098402601999851 ], [ 105.4702254570002, -2.108005467 ], [ 105.4503686860001, -2.12265390399989 ], [ 105.44109134200005, -2.123793226999965 ], [ 105.4218856130002, -2.121514580999872 ], [ 105.35694420700003, -2.121514580999872 ], [ 105.30640709700015, -2.135023695999848 ], [ 105.2983504570002, -2.131524346999868 ], [ 105.293142123, -2.126234632999797 ], [ 105.27149498800009, -2.094903252999814 ], [ 105.26791425900024, -2.087497653999833 ], [ 105.22982832100024, -2.070082289999903 ], [ 105.21290123800009, -2.066989841999884 ], [ 105.1789656910002, -2.06991952899989 ], [ 105.16114342500015, -2.073907158999873 ], [ 105.1474715500002, -2.080010674999869 ], [ 105.12794030000015, -2.044610283999987 ], [ 105.12549889400009, -2.004082940999865 ], [ 105.13591556099999, -1.965508721999868 ], [ 105.15430748800003, -1.935967705999815 ], [ 105.18360436300014, -1.916924737999807 ], [ 105.2983504570002, -1.873955987999864 ], [ 105.37566165500027, -1.82187265399989 ], [ 105.40235436300014, -1.783298434999949 ], [ 105.39454186300014, -1.737969658999816 ], [ 105.35523522200015, -1.715020440999922 ], [ 105.33545983200008, -1.697930596999925 ], [ 105.34302819100009, -1.690199476999794 ], [ 105.35108483200008, -1.686781507999797 ], [ 105.35132897200003, -1.678480726999794 ], [ 105.34603925900018, -1.658868096999868 ], [ 105.34986412900008, -1.648695570999905 ], [ 105.3591414720002, -1.643812757999854 ], [ 105.37029056100016, -1.640557549999869 ], [ 105.38021894600013, -1.634942315999979 ], [ 105.3837996750002, -1.629082940999865 ], [ 105.38933353000021, -1.613864841999884 ], [ 105.39454186300014, -1.607598565999808 ], [ 105.40015709700003, -1.606215101999851 ], [ 105.4128524100002, -1.607517184999836 ], [ 105.41871178500014, -1.604180596999811 ], [ 105.45964603000016, -1.562920830999872 ], [ 105.47169030000015, -1.558363539999903 ], [ 105.51807701900015, -1.559828382999854 ], [ 105.53679446700022, -1.555271091999828 ], [ 105.54639733200008, -1.549004815999865 ], [ 105.5537215500002, -1.541110935 ], [ 105.56576582100013, -1.531914971999811 ], [ 105.59408613400024, -1.525567315999865 ], [ 105.61101321700022, -1.540215752999814 ], [ 105.6189070970002, -1.565199476999851 ], [ 105.62110436300009, -1.590264580999815 ], [ 105.62875410200024, -1.614027601999851 ], [ 105.64844811300014, -1.633233330999872 ], [ 105.67497806100022, -1.647230726999851 ], [ 105.70289147200009, -1.655450127999814 ], [ 105.69141686300003, -1.671319268999866 ], [ 105.65170332100018, -1.706963799999812 ], [ 105.64975019600018, -1.72185637799987 ], [ 105.66309655000009, -1.739678643999866 ], [ 105.68181399800017, -1.755791924999812 ], [ 105.69556725399997, -1.76531340899993 ], [ 105.71509850400008, -1.773532809999892 ], [ 105.72820071700011, -1.77255624799983 ], [ 105.7412215500002, -1.767998955999985 ], [ 105.76099694100014, -1.76531340899993 ], [ 105.76563561300009, -1.768975518999866 ], [ 105.77263431100022, -1.786797783999816 ], [ 105.77808678499997, -1.792657158999873 ], [ 105.78541100399997, -1.794040622999887 ], [ 105.81275475400008, -1.792657158999873 ], [ 105.8046981130002, -1.772637627999814 ], [ 105.7916772800001, -1.753676039999903 ], [ 105.76099694100014, -1.720879815999865 ], [ 105.75098717500003, -1.703057549999812 ], [ 105.75082441500007, -1.683526299999926 ], [ 105.7575789720002, -1.645196221999811 ], [ 105.7546492850002, -1.642673434999892 ], [ 105.73707116, -1.614434502999814 ], [ 105.73389733200008, -1.605238539999846 ], [ 105.7317000660002, -1.589043877999814 ], [ 105.72974694100014, -1.580336195999905 ], [ 105.72396894600018, -1.566094658999816 ], [ 105.71664472700019, -1.552422783999873 ], [ 105.70728600400008, -1.540622654 ], [ 105.69556725399997, -1.531914971999811 ], [ 105.71998131600014, -1.524183851999794 ], [ 105.80909264400009, -1.525648695999848 ], [ 105.83432050900018, -1.517836195999905 ], [ 105.87574303499997, -1.489190362999807 ] ] ], [ [ [ 123.5688582690002, -1.600844007999854 ], [ 123.58130944100014, -1.602634372999944 ], [ 123.59034264400032, -1.598728122999887 ], [ 123.60059655000009, -1.603285415000016 ], [ 123.61036217500032, -1.611586195999905 ], [ 123.61646569100014, -1.62460702899989 ], [ 123.61597741000014, -1.640313408999816 ], [ 123.61410566500012, -1.652439059999949 ], [ 123.60873457100013, -1.674248955999872 ], [ 123.60865319100014, -1.688734632999854 ], [ 123.60132897200015, -1.702813408999987 ], [ 123.5864363940002, -1.712985934999892 ], [ 123.57927493600005, -1.71607838299991 ], [ 123.57488040500016, -1.719984632999797 ], [ 123.56421959700003, -1.721937757999854 ], [ 123.55396569100026, -1.720635674999869 ], [ 123.5454207690002, -1.72185637799987 ], [ 123.53435306100016, -1.716566664999959 ], [ 123.52214603000004, -1.705824476999851 ], [ 123.51514733200008, -1.703383070999848 ], [ 123.5117293630002, -1.709405205999872 ], [ 123.50367272200015, -1.712823174999869 ], [ 123.49350019600013, -1.709649346999868 ], [ 123.48731530000009, -1.699965101999908 ], [ 123.48487389400009, -1.693536065999808 ], [ 123.47779381600014, -1.668633721999981 ], [ 123.47559655000009, -1.649102471999925 ], [ 123.4785262380002, -1.634535414999959 ], [ 123.47836347700013, -1.619561455999929 ], [ 123.48080488400001, -1.615004164999903 ], [ 123.48275800900012, -1.61044687299983 ], [ 123.48804772200015, -1.603285415000016 ], [ 123.49268639400032, -1.594984632999854 ], [ 123.49146569100003, -1.584730726999908 ], [ 123.48503665500016, -1.57968515399989 ], [ 123.47950280000009, -1.577080987999864 ], [ 123.47689863400001, -1.570245049999926 ], [ 123.47673587300005, -1.562758070999905 ], [ 123.47779381600014, -1.55771249799983 ], [ 123.48194420700031, -1.544691664999846 ], [ 123.49089603000027, -1.52450937299983 ], [ 123.50074303500014, -1.509372653999833 ], [ 123.51140384200016, -1.505629165000016 ], [ 123.52068118600016, -1.504815362999807 ], [ 123.52523847700002, -1.498223565999808 ], [ 123.52328535200024, -1.482679945999905 ], [ 123.52906334700003, -1.480238539999903 ], [ 123.53736412900003, -1.485039971999868 ], [ 123.54468834700015, -1.497002862999807 ], [ 123.5600692070002, -1.545993747999887 ], [ 123.55925540500004, -1.555759373 ], [ 123.55591881600003, -1.563409112999864 ], [ 123.55738366000014, -1.58114999799983 ], [ 123.5688582690002, -1.600844007999854 ] ] ], [ [ [ 135.12867272200003, -1.476739190999865 ], [ 135.1508895190002, -1.483005466999828 ], [ 135.20476321700016, -1.47771575299987 ], [ 135.2275496750002, -1.48756275799991 ], [ 135.2392684250002, -1.48967864399981 ], [ 135.28565514400009, -1.476739190999865 ], [ 135.29664147200003, -1.480401299999869 ], [ 135.30502363400001, -1.485284112999921 ], [ 135.31568444100003, -1.48788827899989 ], [ 135.33399498800009, -1.484144789999903 ], [ 135.31185957100001, -1.510186455999872 ], [ 135.27540123800031, -1.522230726999965 ], [ 135.18685957100013, -1.525648695999848 ], [ 135.10434004000012, -1.518243096999868 ], [ 135.09685306100027, -1.508558851999851 ], [ 135.09839928500014, -1.489027601999965 ], [ 135.10906009200016, -1.473809502999984 ], [ 135.12867272200003, -1.476739190999865 ] ] ], [ [ [ 127.33708743600016, -1.353773695999848 ], [ 127.3457137380002, -1.365655205999872 ], [ 127.35417728000004, -1.365329684999892 ], [ 127.36255944100026, -1.362562757999797 ], [ 127.37110436300009, -1.367445570999905 ], [ 127.3813582690002, -1.397067966999828 ], [ 127.37875410200002, -1.40545012799987 ], [ 127.36117597700013, -1.408379815999808 ], [ 127.34782962300017, -1.412774346999868 ], [ 127.32667076900009, -1.431817315999865 ], [ 127.31666100400014, -1.436293226999851 ], [ 127.28419030000009, -1.425388278999947 ], [ 127.28581790500016, -1.400323174999869 ], [ 127.30453535200013, -1.377699476999794 ], [ 127.32349694100003, -1.37428150799991 ], [ 127.32545006600014, -1.368829033999873 ], [ 127.32740319100014, -1.365411065999865 ], [ 127.32886803500026, -1.361260674999812 ], [ 127.33025149800017, -1.353773695999848 ], [ 127.33708743600016, -1.353773695999848 ] ] ], [ [ [ 127.83082116000014, -1.431573174999869 ], [ 127.85173587300005, -1.436293226999851 ], [ 127.85840905000032, -1.434014580999872 ], [ 127.8754988940002, -1.424004815999808 ], [ 127.8857528000002, -1.422051690999922 ], [ 127.8989363940002, -1.426690362999864 ], [ 127.91911868600027, -1.445733330999872 ], [ 127.92986087300017, -1.449965101999794 ], [ 128.00806725400014, -1.504571221999925 ], [ 128.02662194100014, -1.529473565999865 ], [ 128.03532962300028, -1.53875090899993 ], [ 128.04672285200013, -1.546319268999866 ], [ 128.07064863400001, -1.556735934999949 ], [ 128.08033287900014, -1.562920830999872 ], [ 128.08961022200003, -1.567315362999921 ], [ 128.09839928500014, -1.565687757999797 ], [ 128.10670006600014, -1.561944268999866 ], [ 128.11451256600026, -1.559828382999854 ], [ 128.12631269600001, -1.56365325299987 ], [ 128.13461347700013, -1.572849216999828 ], [ 128.14519290500004, -1.594008070999848 ], [ 128.15902754000024, -1.636976821000019 ], [ 128.15113366000026, -1.669691664999846 ], [ 128.1264754570002, -1.693617445999905 ], [ 128.09058678500014, -1.71013762799987 ], [ 128.05152428500003, -1.714532158999873 ], [ 127.93344160200024, -1.682793877999927 ], [ 127.91309655000009, -1.682386976999908 ], [ 127.8769637380002, -1.693454684999836 ], [ 127.85474694100014, -1.69646575299987 ], [ 127.70329837300017, -1.690199476999794 ], [ 127.68458092500032, -1.695570570999848 ], [ 127.66968834700015, -1.707289320999905 ], [ 127.65805097700002, -1.719008071000019 ], [ 127.64869225400014, -1.724297783999873 ], [ 127.5688582690002, -1.732191664999959 ], [ 127.53272545700008, -1.731377862999977 ], [ 127.4941512380002, -1.717461846999981 ], [ 127.43262780000032, -1.686455987999864 ], [ 127.37867272200003, -1.632256768999923 ], [ 127.38306725400003, -1.610609632999797 ], [ 127.39861087300005, -1.573500257999797 ], [ 127.39828535200002, -1.554294528999947 ], [ 127.3964949880002, -1.540297132999797 ], [ 127.39926191500012, -1.527601820999905 ], [ 127.41285241000003, -1.511407158999873 ], [ 127.40357506600026, -1.491631768999866 ], [ 127.40943444100014, -1.473402601999965 ], [ 127.42009524800005, -1.45631275799991 ], [ 127.4257918630002, -1.439385674999926 ], [ 127.42839603000004, -1.41513437299983 ], [ 127.43531334700003, -1.412204684999836 ], [ 127.4599715500002, -1.42888762799987 ], [ 127.48170006600014, -1.448174737999807 ], [ 127.48780358200008, -1.449965101999794 ], [ 127.49390709700026, -1.444756768999866 ], [ 127.51099694100003, -1.421319268999923 ], [ 127.51465905000009, -1.412204684999836 ], [ 127.52149498800009, -1.401055596999811 ], [ 127.62452233200031, -1.329522393999866 ], [ 127.63428795700008, -1.328708591999828 ], [ 127.71355228000004, -1.344984632999797 ], [ 127.74105879000012, -1.354750257999854 ], [ 127.76539147200015, -1.368422132999854 ], [ 127.77588951900032, -1.384454033999873 ], [ 127.78484134200016, -1.402439059999892 ], [ 127.8056746750002, -1.419203382999797 ], [ 127.83082116000014, -1.431573174999869 ] ] ], [ [ [ 109.1769311860001, -1.278497002999984 ], [ 109.14421634200005, -1.311455987999864 ], [ 109.13851972700007, -1.314141533999816 ], [ 109.13599694100009, -1.309177341999941 ], [ 109.13379967500015, -1.297133070999848 ], [ 109.12842858200014, -1.296563408999987 ], [ 109.12159264400009, -1.299899997999887 ], [ 109.11491946700016, -1.298516533999816 ], [ 109.11573326900015, -1.30388762799987 ], [ 109.10824629000018, -1.304457289999846 ], [ 109.10075931100022, -1.300551039999846 ], [ 109.1013289720002, -1.292413018999923 ], [ 109.10792076900015, -1.284600518999866 ], [ 109.1147567070002, -1.280205987999864 ], [ 109.12281334700015, -1.278497002999984 ], [ 109.13257897200015, -1.278008721999981 ], [ 109.1437280610001, -1.273532809999892 ], [ 109.1613061860001, -1.256605726999851 ], [ 109.17017662899997, -1.257582289999903 ], [ 109.18189537900008, -1.266208591999884 ], [ 109.1769311860001, -1.278497002999984 ] ] ], [ [ [ 127.69760175900012, -1.231133721999811 ], [ 127.6928817070002, -1.249444268999866 ], [ 127.6806746750002, -1.264255466999884 ], [ 127.66602623800031, -1.271905205999872 ], [ 127.64584394600001, -1.270603122999887 ], [ 127.5903426440002, -1.243910414999959 ], [ 127.55258222700002, -1.236911716999884 ], [ 127.53150475400025, -1.23788827899989 ], [ 127.52214603000016, -1.247735283999987 ], [ 127.51490319100014, -1.262139580999929 ], [ 127.49830162900014, -1.259209893999923 ], [ 127.47885175900012, -1.249607028999833 ], [ 127.46338951900032, -1.243910414999959 ], [ 127.46070397200015, -1.235772393999866 ], [ 127.47388756600014, -1.217705987999864 ], [ 127.50163821700016, -1.189385674999869 ], [ 127.51644941500024, -1.179294528999947 ], [ 127.53150475400025, -1.172621351999851 ], [ 127.54721113400012, -1.171075127999814 ], [ 127.61019941500012, -1.193129164999903 ], [ 127.62745201900009, -1.207614841999884 ], [ 127.67448978000016, -1.209730726999908 ], [ 127.68995201900009, -1.213799737999864 ], [ 127.69760175900012, -1.231133721999811 ] ] ], [ [ [ 109.23414147200009, -1.224541924999869 ], [ 109.22339928500003, -1.227146091999941 ], [ 109.21851647200009, -1.220391533999816 ], [ 109.21851647200009, -1.20663827899989 ], [ 109.21998131600014, -1.198011976999794 ], [ 109.22388756600003, -1.191338799999869 ], [ 109.24244225400014, -1.174411716999884 ], [ 109.2487085300001, -1.170830987999864 ], [ 109.2546492850002, -1.16936614399981 ], [ 109.26490319100003, -1.174981377999814 ], [ 109.26514733200008, -1.187920830999815 ], [ 109.25977623800014, -1.202243747999887 ], [ 109.25294030000009, -1.212497653999947 ], [ 109.24577884200016, -1.217868747999887 ], [ 109.23414147200009, -1.224541924999869 ] ] ], [ [ [ 123.20101972700013, -1.155205987999807 ], [ 123.2461043630002, -1.223402601999851 ], [ 123.23707116000003, -1.232679945999848 ], [ 123.23047936300031, -1.24179452899989 ], [ 123.22217858200008, -1.248711846999868 ], [ 123.20785566500012, -1.251397393999866 ], [ 123.20183353000016, -1.256524346999868 ], [ 123.19874108200008, -1.268731377999814 ], [ 123.19760175900012, -1.295505466999828 ], [ 123.20167076900009, -1.307305596999925 ], [ 123.2104598320002, -1.316827080999872 ], [ 123.21998131600014, -1.324965101999908 ], [ 123.22575931100016, -1.332696221999811 ], [ 123.22803795700008, -1.348402601999794 ], [ 123.22779381600014, -1.379652601999851 ], [ 123.23194420700008, -1.394707940999865 ], [ 123.25538170700008, -1.377129815999865 ], [ 123.27214603000016, -1.354750257999854 ], [ 123.3007918630002, -1.305922132999854 ], [ 123.30469811300009, -1.302829684999836 ], [ 123.31657962300017, -1.296482029 ], [ 123.32113691500012, -1.292413018999923 ], [ 123.33545983200031, -1.271905205999872 ], [ 123.34441165500027, -1.242608330999872 ], [ 123.35222415500016, -1.229180596999981 ], [ 123.36597741000026, -1.223402601999851 ], [ 123.38363691500001, -1.224297783999816 ], [ 123.39283287900014, -1.223565362999864 ], [ 123.40007571700016, -1.220391533999816 ], [ 123.40691165500027, -1.219496351999851 ], [ 123.40992272200003, -1.22820403399993 ], [ 123.41179446700028, -1.23984140399989 ], [ 123.4140731130002, -1.247735283999987 ], [ 123.42847741000014, -1.257745049999869 ], [ 123.43523196700005, -1.250664971999811 ], [ 123.44166100400014, -1.23772551899981 ], [ 123.4550887380002, -1.230889580999985 ], [ 123.46501712300005, -1.236260674999869 ], [ 123.4868270190002, -1.259209893999923 ], [ 123.50310306100016, -1.264418226999851 ], [ 123.52173912900003, -1.266289971999868 ], [ 123.5390731130002, -1.272719007999797 ], [ 123.55095462300017, -1.28476327899989 ], [ 123.5537215500002, -1.303399346999811 ], [ 123.55176842500009, -1.324314059999892 ], [ 123.53842207100024, -1.360609632999967 ], [ 123.53345787900014, -1.381117445999905 ], [ 123.53484134200016, -1.412286065999808 ], [ 123.53345787900014, -1.422051690999922 ], [ 123.52857506600014, -1.43303801899981 ], [ 123.50310306100016, -1.46005624799983 ], [ 123.46216881600014, -1.494317315999808 ], [ 123.45386803500003, -1.498793226999794 ], [ 123.43572024800005, -1.50310637799987 ], [ 123.42758222700002, -1.507989190999865 ], [ 123.40837649800005, -1.516534112999864 ], [ 123.38119550900024, -1.498304945999905 ], [ 123.36215254000012, -1.511407158999873 ], [ 123.35718834700015, -1.472914320999962 ], [ 123.3501082690002, -1.45671965899993 ], [ 123.33179772200015, -1.449965101999794 ], [ 123.32764733200031, -1.444594007999854 ], [ 123.32813561300031, -1.432875257999854 ], [ 123.32683353000004, -1.421156507999854 ], [ 123.31771894600013, -1.415785414999903 ], [ 123.30551191500012, -1.416110934999892 ], [ 123.29639733200008, -1.417657158999873 ], [ 123.28858483200008, -1.421563408999873 ], [ 123.28028405000009, -1.42888762799987 ], [ 123.25879967500009, -1.46599700299987 ], [ 123.24984785200013, -1.510674737999864 ], [ 123.25228925900001, -1.600844007999854 ], [ 123.25049889400009, -1.622735283999816 ], [ 123.24333743600005, -1.63241952899989 ], [ 123.23552493600016, -1.627048434999892 ], [ 123.23194420700008, -1.604180596999811 ], [ 123.22681725400025, -1.59335702899989 ], [ 123.21517988400012, -1.595472914999903 ], [ 123.17839603000027, -1.622491143999866 ], [ 123.1699324880002, -1.619398695999962 ], [ 123.16439863400024, -1.609633070999905 ], [ 123.15674889400009, -1.600844007999854 ], [ 123.12387129000001, -1.591485283999816 ], [ 123.11589603000004, -1.586602471999981 ], [ 123.11068769600013, -1.576918226999794 ], [ 123.10914147200003, -1.565687757999797 ], [ 123.11182701900009, -1.556329033999987 ], [ 123.11890709700026, -1.552422783999873 ], [ 123.1308699880002, -1.547621351999794 ], [ 123.1772567070002, -1.518243096999868 ], [ 123.18482506600014, -1.485609632999854 ], [ 123.1635848320002, -1.353773695999848 ], [ 123.16488691500001, -1.322035414999903 ], [ 123.1635848320002, -1.312188408999987 ], [ 123.15943444100014, -1.306247653999833 ], [ 123.15235436300031, -1.300551039999846 ], [ 123.14551842500009, -1.29998137799987 ], [ 123.13697350400025, -1.324476820999905 ], [ 123.1235457690002, -1.332777601999794 ], [ 123.10792076900009, -1.338555596999868 ], [ 123.09457441500012, -1.346368096999868 ], [ 123.07195071700016, -1.393975518999866 ], [ 123.0639754570002, -1.401625257999854 ], [ 123.05339603000016, -1.408461195999962 ], [ 123.04517662900014, -1.424493096999981 ], [ 123.0332137380002, -1.456231377999927 ], [ 123.01392662900014, -1.485609632999854 ], [ 122.9931746750002, -1.509209893999866 ], [ 122.91993248800009, -1.574476820999848 ], [ 122.89584394600001, -1.589532158999987 ], [ 122.8740340500002, -1.584567966999941 ], [ 122.8120223320002, -1.443617445999848 ], [ 122.80738366000026, -1.401625257999854 ], [ 122.81088300900012, -1.358086846999925 ], [ 122.8208113940002, -1.313734632999797 ], [ 122.83611087300017, -1.274021091999884 ], [ 122.89869225400014, -1.184340101999851 ], [ 122.91382897200003, -1.176364841999884 ], [ 122.93580162900003, -1.179864190999808 ], [ 122.97152754000012, -1.194431247999944 ], [ 122.9853621750002, -1.196058851999965 ], [ 122.99732506600014, -1.190362237999864 ], [ 123.0171004570002, -1.172621351999851 ], [ 123.02979576900009, -1.168877862999864 ], [ 123.07422936300009, -1.162692966999941 ], [ 123.11207116000003, -1.162692966999941 ], [ 123.11833743600016, -1.165785414999846 ], [ 123.12517337300028, -1.172784112999864 ], [ 123.13379967500009, -1.179864190999808 ], [ 123.14625084700015, -1.183200778999833 ], [ 123.15935306100016, -1.179294528999947 ], [ 123.1630965500002, -1.169854424999812 ], [ 123.16431725400025, -1.158379815999865 ], [ 123.1704207690002, -1.148370049999983 ], [ 123.18287194100026, -1.142266533999873 ], [ 123.1894637380002, -1.145277601999908 ], [ 123.19418379000012, -1.151625257999854 ], [ 123.20101972700013, -1.155205987999807 ] ] ], [ [ [ 129.96070397200003, -1.176364841999884 ], [ 129.95329837300028, -1.189629815999865 ], [ 129.92725670700031, -1.210381768999923 ], [ 129.92530358200008, -1.205173434999836 ], [ 129.92269941500012, -1.200860283999816 ], [ 129.92074629000012, -1.195977471999981 ], [ 129.9204207690002, -1.189385674999869 ], [ 129.88209069100014, -1.219659112999864 ], [ 129.85922285200013, -1.233168226999851 ], [ 129.83090254000012, -1.237074476999851 ], [ 129.87256920700008, -1.210219007999854 ], [ 129.8794051440002, -1.202894789999846 ], [ 129.87419681100016, -1.19695403399993 ], [ 129.8618270190002, -1.200453382999854 ], [ 129.8496199880002, -1.206963799999812 ], [ 129.84457441500001, -1.210381768999923 ], [ 129.83326256600014, -1.211846612999807 ], [ 129.76270592500032, -1.210381768999923 ], [ 129.74390709700015, -1.199883721999868 ], [ 129.74878991000014, -1.185804945999905 ], [ 129.76742597700013, -1.172051690999808 ], [ 129.85865319100014, -1.142022393999866 ], [ 129.8794051440002, -1.141534112999864 ], [ 129.89633222700002, -1.154229424999812 ], [ 129.9170028000002, -1.156426690999808 ], [ 129.93767337300005, -1.156508070999905 ], [ 129.95443769600013, -1.162692966999941 ], [ 129.96070397200003, -1.176364841999884 ] ] ], [ [ [ 109.60629316500024, -0.974704684999892 ], [ 109.6396590500002, -0.996270440999865 ], [ 109.65674889400009, -1.003676039999846 ], [ 109.67457116000014, -1.003594658999987 ], [ 109.68620853000021, -0.996840101999851 ], [ 109.69507897199998, -0.988539320999848 ], [ 109.70460045700008, -0.98381926899998 ], [ 109.72348066500012, -0.987074476999794 ], [ 109.73926842500009, -0.998711846999925 ], [ 109.75131269600018, -1.014906507999854 ], [ 109.7597762380002, -1.031670830999872 ], [ 109.7597762380002, -1.103936455999872 ], [ 109.76295006600009, -1.109551690999865 ], [ 109.77003014400003, -1.11492278399993 ], [ 109.7771102220002, -1.121758721999868 ], [ 109.78028405000009, -1.131605726999965 ], [ 109.77686608200008, -1.140801690999865 ], [ 109.7680770190002, -1.146905205999929 ], [ 109.74610436300009, -1.155205987999807 ], [ 109.69825280000003, -1.19052499799983 ], [ 109.68775475400025, -1.196058851999965 ], [ 109.67448978000016, -1.199395440999865 ], [ 109.60132897200009, -1.230075778999947 ], [ 109.56950931100016, -1.247735283999987 ], [ 109.53598066500012, -1.259047132999854 ], [ 109.50245201900009, -1.292168877999927 ], [ 109.47868899800005, -1.298516533999816 ], [ 109.4655867850002, -1.293389580999929 ], [ 109.44499759200005, -1.28134531 ], [ 109.42554772200015, -1.266859632999854 ], [ 109.41724694099997, -1.254489841999828 ], [ 109.42066491000008, -1.231622002999814 ], [ 109.4445093110001, -1.168877862999864 ], [ 109.45232181100005, -1.00400156 ], [ 109.45923912900008, -0.985446873 ], [ 109.47543379000018, -0.976983330999872 ], [ 109.49122155000015, -0.979180596999868 ], [ 109.5251570970002, -0.988457940999865 ], [ 109.54420006600009, -0.990655205999872 ], [ 109.55616295700003, -0.987481377999814 ], [ 109.57715905000009, -0.973321221999868 ], [ 109.5879012380002, -0.970310154 ], [ 109.60629316500024, -0.974704684999892 ] ] ], [ [ [ 128.39275149800005, -1.035414321000019 ], [ 128.37289472700024, -1.037692966999884 ], [ 128.36508222700024, -1.036390882999797 ], [ 128.36890709700015, -1.034112237999807 ], [ 128.36166425900024, -1.033623955999929 ], [ 128.34376061300009, -1.029961846999868 ], [ 128.33033287900003, -1.020196221999868 ], [ 128.32683353000016, -1.006605726999794 ], [ 128.3296004570002, -0.991631768999866 ], [ 128.3296004570002, -0.978692315999865 ], [ 128.30543053500026, -0.962172132999854 ], [ 128.30046634200005, -0.955498955999815 ], [ 128.30152428500014, -0.951104424999926 ], [ 128.30616295700008, -0.943291924999869 ], [ 128.31421959700003, -0.939385674999869 ], [ 128.32349694100026, -0.941338799999869 ], [ 128.33090254000001, -0.949151299999869 ], [ 128.3354598320002, -0.960870049999869 ], [ 128.3408309250002, -0.969984632999967 ], [ 128.35808353000016, -0.979668877999814 ], [ 128.36736087300005, -0.98837656 ], [ 128.40349368600016, -0.995293877999814 ], [ 128.41146894600013, -1.009535414999903 ], [ 128.4067488940002, -1.025974216999884 ], [ 128.39275149800005, -1.035414321000019 ] ] ], [ [ [ 134.92798912900014, -1.072035414999846 ], [ 134.94361412900003, -1.079522393999923 ], [ 134.96192467500009, -1.070570570999905 ], [ 134.9785262380002, -1.027601820999905 ], [ 134.99822024800028, -1.018649998 ], [ 134.99301191500012, -1.033298434999892 ], [ 134.9912215500002, -1.049248955999929 ], [ 134.99138431100016, -1.082940362999807 ], [ 134.95671634200028, -1.12851327899989 ], [ 134.94255618600016, -1.133965752999814 ], [ 134.92579186300009, -1.135511976999851 ], [ 134.89210045700008, -1.134698174999869 ], [ 134.8784285820002, -1.130791924999926 ], [ 134.86353600400025, -1.121026299999812 ], [ 134.85157311300031, -1.108656507999854 ], [ 134.83513431100005, -1.07146575299987 ], [ 134.81283613400012, -1.049899997999944 ], [ 134.80005944100014, -1.027764580999872 ], [ 134.8164168630002, -1.000664971999981 ], [ 134.81853274800017, -0.995782158999873 ], [ 134.82007897200003, -0.976983330999872 ], [ 134.82593834700015, -0.965752862999921 ], [ 134.82984459700015, -0.960625908999816 ], [ 134.83375084700015, -0.956638278999833 ], [ 134.84913170700008, -0.944431247999887 ], [ 134.8628035820002, -0.937595309999949 ], [ 134.87777754000012, -0.936130467 ], [ 134.92359459700015, -0.949965101999908 ], [ 134.9375106130002, -0.957614841999828 ], [ 134.94361412900003, -0.966892184999892 ], [ 134.94556725400025, -0.975192966999884 ], [ 134.95460045700008, -0.990655205999872 ], [ 134.95671634200028, -1.000664971999981 ], [ 134.95573978000004, -1.008884372999887 ], [ 134.95142662900003, -1.024346612999864 ], [ 134.95045006600026, -1.035332940999865 ], [ 134.9321395190002, -1.057712497999887 ], [ 134.92798912900014, -1.072035414999846 ] ] ], [ [ [ 98.917979363000143, -0.940118096999868 ], [ 98.937510613000029, -0.960056247999887 ], [ 98.945811394000202, -0.984633070999962 ], [ 98.939300977000244, -1.003676039999846 ], [ 98.932383660000141, -0.996840101999851 ], [ 98.924815300000091, -0.992445570999848 ], [ 98.916026238000143, -0.990492445999905 ], [ 98.905284050000205, -0.990655205999872 ], [ 98.912933790000238, -1.006117445999905 ], [ 98.921885613000086, -1.017510674999983 ], [ 98.929453972000204, -1.029961846999868 ], [ 98.932465040000125, -1.049004815999979 ], [ 98.938324415000238, -1.065118096999925 ], [ 98.952403191000201, -1.075453382999854 ], [ 98.968109571000184, -1.08367278399993 ], [ 98.980316602000244, -1.093682549999869 ], [ 98.989268425000091, -1.111097914999903 ], [ 99.001719596999976, -1.144707940999922 ], [ 99.01099694100003, -1.158868096999868 ], [ 99.026621941000201, -1.174248955999872 ], [ 99.032562696000127, -1.182549737999864 ], [ 99.034922722000204, -1.192803643999923 ], [ 99.036387566000087, -1.205498955999872 ], [ 99.040375196000127, -1.21013762799987 ], [ 99.047048373000109, -1.213799737999864 ], [ 99.06430097700013, -1.234551690999865 ], [ 99.06763756600003, -1.24138762799987 ], [ 99.069590691000087, -1.251397393999866 ], [ 99.065196160000198, -1.251885674999812 ], [ 99.057383660000198, -1.261488540000016 ], [ 99.053070509000122, -1.272637627999814 ], [ 99.059092644000202, -1.278008721999981 ], [ 99.07764733200014, -1.283379815999865 ], [ 99.08741295700014, -1.296807549999812 ], [ 99.096446160000141, -1.332696221999811 ], [ 99.116709832000083, -1.366631768999866 ], [ 99.14405358200014, -1.389092705999872 ], [ 99.164724155000044, -1.414239190999865 ], [ 99.16529381600003, -1.456231377999927 ], [ 99.155772332000026, -1.451267184999892 ], [ 99.130544467000163, -1.42888762799987 ], [ 99.124278191000201, -1.42888762799987 ], [ 99.130625847000147, -1.448174737999807 ], [ 99.145843946000127, -1.469414971999868 ], [ 99.178884311000161, -1.504571221999925 ], [ 99.188243035000198, -1.510349216999884 ], [ 99.197032096999976, -1.512872002999814 ], [ 99.203623894000145, -1.517266533999816 ], [ 99.20630944100003, -1.52890390399989 ], [ 99.20630944100003, -1.55608489399981 ], [ 99.209727410000141, -1.572930596999811 ], [ 99.219411655000215, -1.579766533999873 ], [ 99.233653191000087, -1.580824476999794 ], [ 99.251231316000144, -1.580336195999905 ], [ 99.262054884000236, -1.586683851999965 ], [ 99.272471550000205, -1.601820570999962 ], [ 99.278086785000028, -1.620049737999807 ], [ 99.274424675000091, -1.634942315999979 ], [ 99.286875847000204, -1.65374114399981 ], [ 99.294281446000184, -1.686211846999811 ], [ 99.292002800000091, -1.718926690999865 ], [ 99.274424675000091, -1.737969658999816 ], [ 99.261485222000147, -1.669691664999846 ], [ 99.254161004000252, -1.654473565999865 ], [ 99.22673587300028, -1.614434502999814 ], [ 99.214040561000047, -1.623630466999884 ], [ 99.20875084700009, -1.625746351999794 ], [ 99.200043165000068, -1.62810637799987 ], [ 99.21078535200013, -1.638929945999848 ], [ 99.245371941000201, -1.715508721999925 ], [ 99.255056186000047, -1.756036065999865 ], [ 99.254893425000205, -1.772067966999828 ], [ 99.2441512380002, -1.778985283999873 ], [ 99.230804884000236, -1.777032158999873 ], [ 99.208181186000274, -1.770603122999887 ], [ 99.182139519000202, -1.773695570999848 ], [ 99.164561394000202, -1.778415622999887 ], [ 99.148203971999976, -1.785821221999868 ], [ 99.134287957000083, -1.79607512799987 ], [ 99.118500196000241, -1.802341403999833 ], [ 99.100596550000205, -1.799411716999828 ], [ 98.985687696000184, -1.740004164999846 ], [ 98.960134311000218, -1.713067315999922 ], [ 98.898692254000139, -1.687758070999848 ], [ 98.884776238000143, -1.679375908999873 ], [ 98.843028191000087, -1.621270440999865 ], [ 98.838145379000252, -1.617852471999925 ], [ 98.826426629000139, -1.61248137799987 ], [ 98.822601759000236, -1.607598565999808 ], [ 98.830332879000252, -1.570245049999926 ], [ 98.811696811000161, -1.528985283999873 ], [ 98.651377800000148, -1.298516533999816 ], [ 98.635508660000028, -1.289646091999884 ], [ 98.630869988000086, -1.284844658999873 ], [ 98.630056186000104, -1.280205987999864 ], [ 98.631602410000141, -1.269219658999816 ], [ 98.630869988000086, -1.264418226999851 ], [ 98.613780144000089, -1.229180596999981 ], [ 98.60694420700014, -1.220391533999816 ], [ 98.5937606130002, -1.198418877999814 ], [ 98.597911004000139, -1.17693450299987 ], [ 98.624034050000091, -1.134698174999869 ], [ 98.642832879000252, -1.093926690999865 ], [ 98.648936394000145, -1.072035414999846 ], [ 98.651377800000148, -1.049004815999979 ], [ 98.649750196000127, -1.004327080999815 ], [ 98.651621941000201, -0.98202890399989 ], [ 98.6582137380002, -0.963474216999884 ], [ 98.668467644000202, -0.954359632999797 ], [ 98.684825066000201, -0.948011976999851 ], [ 98.704112175000091, -0.944105726999851 ], [ 98.723643425000148, -0.94296640399989 ], [ 98.737966342000107, -0.945733330999872 ], [ 98.76905358200014, -0.956475518999866 ], [ 98.788584832000197, -0.956638278999833 ], [ 98.803233269000145, -0.949802341999941 ], [ 98.827484571000127, -0.927178643999866 ], [ 98.840017123, -0.922458591999884 ], [ 98.882823113000086, -0.913181247999887 ], [ 98.898203972000033, -0.915704033999816 ], [ 98.891612175000091, -0.935479424999926 ], [ 98.917979363000143, -0.940118096999868 ] ] ], [ [ [ 130.93490644600013, -0.925876559999892 ], [ 130.93970787900003, -0.932305596999868 ], [ 130.94483483200031, -0.932305596999868 ], [ 130.96078535200024, -0.92294687299983 ], [ 130.98031660200024, -0.917657158999873 ], [ 131.02662194100003, -0.913995049999812 ], [ 131.0307723320002, -0.913018487999864 ], [ 131.03484134200005, -0.914808851999851 ], [ 131.04379316500012, -0.922458591999884 ], [ 131.05274498800009, -0.932305596999868 ], [ 131.07488040500004, -0.966892184999892 ], [ 131.07618248800031, -0.974297783999873 ], [ 131.06153405000032, -0.989922783999873 ], [ 131.05738366000003, -1.000664971999981 ], [ 131.05933678500026, -1.004978122999887 ], [ 131.06861412900014, -1.021254164999903 ], [ 131.0717879570002, -1.031670830999872 ], [ 131.07252037900003, -1.077569268999866 ], [ 131.03736412900003, -1.226332289999959 ], [ 131.01465905000009, -1.268975518999866 ], [ 131.0097762380002, -1.28866952899989 ], [ 131.00660241000014, -1.310804945999962 ], [ 130.9975692070002, -1.332452080999872 ], [ 130.98259524800017, -1.348565362999864 ], [ 130.9619246750002, -1.353773695999848 ], [ 130.94849694100014, -1.348402601999794 ], [ 130.93238366000003, -1.326592705999929 ], [ 130.9209090500002, -1.319594007999854 ], [ 130.9082137380002, -1.321465752999814 ], [ 130.89470462300017, -1.328708591999828 ], [ 130.8794051440002, -1.340101820999905 ], [ 130.86304772200026, -1.337172132999797 ], [ 130.85328209700003, -1.330661716999884 ], [ 130.82894941500024, -1.291436455999872 ], [ 130.82048587300017, -1.281670830999815 ], [ 130.7973738940002, -1.264418226999851 ], [ 130.76970462300028, -1.248223565999865 ], [ 130.75806725400014, -1.238213799999869 ], [ 130.74968509200028, -1.223402601999851 ], [ 130.74878991000003, -1.216973565999808 ], [ 130.75025475400014, -1.20273202899989 ], [ 130.74968509200028, -1.196058851999965 ], [ 130.74626712300017, -1.190036716999828 ], [ 130.74187259200005, -1.186293226999794 ], [ 130.7378035820002, -1.184340101999851 ], [ 130.73601321700028, -1.183200778999833 ], [ 130.73226972700013, -1.167901299999869 ], [ 130.73121178500026, -1.158379815999865 ], [ 130.72925866000003, -1.150811455999815 ], [ 130.72234134200016, -1.141534112999864 ], [ 130.71176191500012, -1.13250090899993 ], [ 130.70346113400001, -1.127373955999872 ], [ 130.69597415500016, -1.12070077899989 ], [ 130.68824303500003, -1.107354424999869 ], [ 130.71013431100016, -1.09286874799983 ], [ 130.71192467500032, -1.069919528999833 ], [ 130.70183353000016, -1.045098565999865 ], [ 130.68824303500003, -1.024834893999866 ], [ 130.6494246750002, -0.98837656 ], [ 130.64975019600013, -0.97380950299987 ], [ 130.68067467500009, -0.956638278999833 ], [ 130.7900496750002, -0.92929452899989 ], [ 130.8305770190002, -0.907484632999854 ], [ 130.86850019600001, -0.893812757999797 ], [ 130.89185631600014, -0.889906507999797 ], [ 130.91293379000024, -0.894219658999873 ], [ 130.92904707100001, -0.911553643999866 ], [ 130.93490644600013, -0.925876559999892 ] ] ], [ [ [ 130.83912194100003, -0.767510674999812 ], [ 130.85206139400032, -0.769219658999816 ], [ 130.85718834700003, -0.76873137799987 ], [ 130.87354576900032, -0.764580987999807 ], [ 130.8794051440002, -0.764743747999887 ], [ 130.88941491000014, -0.768161716999884 ], [ 130.90601647200003, -0.776625257999797 ], [ 130.91724694100003, -0.778415622999887 ], [ 130.92457116000003, -0.780694268999866 ], [ 130.91675866000014, -0.785739841999884 ], [ 130.9047957690002, -0.790297132999967 ], [ 130.8999129570002, -0.791436455999985 ], [ 130.89112389400009, -0.794854424999869 ], [ 130.88249759200028, -0.79599374799983 ], [ 130.87574303500003, -0.799248955999872 ], [ 130.87322024800005, -0.808851820999848 ], [ 130.87671959700015, -0.81755950299987 ], [ 130.8842879570002, -0.81951262799987 ], [ 130.89161217500009, -0.820407809999892 ], [ 130.89372806100016, -0.826267184999836 ], [ 130.8896590500002, -0.832777601999851 ], [ 130.88160241000014, -0.83953215899993 ], [ 130.87183678500014, -0.844659112999864 ], [ 130.84750410200024, -0.851006768999923 ], [ 130.81934655000009, -0.870293877999927 ], [ 130.80079186300009, -0.874607028999833 ], [ 130.7622176440002, -0.876641533999873 ], [ 130.61793053500003, -0.908461195999905 ], [ 130.5434676440002, -0.913832289999846 ], [ 130.51002037900025, -0.922458591999884 ], [ 130.51002037900025, -0.914971612999921 ], [ 130.51986738400001, -0.91130950299987 ], [ 130.52369225400014, -0.908786716999828 ], [ 130.50359134200005, -0.90740325299987 ], [ 130.4873153000002, -0.903903903999947 ], [ 130.47543379000012, -0.905938408999987 ], [ 130.46851647200015, -0.922458591999884 ], [ 130.46168053500014, -0.922458591999884 ], [ 130.4526473320002, -0.910577080999815 ], [ 130.43677819100014, -0.91326262799987 ], [ 130.40015709700003, -0.92929452899989 ], [ 130.40943444100026, -0.912041924999869 ], [ 130.42774498800031, -0.902927342 ], [ 130.44068444100003, -0.893161716999828 ], [ 130.43433678500014, -0.874607028999833 ], [ 130.44752037900014, -0.86093515399989 ], [ 130.44841556100005, -0.818617445999905 ], [ 130.46168053500014, -0.805108330999929 ], [ 130.46127363400024, -0.81601327899989 ], [ 130.46168053500014, -0.819431247999887 ], [ 130.46851647200015, -0.819431247999887 ], [ 130.4707137380002, -0.806735934999949 ], [ 130.4785262380002, -0.79989999799983 ], [ 130.49000084700003, -0.799248955999872 ], [ 130.50318444100014, -0.805108330999929 ], [ 130.4946395190002, -0.827894789999846 ], [ 130.5190535820002, -0.839613539999846 ], [ 130.55095462300017, -0.834161065999922 ], [ 130.56470787900014, -0.805108330999929 ], [ 130.57398522200015, -0.809828382999854 ], [ 130.58041425900012, -0.81560637799987 ], [ 130.58464603000027, -0.823174737999864 ], [ 130.5864363940002, -0.83310312299983 ], [ 130.61589603000016, -0.811781507999854 ], [ 130.63119550900012, -0.806247653999947 ], [ 130.64665774800005, -0.812595309999892 ], [ 130.6450301440002, -0.814222914999903 ], [ 130.64380944100003, -0.814873955999872 ], [ 130.64258873800009, -0.81601327899989 ], [ 130.6411238940002, -0.819431247999887 ], [ 130.65430748800009, -0.823988539999846 ], [ 130.66391035200013, -0.820896091999941 ], [ 130.67188561300031, -0.815199476999794 ], [ 130.68067467500009, -0.812595309999892 ], [ 130.69459069100014, -0.815199476999794 ], [ 130.71851647200003, -0.824314059999949 ], [ 130.73275800900024, -0.826267184999836 ], [ 130.75798587300017, -0.818942966999941 ], [ 130.7802840500002, -0.80592213299991 ], [ 130.80014082100024, -0.801446221999868 ], [ 130.8178817070002, -0.819431247999887 ], [ 130.81918379000012, -0.809665622999887 ], [ 130.81755618600016, -0.80592213299991 ], [ 130.8110457690002, -0.798923434999836 ], [ 130.81657962300005, -0.788262627999927 ], [ 130.80062910200002, -0.769952080999872 ], [ 130.80420983200008, -0.75725676899981 ], [ 130.81185957100001, -0.764743747999887 ], [ 130.81999759200016, -0.767347914999846 ], [ 130.83912194100003, -0.767510674999812 ] ] ], [ [ [ 135.42335045700031, -0.654880466999884 ], [ 135.42945397200003, -0.65545012799987 ], [ 135.4409285820002, -0.652439059999836 ], [ 135.44678795700008, -0.652113539999903 ], [ 135.45248457100024, -0.654229424999869 ], [ 135.46314537900014, -0.661390882999797 ], [ 135.46900475400025, -0.664239190999808 ], [ 135.49878991000014, -0.672458591999941 ], [ 135.55128014400009, -0.67717864399981 ], [ 135.56267337300017, -0.676364841999828 ], [ 135.58334394600001, -0.666680596999868 ], [ 135.59245853000016, -0.67546965899993 ], [ 135.60157311300009, -0.695896091999884 ], [ 135.66651451900032, -0.682793877999814 ], [ 135.6772567070002, -0.685642184999892 ], [ 135.67945397200003, -0.691338799999926 ], [ 135.68873131600003, -0.70867278399993 ], [ 135.69092858200008, -0.719821872999887 ], [ 135.69507897200015, -0.729587497999887 ], [ 135.70492597700013, -0.726739190999865 ], [ 135.71631920700031, -0.719496351999851 ], [ 135.72510826900009, -0.716403903999833 ], [ 135.75709069100014, -0.739353122999944 ], [ 135.77751712300017, -0.748711846999868 ], [ 135.78646894600001, -0.740329684999892 ], [ 135.79281660200013, -0.729180596999868 ], [ 135.8086043630002, -0.714125257999854 ], [ 135.82837975400014, -0.700860283999873 ], [ 135.84742272200015, -0.695896091999884 ], [ 135.86931399800028, -0.703789971999868 ], [ 135.8935653000002, -0.721123955999872 ], [ 135.96631920700008, -0.796075127999814 ], [ 136.04558353000004, -0.853204033999873 ], [ 136.06576582100013, -0.871677341999828 ], [ 136.07764733200008, -0.89999765399989 ], [ 136.08464603000016, -0.910251559999892 ], [ 136.09253991000014, -0.918877862999807 ], [ 136.10499108200008, -0.927829684999892 ], [ 136.10906009200016, -0.940118096999868 ], [ 136.1118270190002, -0.953789971999811 ], [ 136.1147567070002, -0.963474216999884 ], [ 136.12973066500012, -0.978448174999812 ], [ 136.14812259200016, -0.991387627999814 ], [ 136.1635848320002, -1.004978122999887 ], [ 136.1733504570002, -1.031345309999892 ], [ 136.18734785200002, -1.049574476999965 ], [ 136.1962996750002, -1.066582940999808 ], [ 136.20875084700015, -1.06406015399989 ], [ 136.22055097700002, -1.056735934999892 ], [ 136.2246199880002, -1.052829685 ], [ 136.24594160200013, -1.048760674999926 ], [ 136.2734481130002, -1.047295830999872 ], [ 136.29712975400003, -1.054375908999816 ], [ 136.30730228000004, -1.076348565999865 ], [ 136.31674238400012, -1.085625908999816 ], [ 136.37566165500016, -1.093682549999869 ], [ 136.38493899800028, -1.107517184999836 ], [ 136.38111412900014, -1.123223565999808 ], [ 136.36841881600014, -1.13616301899981 ], [ 136.35132897200026, -1.141534112999864 ], [ 136.34066816500012, -1.147393487999807 ], [ 136.29363040500016, -1.183200778999833 ], [ 136.23064212300017, -1.19296640399989 ], [ 136.21469160200013, -1.199476820999848 ], [ 136.20118248800009, -1.207940362999921 ], [ 136.1816512380002, -1.215427341999884 ], [ 136.1606551440002, -1.220879815999808 ], [ 136.14283287900003, -1.223402601999851 ], [ 136.09945722700013, -1.215997002999814 ], [ 136.03638756600003, -1.176446221999868 ], [ 135.99138431100005, -1.168877862999864 ], [ 135.96851647200015, -1.172621351999851 ], [ 135.92994225400025, -1.186293226999794 ], [ 135.90601647200015, -1.189385674999869 ], [ 135.88502037900014, -1.183038018999866 ], [ 135.86402428500003, -1.167575778999833 ], [ 135.84620201900032, -1.147637627999927 ], [ 135.83432050900001, -1.12851327899989 ], [ 135.82829837300028, -1.107842705999872 ], [ 135.83432050900001, -1.049004815999979 ], [ 135.83106530000032, -1.039646091999828 ], [ 135.8164168630002, -1.020277601999851 ], [ 135.81324303500014, -1.014906507999854 ], [ 135.81177819100003, -1.003513279 ], [ 135.79948978000016, -0.970310154 ], [ 135.78101647200003, -0.872653904 ], [ 135.76539147200026, -0.83928801899981 ], [ 135.74097741000014, -0.819024346999925 ], [ 135.71908613400001, -0.824802341999884 ], [ 135.69996178500014, -0.844903252999814 ], [ 135.68409264400009, -0.867120049999869 ], [ 135.66081790500004, -0.887139580999929 ], [ 135.6406356130002, -0.881605726999851 ], [ 135.4848738940002, -0.75725676899981 ], [ 135.4790145190002, -0.76873137799987 ], [ 135.47974694100014, -0.780205987999864 ], [ 135.49170983200008, -0.805108330999929 ], [ 135.45866946700016, -0.792738539999903 ], [ 135.42261803500014, -0.762383721999811 ], [ 135.39372806100016, -0.723402601999908 ], [ 135.36988366000026, -0.653497002999814 ], [ 135.37037194100026, -0.63591887799987 ], [ 135.38933353000016, -0.627618096999811 ], [ 135.39893639400009, -0.631036065999808 ], [ 135.41456139400032, -0.648695570999905 ], [ 135.42335045700031, -0.654880466999884 ] ] ], [ [ [ 127.31804446700028, -0.780043226999851 ], [ 127.3198348320002, -0.793633721999868 ], [ 127.2788192070002, -0.805596612999807 ], [ 127.26880944100014, -0.805108330999929 ], [ 127.26490319100026, -0.802015882999854 ], [ 127.25310306100016, -0.788995049999926 ], [ 127.24830162900003, -0.785251559999892 ], [ 127.21656334700015, -0.78240325299987 ], [ 127.18018639400009, -0.783868096999868 ], [ 127.15552819100014, -0.772393487999807 ], [ 127.15894616000003, -0.730645440999865 ], [ 127.1689559250002, -0.710219007999797 ], [ 127.18018639400009, -0.693129164999846 ], [ 127.18930097700013, -0.674981377999927 ], [ 127.19459069100014, -0.635186455999872 ], [ 127.20085696700028, -0.622816664999903 ], [ 127.21404056100016, -0.615411065999808 ], [ 127.24415123800009, -0.613946221999868 ], [ 127.25082441500024, -0.614922783999816 ], [ 127.25660241000003, -0.616957289999846 ], [ 127.2612410820002, -0.620212497999887 ], [ 127.24878991000003, -0.637627862999864 ], [ 127.25513756600003, -0.650485934999892 ], [ 127.26807701900032, -0.66122812299983 ], [ 127.27507571700005, -0.672539971999925 ], [ 127.27800540500016, -0.675713799999983 ], [ 127.29175866000014, -0.694512627999814 ], [ 127.29615319100003, -0.70273202899989 ], [ 127.29721113400001, -0.712579033999816 ], [ 127.29517662900025, -0.733656507999854 ], [ 127.29615319100003, -0.743747653999833 ], [ 127.31804446700028, -0.780043226999851 ] ] ], [ [ [ 130.68799889400009, -0.463148695999962 ], [ 130.68344160200013, -0.477227471999925 ], [ 130.65455162900003, -0.516696872999887 ], [ 130.6411238940002, -0.527520440999979 ], [ 130.59636478000016, -0.53850676899981 ], [ 130.5810653000002, -0.539239190999865 ], [ 130.57154381600003, -0.531996351999851 ], [ 130.58366946700016, -0.523858330999815 ], [ 130.59766686300009, -0.490817966999884 ], [ 130.59685306100016, -0.46453215899993 ], [ 130.56470787900014, -0.476739190999922 ], [ 130.56226647200026, -0.481052341999828 ], [ 130.55827884200016, -0.495049737999977 ], [ 130.55445397200026, -0.500909112999807 ], [ 130.54761803500014, -0.50530364399981 ], [ 130.53370201900009, -0.509860934999836 ], [ 130.52711022200015, -0.514336846999811 ], [ 130.5171004570002, -0.517754815999808 ], [ 130.46168053500014, -0.525160414999903 ], [ 130.47046959700015, -0.514336846999811 ], [ 130.48243248800009, -0.509209893999923 ], [ 130.49252363400012, -0.503350518999866 ], [ 130.49634850400014, -0.490411065999865 ], [ 130.48113040500016, -0.49578215899993 ], [ 130.46949303500014, -0.490329684999892 ], [ 130.4609481130002, -0.47812265399989 ], [ 130.45484459700003, -0.463799737999807 ], [ 130.46355228000004, -0.465508721999811 ], [ 130.46859785200013, -0.467217705999815 ], [ 130.47217858200031, -0.47031015399989 ], [ 130.47584069100014, -0.476739190999922 ], [ 130.48218834700003, -0.46453215899993 ], [ 130.49382571700016, -0.450127862999864 ], [ 130.50505618600005, -0.441338799999812 ], [ 130.51002037900025, -0.445733330999872 ], [ 130.51343834700026, -0.461846612999977 ], [ 130.5224715500002, -0.468926690999808 ], [ 130.5351668630002, -0.468926690999808 ], [ 130.55046634200016, -0.463799737999807 ], [ 130.55933678500014, -0.455987237999807 ], [ 130.56959069100026, -0.444105726999851 ], [ 130.58228600400014, -0.433200779 ], [ 130.60613040500016, -0.426690362999921 ], [ 130.61011803500003, -0.422621351999851 ], [ 130.61312910200002, -0.417575779 ], [ 130.61744225400003, -0.412530205999872 ], [ 130.6250106130002, -0.409600518999866 ], [ 130.63209069100014, -0.41130950299987 ], [ 130.64584394600013, -0.419366143999866 ], [ 130.67025800900012, -0.430271091999941 ], [ 130.67758222700002, -0.435804945999905 ], [ 130.68637129000012, -0.449151299999812 ], [ 130.68799889400009, -0.463148695999962 ] ] ], [ [ [ 129.88819420700008, -0.494724216999941 ], [ 129.8779403000002, -0.502373955999872 ], [ 129.86443118600016, -0.498630466999828 ], [ 129.85141035200013, -0.481622002999984 ], [ 129.84408613400001, -0.462334893999923 ], [ 129.8442488940002, -0.444268487999921 ], [ 129.84888756600014, -0.432386976999794 ], [ 129.8545028000002, -0.426527601999851 ], [ 129.85962975400003, -0.422946872999887 ], [ 129.87378991000014, -0.414971612999807 ], [ 129.89234459700015, -0.409356377999814 ], [ 129.90235436300009, -0.408461195999905 ], [ 129.91000410200013, -0.413506768999923 ], [ 129.91618899800017, -0.427422783999816 ], [ 129.91382897200015, -0.442559502999814 ], [ 129.90853925900001, -0.449395440999865 ], [ 129.9028426440002, -0.459161065999865 ], [ 129.89714603000016, -0.479180596999925 ], [ 129.88819420700008, -0.494724216999941 ] ] ], [ [ [ 121.85385175900012, -0.401055596999811 ], [ 121.8955184250002, -0.428399346999925 ], [ 121.90170332100013, -0.437188408999873 ], [ 121.9106551440002, -0.460381768999923 ], [ 121.9160262380002, -0.46990325299987 ], [ 121.91358483200008, -0.486423434999892 ], [ 121.90642337300005, -0.499281507999797 ], [ 121.89478600400025, -0.507907809999892 ], [ 121.87842858200031, -0.510918877999927 ], [ 121.8745223320002, -0.505954684999836 ], [ 121.84791100400014, -0.483330987999864 ], [ 121.83472741000003, -0.476739190999922 ], [ 121.84644616000003, -0.500258070999848 ], [ 121.8447371750002, -0.507989190999865 ], [ 121.83090254000024, -0.510918877999927 ], [ 121.81657962300005, -0.507745049999869 ], [ 121.80128014400009, -0.493584893999923 ], [ 121.7900496750002, -0.490411065999865 ], [ 121.74634850400003, -0.483656507999797 ], [ 121.73536217500032, -0.47991301899998 ], [ 121.72559655000009, -0.483086846999868 ], [ 121.70093834700003, -0.535088799999812 ], [ 121.6889754570002, -0.543145440999922 ], [ 121.67172285200013, -0.55038827899989 ], [ 121.65455162900003, -0.552422783999873 ], [ 121.64226321700016, -0.545586846999981 ], [ 121.64177493600027, -0.531019789999846 ], [ 121.65015709700015, -0.512627862999807 ], [ 121.67986087300017, -0.468926690999808 ], [ 121.68970787900003, -0.458184502999814 ], [ 121.70191491000014, -0.449639580999985 ], [ 121.73422285200002, -0.434991143999866 ], [ 121.74089603000016, -0.429131768999923 ], [ 121.75212649800005, -0.401055596999811 ], [ 121.77857506600003, -0.424574476999794 ], [ 121.79948978000016, -0.420505466999828 ], [ 121.82211347700024, -0.406670830999815 ], [ 121.85385175900012, -0.401055596999811 ] ] ], [ [ [ 132.43718509200016, -0.347100518999923 ], [ 132.67920983200008, -0.368910414999846 ], [ 132.70915774800017, -0.360039971999811 ], [ 132.9052840500002, -0.453220309999836 ], [ 132.92546634200016, -0.456312757999854 ], [ 132.93677819100014, -0.454034112999864 ], [ 132.95980879000012, -0.441989841999884 ], [ 132.97510826900009, -0.444756768999923 ], [ 132.97868899800005, -0.451836846999868 ], [ 132.97868899800005, -0.460870049999869 ], [ 132.98340905000009, -0.46990325299987 ], [ 132.99968509200016, -0.480889580999929 ], [ 133.03353925900001, -0.497328382999967 ], [ 133.0483504570002, -0.507907809999892 ], [ 133.05730228000016, -0.511163018999923 ], [ 133.06959069100003, -0.511895440999979 ], [ 133.0898543630002, -0.510918877999927 ], [ 133.09522545700008, -0.513767184999949 ], [ 133.10670006600003, -0.527520440999979 ], [ 133.11329186300031, -0.531996351999851 ], [ 133.12322024800017, -0.533379815999808 ], [ 133.14470462300005, -0.531182549999812 ], [ 133.1547957690002, -0.531996351999851 ], [ 133.28891035200024, -0.628513279 ], [ 133.31495201900032, -0.653985283999873 ], [ 133.32601972700013, -0.67880624799983 ], [ 133.33562259200005, -0.690362237999977 ], [ 133.37907962300028, -0.717705987999864 ], [ 133.39161217500009, -0.723239841999941 ], [ 133.55836022200003, -0.743747653999833 ], [ 133.56267337300017, -0.745212497999887 ], [ 133.56723066500012, -0.748304945999848 ], [ 133.5727645190002, -0.750909112999864 ], [ 133.57935631600014, -0.750583591999828 ], [ 133.58619225400025, -0.736911716999884 ], [ 133.59245853000016, -0.732110283999816 ], [ 133.59750410200024, -0.726739190999865 ], [ 133.60474694100026, -0.725681248 ], [ 133.61695397200026, -0.733656507999854 ], [ 133.63306725400003, -0.74187590899993 ], [ 133.65609785200002, -0.747002862999864 ], [ 133.74537194100003, -0.750746351999794 ], [ 133.75912519600024, -0.745212497999887 ], [ 133.75123131600026, -0.730645440999865 ], [ 133.75993899800005, -0.720879815999922 ], [ 133.77409915500027, -0.717217705999872 ], [ 133.79037519600001, -0.718519789999846 ], [ 133.80591881600014, -0.723239841999941 ], [ 133.81226647200026, -0.72763437299983 ], [ 133.82984459700015, -0.743747653999833 ], [ 133.8383895190002, -0.743096612999864 ], [ 133.85084069100003, -0.739190362999977 ], [ 133.9072371750002, -0.731133721999868 ], [ 133.94841556100005, -0.73154062299983 ], [ 133.9638778000002, -0.729587497999887 ], [ 133.97722415500016, -0.723239841999941 ], [ 133.99488366000003, -0.733330987999864 ], [ 134.05640709700026, -0.795179945999905 ], [ 134.06674238400024, -0.802422783999873 ], [ 134.0893660820002, -0.807549737999864 ], [ 134.10075931100027, -0.812595309999892 ], [ 134.10914147200015, -0.820082289999959 ], [ 134.12533613400001, -0.838799737999807 ], [ 134.13493899800017, -0.846774997999887 ], [ 134.16382897200015, -0.858086846999868 ], [ 134.17212975400025, -0.863864841999828 ], [ 134.17123457100013, -0.875909112999864 ], [ 134.15154056100005, -0.882989190999922 ], [ 134.08871504000012, -0.890069268999866 ], [ 134.07447350400025, -0.894952080999815 ], [ 134.06812584700003, -0.90740325299987 ], [ 134.06657962300017, -0.932305596999868 ], [ 134.05892988400001, -0.948174737999921 ], [ 134.04468834700015, -0.951348565999979 ], [ 134.0361434250002, -0.957777601999794 ], [ 134.07797285200024, -1.045586846999868 ], [ 134.09050540500016, -1.062676690999922 ], [ 134.09506269600001, -1.071954033999873 ], [ 134.09799238400012, -1.093438408999873 ], [ 134.10377037900014, -1.103936455999872 ], [ 134.11215254000012, -1.115411065999808 ], [ 134.1274520190002, -1.148370049999983 ], [ 134.14144941500001, -1.165785414999846 ], [ 134.15992272200003, -1.18368906 ], [ 134.17847741000014, -1.197442315999808 ], [ 134.19288170700008, -1.202894789999846 ], [ 134.20378665500004, -1.21257903399993 ], [ 134.26742597700002, -1.330254815999865 ], [ 134.28199303500026, -1.350192966999884 ], [ 134.23910566500001, -1.416273695999905 ], [ 134.2304793630002, -1.436293226999851 ], [ 134.2304793630002, -1.476739190999865 ], [ 134.22144616000014, -1.544040622999887 ], [ 134.2158309250002, -1.560316664999846 ], [ 134.20720462300005, -1.573500257999797 ], [ 134.15430748800009, -1.62835051899981 ], [ 134.13900800900012, -1.638116143999866 ], [ 134.1259871750002, -1.652276299999983 ], [ 134.1171981130002, -1.655450127999814 ], [ 134.10531660200024, -1.657484632999854 ], [ 134.09644616000014, -1.66318124799983 ], [ 134.09034264400009, -1.671807549999869 ], [ 134.08708743600005, -1.682793877999927 ], [ 134.08920332100013, -1.697035414999903 ], [ 134.10352623800031, -1.737725518999866 ], [ 134.14486738400012, -1.939141533999873 ], [ 134.14958743600027, -2.015313408999873 ], [ 134.14861087300017, -2.025485934999892 ], [ 134.14975019600024, -2.028985283999987 ], [ 134.15284264400032, -2.033786716999884 ], [ 134.15552819100014, -2.039483330999872 ], [ 134.15528405000009, -2.045830987999864 ], [ 134.1513778000002, -2.047295830999872 ], [ 134.14429772200003, -2.045830987999864 ], [ 134.13786868600016, -2.045342705999815 ], [ 134.13493899800017, -2.049574476999851 ], [ 134.1196395190002, -2.113864841999828 ], [ 134.12061608200008, -2.135349216999884 ], [ 134.12614993600005, -2.144952080999872 ], [ 134.14234459700015, -2.154717705999872 ], [ 134.14861087300017, -2.162530205999872 ], [ 134.15211022200003, -2.175469658999987 ], [ 134.15162194100003, -2.184991143999866 ], [ 134.14966881600026, -2.194594007999854 ], [ 134.14861087300017, -2.207207940999865 ], [ 134.15170332100001, -2.227634372999887 ], [ 134.16570071700005, -2.259698174999869 ], [ 134.16895592500009, -2.279229424999869 ], [ 134.16277103000016, -2.301690362999977 ], [ 134.1616317070002, -2.310235283999873 ], [ 134.16480553500026, -2.320489190999808 ], [ 134.17945397200015, -2.33562590899993 ], [ 134.1826278000002, -2.344414971999868 ], [ 134.18572024800005, -2.361911716999828 ], [ 134.19336998800009, -2.379082940999865 ], [ 134.20435631600014, -2.395114841999884 ], [ 134.21680748800031, -2.408949476999851 ], [ 134.25912519600013, -2.44052499799983 ], [ 134.27084394600013, -2.465020440999979 ], [ 134.28435306100016, -2.479261976999908 ], [ 134.30014082100013, -2.491957289999846 ], [ 134.3129988940002, -2.498304945999962 ], [ 134.31934655000009, -2.505303643999866 ], [ 134.33025149800017, -2.522230726999851 ], [ 134.33757571700016, -2.541924737999864 ], [ 134.34546959700015, -2.576592705999872 ], [ 134.36361738400012, -2.617852471999811 ], [ 134.36150149800017, -2.634942315999865 ], [ 134.38135826900032, -2.653985283999873 ], [ 134.3906356130002, -2.681084893999866 ], [ 134.40170332100013, -2.744805596999811 ], [ 134.40902754000024, -2.755140882999854 ], [ 134.42074629000012, -2.766045830999815 ], [ 134.43165123800031, -2.779392184999836 ], [ 134.44027754000001, -2.80828215899993 ], [ 134.46387780000032, -2.854668877999927 ], [ 134.46387780000032, -2.862074476999794 ], [ 134.48861738400012, -2.861260674999869 ], [ 134.50554446700016, -2.853773695999905 ], [ 134.5327254570002, -2.834161065999865 ], [ 134.52662194100003, -2.821954033999873 ], [ 134.51905358200008, -2.778903903999833 ], [ 134.51465905000009, -2.769626559999892 ], [ 134.50318444100014, -2.750909112999807 ], [ 134.49927819100014, -2.738539320999905 ], [ 134.49838300900001, -2.724867445999962 ], [ 134.50025475400014, -2.696954033999816 ], [ 134.49927819100014, -2.683282158999873 ], [ 134.49463951900032, -2.670098565999808 ], [ 134.48145592500009, -2.645440362999807 ], [ 134.4775496750002, -2.634942315999865 ], [ 134.47396894600001, -2.60654062299983 ], [ 134.47437584700015, -2.580743096999811 ], [ 134.47803795700008, -2.558038018999866 ], [ 134.4843856130002, -2.539320570999905 ], [ 134.49634850400014, -2.517836195999848 ], [ 134.50928795700031, -2.507745049999869 ], [ 134.55372155000009, -2.491469007999854 ], [ 134.54118899800005, -2.486748955999872 ], [ 134.53451582100001, -2.478773695999905 ], [ 134.53565514400032, -2.469984632999854 ], [ 134.5463973320002, -2.462985934999836 ], [ 134.55632571700005, -2.464776299999926 ], [ 134.57699629000012, -2.480726820999962 ], [ 134.58423912900014, -2.484633070999848 ], [ 134.60425866000026, -2.488457940999865 ], [ 134.6230574880002, -2.498142184999892 ], [ 134.63843834700015, -2.511163018999923 ], [ 134.64820397200003, -2.525079033999873 ], [ 134.65805097700002, -2.562758070999962 ], [ 134.66684004000012, -2.82561614399981 ], [ 134.67001386800018, -2.837660414999959 ], [ 134.70134524800017, -2.958672783999816 ], [ 134.7270613940002, -2.98577239399998 ], [ 134.77222741000014, -2.97763437299983 ], [ 134.82781009200005, -2.913750908999816 ], [ 134.85132897200026, -2.899834893999866 ], [ 134.86109459700003, -2.940036716999828 ], [ 134.85181725400014, -3.003676040000016 ], [ 134.84685306100016, -3.018487237999807 ], [ 134.84245853000004, -3.023044528999833 ], [ 134.8369246750002, -3.025811455999872 ], [ 134.83106530000009, -3.030205987999864 ], [ 134.82634524800017, -3.039646091999884 ], [ 134.8242293630002, -3.05038827899989 ], [ 134.82634524800017, -3.083916924999926 ], [ 134.81666100400003, -3.121840101999851 ], [ 134.81853274800017, -3.136325778999833 ], [ 134.85368899800005, -3.147881768999923 ], [ 134.86117597700002, -3.162692966999941 ], [ 134.86793053500026, -3.204034112999864 ], [ 134.86963951900032, -3.209161065999865 ], [ 134.8730574880002, -3.213148695999962 ], [ 134.87476647200015, -3.217705987999864 ], [ 134.8745223320002, -3.217950127999814 ], [ 134.8759871750002, -3.23186614399981 ], [ 134.87476647200015, -3.232028903999947 ], [ 134.88062584700015, -3.242933851999851 ], [ 134.88591556100016, -3.249769789999846 ], [ 134.8989363940002, -3.262790622999944 ], [ 134.91439863400001, -3.268812757999854 ], [ 134.93181399800005, -3.261651299999926 ], [ 134.96412194100026, -3.238213799999869 ], [ 134.96257571700016, -3.249444268999866 ], [ 134.95679772200026, -3.269463799999812 ], [ 134.95671634200028, -3.279880467 ], [ 134.96029707100013, -3.285332940999865 ], [ 134.97461998800009, -3.300876559999836 ], [ 134.98471113400012, -3.329685153999947 ], [ 135.00212649800017, -3.336114190999865 ], [ 135.04607181100005, -3.334405205999872 ], [ 135.06910241000003, -3.338555596999811 ], [ 135.09717858200008, -3.357517184999836 ], [ 135.11150149800017, -3.361748955999929 ], [ 135.27564537900014, -3.368584893999866 ], [ 135.29607181100016, -3.372002862999864 ], [ 135.32203209700015, -3.386488539999903 ], [ 135.34083092500009, -3.389743747999887 ], [ 135.3623153000002, -3.38616301899981 ], [ 135.40308678500003, -3.371840101999851 ], [ 135.47046959700003, -3.363051039999846 ], [ 135.48894290500016, -3.356703382999854 ], [ 135.5053817070002, -3.348077080999815 ], [ 135.52173912900014, -3.33554452899989 ], [ 135.56364993600016, -3.289727471999811 ], [ 135.56910241000014, -3.281670830999985 ], [ 135.57325280000032, -3.270114841999884 ], [ 135.57439212300005, -3.258070570999848 ], [ 135.57048587300005, -3.248711846999811 ], [ 135.5737410820002, -3.24130624799983 ], [ 135.60157311300009, -3.204034112999864 ], [ 135.63892662900003, -3.178155205999872 ], [ 135.71900475400003, -3.148614190999979 ], [ 135.75171959700015, -3.128350518999866 ], [ 135.7671004570002, -3.108819268999866 ], [ 135.76319420700008, -3.099541924999926 ], [ 135.7519637380002, -3.091729424999869 ], [ 135.74561608200031, -3.077080987999864 ], [ 135.74740644600001, -3.070000908999987 ], [ 135.75180097700013, -3.06210702899989 ], [ 135.7573348320002, -3.05584075299987 ], [ 135.76490319100014, -3.05217864399981 ], [ 135.76685631600014, -3.049899997999944 ], [ 135.76978600400014, -3.047539971999868 ], [ 135.77564537900025, -3.04648202899989 ], [ 135.79948978000016, -3.053317966999828 ], [ 135.8169051440002, -3.042901299999869 ], [ 135.84310957100024, -3.011976820999905 ], [ 135.88851972700013, -3.000095309999836 ], [ 135.90992272200003, -2.98577239399998 ], [ 135.92652428500014, -2.965915622999887 ], [ 135.93677819100014, -2.943454684999836 ], [ 135.93588300900012, -2.92717864399981 ], [ 135.92497806100005, -2.890394789999846 ], [ 135.92676842500009, -2.878838799999812 ], [ 135.95191491000014, -2.852146091999884 ], [ 135.96045983200031, -2.837660414999959 ], [ 135.96461022200015, -2.820489190999922 ], [ 135.96461022200015, -2.775811455999929 ], [ 135.96957441500012, -2.770114841999884 ], [ 135.99236087300005, -2.752048434999836 ], [ 135.99878991000014, -2.744805596999811 ], [ 136.01295006600014, -2.747002862999807 ], [ 136.02320397200026, -2.707696221999925 ], [ 136.03638756600003, -2.696954033999816 ], [ 136.0454207690002, -2.696221612999864 ], [ 136.0556746750002, -2.693454684999892 ], [ 136.06373131600003, -2.688164971999868 ], [ 136.06714928500014, -2.679864190999865 ], [ 136.07227623800031, -2.672621351999851 ], [ 136.0844832690002, -2.668064059999892 ], [ 136.10865319100014, -2.662774346999811 ], [ 136.19743899800017, -2.624444268999866 ], [ 136.23682701900032, -2.596123955999929 ], [ 136.26636803500003, -2.560316664999903 ], [ 136.27605228000016, -2.540134372999887 ], [ 136.28239993600027, -2.519707940999808 ], [ 136.28874759200016, -2.450127862999807 ], [ 136.2939559250002, -2.433526299999983 ], [ 136.30241946700028, -2.420830987999807 ], [ 136.33448326900032, -2.384535415000016 ], [ 136.34408613400012, -2.368259372999944 ], [ 136.3481551440002, -2.35125090899993 ], [ 136.3471785820002, -2.340264580999872 ], [ 136.34253991000014, -2.319105726999965 ], [ 136.34009850400014, -2.289239190999865 ], [ 136.34197024800005, -2.283379815999922 ], [ 136.3481551440002, -2.271742446000019 ], [ 136.36207116000026, -2.252129815999922 ], [ 136.3808699880002, -2.234063408999816 ], [ 136.4038192070002, -2.219659112999977 ], [ 136.43018639400009, -2.211032809999836 ], [ 136.48145592500032, -2.211032809999836 ], [ 136.49293053500026, -2.207126559999949 ], [ 136.52214603000016, -2.191338799999812 ], [ 136.53256269600001, -2.189873955999929 ], [ 136.53679446700005, -2.198988539999846 ], [ 136.5337020190002, -2.213067315999865 ], [ 136.53296959700015, -2.225844007999854 ], [ 136.5434676440002, -2.231377862999864 ], [ 136.56820722700024, -2.233005466999884 ], [ 136.5947371750002, -2.23756275799991 ], [ 136.6020613940002, -2.249769789999903 ], [ 136.60523522200015, -2.252048434999892 ], [ 136.61304772200015, -2.250909112999921 ], [ 136.62647545700008, -2.246270440999808 ], [ 136.6328231130002, -2.245049737999864 ], [ 136.6464949880002, -2.246351820999905 ], [ 136.68392988400012, -2.258721612999807 ], [ 136.70460045700008, -2.23756275799991 ], [ 136.71697024800005, -2.239190362999864 ], [ 136.73715254000024, -2.249444268999866 ], [ 136.74927819100014, -2.252048434999892 ], [ 136.75863691500012, -2.248711846999868 ], [ 136.76547285200002, -2.241631768999866 ], [ 136.77084394600024, -2.234633070999905 ], [ 136.7768660820002, -2.231377862999864 ], [ 136.80591881600026, -2.226739190999808 ], [ 136.81446373800009, -2.224053643999866 ], [ 136.8671981130002, -2.188164971999925 ], [ 136.92701256600003, -2.176202080999815 ], [ 136.93848717500009, -2.172539971999981 ], [ 136.94312584700003, -2.163506768999866 ], [ 136.94581139400009, -2.152276299999869 ], [ 136.95150800900012, -2.142185154 ], [ 136.9814559250002, -2.126560154 ], [ 137.02409915500016, -2.118422132999797 ], [ 137.1543074880002, -2.111504815999865 ], [ 137.17847741000003, -2.106133721999925 ], [ 137.19459069100003, -2.097344658999873 ], [ 137.22632897200015, -2.074395440999979 ], [ 137.23365319100014, -2.060967705999985 ], [ 137.22527103000027, -2.038995049999869 ], [ 137.20264733200031, -2.018812757999854 ], [ 137.19117272200015, -2.004571221999868 ], [ 137.19459069100003, -1.998142184999836 ], [ 137.20533287900014, -1.992608330999929 ], [ 137.21013431100027, -1.979261976999794 ], [ 137.20964603000004, -1.963474216999828 ], [ 137.20484459700003, -1.949639580999872 ], [ 137.1938582690002, -1.943942966999941 ], [ 137.1674910820002, -1.934340101999794 ], [ 137.15699303500014, -1.92913176899981 ], [ 137.10173587300017, -1.888278903999833 ], [ 137.1118270190002, -1.874769789999903 ], [ 137.11557050900012, -1.854424737999864 ], [ 137.11540774800005, -1.809340101999851 ], [ 137.12354576900032, -1.797458591999941 ], [ 137.14283287900025, -1.787041924999869 ], [ 137.34880618600005, -1.71013762799987 ], [ 137.46485436300009, -1.64177825299987 ], [ 137.48585045700008, -1.632500908999873 ], [ 137.4921981130002, -1.62810637799987 ], [ 137.49854576900009, -1.62078215899993 ], [ 137.5102645190002, -1.604099216999828 ], [ 137.51636803500003, -1.600844007999854 ], [ 137.53248131600014, -1.597751559999892 ], [ 137.7944442070002, -1.484144789999903 ], [ 137.83912194100014, -1.471123955999872 ], [ 137.88314863400024, -1.470472914999959 ], [ 137.9248153000002, -1.484144789999903 ], [ 137.93246504000012, -1.49130624799983 ], [ 137.95557701900009, -1.518243096999868 ], [ 137.96501712300017, -1.522637627999984 ], [ 137.98316491000003, -1.541924737999807 ], [ 137.98926842500009, -1.546156507999854 ], [ 138.00220787900014, -1.547784112999864 ], [ 138.01140384200028, -1.552015882999854 ], [ 138.0576278000002, -1.599053643999866 ], [ 138.07488040500016, -1.610284112999864 ], [ 138.11890709700015, -1.616875908999873 ], [ 138.22917728000016, -1.649102471999925 ], [ 138.35670006600014, -1.71013762799987 ], [ 138.52751712300017, -1.758477471999868 ], [ 138.59750410200024, -1.769789320999848 ], [ 138.6196395190002, -1.778090101999851 ], [ 138.66521243600016, -1.789157809999892 ], [ 138.73519941500012, -1.843926690999922 ], [ 138.8032332690002, -1.920830987999807 ], [ 138.84278405000009, -1.949639580999872 ], [ 138.86215254000001, -1.955743096999868 ], [ 138.92807050900012, -1.957126559999892 ], [ 138.94955488400024, -1.959893487999977 ], [ 139.10670006600003, -2.01279062299983 ], [ 139.2832137380002, -2.121840101999908 ], [ 139.38404381600003, -2.15569426899998 ], [ 139.44011478000004, -2.185723565999922 ], [ 139.45533287900003, -2.189873955999929 ], [ 139.4687606130002, -2.195082289999846 ], [ 139.51498457100001, -2.231377862999864 ], [ 139.6782332690002, -2.292901299999812 ], [ 139.78077233200008, -2.354668877999814 ], [ 139.82211347700013, -2.367364190999979 ], [ 139.86475670700008, -2.372002862999807 ], [ 140.05933678500003, -2.354261976999794 ], [ 140.08619225400014, -2.343682549999869 ], [ 140.0971785820002, -2.323663018999866 ], [ 140.10474694100014, -2.320082290000016 ], [ 140.12126712300017, -2.326836846999868 ], [ 140.14503014400009, -2.34124114399981 ], [ 140.15113366000014, -2.33733489399981 ], [ 140.15259850400014, -2.322442315999865 ], [ 140.15796959700003, -2.320896091999828 ], [ 140.16570071700005, -2.32537200299987 ], [ 140.16797936300009, -2.331719658999816 ], [ 140.16879316500012, -2.339288018999866 ], [ 140.17221113400001, -2.347426039999903 ], [ 140.21021569100014, -2.402113539999846 ], [ 140.22543379000012, -2.405368747999887 ], [ 140.28834069100003, -2.431084893999923 ], [ 140.31128991000003, -2.446954033999873 ], [ 140.33228600400025, -2.455743096999811 ], [ 140.35043379000001, -2.443047783999873 ], [ 140.36101321700005, -2.449802342 ], [ 140.37126712300005, -2.44866301899998 ], [ 140.37964928500014, -2.441094658999816 ], [ 140.38453209700026, -2.429457289999903 ], [ 140.37989342500032, -2.419528904 ], [ 140.36890709700003, -2.412041924999869 ], [ 140.36394290500016, -2.404880466999884 ], [ 140.37712649800017, -2.395277601999851 ], [ 140.38851972700013, -2.397067966999884 ], [ 140.48316491000026, -2.432224216999941 ], [ 140.50066165500016, -2.435723565999865 ], [ 140.60759524800005, -2.439385674999812 ], [ 140.73080488400012, -2.491469007999854 ], [ 140.74463951900032, -2.499118748 ], [ 140.74675540500004, -2.51669687299983 ], [ 140.74089603000004, -2.549574476999794 ], [ 140.73609459700003, -2.563653252999927 ], [ 140.69857832100013, -2.608168226999851 ], [ 140.70435631600014, -2.616957289999903 ], [ 140.71322675900001, -2.626722914999959 ], [ 140.72380618600005, -2.63396575299987 ], [ 140.73462975400014, -2.634942315999865 ], [ 140.74000084700015, -2.627699476999908 ], [ 140.7407332690002, -2.616306247999887 ], [ 140.7426863940002, -2.605564059999836 ], [ 140.75171959700003, -2.60076262799987 ], [ 140.75709069100014, -2.603936455999815 ], [ 140.77564537900014, -2.618096612999864 ], [ 140.78549238400012, -2.621270440999808 ], [ 140.79558353000004, -2.619398695999848 ], [ 140.81804446700005, -2.611016533999873 ], [ 140.8296004570002, -2.608168226999851 ], [ 140.92212975400014, -2.608168226999851 ], [ 140.96501712300005, -2.60076262799987 ], [ 140.9741317070002, -2.600518487999807 ], [ 140.97445722700013, -2.600518487999807 ], [ 140.97446391400149, -2.600518107070855 ], [ 140.9744747320002, -2.631207783999855 ], [ 140.97390629100016, -2.807321064999826 ], [ 140.97328617400012, -3.002451272999849 ], [ 140.97235599800001, -3.250601500999835 ], [ 140.97318282100002, -3.581744079999851 ], [ 140.97354455600021, -3.800025329999812 ], [ 140.97421635000001, -4.002286884999876 ], [ 140.97473311400006, -4.173645934999854 ], [ 140.97576664300004, -4.595945739999877 ], [ 140.97623173000011, -4.77371266699987 ], [ 140.97687079100012, -4.988486058999854 ], [ 140.97690352400025, -4.999486999999817 ], [ 140.97690352400025, -5.002277526999819 ], [ 140.97690352400025, -5.197407734999899 ], [ 140.97690352400025, -5.322878112999888 ], [ 140.97690352400025, -5.36380584699981 ], [ 140.97690352400025, -5.62115447899987 ], [ 140.97690352400025, -5.806466165999893 ], [ 140.97690352400025, -6.002113137999857 ], [ 140.97690352400025, -6.229386087999899 ], [ 140.97690352400025, -6.33511606799982 ], [ 140.97287276200018, -6.33656300899986 ], [ 140.96372603400016, -6.348035175999826 ], [ 140.9586617440001, -6.368085631999804 ], [ 140.95385583500013, -6.370152689999884 ], [ 140.95282230600014, -6.37377003999984 ], [ 140.95499271700021, -6.379661152999859 ], [ 140.96465621000016, -6.388032734999797 ], [ 140.9670850020002, -6.393923847999815 ], [ 140.96315759300001, -6.404259134999904 ], [ 140.95561283400014, -6.411287129999835 ], [ 140.95018680900012, -6.418935241999805 ], [ 140.95282230600014, -6.431750996999881 ], [ 140.94155684400005, -6.43092417399987 ], [ 140.9310148520002, -6.43144093799981 ], [ 140.92129968300003, -6.4339214069999 ], [ 140.91251469000019, -6.43857228599984 ], [ 140.92316003500014, -6.439812519999805 ], [ 140.9299813240001, -6.444980163999901 ], [ 140.93318526200005, -6.453765156999793 ], [ 140.93282352700021, -6.465960794999887 ], [ 140.94858483900032, -6.465547383999876 ], [ 140.9531323660002, -6.480533548999858 ], [ 140.95018680900012, -6.4987236529999 ], [ 140.94346887200015, -6.507508645999792 ], [ 140.92822432500031, -6.509679055999868 ], [ 140.9209896240003, -6.516396992999887 ], [ 140.91876753800011, -6.527869160999899 ], [ 140.917837362, -6.55308725999987 ], [ 140.91509851100022, -6.558461608999835 ], [ 140.90987919100019, -6.561355488999823 ], [ 140.90161096300017, -6.562078958999791 ], [ 140.89298099800021, -6.565386249999904 ], [ 140.896494996, -6.573034362999806 ], [ 140.90331628400031, -6.582129413999837 ], [ 140.90496993100021, -6.589467467999839 ], [ 140.89055220600017, -6.599802754999871 ], [ 140.87391239500005, -6.603420104999827 ], [ 140.85928796400015, -6.608381041999792 ], [ 140.85039961800032, -6.623573913999849 ], [ 140.86492069500014, -6.630601908999836 ], [ 140.86579919400026, -6.649205423999888 ], [ 140.85716923100028, -6.682174986999826 ], [ 140.85174320500016, -6.693957213999852 ], [ 140.84921106000013, -6.702845559999844 ], [ 140.85039961800032, -6.712974140999904 ], [ 140.85784102400009, -6.723619486999894 ], [ 140.87871830300014, -6.742223001999832 ], [ 140.88450606300012, -6.753901875999816 ], [ 140.88269738800011, -6.760619811999845 ], [ 140.87324060100025, -6.773642272999894 ], [ 140.8708634860003, -6.778396503999886 ], [ 140.87417077700013, -6.789455260999887 ], [ 140.88243900600025, -6.798240254999882 ], [ 140.90161096300017, -6.812192890999882 ], [ 140.90672692900011, -6.828212584999903 ], [ 140.90832889800026, -6.849296569999865 ], [ 140.91602868700011, -6.86273244199981 ], [ 140.93969649300004, -6.856324564999852 ], [ 140.94331384400016, -6.888053893999881 ], [ 140.96217574100012, -6.897975768999856 ], [ 140.97716190600011, -6.896632181999792 ], [ 140.97700687700024, -7.004739277999875 ], [ 140.97700687700024, -7.157081399999868 ], [ 140.97690352400025, -7.282758482999839 ], [ 140.97690352400025, -7.323686217999864 ], [ 140.97690352400025, -7.587546080999857 ], [ 140.97690352400025, -7.772857767999881 ], [ 140.97690352400025, -7.962096862999886 ], [ 140.97690352400025, -8.001991068999871 ], [ 140.97700687700024, -8.170146178999858 ], [ 140.97731693600019, -8.434936217999791 ], [ 140.97762699400005, -8.611152851999862 ], [ 140.97752364100018, -8.798221536999904 ], [ 140.97716190600011, -8.991077981999865 ], [ 140.97700716985184, -9.106149628253149 ], [ 140.97698001400022, -9.106133721999868 ], [ 140.97681725400003, -9.106052341999884 ], [ 140.9326278000002, -9.080173434999892 ], [ 140.92107181100005, -9.07927825299987 ], [ 140.85694420700008, -9.049086195999848 ], [ 140.6215926440002, -8.806735934999836 ], [ 140.50749759200005, -8.638116143999866 ], [ 140.45289147200026, -8.586683851999794 ], [ 140.44629967500009, -8.577569268999866 ], [ 140.37810306100016, -8.522230726999794 ], [ 140.3676863940002, -8.508396091999884 ], [ 140.36345462300005, -8.490817966999884 ], [ 140.35401451900032, -8.488539320999792 ], [ 140.30144290500004, -8.467461846999868 ], [ 140.26661217500009, -8.43084075299987 ], [ 140.25163821700016, -8.408949476999851 ], [ 140.03191165500016, -8.246351820999848 ], [ 139.98812910200002, -8.192478122999887 ], [ 139.97364342500009, -8.165215752999814 ], [ 139.97071373800031, -8.142185153999833 ], [ 139.97974694100026, -8.121514580999815 ], [ 139.99773196700016, -8.103773695999848 ], [ 140.02149498800009, -8.089532158999816 ], [ 140.03492272200026, -8.086846612999864 ], [ 140.04810631600003, -8.086602471999811 ], [ 140.05836022200015, -8.081963799999869 ], [ 140.06234785200024, -8.066176039999846 ], [ 140.06568444100014, -8.029473565999865 ], [ 140.05681399800017, -7.996189059999836 ], [ 140.05404707100013, -7.971612237999807 ], [ 140.06055748800009, -7.948337497999887 ], [ 140.0830184250002, -7.932549737999864 ], [ 140.11158287900014, -7.946547132999854 ], [ 140.12867272200015, -7.936130466999828 ], [ 140.15170332100013, -7.884698174999869 ], [ 140.13510175900012, -7.892673434999892 ], [ 140.11898847700013, -7.914808851999851 ], [ 140.10035241000014, -7.91952890399989 ], [ 140.07496178500003, -7.920017184999892 ], [ 140.06104576900032, -7.924411716999828 ], [ 140.05396569100014, -7.936211846999811 ], [ 140.04566491000014, -7.980157158999873 ], [ 140.04184004000001, -8.045505466999828 ], [ 140.03402754000001, -8.058770440999865 ], [ 140.01539147200015, -8.07366301899981 ], [ 139.97364342500009, -8.096937757999854 ], [ 139.93238366000014, -8.108575127999814 ], [ 139.76880944100014, -8.110446872999887 ], [ 139.63054446700016, -8.124932549999869 ], [ 139.59937584700015, -8.135430596999811 ], [ 139.54664147200026, -8.166192315999808 ], [ 139.51498457100001, -8.17888762799987 ], [ 139.43531334700015, -8.196954033999873 ], [ 139.39519290500016, -8.200941664999846 ], [ 139.35670006600003, -8.199395440999808 ], [ 139.31950931100005, -8.190199476999851 ], [ 139.28337649800017, -8.172539971999811 ], [ 139.25464928500014, -8.146091403999833 ], [ 139.24000084700015, -8.110609632999854 ], [ 139.24024498800009, -8.101820570999792 ], [ 139.24252363400024, -8.090508721999811 ], [ 139.24610436300031, -8.079522393999866 ], [ 139.25025475400025, -8.072686455999815 ], [ 139.25171959700003, -8.06747812299983 ], [ 139.24789472700002, -8.048760674999869 ], [ 139.2451278000002, -8.015069268999866 ], [ 139.24008222700013, -8.002862237999807 ], [ 139.21892337300017, -7.97966887799987 ], [ 139.2348738940002, -7.975355726999851 ], [ 139.25171959700003, -7.982191664999903 ], [ 139.26937910200013, -7.986260674999869 ], [ 139.28785241000014, -7.973402601999794 ], [ 139.24293053500026, -7.956963799999812 ], [ 139.21713300900012, -7.951348565999808 ], [ 139.20590254000012, -7.963148695999792 ], [ 139.20679772200003, -7.974297783999816 ], [ 139.21119225400003, -7.994073174999812 ], [ 139.21216881600026, -8.004164320999792 ], [ 139.21412194100003, -8.007094007999797 ], [ 139.22486412900014, -8.008721612999864 ], [ 139.2295028000002, -8.011325778999833 ], [ 139.23218834700026, -8.017836195999848 ], [ 139.23023522200003, -8.022881768999866 ], [ 139.2270613940002, -8.028090101999851 ], [ 139.22445722700013, -8.074395440999865 ], [ 139.2011824880002, -8.095635674999812 ], [ 139.12273196700016, -8.117445570999792 ], [ 139.08952884200016, -8.133558851999851 ], [ 138.97331790500016, -8.229913018999866 ], [ 138.96338951900009, -8.245538018999866 ], [ 138.9594832690002, -8.26523202899989 ], [ 138.95720462300017, -8.270765882999797 ], [ 138.9511824880002, -8.281345309999836 ], [ 138.94336998800009, -8.291192315999865 ], [ 138.93523196700016, -8.295586846999868 ], [ 138.92107181100005, -8.294854424999812 ], [ 138.91439863400012, -8.292087497999887 ], [ 138.8764754570002, -8.218682549999869 ], [ 138.85303795700008, -8.183851820999792 ], [ 138.84278405000009, -8.161309502999814 ], [ 138.83855228000004, -8.138360283999816 ], [ 138.84278405000009, -8.117445570999792 ], [ 138.85865319100014, -8.101332289999903 ], [ 138.90072675900024, -8.092380466999884 ], [ 138.92123457100001, -8.079522393999866 ], [ 138.9253035820002, -8.070489190999865 ], [ 138.92432701900009, -8.060642184999892 ], [ 138.92017662900014, -8.052422783999816 ], [ 138.90577233200008, -8.043633721999868 ], [ 138.90552819100026, -8.030694268999866 ], [ 138.91098066500001, -8.007582289999903 ], [ 138.91098066500001, -7.922539971999868 ], [ 138.91537519600013, -7.903252862999864 ], [ 138.92741946700016, -7.894138278999833 ], [ 138.9663192070002, -7.884698174999869 ], [ 138.99398847700002, -7.865492445999792 ], [ 139.00228925900012, -7.835707289999903 ], [ 139.00717207100013, -7.754327080999815 ], [ 139.03451582100001, -7.690362237999807 ], [ 139.04509524800005, -7.67522551899981 ], [ 139.04818769600013, -7.668064059999892 ], [ 139.05494225400025, -7.63420989399981 ], [ 139.05941816500012, -7.622735283999873 ], [ 139.06934655000032, -7.613946221999811 ], [ 139.08082116000026, -7.606052341999828 ], [ 139.08920332100013, -7.596774997999887 ], [ 139.09302819100014, -7.559991143999866 ], [ 139.07105553500014, -7.53264739399981 ], [ 139.03589928500014, -7.515232028999833 ], [ 139.0004988940002, -7.507907809999836 ], [ 138.95801842500009, -7.507256768999866 ], [ 138.9443465500002, -7.497002862999864 ], [ 138.93490644600024, -7.44882577899989 ], [ 138.92554772200015, -7.42734140399989 ], [ 138.88607832100024, -7.360935153999833 ], [ 138.86548912900014, -7.336032809999892 ], [ 138.84058678500014, -7.314548434999892 ], [ 138.76661217500009, -7.265394789999846 ], [ 138.7509871750002, -7.257745049999812 ], [ 138.7456160820002, -7.250664971999868 ], [ 138.7387801440002, -7.24358489399981 ], [ 138.72925866000014, -7.240411065999865 ], [ 138.70850670700031, -7.239190362999807 ], [ 138.69996178500003, -7.237074476999851 ], [ 138.69125410200013, -7.233575127999814 ], [ 138.67701256600003, -7.223402601999794 ], [ 138.66635175900001, -7.209893487999807 ], [ 138.66749108200031, -7.197849216999884 ], [ 138.68824303500003, -7.192640882999797 ], [ 138.90455162900014, -7.199395440999865 ], [ 138.94516035200002, -7.20623137799987 ], [ 138.96168053500014, -7.214532158999816 ], [ 138.99097741000026, -7.236016533999873 ], [ 139.00391686300009, -7.240411065999865 ], [ 139.15707441500012, -7.243096612999807 ], [ 139.17457116000014, -7.236993096999868 ], [ 139.18824303500003, -7.215020440999808 ], [ 139.19947350400003, -7.188734632999797 ], [ 139.21461022200003, -7.166924737999864 ], [ 139.24000084700015, -7.158461195999792 ], [ 139.24000084700015, -7.151055596999811 ], [ 139.22185306100005, -7.143975518999866 ], [ 139.20606530000009, -7.150485934999836 ], [ 139.18140709700003, -7.175469658999873 ], [ 139.16732832100013, -7.195489190999865 ], [ 139.15943444100014, -7.203220309999836 ], [ 139.14722741000003, -7.20623137799987 ], [ 139.1035262380002, -7.20623137799987 ], [ 139.06055748800009, -7.21249765399989 ], [ 139.03760826900009, -7.211846612999864 ], [ 139.01937910200002, -7.194431247999887 ], [ 138.9663192070002, -7.164727471999868 ], [ 138.94613691500012, -7.157159112999807 ], [ 138.9253035820002, -7.153008721999868 ], [ 138.85808353000016, -7.14959075299987 ], [ 138.84253991000003, -7.145603122999887 ], [ 138.81478925900012, -7.130547783999873 ], [ 138.76197350400025, -7.113864841999828 ], [ 138.7534285820002, -7.106622002999814 ], [ 138.74781334700015, -7.098239841999828 ], [ 138.64616946700028, -6.999688408999873 ], [ 138.57203209700003, -6.942478122999887 ], [ 138.5615340500002, -6.918633721999811 ], [ 138.58139082100013, -6.890883070999848 ], [ 138.59742272200026, -6.881442966999828 ], [ 138.61255944100026, -6.877211195999792 ], [ 138.65406334700015, -6.876641533999816 ], [ 138.67457116000003, -6.881117445999792 ], [ 138.7158309250002, -6.897719007999854 ], [ 138.7397567070002, -6.897149346999868 ], [ 138.7563582690002, -6.887953382999797 ], [ 138.78345787900014, -6.861748955999872 ], [ 138.79810631600003, -6.856215101999851 ], [ 138.88379967500009, -6.849379164999846 ], [ 138.91724694100003, -6.842217705999872 ], [ 138.93148847700013, -6.842543226999851 ], [ 138.94044030000009, -6.845472914999846 ], [ 138.95980879000001, -6.854424737999864 ], [ 138.9697371750002, -6.856215101999851 ], [ 138.98943118600016, -6.865899346999811 ], [ 139.01775149800017, -6.908623955999815 ], [ 139.03793379000001, -6.918226820999792 ], [ 139.06869550900012, -6.942152601999851 ], [ 139.0727645190002, -6.948825778999833 ], [ 139.0825301440002, -6.953301690999865 ], [ 139.1035262380002, -6.959161065999865 ], [ 139.11793053500014, -6.968194268999866 ], [ 139.1264754570002, -6.971612237999864 ], [ 139.14039147200003, -6.972914320999848 ], [ 139.18189537900014, -6.971449476999794 ], [ 139.19223066500012, -6.972914320999848 ], [ 139.18043053500003, -6.959161065999865 ], [ 139.1567488940002, -6.954034112999807 ], [ 139.13331139400032, -6.952406507999797 ], [ 139.12273196700016, -6.948988539999903 ], [ 139.11548912900014, -6.941013278999833 ], [ 139.06869550900012, -6.918226820999792 ], [ 138.99976647200003, -6.85271575299987 ], [ 138.9663192070002, -6.835707289999903 ], [ 138.92367597700013, -6.82577890399989 ], [ 138.85670006600026, -6.820000908999816 ], [ 138.83790123800009, -6.814548434999892 ], [ 138.82243899800017, -6.806084893999866 ], [ 138.76840254000012, -6.756605726999794 ], [ 138.74577884200016, -6.740166924999812 ], [ 138.70045006600003, -6.728204033999873 ], [ 138.68344160200013, -6.714532158999873 ], [ 138.67286217500009, -6.69491952899989 ], [ 138.67090905000032, -6.671807549999812 ], [ 138.68246504000001, -6.645114841999884 ], [ 138.70289147200015, -6.645440362999864 ], [ 138.7431746750002, -6.664971612999807 ], [ 138.76319420700008, -6.670179945999792 ], [ 138.8291121750002, -6.705987237999807 ], [ 138.70899498800031, -6.629652601999794 ], [ 138.67758222700002, -6.602959893999866 ], [ 138.63160241000014, -6.54412200299987 ], [ 138.61939537900014, -6.534763278999833 ], [ 138.60377037900014, -6.527927341999828 ], [ 138.46607506600026, -6.402113539999846 ], [ 138.42115319100014, -6.318536065999865 ], [ 138.41358483200008, -6.291436455999872 ], [ 138.39535566500001, -6.253187757999797 ], [ 138.39039147200015, -6.233656507999854 ], [ 138.39210045700008, -6.186211846999811 ], [ 138.39039147200015, -6.171563408999873 ], [ 138.37208092500009, -6.124281507999854 ], [ 138.36980228000016, -6.106377862999864 ], [ 138.36548912900003, -6.091729424999869 ], [ 138.34669030000009, -6.071221612999807 ], [ 138.34253991000014, -6.058282158999816 ], [ 138.33912194100003, -6.042575778999833 ], [ 138.2763778000002, -5.946221612999864 ], [ 138.26246178500014, -5.914727471999868 ], [ 138.27084394600024, -5.886976820999848 ], [ 138.30420983200031, -5.868259372999887 ], [ 138.37671959700003, -5.855645440999808 ], [ 138.40398196700016, -5.835707289999903 ], [ 138.38550866000014, -5.837334893999866 ], [ 138.34253991000014, -5.84880950299987 ], [ 138.32203209700015, -5.851006768999866 ], [ 138.20875084700015, -5.82529062299983 ], [ 138.18213951900009, -5.80966562299983 ], [ 138.17798912900003, -5.804457289999846 ], [ 138.17554772200015, -5.795668226999794 ], [ 138.16960696700005, -5.78655364399981 ], [ 138.15756269600013, -5.773695570999792 ], [ 138.25196373800009, -5.718926690999865 ], [ 138.3066512380002, -5.695733330999815 ], [ 138.36296634200016, -5.67880624799983 ], [ 138.34310957100001, -5.670179945999848 ], [ 138.32032311300009, -5.671156507999797 ], [ 138.2773543630002, -5.67880624799983 ], [ 138.25269616000003, -5.679864190999865 ], [ 138.23267662900025, -5.683851820999848 ], [ 138.2138778000002, -5.691989841999884 ], [ 138.17188561300031, -5.716973565999808 ], [ 138.15202884200016, -5.723077080999872 ], [ 138.1059676440002, -5.72600676899981 ], [ 138.08578535200013, -5.739922783999873 ], [ 138.08326256600014, -5.738213799999869 ], [ 138.08155358200031, -5.734307549999869 ], [ 138.07105553500026, -5.728610934999892 ], [ 138.06910241000014, -5.719659112999864 ], [ 138.06918379000012, -5.708428643999866 ], [ 138.06812584700015, -5.698011976999794 ], [ 138.05738366000003, -5.65781015399989 ], [ 138.05339603000004, -5.612969658999873 ], [ 138.05486087300017, -5.589613539999903 ], [ 138.05982506600014, -5.575290622999887 ], [ 138.06861412900003, -5.565036716999884 ], [ 138.08179772200026, -5.554620049999869 ], [ 138.09180748800009, -5.550062757999854 ], [ 138.10124759200016, -5.548516533999873 ], [ 138.10792076900032, -5.544854424999869 ], [ 138.10971113400012, -5.534112237999807 ], [ 138.10531660200013, -5.530938408999873 ], [ 138.08497155000032, -5.522230726999851 ], [ 138.0781356130002, -5.520440362999864 ], [ 138.06421959700015, -5.511163018999866 ], [ 138.06421959700015, -5.48943450299987 ], [ 138.07439212300028, -5.44475676899981 ], [ 138.07488040500016, -5.419610283999816 ], [ 138.07105553500026, -5.409926039999846 ], [ 138.06137129000001, -5.403741143999866 ], [ 138.05811608200008, -5.420342705999872 ], [ 138.05128014400032, -5.431817315999808 ], [ 138.04078209700026, -5.436130466999884 ], [ 138.02654056100027, -5.431084893999866 ], [ 138.03484134200005, -5.454766533999873 ], [ 138.03598066500012, -5.474786065999865 ], [ 138.02564537900014, -5.484958591999884 ], [ 137.99927819100026, -5.478936455999872 ], [ 137.98658287900014, -5.469984632999854 ], [ 137.95899498800009, -5.431084893999866 ], [ 137.91456139400009, -5.386895440999865 ], [ 137.90845787900003, -5.363051039999903 ], [ 137.9248153000002, -5.328708591999884 ], [ 137.90414472700002, -5.323500257999854 ], [ 137.85336347700013, -5.361586195999848 ], [ 137.82178795700008, -5.362888278999833 ], [ 137.81397545700008, -5.358168226999851 ], [ 137.8086043630002, -5.352959893999866 ], [ 137.78296959700003, -5.317966403999833 ], [ 137.78012129000001, -5.315036716999828 ], [ 137.78288821700005, -5.297539971999868 ], [ 137.80152428500014, -5.270440362999864 ], [ 137.8081160820002, -5.253024997999887 ], [ 137.7710067070002, -5.272393487999864 ], [ 137.75163821700016, -5.277764580999872 ], [ 137.73243248800031, -5.273370049999869 ], [ 137.71558678500003, -5.256524346999868 ], [ 137.70630944100026, -5.221937757999854 ], [ 137.69068444100003, -5.211358330999815 ], [ 137.6821395190002, -5.212660414999903 ], [ 137.67261803500026, -5.217543226999794 ], [ 137.66285241000003, -5.220310153999833 ], [ 137.6469832690002, -5.211846612999807 ], [ 137.61638431100027, -5.205173434999836 ], [ 137.59839928500014, -5.196384372999887 ], [ 137.57984459700015, -5.181898695999848 ], [ 137.5742293630002, -5.167087497999887 ], [ 137.59506269600013, -5.156833591999828 ], [ 137.59506269600013, -5.14999765399989 ], [ 137.58082116000014, -5.142998955999815 ], [ 137.57276451900009, -5.120782158999873 ], [ 137.56104576900009, -5.115817966999828 ], [ 137.5561629570002, -5.121026299999812 ], [ 137.54029381600014, -5.144219658999873 ], [ 137.53305097700013, -5.14999765399989 ], [ 137.51929772200015, -5.148532809999836 ], [ 137.5092879570002, -5.142022393999866 ], [ 137.4921981130002, -5.123223565999808 ], [ 137.4819442070002, -5.117364190999865 ], [ 137.47380618600016, -5.115004164999903 ], [ 137.46810957100013, -5.110039971999868 ], [ 137.46485436300009, -5.095879815999865 ], [ 137.4326278000002, -5.103448174999869 ], [ 137.40357506600003, -5.097588799999869 ], [ 137.37777754000001, -5.082452080999872 ], [ 137.35564212300017, -5.061781507999854 ], [ 137.3632918630002, -5.054620049999869 ], [ 137.36801191500012, -5.04631926899981 ], [ 137.36996504000001, -5.036879164999903 ], [ 137.3691512380002, -5.026462497999887 ], [ 137.36304772200015, -5.026462497999887 ], [ 137.3496199880002, -5.040459893999866 ], [ 137.33464603000016, -5.030938408999873 ], [ 137.30787194100026, -4.99911874799983 ], [ 137.30933678500026, -5.021661065999808 ], [ 137.30160566500012, -5.026625257999854 ], [ 137.27654056100005, -5.020196221999868 ], [ 137.26807701900009, -5.013848565999808 ], [ 137.2671004570002, -4.999444268999866 ], [ 137.28256269600013, -4.939711195999792 ], [ 137.27881920700031, -4.936618747999887 ], [ 137.2324324880002, -4.969414971999811 ], [ 137.22437584700015, -4.982110283999873 ], [ 137.23210696700016, -4.99911874799983 ], [ 137.21900475400014, -5.013360283999816 ], [ 137.1694442070002, -4.991143487999864 ], [ 137.15211022200003, -4.974379164999846 ], [ 137.14966881600014, -4.945082289999846 ], [ 137.11540774800005, -4.979180596999868 ], [ 137.09009850400014, -4.96013762799987 ], [ 137.08773847700013, -4.943047783999816 ], [ 137.09595787900003, -4.921644789999959 ], [ 137.10173587300017, -4.889255466999941 ], [ 137.09498131600014, -4.889255466999941 ], [ 137.07300866000014, -4.923923434999949 ], [ 137.04184004000012, -4.943047783999816 ], [ 137.00652103000004, -4.945733330999872 ], [ 136.95386803500014, -4.922784112999807 ], [ 136.94654381600014, -4.917657158999873 ], [ 136.94410241000014, -4.910332940999865 ], [ 136.94996178500003, -4.899021091999884 ], [ 136.96192467500032, -4.891045830999929 ], [ 136.9736434250002, -4.885023695999848 ], [ 136.97885175900012, -4.879571221999925 ], [ 136.96924889400032, -4.869561455999815 ], [ 136.9472762380002, -4.875583591999828 ], [ 136.8745223320002, -4.919854424999869 ], [ 136.85377037900014, -4.928155205999872 ], [ 136.83179772200015, -4.931410414999903 ], [ 136.82211347700002, -4.928317966999941 ], [ 136.81185957100001, -4.920342705999872 ], [ 136.80396569100003, -4.91025156 ], [ 136.80062910200013, -4.900485934999836 ], [ 136.80298912900003, -4.882907809999949 ], [ 136.79916425900001, -4.88005950299987 ], [ 136.78638756600026, -4.876153252999984 ], [ 136.76343834700026, -4.874118747999944 ], [ 136.75310306100016, -4.88005950299987 ], [ 136.74317467500009, -4.881524346999868 ], [ 136.6958113940002, -4.84685637799987 ], [ 136.62647545700008, -4.822849216999941 ], [ 136.53785241000014, -4.773614190999922 ], [ 136.46371504000012, -4.736016533999816 ], [ 136.44019616000014, -4.715264580999815 ], [ 136.43344160200013, -4.71233489399981 ], [ 136.4130965500002, -4.711683851999965 ], [ 136.4028426440002, -4.707696221999868 ], [ 136.37566165500016, -4.683770440999808 ], [ 136.35547936300009, -4.677422783999873 ], [ 136.26734459700026, -4.676202080999872 ], [ 136.17701256600003, -4.649590752999814 ], [ 136.14665774800005, -4.626397393999866 ], [ 136.14600670700008, -4.622328382999854 ], [ 136.12191816500012, -4.619317315999808 ], [ 136.10670006600014, -4.612074476999908 ], [ 136.0947371750002, -4.60312265399989 ], [ 136.08073978000016, -4.594984632999854 ], [ 136.0629988940002, -4.590590101999851 ], [ 136.04965254000012, -4.590020440999808 ], [ 136.03581790500016, -4.586032809999836 ], [ 136.01587975400014, -4.571465752999927 ], [ 135.97046959700015, -4.51962656 ], [ 135.95045006600003, -4.506280205999872 ], [ 135.91228274800005, -4.498142184999892 ], [ 135.82894941500012, -4.498630466999941 ], [ 135.79273522200015, -4.485772393999866 ], [ 135.77621504000024, -4.494561455999872 ], [ 135.75033613400012, -4.49724700299987 ], [ 135.72461998800009, -4.495293877999814 ], [ 135.7080184250002, -4.489190362999864 ], [ 135.69955488400012, -4.487237237999921 ], [ 135.65609785200013, -4.485772393999866 ], [ 135.6142684250002, -4.474704684999892 ], [ 135.60474694100003, -4.46843840899993 ], [ 135.5874129570002, -4.46038176899981 ], [ 135.46656334700015, -4.446058851999851 ], [ 135.44361412900003, -4.440687757999854 ], [ 135.42953535200002, -4.430433851999851 ], [ 135.41334069100003, -4.436293226999794 ], [ 135.35914147200015, -4.443617445999792 ], [ 135.3305770190002, -4.439873955999872 ], [ 135.2719832690002, -4.458428643999866 ], [ 135.22779381600014, -4.461195570999848 ], [ 135.18555748800031, -4.448907158999873 ], [ 134.95915774800005, -4.318617445999905 ], [ 134.94312584700015, -4.305922132999967 ], [ 134.93620853000004, -4.290215752999984 ], [ 134.92741946700016, -4.275648695999848 ], [ 134.90658613400001, -4.264092705999815 ], [ 134.8818465500002, -4.256117445999792 ], [ 134.86109459700003, -4.252373955999872 ], [ 134.82349694100003, -4.259372653999833 ], [ 134.82007897200003, -4.259209893999866 ], [ 134.80982506600003, -4.254082940999922 ], [ 134.79224694100014, -4.238702080999929 ], [ 134.73975670700031, -4.204034112999921 ], [ 134.73340905000009, -4.197523695999848 ], [ 134.73072350400014, -4.187595309999836 ], [ 134.72584069100003, -4.150079033999816 ], [ 134.72388756600014, -4.142510674999983 ], [ 134.70639082100024, -4.137302341999884 ], [ 134.68116295700008, -4.136814059999892 ], [ 134.65805097700002, -4.133396091999884 ], [ 134.64820397200003, -4.11874765399989 ], [ 134.6552840500002, -4.099786065999865 ], [ 134.68775475400025, -4.073174737999921 ], [ 134.69654381600003, -4.053155205999872 ], [ 134.69410241000026, -4.045179945999792 ], [ 134.6806746750002, -4.032891533999816 ], [ 134.67603600400014, -4.026462497999944 ], [ 134.67457116000014, -4.016289971999868 ], [ 134.6792098320002, -3.960707289999959 ], [ 134.6884871750002, -3.947442315999808 ], [ 134.70337975400003, -3.940362237999864 ], [ 134.72388756600014, -3.937758070999848 ], [ 134.74089603000004, -3.939548434999836 ], [ 134.78223717500009, -3.949151299999812 ], [ 134.86443118600005, -3.953220309999892 ], [ 134.88209069100026, -3.957614841999884 ], [ 134.90707441500001, -3.975518487999921 ], [ 134.91627037900014, -3.978692315999979 ], [ 134.9277449880002, -3.976657809999836 ], [ 134.93572024800005, -3.971937757999854 ], [ 134.94141686300031, -3.967217705999815 ], [ 134.94703209700003, -3.965020440999865 ], [ 134.96745853000016, -3.951836846999868 ], [ 134.97095787900003, -3.947930596999811 ], [ 134.96778405000032, -3.936781507999854 ], [ 134.96029707100013, -3.939385674999869 ], [ 134.95142662900003, -3.947198174999983 ], [ 134.94361412900003, -3.951348565999808 ], [ 134.93091881600026, -3.948337498 ], [ 134.9238387380002, -3.943129164999903 ], [ 134.92123457100001, -3.93865325299987 ], [ 134.92261803500003, -3.937758070999848 ], [ 134.92066491000014, -3.93474700299987 ], [ 134.92090905000009, -3.93092213299991 ], [ 134.92042076900009, -3.926853122999887 ], [ 134.91627037900014, -3.92343515399989 ], [ 134.90845787900014, -3.922539971999868 ], [ 134.90186608200008, -3.925225518999866 ], [ 134.89576256600014, -3.92896900799991 ], [ 134.88892662900003, -3.93092213299991 ], [ 134.84457441500012, -3.930108330999929 ], [ 134.77003014400009, -3.918226820999848 ], [ 134.69223066500001, -3.914808851999965 ], [ 134.6860457690002, -3.91350676899998 ], [ 134.67579186300031, -3.908379815999865 ], [ 134.66968834700015, -3.914239190999808 ], [ 134.66602623800009, -3.924004815999865 ], [ 134.66236412900003, -3.93092213299991 ], [ 134.63355553500014, -3.945082289999959 ], [ 134.62029056100005, -3.954685153999833 ], [ 134.61459394600001, -3.968438408999873 ], [ 134.61150149800017, -3.988213799999869 ], [ 134.60222415500016, -4.000664971999868 ], [ 134.58716881600014, -4.008070570999905 ], [ 134.53256269600024, -4.022067966999828 ], [ 134.52523847700024, -4.026462497999944 ], [ 134.50912519600001, -4.015883070999848 ], [ 134.4843856130002, -3.990492445999848 ], [ 134.46387780000032, -3.978692315999979 ], [ 134.47836347700002, -3.961602471999925 ], [ 134.46697024800017, -3.943291924999869 ], [ 134.44703209700026, -3.926446221999868 ], [ 134.4365340500002, -3.91350676899998 ], [ 134.43043053500014, -3.90781015399989 ], [ 134.41675866000014, -3.904554945999848 ], [ 134.3921004570002, -3.903008721999868 ], [ 134.37525475400025, -3.899102471999811 ], [ 134.3335067070002, -3.868829033999816 ], [ 134.35141035200013, -3.899102471999811 ], [ 134.3603621750002, -3.925957940999865 ], [ 134.34896894600013, -3.943454684999836 ], [ 134.30616295700008, -3.94451262799987 ], [ 134.30616295700008, -3.951348565999808 ], [ 134.31861412900025, -3.958184502999814 ], [ 134.32960045700031, -3.968438408999873 ], [ 134.3374129570002, -3.981215101999794 ], [ 134.34034264400032, -3.996026299999983 ], [ 134.3266707690002, -4.019707940999865 ], [ 134.31527754000012, -4.020277601999851 ], [ 134.30933678500014, -4.015557549999869 ], [ 134.30600019600001, -4.009535414999959 ], [ 134.3027449880002, -4.006605726999851 ], [ 134.29273522200015, -4.000176690999808 ], [ 134.28386478000016, -3.98593515399989 ], [ 134.27222741000003, -3.971449476999851 ], [ 134.2544051440002, -3.965020440999865 ], [ 134.23487389400032, -3.962660414999959 ], [ 134.21119225400003, -3.955336195999792 ], [ 134.19117272200015, -3.943536065999922 ], [ 134.1826278000002, -3.927178643999923 ], [ 134.18148847700013, -3.917575778999833 ], [ 134.1762801440002, -3.900323174999812 ], [ 134.17514082100001, -3.893324476999851 ], [ 134.17042076900009, -3.888116143999866 ], [ 134.15967858200008, -3.892754815999865 ], [ 134.14812259200016, -3.900079033999987 ], [ 134.1411238940002, -3.903008721999868 ], [ 134.13396243600027, -3.890069268999866 ], [ 134.14421634200005, -3.874769789999903 ], [ 134.18580162900014, -3.842543226999794 ], [ 134.19263756600003, -3.835544529 ], [ 134.1909285820002, -3.826267184999836 ], [ 134.17310631600014, -3.787855726999851 ], [ 134.1616317070002, -3.771661065999865 ], [ 134.14698326900009, -3.757582289999846 ], [ 134.1274520190002, -3.74529387799987 ], [ 134.12224368600016, -3.753676039999846 ], [ 134.12330162900025, -3.76091887799987 ], [ 134.12647545700031, -3.768731377999984 ], [ 134.1274520190002, -3.779473565999865 ], [ 134.12647545700031, -3.799248955999929 ], [ 134.12240644600013, -3.805352471999868 ], [ 134.1103621750002, -3.817559502999984 ], [ 134.0918074880002, -3.823988539999903 ], [ 134.07447350400025, -3.812920830999872 ], [ 134.05738366000003, -3.798109632999854 ], [ 134.03931725400014, -3.793145440999808 ], [ 134.02320397200003, -3.805108330999872 ], [ 133.99935957100013, -3.846286716999941 ], [ 133.98764082100024, -3.855157158999873 ], [ 133.97103925900001, -3.850274346999811 ], [ 133.95899498800009, -3.837579033999816 ], [ 133.91334069100014, -3.729424737999864 ], [ 133.8960067070002, -3.70240650799991 ], [ 133.85271243600016, -3.653903903999947 ], [ 133.84359785200002, -3.63836028399993 ], [ 133.84009850400003, -3.61834075299987 ], [ 133.84099368600027, -3.597751559999836 ], [ 133.83814537900025, -3.590427341999828 ], [ 133.82984459700015, -3.587579033999873 ], [ 133.82252037900025, -3.589939059999949 ], [ 133.81324303500003, -3.595391533999873 ], [ 133.80445397200015, -3.602308851999908 ], [ 133.79908287900003, -3.608819268999866 ], [ 133.79542076900032, -3.631524346999811 ], [ 133.80339603000016, -3.654066665000016 ], [ 133.81413821700016, -3.67538827899989 ], [ 133.8232528000002, -3.70452239399981 ], [ 133.82911217500032, -3.714450778999833 ], [ 133.82927493600016, -3.721856377999814 ], [ 133.81576582100013, -3.724786065999865 ], [ 133.80982506600003, -3.720310153999947 ], [ 133.79908287900003, -3.690687757999854 ], [ 133.79021243600005, -3.680352471999811 ], [ 133.77759850400014, -3.669122002999927 ], [ 133.76295006600014, -3.660251559999892 ], [ 133.7475692070002, -3.656508070999848 ], [ 133.73259524800017, -3.662855726999851 ], [ 133.71656334700015, -3.672784112999864 ], [ 133.7031356130002, -3.672621351999794 ], [ 133.69605553500026, -3.649102471999868 ], [ 133.70728600400014, -3.63030364399981 ], [ 133.70972741000026, -3.621758721999981 ], [ 133.70801842500009, -3.610121351999851 ], [ 133.69841556100016, -3.590264580999985 ], [ 133.68978925900012, -3.564548434999892 ], [ 133.64820397200003, -3.50505950299987 ], [ 133.64144941500012, -3.483656507999854 ], [ 133.64185631600014, -3.461602471999868 ], [ 133.65316816500001, -3.44443124799983 ], [ 133.67896569100003, -3.437432549999869 ], [ 133.69678795700008, -3.42742278399993 ], [ 133.7021590500002, -3.404392184999892 ], [ 133.70020592500009, -3.379001559999949 ], [ 133.68336022200015, -3.304945570999905 ], [ 133.6831160820002, -3.232517184999949 ], [ 133.6909285820002, -3.216078382999967 ], [ 133.70972741000026, -3.232028903999947 ], [ 133.7138778000002, -3.224704684999892 ], [ 133.71583092500009, -3.215915623 ], [ 133.71656334700015, -3.193780205999815 ], [ 133.72242272200015, -3.18303801899981 ], [ 133.73568769600001, -3.183363539999846 ], [ 133.75806725400003, -3.190362237999807 ], [ 133.77116946700016, -3.175469658999873 ], [ 133.78394616000003, -3.131442966999941 ], [ 133.80250084700003, -3.122165622999887 ], [ 133.82260175900024, -3.115655205999929 ], [ 133.84644616000014, -3.087090752999814 ], [ 133.86394290500027, -3.080498955999872 ], [ 133.8828231130002, -3.091566664999903 ], [ 133.89909915500016, -3.112969658999816 ], [ 133.91407311300009, -3.12656015399989 ], [ 133.92945397200003, -3.114678643999923 ], [ 133.92359459700026, -3.111016533999873 ], [ 133.9194442070002, -3.106377862999864 ], [ 133.91675866000014, -3.099867445999962 ], [ 133.91578209700003, -3.09091562299983 ], [ 133.91228274800017, -3.08342864399998 ], [ 133.90406334700015, -3.079359632999797 ], [ 133.89478600400014, -3.076836846999868 ], [ 133.88770592500009, -3.07366301899981 ], [ 133.8789168630002, -3.065524997999887 ], [ 133.87037194100014, -3.055108330999815 ], [ 133.86394290500027, -3.04208749799983 ], [ 133.86052493600016, -3.025974216999884 ], [ 133.86304772200015, -3.008233330999872 ], [ 133.87769616000014, -2.979261976999851 ], [ 133.88160241000003, -2.963799737999864 ], [ 133.87964928500014, -2.952243747999944 ], [ 133.87435957100001, -2.940606377999814 ], [ 133.86736087300028, -2.930352471999868 ], [ 133.86052493600016, -2.922946873 ], [ 133.84376061300009, -2.927829684999892 ], [ 133.82569420700031, -2.928887627999814 ], [ 133.81755618600005, -2.93474700299987 ], [ 133.82984459700015, -2.953871351999965 ], [ 133.82789147200003, -2.959649346999811 ], [ 133.81519616000026, -2.98357512799987 ], [ 133.8090926440002, -3.010186455999815 ], [ 133.80160566500012, -3.018161716999941 ], [ 133.73414147200003, -3.052666924999983 ], [ 133.71998131600003, -3.063571872999887 ], [ 133.6909285820002, -3.092868747999887 ], [ 133.66822350400003, -3.122165622999887 ], [ 133.65552819100003, -3.188897393999866 ], [ 133.66334069100003, -3.361504815999808 ], [ 133.62769616000026, -3.416273695999905 ], [ 133.61361738400024, -3.421970309999892 ], [ 133.55884850400014, -3.433282158999873 ], [ 133.55103600400014, -3.431573174999869 ], [ 133.54558353000016, -3.424248955999872 ], [ 133.52849368600016, -3.386651299999869 ], [ 133.52466881600003, -3.38225676899981 ], [ 133.51400800900001, -3.37835051899981 ], [ 133.5131942070002, -3.38437265399989 ], [ 133.5185653000002, -3.403252862999864 ], [ 133.51937910200024, -3.43084075299987 ], [ 133.51197350400014, -3.43865325299987 ], [ 133.49057050900001, -3.437432549999869 ], [ 133.49057050900001, -3.444268487999864 ], [ 133.5112410820002, -3.455173434999836 ], [ 133.55062910200002, -3.468682549999812 ], [ 133.56910241000003, -3.481866143999866 ], [ 133.58228600400014, -3.500176690999808 ], [ 133.59017988400012, -3.522230726999908 ], [ 133.59180748800009, -3.545342705999872 ], [ 133.58619225400025, -3.566582940999865 ], [ 133.57593834700015, -3.580498955999815 ], [ 133.55925540500016, -3.596449476999851 ], [ 133.53988691500001, -3.609551690999808 ], [ 133.52165774800017, -3.614922783999873 ], [ 133.50562584700015, -3.622328382999967 ], [ 133.40886478000004, -3.722426039999903 ], [ 133.39665774800005, -3.755954684999836 ], [ 133.4087020190002, -3.800551040000016 ], [ 133.44019616000014, -3.827569268999866 ], [ 133.45557701900009, -3.846937757999854 ], [ 133.45337975400014, -3.865411065999808 ], [ 133.44312584700026, -3.872816664999903 ], [ 133.42074629000012, -3.880547783999873 ], [ 133.41179446700005, -3.886163018999866 ], [ 133.40308678500026, -3.896416924999926 ], [ 133.38819420700008, -3.92343515399989 ], [ 133.26937910200013, -4.052015882999797 ], [ 133.25098717500032, -4.066827080999872 ], [ 133.21094811300031, -4.078383070999792 ], [ 133.16391035200013, -4.076267184999892 ], [ 133.0791121750002, -4.060642184999892 ], [ 133.05152428500003, -4.061211846999981 ], [ 133.03516686300009, -4.070082289999903 ], [ 133.00749759200016, -4.104668877999814 ], [ 132.98991946700016, -4.113946221999868 ], [ 132.96941165500004, -4.111993096999811 ], [ 132.91814212300028, -4.091078382999854 ], [ 132.91228274800017, -4.090264580999872 ], [ 132.90772545700008, -4.088148695999848 ], [ 132.90162194100014, -4.081149997999887 ], [ 132.89625084700003, -4.068942966999884 ], [ 132.8969832690002, -4.048272393999866 ], [ 132.89136803500014, -4.036716403999833 ], [ 132.88111412900025, -4.027764580999929 ], [ 132.85938561300009, -4.016534112999807 ], [ 132.84994550900012, -4.009698174999926 ], [ 132.84115644600001, -3.998142184999949 ], [ 132.8315535820002, -3.975355726999851 ], [ 132.82585696700005, -3.965020440999865 ], [ 132.81690514400009, -3.957614841999884 ], [ 132.80567467500009, -3.949965101999851 ], [ 132.79590905000009, -3.94060637799987 ], [ 132.79175866000003, -3.927178643999923 ], [ 132.7963973320002, -3.918145440999865 ], [ 132.80681399800017, -3.922133070999848 ], [ 132.82585696700005, -3.937758070999848 ], [ 132.82634524800005, -3.926446221999868 ], [ 132.82455488400012, -3.916436455999985 ], [ 132.80209394600024, -3.858168226999851 ], [ 132.78793379000001, -3.844008070999848 ], [ 132.78492272200003, -3.837823174999869 ], [ 132.78589928500014, -3.803969007999797 ], [ 132.78492272200003, -3.793145440999808 ], [ 132.73096764400009, -3.682305596999868 ], [ 132.72966556100016, -3.649102471999868 ], [ 132.75611412900025, -3.627536716999828 ], [ 132.79712975400025, -3.634047132999854 ], [ 132.8422957690002, -3.646579684999836 ], [ 132.88111412900025, -3.642836195999792 ], [ 132.89014733200008, -3.634535414999903 ], [ 132.89079837300028, -3.626885674999869 ], [ 132.88835696700016, -3.618584893999923 ], [ 132.88795006600014, -3.608819268999866 ], [ 132.8916121750002, -3.59490325299987 ], [ 132.89625084700003, -3.586358330999872 ], [ 132.91187584700015, -3.570245049999926 ], [ 132.92750084700015, -3.561130466999884 ], [ 132.93181399800028, -3.554131768999923 ], [ 132.92546634200016, -3.543226820999848 ], [ 132.91529381600003, -3.534844658999873 ], [ 132.90756269600013, -3.529961846999811 ], [ 132.90113366000014, -3.524021092 ], [ 132.89478600400025, -3.511895440999808 ], [ 132.88086998800009, -3.475355726999965 ], [ 132.8715926440002, -3.471368096999868 ], [ 132.84994550900012, -3.470961195999905 ], [ 132.83187910200013, -3.461032809999949 ], [ 132.82113691500012, -3.437432549999869 ], [ 132.81275475400025, -3.389743747999887 ], [ 132.81185957100013, -3.36663176899981 ], [ 132.81902103000016, -3.303643487999807 ], [ 132.81169681100016, -3.281670830999985 ], [ 132.7944442070002, -3.271661065999808 ], [ 132.77409915500004, -3.269789320999905 ], [ 132.7407332690002, -3.27654387799987 ], [ 132.7338973320002, -3.279961846999981 ], [ 132.72966556100016, -3.286065362999864 ], [ 132.72934004000012, -3.298435154 ], [ 132.73755944100014, -3.321058851999851 ], [ 132.73324629000024, -3.330987237999864 ], [ 132.71412194100014, -3.340020440999865 ], [ 132.69214928500026, -3.338148695999905 ], [ 132.67115319100003, -3.328545830999929 ], [ 132.65447024800028, -3.31389739399981 ], [ 132.64893639400009, -3.304864190999808 ], [ 132.63404381600014, -3.272393487999864 ], [ 132.62614993600005, -3.262627862999807 ], [ 132.60303795700008, -3.241875908999873 ], [ 132.60222415500027, -3.23186614399981 ], [ 132.61638431100016, -3.224867445999905 ], [ 132.6298934250002, -3.215101820999962 ], [ 132.62720787900003, -3.197360934999892 ], [ 132.62061608200031, -3.192315362999864 ], [ 132.59644616000003, -3.179375908999873 ], [ 132.58936608200008, -3.17685312299983 ], [ 132.58179772200003, -3.170342705999872 ], [ 132.57260175900012, -3.14218515399989 ], [ 132.56861412900025, -3.13583749799983 ], [ 132.56324303500003, -3.13046640399989 ], [ 132.55933678500014, -3.118747654 ], [ 132.55307050900024, -3.10702890399989 ], [ 132.54118899800028, -3.101657809999949 ], [ 132.53394616000014, -3.097344658999873 ], [ 132.5146590500002, -3.078057549999812 ], [ 132.50709069100003, -3.07366301899981 ], [ 132.49586022200015, -3.070570570999848 ], [ 132.48845462300017, -3.063083591999884 ], [ 132.4824324880002, -3.053887627999814 ], [ 132.47584069100003, -3.04648202899989 ], [ 132.36573326900032, -2.985284112999977 ], [ 132.3398543630002, -2.97763437299983 ], [ 132.3422957690002, -2.95818450299987 ], [ 132.3256942070002, -2.946547132999854 ], [ 132.27767988400001, -2.936618747999944 ], [ 132.26685631600014, -2.935479424999926 ], [ 132.23316491000014, -2.936618747999944 ], [ 132.21989993600016, -2.934258721999868 ], [ 132.20948326900009, -2.928969007999797 ], [ 132.19971764400032, -2.922539971999811 ], [ 132.18832441500001, -2.916680596999868 ], [ 132.18458092500032, -2.936211846999925 ], [ 132.16879316500012, -2.94646575299987 ], [ 132.15105228000016, -2.94670989399981 ], [ 132.1406356130002, -2.936618747999944 ], [ 132.1313582690002, -2.941338799999869 ], [ 132.12330162900003, -2.942315362999807 ], [ 132.1152449880002, -2.94052499799983 ], [ 132.10645592500032, -2.936618747999944 ], [ 132.11109459700015, -2.954278252999927 ], [ 132.10124759200005, -2.959893487999864 ], [ 132.07545006600003, -2.957696221999868 ], [ 132.07349694100014, -2.951429945999905 ], [ 132.05795332100013, -2.916680596999868 ], [ 132.03874759200016, -2.926446221999868 ], [ 131.99691816500012, -2.914808851999794 ], [ 131.98218834700015, -2.929782809999892 ], [ 131.97608483200008, -2.929782809999892 ], [ 131.97787519600001, -2.914646091999828 ], [ 131.98454837300017, -2.907647393999866 ], [ 131.9936629570002, -2.903090101999908 ], [ 132.00342858200008, -2.896172783999873 ], [ 132.01286868600016, -2.88591887799987 ], [ 132.01775149800017, -2.878594658999873 ], [ 132.02393639400032, -2.854668877999927 ], [ 132.00570722700024, -2.85271575299987 ], [ 131.9897567070002, -2.848402601999851 ], [ 131.9897567070002, -2.840997002999984 ], [ 132.00440514400032, -2.83709075299987 ], [ 132.02247155000032, -2.829034112999864 ], [ 132.03785241000014, -2.81755950299987 ], [ 132.04444420700008, -2.803399346999868 ], [ 132.03500410200024, -2.793552341999828 ], [ 132.01286868600016, -2.790948174999926 ], [ 131.96558678500014, -2.793145440999865 ], [ 131.95801842500009, -2.788181247999887 ], [ 131.97266686300009, -2.776950779 ], [ 132.0102645190002, -2.75904713299991 ], [ 132.02719160200024, -2.75904713299991 ], [ 132.04444420700008, -2.761163018999866 ], [ 132.05827884200016, -2.758558851999965 ], [ 132.0654403000002, -2.744805596999811 ], [ 132.0742293630002, -2.755791924999869 ], [ 132.0815535820002, -2.757907809999892 ], [ 132.08423912900014, -2.751722914999903 ], [ 132.07846113400012, -2.738539320999905 ], [ 132.08806399800028, -2.735609632999854 ], [ 132.1303817070002, -2.738539320999905 ], [ 132.1557723320002, -2.73349374799983 ], [ 132.18148847700024, -2.724867445999962 ], [ 132.16016686300009, -2.715590101999794 ], [ 132.1108504570002, -2.719414971999811 ], [ 132.1132918630002, -2.704359632999797 ], [ 132.12134850400025, -2.697930596999868 ], [ 132.1616317070002, -2.683282158999873 ], [ 132.18148847700024, -2.683282158999873 ], [ 132.1948348320002, -2.678317966999828 ], [ 132.20191491000003, -2.676446221999925 ], [ 132.31177819100003, -2.676446221999925 ], [ 132.3256942070002, -2.679864190999865 ], [ 132.3671981130002, -2.696954033999816 ], [ 132.38200931100005, -2.699314059999836 ], [ 132.41553795700008, -2.696954033999816 ], [ 132.40805097700002, -2.696954033999816 ], [ 132.41309655000032, -2.696465752999814 ], [ 132.42847741000014, -2.696954033999816 ], [ 132.4243270190002, -2.71038176899981 ], [ 132.43002363400012, -2.721449476999851 ], [ 132.43336022200015, -2.732191664999846 ], [ 132.42115319100014, -2.744805596999811 ], [ 132.43783613400012, -2.745049737999864 ], [ 132.45997155000009, -2.732679945999905 ], [ 132.47584069100003, -2.731133721999868 ], [ 132.47584069100003, -2.724867445999962 ], [ 132.46892337300005, -2.707614841999941 ], [ 132.48462975400014, -2.699476820999905 ], [ 132.5063582690002, -2.698011976999851 ], [ 132.51734459700003, -2.70077890399989 ], [ 132.52540123800009, -2.710544528999947 ], [ 132.54428144600013, -2.713799737999807 ], [ 132.56674238400012, -2.714532158999816 ], [ 132.58570397200015, -2.717461846999868 ], [ 132.62061608200031, -2.740899346999925 ], [ 132.67904707100001, -2.801690362999864 ], [ 132.71599368600005, -2.814222914999846 ], [ 132.72828209700003, -2.813164971999811 ], [ 132.73658287900014, -2.809991143999866 ], [ 132.75505618600016, -2.796563408999873 ], [ 132.7636824880002, -2.786309502999814 ], [ 132.77686608200008, -2.779229424999869 ], [ 132.83529707100013, -2.736016533999873 ], [ 132.8530379570002, -2.717461846999868 ], [ 132.90300540500016, -2.64592864399981 ], [ 132.9277449880002, -2.627699476999908 ], [ 132.94939212300005, -2.580254815999808 ], [ 133.0083113940002, -2.514418226999965 ], [ 133.0171004570002, -2.494886976999851 ], [ 133.03353925900001, -2.479424737999921 ], [ 133.11215254000012, -2.44280364399981 ], [ 133.13770592500009, -2.435723565999865 ], [ 133.14389082100024, -2.43499114399981 ], [ 133.15154056100016, -2.43287525799991 ], [ 133.15886478000027, -2.429864190999922 ], [ 133.16472415500004, -2.426039320999905 ], [ 133.1728621750002, -2.422051690999808 ], [ 133.1801863940002, -2.423760674999812 ], [ 133.1875106130002, -2.427666924999812 ], [ 133.19629967500009, -2.429457289999903 ], [ 133.21314537900003, -2.426364841999828 ], [ 133.23959394600001, -2.416761976999965 ], [ 133.25847415500016, -2.416436455999929 ], [ 133.31234785200013, -2.443047783999873 ], [ 133.31763756600014, -2.456719658999873 ], [ 133.32056725400025, -2.491875908999873 ], [ 133.32601972700013, -2.505140882999797 ], [ 133.3383895190002, -2.496189059999892 ], [ 133.35377037900014, -2.496270440999922 ], [ 133.36898847700013, -2.502536716999884 ], [ 133.38070722700013, -2.511976820999905 ], [ 133.39031009200016, -2.526625257999854 ], [ 133.39210045700008, -2.538669528999833 ], [ 133.38819420700008, -2.566582940999865 ], [ 133.38835696700005, -2.652276299999869 ], [ 133.38070722700013, -2.676446221999925 ], [ 133.40300540500027, -2.675225518999923 ], [ 133.40805097700013, -2.659600518999923 ], [ 133.40186608200031, -2.615004164999846 ], [ 133.40455162900014, -2.591403903999833 ], [ 133.41098066500012, -2.56650156 ], [ 133.43799889400009, -2.503024997999887 ], [ 133.44556725400014, -2.494724216999884 ], [ 133.4565535820002, -2.498304945999962 ], [ 133.45866946700016, -2.506931247999887 ], [ 133.4565535820002, -2.54615650799991 ], [ 133.46119225400014, -2.595310153999947 ], [ 133.4589949880002, -2.618096612999864 ], [ 133.45036868600027, -2.642347914999959 ], [ 133.46509850400003, -2.636163018999866 ], [ 133.4731551440002, -2.615980726999851 ], [ 133.47689863400012, -2.570407809999892 ], [ 133.47478274800005, -2.558363539999903 ], [ 133.47087649800005, -2.545098565999922 ], [ 133.46908613400012, -2.532159112999864 ], [ 133.47348066500024, -2.521661065999865 ], [ 133.48503665500016, -2.516534112999864 ], [ 133.49252363400012, -2.523532809999836 ], [ 133.49740644600001, -2.533949476999851 ], [ 133.50945071700005, -2.550062757999797 ], [ 133.51221764400009, -2.572198174999869 ], [ 133.51872806100016, -2.589613539999846 ], [ 133.53834069100014, -2.587090752999814 ], [ 133.5395613940002, -2.583265882999797 ], [ 133.53972415500004, -2.568780205999872 ], [ 133.54175866000014, -2.563571872999944 ], [ 133.5473738940002, -2.560804945999905 ], [ 133.5595809250002, -2.561618747999944 ], [ 133.56568444100003, -2.560316664999903 ], [ 133.58562259200016, -2.552422783999873 ], [ 133.5952254570002, -2.545668226999908 ], [ 133.60670006600003, -2.532484632999967 ], [ 133.61524498800031, -2.541110934999892 ], [ 133.62232506600003, -2.541761976999851 ], [ 133.62842858200008, -2.539646091999884 ], [ 133.63396243600016, -2.539320570999905 ], [ 133.64063561300009, -2.542901299999869 ], [ 133.66724694100014, -2.563409112999807 ], [ 133.6733504570002, -2.574802341999884 ], [ 133.67546634200016, -2.588067315999808 ], [ 133.6762801440002, -2.649021091999884 ], [ 133.67188561300031, -2.65943775799991 ], [ 133.6684676440002, -2.670830987999864 ], [ 133.68238366000014, -2.717461846999868 ], [ 133.69174238400024, -2.704278252999814 ], [ 133.69239342500009, -2.691501559999892 ], [ 133.68978925900012, -2.676202080999929 ], [ 133.68921959700003, -2.656019789999903 ], [ 133.6933699880002, -2.637302341999884 ], [ 133.70679772200015, -2.597832940999865 ], [ 133.70972741000026, -2.577243747999887 ], [ 133.70972741000026, -2.521172783999873 ], [ 133.71314537900014, -2.511976820999905 ], [ 133.73503665500004, -2.516778252999814 ], [ 133.74740644600013, -2.529229424999926 ], [ 133.76433353000004, -2.566582940999865 ], [ 133.78541100400014, -2.597751559999949 ], [ 133.79908287900003, -2.642347914999959 ], [ 133.81104576900032, -2.653985283999873 ], [ 133.8169051440002, -2.649021091999884 ], [ 133.81918379000012, -2.632989190999808 ], [ 133.81959069100014, -2.611586195999962 ], [ 133.82789147200003, -2.54989999799983 ], [ 133.82300866000026, -2.539320570999905 ], [ 133.8217879570002, -2.535577080999872 ], [ 133.80884850400025, -2.520196221999811 ], [ 133.80591881600014, -2.518243096999868 ], [ 133.80396569100014, -2.506768487999807 ], [ 133.80486087300017, -2.497002862999977 ], [ 133.8095809250002, -2.48748137799987 ], [ 133.81959069100014, -2.477227471999868 ], [ 133.8017684250002, -2.470310153999833 ], [ 133.76726321700016, -2.471937757999854 ], [ 133.75123131600026, -2.462985934999836 ], [ 133.74097741000014, -2.445896091999884 ], [ 133.74724368600016, -2.437920830999872 ], [ 133.76319420700031, -2.435723565999865 ], [ 133.78174889400032, -2.435723565999865 ], [ 133.82618248800031, -2.426202080999872 ], [ 133.85010826900009, -2.424248955999815 ], [ 133.86052493600016, -2.432549737999807 ], [ 133.8662215500002, -2.44296640399989 ], [ 133.89332116000014, -2.465997002999927 ], [ 133.90211022200015, -2.477227471999868 ], [ 133.90837649800028, -2.477227471999868 ], [ 133.8964949880002, -2.457940362999807 ], [ 133.87647545700008, -2.43287525799991 ], [ 133.86646569100003, -2.411390882999797 ], [ 133.88461347700002, -2.402113539999846 ], [ 133.9546004570002, -2.409112237999807 ], [ 133.98658287900003, -2.406182549999869 ], [ 134.00513756600003, -2.388441664999903 ], [ 133.94890384200005, -2.390394789999846 ], [ 133.9209090500002, -2.387627862999864 ], [ 133.89869225400014, -2.377618096999811 ], [ 133.89454186300031, -2.363376559999892 ], [ 133.94507897200015, -2.343926690999808 ], [ 133.96355228000004, -2.326429945999848 ], [ 133.93783613400001, -2.32732512799987 ], [ 133.89283287900014, -2.340264580999872 ], [ 133.86736087300028, -2.34124114399981 ], [ 133.86736087300028, -2.333916924999926 ], [ 133.9135848320002, -2.319512627999927 ], [ 133.93441816500012, -2.308689059999836 ], [ 133.94996178500014, -2.292901299999812 ], [ 133.95704186300031, -2.272637627999814 ], [ 133.95972741000003, -2.246677341999884 ], [ 133.95736738400012, -2.221449476999965 ], [ 133.94996178500014, -2.203545830999872 ], [ 133.93970787900014, -2.255059502999984 ], [ 133.92896569100014, -2.274183851999851 ], [ 133.90837649800028, -2.258721612999807 ], [ 133.90211022200015, -2.258721612999807 ], [ 133.87419681100005, -2.281670830999815 ], [ 133.85474694100014, -2.294122002999814 ], [ 133.84009850400003, -2.299737237999921 ], [ 133.82349694100014, -2.294854424999869 ], [ 133.80730228000027, -2.27117278399993 ], [ 133.79566491000014, -2.265557549999869 ], [ 133.7920028000002, -2.260186455999872 ], [ 133.79916425900001, -2.248630466999884 ], [ 133.81316165500004, -2.236911716999941 ], [ 133.84750410200013, -2.22771575299987 ], [ 133.86304772200015, -2.21795012799987 ], [ 133.87476647200026, -2.204685153999947 ], [ 133.88160241000003, -2.189873955999929 ], [ 133.9013778000002, -2.19841887799987 ], [ 133.9170028000002, -2.19085051899981 ], [ 133.93197675900012, -2.177504164999903 ], [ 133.94996178500014, -2.169366143999923 ], [ 133.94312584700015, -2.162530205999872 ], [ 133.93116295700031, -2.168633721999868 ], [ 133.91293379000024, -2.175225518999866 ], [ 133.8979598320002, -2.175469658999987 ], [ 133.89527428500014, -2.162530205999872 ], [ 133.90040123800009, -2.15927499799983 ], [ 133.9218856130002, -2.152764580999872 ], [ 133.92945397200003, -2.148858330999872 ], [ 133.93279056100016, -2.142266533999987 ], [ 133.93531334700015, -2.125664971999811 ], [ 133.93970787900014, -2.11825937299983 ], [ 133.9404403000002, -2.107598565999808 ], [ 133.92221113400001, -2.104424737999921 ], [ 133.89909915500016, -2.106377862999977 ], [ 133.88461347700002, -2.111423435 ], [ 133.87916100400025, -2.110772393999866 ], [ 133.86850019600013, -2.108168226999965 ], [ 133.85816491000003, -2.107354424999926 ], [ 133.85368899800017, -2.111423435 ], [ 133.83855228000016, -2.136000257999854 ], [ 133.83326256600003, -2.142185154 ], [ 133.82447350400003, -2.145440362999864 ], [ 133.8076278000002, -2.146579684999892 ], [ 133.79908287900003, -2.148858330999872 ], [ 133.77320397200015, -2.165297132999854 ], [ 133.76433353000004, -2.169366143999923 ], [ 133.72608483200008, -2.170505466999941 ], [ 133.7099715500002, -2.175551039999846 ], [ 133.70346113400012, -2.193617445999905 ], [ 133.69581139400009, -2.197849216999884 ], [ 133.67896569100003, -2.204278252999927 ], [ 133.66211998800009, -2.213962497999887 ], [ 133.65447024800017, -2.22771575299987 ], [ 133.6518660820002, -2.234144789999903 ], [ 133.64576256600026, -2.236016533999873 ], [ 133.63819420700031, -2.233656507999854 ], [ 133.63086998800031, -2.22771575299987 ], [ 133.62330162900014, -2.225274346999868 ], [ 133.61304772200015, -2.228285414999846 ], [ 133.59359785200013, -2.23756275799991 ], [ 133.59685306100027, -2.195082289999846 ], [ 133.59359785200013, -2.183038018999866 ], [ 133.57715905000009, -2.220472914999959 ], [ 133.56462649800005, -2.237888278999947 ], [ 133.54859459700026, -2.245049737999864 ], [ 133.53305097700024, -2.238457940999808 ], [ 133.52125084700015, -2.209649346999868 ], [ 133.50416100400014, -2.203545830999872 ], [ 133.50416100400014, -2.211032809999836 ], [ 133.5146590500002, -2.226006768999866 ], [ 133.49976647200026, -2.230726820999905 ], [ 133.47608483200008, -2.231540622999887 ], [ 133.44556725400014, -2.237888278999947 ], [ 133.40723717500009, -2.222263278999947 ], [ 133.38819420700008, -2.217217705999815 ], [ 133.34164472700013, -2.222751559999949 ], [ 133.31657962300017, -2.222588799999983 ], [ 133.30551191500024, -2.21404387799987 ], [ 133.29615319100003, -2.204196872999944 ], [ 133.27426191500012, -2.206312757999967 ], [ 133.23121178500003, -2.217217705999815 ], [ 133.19214928500014, -2.21428801899981 ], [ 133.1694442070002, -2.216892184999892 ], [ 133.13502037900014, -2.238457940999808 ], [ 133.11231530000032, -2.242933851999851 ], [ 133.06609134200016, -2.245049737999864 ], [ 133.02019290500016, -2.255791924999812 ], [ 132.98121178500014, -2.272149346999811 ], [ 132.94361412900025, -2.283379815999922 ], [ 132.90162194100014, -2.279229424999869 ], [ 132.83952884200016, -2.24911874799983 ], [ 132.81592858200031, -2.245049737999864 ], [ 132.79330488400012, -2.249444268999866 ], [ 132.77076256600014, -2.260023695999905 ], [ 132.6987410820002, -2.305352471999811 ], [ 132.68873131600014, -2.307224216999884 ], [ 132.6806746750002, -2.303155205999929 ], [ 132.67562910200013, -2.295993747999887 ], [ 132.66928144600024, -2.289157809999949 ], [ 132.65796959700015, -2.286065362999807 ], [ 132.63672936300009, -2.277276299999812 ], [ 132.62671959700015, -2.256442966999828 ], [ 132.62094160200024, -2.231540622999887 ], [ 132.61353600400014, -2.211032809999836 ], [ 132.60279381600014, -2.201755466999884 ], [ 132.5830184250002, -2.19085051899981 ], [ 132.56039472700013, -2.185642184999836 ], [ 132.54118899800028, -2.193617445999905 ], [ 132.52369225400014, -2.204196872999944 ], [ 132.45533287900025, -2.217217705999815 ], [ 132.38493899800017, -2.256524346999811 ], [ 132.34791100400014, -2.270114842 ], [ 132.3056746750002, -2.265557549999869 ], [ 132.28052819100003, -2.249769789999903 ], [ 132.26465905000009, -2.228285414999846 ], [ 132.2519637380002, -2.20476653399993 ], [ 132.23617597700013, -2.183038018999866 ], [ 132.21452884200028, -2.165785414999903 ], [ 132.07341556100016, -2.105157158999873 ], [ 132.0483504570002, -2.08318450299987 ], [ 132.04444420700008, -2.059502862999807 ], [ 132.05258222700002, -2.052829684999892 ], [ 132.0800887380002, -2.037692966999884 ], [ 132.08594811300009, -2.028903904 ], [ 132.09058678500003, -2.015557549999869 ], [ 132.10181725400014, -2.006931247999887 ], [ 132.12696373800009, -1.998142184999836 ], [ 132.09961998800009, -2.001234632999797 ], [ 132.05323326900032, -2.015394789999903 ], [ 132.0273543630002, -2.018487237999807 ], [ 132.00342858200008, -1.983819268999866 ], [ 131.98324629000012, -1.972588799999869 ], [ 131.97291100400003, -1.964613539999903 ], [ 131.96859785200002, -1.953383070999905 ], [ 131.97103925900012, -1.943129164999959 ], [ 131.97543379000012, -1.932224216999884 ], [ 131.97730553500003, -1.921644789999903 ], [ 131.97234134200005, -1.912367445999962 ], [ 131.96469160200013, -1.908868096999868 ], [ 131.95687910200024, -1.907647393999866 ], [ 131.9492293630002, -1.904473565999808 ], [ 131.94190514400009, -1.895114841999941 ], [ 131.93832441500024, -1.883721612999807 ], [ 131.94190514400009, -1.85068124799983 ], [ 131.94109134200016, -1.83749765399989 ], [ 131.93824303500026, -1.828301690999922 ], [ 131.9277449880002, -1.80575937299983 ], [ 131.9492293630002, -1.794691664999903 ], [ 131.9633895190002, -1.77849700299987 ], [ 131.97535241000014, -1.760430596999868 ], [ 131.9897567070002, -1.744805596999868 ], [ 132.00709069100014, -1.732191664999959 ], [ 132.01832116000003, -1.721286716999884 ], [ 132.02247155000032, -1.706312757999854 ], [ 132.01832116000003, -1.682793877999927 ], [ 132.01880944100003, -1.684014580999929 ], [ 132.02019290500016, -1.685642184999949 ], [ 132.02198326900009, -1.683851820999962 ], [ 132.02393639400032, -1.675957940999865 ], [ 132.0009871750002, -1.677911065999865 ], [ 131.96753991000026, -1.697198174999869 ], [ 131.92725670700008, -1.70623137799987 ], [ 131.9174910820002, -1.707289320999905 ], [ 131.9096785820002, -1.703301690999865 ], [ 131.9004012380002, -1.690199476999794 ], [ 131.90113366000003, -1.684177342 ], [ 131.90577233200008, -1.677422783999873 ], [ 131.90870201900009, -1.672051690999865 ], [ 131.90137780000009, -1.66765715899993 ], [ 131.89527428500003, -1.662855726999851 ], [ 131.88941491000026, -1.657159112999864 ], [ 131.8867293630002, -1.65203215899993 ], [ 131.89356530000009, -1.611016533999816 ], [ 131.89673912900014, -1.601495049999926 ], [ 131.91089928500026, -1.590264580999815 ], [ 131.91407311300031, -1.583428643999923 ], [ 131.92058353000004, -1.579196872999887 ], [ 131.94906660200013, -1.57333749799983 ], [ 131.95557701900032, -1.56975676899998 ], [ 131.97632897200003, -1.548597914999846 ], [ 131.98218834700015, -1.53875090899993 ], [ 131.96404056100016, -1.53875090899993 ], [ 131.90577233200008, -1.567071221999868 ], [ 131.8798934250002, -1.573500257999797 ], [ 131.88884524800017, -1.556573174999812 ], [ 131.88347415500016, -1.550876559999836 ], [ 131.87126712300017, -1.553155205999929 ], [ 131.85938561300009, -1.559828382999854 ], [ 131.82146243600016, -1.598239841999884 ], [ 131.80486087300017, -1.607598565999808 ], [ 131.79761803500003, -1.580824476999794 ], [ 131.80640709700015, -1.54998137799987 ], [ 131.81104576900009, -1.520440362999977 ], [ 131.79118899800017, -1.497735283999816 ], [ 131.78972415500004, -1.525648695999848 ], [ 131.78402754000012, -1.547458591999828 ], [ 131.77165774800017, -1.563246351999851 ], [ 131.75017337300017, -1.573500257999797 ], [ 131.7231551440002, -1.57195403399993 ], [ 131.70777428500026, -1.555840752999984 ], [ 131.70671634200016, -1.53476327899989 ], [ 131.72291100400025, -1.518243096999868 ], [ 131.70378665500016, -1.511000257999854 ], [ 131.68506920700031, -1.514906507999854 ], [ 131.66635175900001, -1.522393487999807 ], [ 131.64722741000014, -1.525648695999848 ], [ 131.62875410200024, -1.52092864399998 ], [ 131.61353600400014, -1.51116301899981 ], [ 131.58871504000012, -1.48756275799991 ], [ 131.57309004000012, -1.480157158999873 ], [ 131.55250084700015, -1.476983330999815 ], [ 131.52019290500027, -1.476739190999865 ], [ 131.51392662900025, -1.475192966999828 ], [ 131.50782311300009, -1.47193775799991 ], [ 131.50049889400032, -1.469659112999921 ], [ 131.48951256600003, -1.470472914999959 ], [ 131.47754967500009, -1.47405364399981 ], [ 131.46908613400012, -1.479099216999828 ], [ 131.46566816500001, -1.486586195999905 ], [ 131.46900475400014, -1.497735283999816 ], [ 131.45687910200013, -1.502862237999921 ], [ 131.44613691500012, -1.503838799999926 ], [ 131.43653405000032, -1.501722914999903 ], [ 131.42750084700015, -1.497735283999816 ], [ 131.40495853000016, -1.46990325299987 ], [ 131.40064537900014, -1.467054945999905 ], [ 131.39665774800017, -1.461032809999836 ], [ 131.38982181100016, -1.456801040000016 ], [ 131.38721764400009, -1.45077890399989 ], [ 131.3969832690002, -1.439385674999926 ], [ 131.40186608200008, -1.427341403999833 ], [ 131.39535566500012, -1.413750908999873 ], [ 131.38363691500001, -1.40195077899989 ], [ 131.37281334700015, -1.394707940999865 ], [ 131.34213300900001, -1.403578382999854 ], [ 131.32227623800009, -1.401055596999811 ], [ 131.27711022200015, -1.37428150799991 ], [ 131.2749129570002, -1.39185963299991 ], [ 131.29200280000009, -1.410088799999812 ], [ 131.3349715500002, -1.439385674999926 ], [ 131.33692467500009, -1.453057549999869 ], [ 131.3237410820002, -1.469170830999872 ], [ 131.30518639400032, -1.483086846999811 ], [ 131.29151451900032, -1.490980726999794 ], [ 131.2573348320002, -1.497735283999816 ], [ 131.22543379000001, -1.515557549999812 ], [ 131.20573978000027, -1.523614190999865 ], [ 131.19849694100014, -1.521254164999959 ], [ 131.1928817070002, -1.494805596999811 ], [ 131.1865340500002, -1.485039971999868 ], [ 131.17750084700015, -1.477308851999851 ], [ 131.16724694100014, -1.470472914999959 ], [ 131.12631269600013, -1.453301690999922 ], [ 131.08643639400009, -1.451267184999892 ], [ 131.00359134200005, -1.456231377999927 ], [ 130.97730553500003, -1.452894789999903 ], [ 130.96029707100024, -1.446221612999864 ], [ 130.95093834700003, -1.433689059999836 ], [ 130.94825280000032, -1.412204684999836 ], [ 130.9531356130002, -1.405043226999908 ], [ 130.98585045700008, -1.391289971999981 ], [ 130.99952233200008, -1.379082940999865 ], [ 131.00440514400009, -1.372328382999854 ], [ 131.03012129000001, -1.298516533999816 ], [ 131.02759850400014, -1.284112237999864 ], [ 131.03003991000003, -1.275567315999922 ], [ 131.04078209700003, -1.271905205999872 ], [ 131.04216556100005, -1.267836195999905 ], [ 131.05738366000003, -1.247735283999987 ], [ 131.07447350400025, -1.237562757999854 ], [ 131.1552840500002, -1.224541924999869 ], [ 131.18165123800031, -1.217217705999872 ], [ 131.18864993600005, -1.207207940999865 ], [ 131.20215905000009, -1.162692966999941 ], [ 131.23161868600016, -1.12607187299983 ], [ 131.23617597700002, -1.117282809999949 ], [ 131.23951256600026, -1.105645440999865 ], [ 131.25416100400014, -1.080254815999922 ], [ 131.2573348320002, -1.062676690999922 ], [ 131.25367272200026, -1.027601820999905 ], [ 131.25709069100014, -1.014336846999925 ], [ 131.27100670700008, -1.003676039999846 ], [ 131.26636803500003, -0.987888278999833 ], [ 131.27149498800031, -0.949395440999922 ], [ 131.26351972700002, -0.92929452899989 ], [ 131.27019290500004, -0.92685312299983 ], [ 131.29151451900032, -0.914971612999921 ], [ 131.25025475400025, -0.872653904 ], [ 131.2353621750002, -0.846449476999851 ], [ 131.24301191500012, -0.819431247999887 ], [ 131.33220462300017, -0.792738539999903 ], [ 131.3735457690002, -0.787855726999908 ], [ 131.38754316500012, -0.78264739399981 ], [ 131.39877363400001, -0.766289971999811 ], [ 131.4267684250002, -0.759454033999987 ], [ 131.43799889400032, -0.754001559999836 ], [ 131.45036868600005, -0.750095309999836 ], [ 131.4882918630002, -0.746840101999794 ], [ 131.49634850400003, -0.740329684999892 ], [ 131.50294030000009, -0.733330987999864 ], [ 131.51791425900012, -0.731703382999797 ], [ 131.53419030000032, -0.733493747999887 ], [ 131.54476972700013, -0.736911716999884 ], [ 131.52344811300031, -0.761976820999905 ], [ 131.5166121750002, -0.774346612999864 ], [ 131.51677493600016, -0.785251559999892 ], [ 131.53288821700005, -0.78264739399981 ], [ 131.55347741000003, -0.776788018999866 ], [ 131.5712996750002, -0.769219658999816 ], [ 131.57886803500003, -0.761000257999854 ], [ 131.59017988400012, -0.756524346999981 ], [ 131.77955162900025, -0.719170830999815 ], [ 131.86345462300005, -0.691989842 ], [ 131.8764754570002, -0.689629815999922 ], [ 131.8842879570002, -0.681898695999905 ], [ 131.90845787900014, -0.63388437299983 ], [ 131.95191491000026, -0.588799737999864 ], [ 131.97885175900012, -0.566664320999905 ], [ 132.00342858200008, -0.55185312299983 ], [ 132.05600019600013, -0.534274997999887 ], [ 132.0688582690002, -0.531996351999851 ], [ 132.07488040500004, -0.523370049999812 ], [ 132.09205162900014, -0.483005466999884 ], [ 132.09961998800009, -0.46990325299987 ], [ 132.15088951900032, -0.435723565999808 ], [ 132.16627037900014, -0.432224216999828 ], [ 132.19988040500016, -0.414646092 ], [ 132.23715254000001, -0.401543877999814 ], [ 132.2700301440002, -0.384535414999846 ], [ 132.28793379000012, -0.381117445999962 ], [ 132.31275475400014, -0.379327080999872 ], [ 132.39665774800005, -0.353448174999869 ], [ 132.43718509200016, -0.347100518999923 ] ] ], [ [ [ 104.54851321700011, -0.398044528999947 ], [ 104.59294681100022, -0.448418877999984 ], [ 104.59937584700015, -0.463799737999807 ], [ 104.59164472700013, -0.483575127999814 ], [ 104.57300866000014, -0.500420830999815 ], [ 104.53419030000015, -0.52857838299991 ], [ 104.5266219410002, -0.547621351999794 ], [ 104.52198326900009, -0.596612237999864 ], [ 104.51124108200008, -0.613946221999868 ], [ 104.47673587300011, -0.614027601999851 ], [ 104.44711347700019, -0.588067315999865 ], [ 104.42042076900015, -0.574965101999908 ], [ 104.39389082100013, -0.613946221999868 ], [ 104.38363691500007, -0.653497002999814 ], [ 104.37582441500007, -0.660088799999983 ], [ 104.35629316500018, -0.661716404 ], [ 104.34603925900018, -0.579196873 ], [ 104.33578535200024, -0.542657158999873 ], [ 104.32634524800022, -0.529880466999828 ], [ 104.31202233200014, -0.531996351999851 ], [ 104.25586998800014, -0.475518487999921 ], [ 104.25367272200009, -0.460056247999887 ], [ 104.26319420700014, -0.446221612999977 ], [ 104.27702884200005, -0.413018487999977 ], [ 104.28402754000024, -0.401055596999811 ], [ 104.31185957100007, -0.378350518999866 ], [ 104.3247176440002, -0.36484140399989 ], [ 104.3325301440002, -0.346449476999851 ], [ 104.33936608200003, -0.346449476999851 ], [ 104.34555097700007, -0.363702080999872 ], [ 104.33480879000007, -0.404880466999828 ], [ 104.33936608200003, -0.428399346999925 ], [ 104.34603925900018, -0.428399346999925 ], [ 104.34831790500004, -0.40740325299987 ], [ 104.35287519600013, -0.387383721999868 ], [ 104.35971113400012, -0.387383721999868 ], [ 104.38266035200019, -0.40146249799983 ], [ 104.41578209700003, -0.381931247999944 ], [ 104.46957441500018, -0.332126559999892 ], [ 104.48926842500003, -0.349379164999959 ], [ 104.49675540500027, -0.353936455999815 ], [ 104.51823978000021, -0.362562757999854 ], [ 104.5249129570002, -0.36687590899993 ], [ 104.53093509200011, -0.373467705999815 ], [ 104.54135175900018, -0.389336846999868 ], [ 104.54851321700011, -0.398044528999947 ] ] ], [ [ [ 122.04371178500014, -0.334649346999811 ], [ 122.05144290500016, -0.342054945999905 ], [ 122.05404707100013, -0.355157158999873 ], [ 122.05307050900001, -0.373711846999868 ], [ 122.04273522200003, -0.393487237999864 ], [ 122.02662194100003, -0.406914971999868 ], [ 122.00660241000026, -0.410739841999884 ], [ 121.98487389400009, -0.401055596999811 ], [ 121.96412194100014, -0.41334400799991 ], [ 121.93181399800028, -0.414646092 ], [ 121.89869225400003, -0.407484632999854 ], [ 121.8750106130002, -0.394789320999905 ], [ 121.86085045700008, -0.377862237999921 ], [ 121.86011803500026, -0.367445571000019 ], [ 121.86500084700003, -0.357842705999815 ], [ 121.86817467500009, -0.343031507999854 ], [ 121.87232506600014, -0.332614841999941 ], [ 121.8823348320002, -0.330010674999869 ], [ 121.90235436300009, -0.332126559999892 ], [ 121.9033309250002, -0.333916924999983 ], [ 121.90837649800017, -0.337334893999866 ], [ 121.9155379570002, -0.340020440999865 ], [ 121.92351321700016, -0.339613539999846 ], [ 121.92481530000009, -0.334567966999828 ], [ 121.92269941500012, -0.316338799999926 ], [ 121.92652428500003, -0.312269789999903 ], [ 121.96656334700003, -0.314711195999905 ], [ 121.97803795700008, -0.318536065999808 ], [ 122.00440514400009, -0.330254815999922 ], [ 122.01351972700013, -0.331963799999926 ], [ 122.02955162900014, -0.332126559999892 ], [ 122.04371178500014, -0.334649346999811 ] ] ], [ [ [ 127.63200931100005, -0.41529713299991 ], [ 127.63591556100016, -0.416192315999808 ], [ 127.64779707100024, -0.414320570999962 ], [ 127.65170332100013, -0.41529713299991 ], [ 127.65853925900012, -0.428399346999925 ], [ 127.66627037900014, -0.435723565999808 ], [ 127.68311608200008, -0.460056247999887 ], [ 127.6879988940002, -0.480645440999808 ], [ 127.67652428500014, -0.50351327899989 ], [ 127.6176863940002, -0.573174737999921 ], [ 127.60767662900025, -0.593845309999892 ], [ 127.60401451900009, -0.617120049999812 ], [ 127.6064559250002, -0.629082940999865 ], [ 127.61304772200015, -0.636407158999873 ], [ 127.62289472700002, -0.64023202899989 ], [ 127.63502037900014, -0.641289971999925 ], [ 127.6474715500002, -0.644301039999846 ], [ 127.65113366000014, -0.652439059999836 ], [ 127.6513778000002, -0.685804945999905 ], [ 127.64966881600003, -0.69670989399981 ], [ 127.65267988400012, -0.707207940999979 ], [ 127.66602623800031, -0.716403903999833 ], [ 127.67823326900032, -0.717705987999864 ], [ 127.69019616000026, -0.713636976999794 ], [ 127.7011824880002, -0.706801039999959 ], [ 127.71013431100016, -0.699314059999892 ], [ 127.72510826900009, -0.694024346999811 ], [ 127.78956139400032, -0.689629815999922 ], [ 127.80469811300031, -0.694105726999794 ], [ 127.84864342500009, -0.712985934999836 ], [ 127.8579207690002, -0.719821872999887 ], [ 127.86109459700003, -0.725762627999984 ], [ 127.87517337300017, -0.744317315999865 ], [ 127.87826582100013, -0.754001559999836 ], [ 127.87842858200008, -0.760186455999815 ], [ 127.87956790500016, -0.763360283999873 ], [ 127.88266035200013, -0.764580987999807 ], [ 127.88892662900014, -0.764743747999887 ], [ 127.89820397200015, -0.767347914999846 ], [ 127.89820397200015, -0.773532809999949 ], [ 127.89193769600024, -0.785251559999892 ], [ 127.8881942070002, -0.802178643999923 ], [ 127.87623131600003, -0.817803643999866 ], [ 127.83082116000014, -0.859144789999903 ], [ 127.82227623800009, -0.864353122999887 ], [ 127.81267337300028, -0.866631768999866 ], [ 127.79948978000004, -0.867120049999869 ], [ 127.78663170700031, -0.87037525799991 ], [ 127.76531009200016, -0.884535414999959 ], [ 127.7548934250002, -0.887627862999807 ], [ 127.74878991000014, -0.885349216999941 ], [ 127.72754967500009, -0.867120049999869 ], [ 127.71778405000009, -0.862237237999807 ], [ 127.69402103000016, -0.854668877999927 ], [ 127.68311608200008, -0.853610934999892 ], [ 127.6801863940002, -0.850274346999868 ], [ 127.67847741000014, -0.84335702899989 ], [ 127.67383873800031, -0.836195570999905 ], [ 127.66236412900003, -0.83310312299983 ], [ 127.65349368600016, -0.827406507999854 ], [ 127.65349368600016, -0.814629815999808 ], [ 127.65853925900012, -0.791436455999985 ], [ 127.65552819100026, -0.780938408999816 ], [ 127.65064537900014, -0.771172783999873 ], [ 127.64478600400014, -0.762953382999854 ], [ 127.6381942070002, -0.75725676899981 ], [ 127.62574303500014, -0.752373955999815 ], [ 127.62045332100013, -0.755547783999873 ], [ 127.61638431100005, -0.761488539999903 ], [ 127.60743248800009, -0.764743747999887 ], [ 127.58969160200013, -0.76873137799987 ], [ 127.5356551440002, -0.798923434999836 ], [ 127.46989993600005, -0.818454684999836 ], [ 127.45769290500004, -0.81560637799987 ], [ 127.45248457100024, -0.802015882999854 ], [ 127.45053144600001, -0.792901299999869 ], [ 127.44157962300017, -0.77288176899998 ], [ 127.43726647200026, -0.729099216999884 ], [ 127.43946373800009, -0.716403903999833 ], [ 127.47071373800031, -0.652520440999865 ], [ 127.47022545700008, -0.641289971999925 ], [ 127.46705162900003, -0.63982512799987 ], [ 127.4360457690002, -0.630629164999903 ], [ 127.42693118600016, -0.625583591999941 ], [ 127.40886478000004, -0.62420012799987 ], [ 127.39861087300005, -0.620212497999887 ], [ 127.39730879000024, -0.616875908999873 ], [ 127.39535566500001, -0.604668877999814 ], [ 127.39234459700015, -0.599704684999836 ], [ 127.38746178500003, -0.597426039999903 ], [ 127.3745223320002, -0.594008070999962 ], [ 127.37110436300009, -0.592868747999944 ], [ 127.35328209700015, -0.562920830999985 ], [ 127.35075931100016, -0.555271091999828 ], [ 127.34441165500016, -0.54461028399993 ], [ 127.3139754570002, -0.522230726999794 ], [ 127.30298912900014, -0.510918877999927 ], [ 127.29525800900024, -0.494317315999922 ], [ 127.29118899800017, -0.476820570999905 ], [ 127.29184004000012, -0.46013762799987 ], [ 127.29957116000026, -0.445733330999872 ], [ 127.31177819100014, -0.432224216999828 ], [ 127.32243899800005, -0.416924737999864 ], [ 127.32935631600014, -0.398044528999947 ], [ 127.33025149800017, -0.373711846999868 ], [ 127.3281356130002, -0.365166924999926 ], [ 127.31666100400014, -0.339613539999846 ], [ 127.33041425900001, -0.33945077899989 ], [ 127.35075931100016, -0.328708591999884 ], [ 127.36117597700013, -0.325860283999816 ], [ 127.37281334700003, -0.329034112999921 ], [ 127.38282311300009, -0.336358330999815 ], [ 127.39861087300005, -0.353936455999815 ], [ 127.40503991000014, -0.358656507999854 ], [ 127.41146894600024, -0.362399997999887 ], [ 127.41651451900009, -0.367771091999828 ], [ 127.42058353000004, -0.388929945999905 ], [ 127.42652428500026, -0.40146249799983 ], [ 127.43531334700003, -0.411228122999887 ], [ 127.4462996750002, -0.41529713299991 ], [ 127.46094811300009, -0.406833591999884 ], [ 127.46892337300005, -0.386407158999816 ], [ 127.4741317070002, -0.363213799999869 ], [ 127.48047936300009, -0.346449476999851 ], [ 127.48666425900012, -0.342461846999868 ], [ 127.49586022200003, -0.339125257999854 ], [ 127.50416100400014, -0.335137627999984 ], [ 127.5078231130002, -0.329034112999921 ], [ 127.5087996750002, -0.320733330999815 ], [ 127.51156660200002, -0.310642184999836 ], [ 127.51685631600014, -0.301934502999984 ], [ 127.52418053500026, -0.29802825299987 ], [ 127.52816816500012, -0.298760674999926 ], [ 127.52979576900009, -0.300713799999926 ], [ 127.5307723320002, -0.303155205999985 ], [ 127.53223717500009, -0.304945570999848 ], [ 127.56617272200015, -0.316501559999892 ], [ 127.57862389400009, -0.324965101999851 ], [ 127.58350670700031, -0.343031507999854 ], [ 127.58887780000009, -0.351983330999985 ], [ 127.61231530000009, -0.366306247999944 ], [ 127.6176863940002, -0.377536716999884 ], [ 127.61915123800009, -0.388604424999812 ], [ 127.62256920700008, -0.399590752999984 ], [ 127.62720787900003, -0.408949476999794 ], [ 127.63200931100005, -0.41529713299991 ] ] ], [ [ [ 104.49252363400018, -0.308770440999865 ], [ 104.48650149800017, -0.310723565999865 ], [ 104.47885175900024, -0.30999114399981 ], [ 104.46957441500018, -0.312269789999903 ], [ 104.4562280610001, -0.318617446000019 ], [ 104.44613691500018, -0.320082289999846 ], [ 104.4182235040002, -0.318536065999808 ], [ 104.40650475400008, -0.311781507999797 ], [ 104.40088951900009, -0.297295830999872 ], [ 104.40495853000004, -0.283379815999979 ], [ 104.42123457100018, -0.278090101999794 ], [ 104.47999108200008, -0.271254164999846 ], [ 104.48780358200008, -0.274102471999811 ], [ 104.4936629570002, -0.281182549999869 ], [ 104.4970809250002, -0.289971612999864 ], [ 104.4970809250002, -0.298597914999959 ], [ 104.49252363400018, -0.308770440999865 ] ] ], [ [ [ 122.1445418630002, -0.373955987999807 ], [ 122.13941491000003, -0.38420989399981 ], [ 122.12387129000024, -0.392673434999892 ], [ 122.11500084700026, -0.388929945999905 ], [ 122.10718834700026, -0.38225676899998 ], [ 122.09473717500009, -0.381117445999962 ], [ 122.08985436300009, -0.389255466999884 ], [ 122.0888778000002, -0.401543877999814 ], [ 122.08464603000016, -0.40781015399989 ], [ 122.07056725400025, -0.398044528999947 ], [ 122.05990644600024, -0.353936455999815 ], [ 122.06031334700003, -0.32927825299987 ], [ 122.06560306100005, -0.296075127999814 ], [ 122.07667076900032, -0.269138278999947 ], [ 122.09473717500009, -0.263848565999865 ], [ 122.10157311300009, -0.315362237999977 ], [ 122.10580488400001, -0.321384372999887 ], [ 122.13168379000012, -0.337985934999836 ], [ 122.13795006600026, -0.34726327899989 ], [ 122.14323978000004, -0.36044687299983 ], [ 122.1445418630002, -0.373955987999807 ] ] ], [ [ [ 127.21363366000003, -0.250176690999922 ], [ 127.22038821700028, -0.257582289999903 ], [ 127.22820071700016, -0.251722914999959 ], [ 127.2348738940002, -0.251722914999959 ], [ 127.24138431100005, -0.256442966999884 ], [ 127.24830162900003, -0.263848565999865 ], [ 127.25456790500016, -0.275648695999848 ], [ 127.26392662900003, -0.279473565999865 ], [ 127.29249108200008, -0.278090101999794 ], [ 127.29712975400003, -0.281914971999925 ], [ 127.29607181100005, -0.290297132999854 ], [ 127.29224694100014, -0.299574476999908 ], [ 127.28874759200005, -0.305433851999851 ], [ 127.28288821700028, -0.307305596999811 ], [ 127.26490319100026, -0.30624765399989 ], [ 127.2578231130002, -0.308851820999848 ], [ 127.25131269600001, -0.323337497999887 ], [ 127.25473066500012, -0.338799737999864 ], [ 127.26335696700016, -0.353122653999833 ], [ 127.2719832690002, -0.363457940999922 ], [ 127.27702884200016, -0.373467705999815 ], [ 127.28077233200008, -0.388604424999812 ], [ 127.28003991000026, -0.402520440999865 ], [ 127.26156660200013, -0.414646092 ], [ 127.26197350400014, -0.428806247999887 ], [ 127.26880944100014, -0.456312757999854 ], [ 127.26596113400024, -0.46453215899993 ], [ 127.25660241000003, -0.477634372999887 ], [ 127.25196373800009, -0.497165623 ], [ 127.24626712300017, -0.496351820999962 ], [ 127.23959394600013, -0.491794528999833 ], [ 127.23462975400014, -0.490411065999865 ], [ 127.21094811300009, -0.513278903999947 ], [ 127.1987410820002, -0.520603122999887 ], [ 127.17945397200015, -0.525160414999903 ], [ 127.11736087300017, -0.525160414999903 ], [ 127.11996504000001, -0.517998955999872 ], [ 127.12159264400032, -0.514906507999797 ], [ 127.12476647200015, -0.510918877999927 ], [ 127.10857181100005, -0.501071872999887 ], [ 127.11255944100003, -0.491875908999816 ], [ 127.12435957100013, -0.485284112999864 ], [ 127.13103274800005, -0.483005466999884 ], [ 127.13062584700015, -0.470147393999866 ], [ 127.12614993600016, -0.456719658999873 ], [ 127.11988366000003, -0.446221612999977 ], [ 127.11394290500016, -0.441989841999884 ], [ 127.10230553500003, -0.437758070999905 ], [ 127.10230553500003, -0.427422783999816 ], [ 127.11052493600027, -0.404717705999872 ], [ 127.11052493600027, -0.377536716999884 ], [ 127.11255944100003, -0.369398695999848 ], [ 127.11695397200015, -0.365655205999929 ], [ 127.12183678500014, -0.363457940999922 ], [ 127.12476647200015, -0.360039971999811 ], [ 127.12256920700031, -0.337334893999866 ], [ 127.1142684250002, -0.310235283999873 ], [ 127.1103621750002, -0.287692966999884 ], [ 127.12110436300031, -0.278090101999794 ], [ 127.12818444100003, -0.276136976999851 ], [ 127.15381920700008, -0.265720309999836 ], [ 127.16211998800009, -0.260837497999887 ], [ 127.17481530000032, -0.255547783999816 ], [ 127.20346113400012, -0.25725676899981 ], [ 127.21363366000003, -0.250176690999922 ] ] ], [ [ [ 98.486827019000145, -0.510918877999927 ], [ 98.496429884000236, -0.520928643999866 ], [ 98.502696159999971, -0.535414320999905 ], [ 98.504405144000145, -0.551202080999872 ], [ 98.500498894000089, -0.56560637799987 ], [ 98.49366295700014, -0.56560637799987 ], [ 98.492930535000141, -0.557875257999854 ], [ 98.491384311000104, -0.55388762799987 ], [ 98.489105665000181, -0.550713799999869 ], [ 98.486827019000145, -0.545586846999981 ], [ 98.479258660000198, -0.553155205999815 ], [ 98.473480665000238, -0.556735934999892 ], [ 98.467458530000101, -0.556084893999866 ], [ 98.458994988000086, -0.55185312299983 ], [ 98.467784050000034, -0.538832289999846 ], [ 98.462087436000161, -0.529473565999808 ], [ 98.447927280000044, -0.526299737999921 ], [ 98.4316512380002, -0.531996351999851 ], [ 98.425547722000204, -0.543389580999872 ], [ 98.421885613000143, -0.56178150799991 ], [ 98.420420769000089, -0.579034112999864 ], [ 98.422048373000109, -0.586602471999868 ], [ 98.390310092000163, -0.577080987999807 ], [ 98.316742384000179, -0.535088799999812 ], [ 98.275157097000147, -0.525160414999903 ], [ 98.284190300000148, -0.521742445999905 ], [ 98.295095248000223, -0.51336028399993 ], [ 98.302012566000201, -0.510918877999927 ], [ 98.311859571000241, -0.511976820999962 ], [ 98.329274936000104, -0.51873137799987 ], [ 98.336110873000223, -0.517754815999808 ], [ 98.342133009000236, -0.506280205999872 ], [ 98.364024285000141, -0.441989841999884 ], [ 98.365977410000198, -0.422051690999865 ], [ 98.36264082100007, -0.380140882999854 ], [ 98.364024285000141, -0.360039971999811 ], [ 98.368907097000033, -0.349216403999947 ], [ 98.389414910000198, -0.320896091999884 ], [ 98.398122592000163, -0.312269789999903 ], [ 98.405446811000161, -0.308851820999848 ], [ 98.413422071000127, -0.306735934999836 ], [ 98.420664910000141, -0.30380624799983 ], [ 98.42546634200022, -0.298597914999959 ], [ 98.426117384000122, -0.28818124799983 ], [ 98.418630405000101, -0.257582289999903 ], [ 98.429209832000197, -0.243829033999816 ], [ 98.440684441000201, -0.246514580999872 ], [ 98.451182488000086, -0.258396091999828 ], [ 98.493418816000144, -0.329196872999887 ], [ 98.507334832000083, -0.364922783999873 ], [ 98.500498894000089, -0.387383721999868 ], [ 98.510264519000145, -0.40374114399981 ], [ 98.512380405000215, -0.422946872999887 ], [ 98.508799675000091, -0.442559502999814 ], [ 98.501963738000143, -0.46054452899989 ], [ 98.504567905000215, -0.473565362999864 ], [ 98.501638217000277, -0.486097914999846 ], [ 98.495127800000148, -0.498630466999828 ], [ 98.486827019000145, -0.510918877999927 ] ] ], [ [ [ 103.7565210300001, -0.346449476999851 ], [ 103.74935957100024, -0.348809502999927 ], [ 103.7124129570002, -0.346449476999851 ], [ 103.6982528000002, -0.349541924999926 ], [ 103.67066491, -0.363702080999872 ], [ 103.65748131600003, -0.36687590899993 ], [ 103.64966881600003, -0.370049737999807 ], [ 103.62623131600009, -0.38420989399981 ], [ 103.61255944100014, -0.387383721999868 ], [ 103.60401451900009, -0.383477471999811 ], [ 103.59262129000024, -0.37615325299987 ], [ 103.5803328790002, -0.372002862999864 ], [ 103.5681258470002, -0.377536716999884 ], [ 103.54664147200009, -0.382989190999808 ], [ 103.49000084700026, -0.361586195999848 ], [ 103.46168053500003, -0.36687590899993 ], [ 103.46062259199999, -0.333916924999983 ], [ 103.4851180350002, -0.286797783999987 ], [ 103.52214603000016, -0.243829033999816 ], [ 103.55787194099997, -0.223402601999851 ], [ 103.57455488400024, -0.224704684999836 ], [ 103.62867272200009, -0.234307549999926 ], [ 103.64039147199998, -0.240655205999872 ], [ 103.64958743600005, -0.254815362999864 ], [ 103.67066491, -0.262627862999864 ], [ 103.71273847700013, -0.269707940999808 ], [ 103.7346297540002, -0.281182549999869 ], [ 103.75611412900008, -0.301202080999929 ], [ 103.76685631600014, -0.324639580999815 ], [ 103.7565210300001, -0.346449476999851 ] ] ], [ [ [ 122.18970787900014, -0.205254815999865 ], [ 122.1772567070002, -0.230401299999812 ], [ 122.18962649800028, -0.230157158999873 ], [ 122.20264733200008, -0.232191664999903 ], [ 122.21322675900012, -0.237562757999967 ], [ 122.21762129000012, -0.24716562299983 ], [ 122.22095787900014, -0.250176690999922 ], [ 122.23519941500024, -0.258233330999872 ], [ 122.23878014400032, -0.263848565999865 ], [ 122.23650149800005, -0.273370049999869 ], [ 122.23015384200005, -0.274346612999864 ], [ 122.22291100400014, -0.270196221999811 ], [ 122.21762129000012, -0.263848565999865 ], [ 122.2114363940002, -0.263848565999865 ], [ 122.19996178500014, -0.267754815999979 ], [ 122.16439863400012, -0.249444268999923 ], [ 122.14625084700003, -0.244073174999869 ], [ 122.14437910200013, -0.233005466999941 ], [ 122.15837649800005, -0.211358330999815 ], [ 122.17709394600001, -0.196384372999887 ], [ 122.18970787900014, -0.205254815999865 ] ] ], [ [ [ 122.32781009200005, -0.230564059999892 ], [ 122.34538821700016, -0.238702080999815 ], [ 122.3593856130002, -0.249281507999854 ], [ 122.36915123800009, -0.263848565999865 ], [ 122.36491946700016, -0.282159112999921 ], [ 122.36793053500026, -0.304457289999903 ], [ 122.37517337300017, -0.325616143999866 ], [ 122.38266035200013, -0.339613539999846 ], [ 122.3759871750002, -0.346449476999851 ], [ 122.35425866000014, -0.321709893999866 ], [ 122.32154381600014, -0.257907809999836 ], [ 122.29330488400012, -0.237237237999864 ], [ 122.28858483200031, -0.237969658999987 ], [ 122.27328535200013, -0.243747653999833 ], [ 122.2661238940002, -0.244073174999869 ], [ 122.26050866000003, -0.240980726999851 ], [ 122.24561608200008, -0.223402601999851 ], [ 122.22885175900012, -0.207940362999807 ], [ 122.22584069100003, -0.199395440999922 ], [ 122.2319442070002, -0.188734632999967 ], [ 122.24073326900009, -0.195407809999892 ], [ 122.26734459700015, -0.205010674999812 ], [ 122.27279707100013, -0.20614999799983 ], [ 122.27711022200015, -0.21396249799983 ], [ 122.28728274800028, -0.218845309999892 ], [ 122.32781009200005, -0.230564059999892 ] ] ], [ [ [ 121.62452233200008, -0.198418877999814 ], [ 121.60027103000027, -0.203220309999892 ], [ 121.57455488400024, -0.182549737999921 ], [ 121.56910241000003, -0.144789320999905 ], [ 121.59742272200015, -0.124688408999987 ], [ 121.63314863400001, -0.124688408999987 ], [ 121.64966881600026, -0.147393487999864 ], [ 121.64258873800009, -0.176853122999887 ], [ 121.62452233200008, -0.198418877999814 ] ] ], [ [ [ 130.82471764400032, -0.003838799999869 ], [ 130.9619246750002, -0.044732354999894 ], [ 130.96656334700015, -0.048109632999797 ], [ 130.96998131600003, -0.053521416999843 ], [ 130.97364342500009, -0.057183527 ], [ 130.97901451900032, -0.055352471999925 ], [ 130.9868270190002, -0.048150322999902 ], [ 130.99057050900024, -0.046156507999854 ], [ 131.01978600400014, -0.038628838999898 ], [ 131.02670332100001, -0.037896416999899 ], [ 131.04460696700005, -0.03826262799987 ], [ 131.05640709700015, -0.041029554999966 ], [ 131.05779056100027, -0.049086195999905 ], [ 131.04379316500012, -0.065240166999843 ], [ 131.05982506600003, -0.066420179999852 ], [ 131.08619225400003, -0.07154713299991 ], [ 131.11353600400003, -0.07366301899981 ], [ 131.12671959700026, -0.076429945999848 ], [ 131.15365644600001, -0.085707289999903 ], [ 131.16187584700015, -0.092380466999884 ], [ 131.1704207690002, -0.101657809999892 ], [ 131.18002363400012, -0.110039971999868 ], [ 131.19157962300005, -0.113702080999815 ], [ 131.19662519600001, -0.119235934999836 ], [ 131.20191491000014, -0.13005950299987 ], [ 131.21159915500004, -0.137872002999927 ], [ 131.2295028000002, -0.134209893999866 ], [ 131.2338973320002, -0.13811614399998 ], [ 131.23853600400014, -0.139825127999984 ], [ 131.25367272200026, -0.140313408999987 ], [ 131.26368248800009, -0.142673434999836 ], [ 131.26929772200015, -0.147556247999887 ], [ 131.27393639400009, -0.152439059999892 ], [ 131.29737389400009, -0.159274997999887 ], [ 131.30591881600014, -0.171075127999927 ], [ 131.31820722700013, -0.203057549999926 ], [ 131.30486087300005, -0.217543226999908 ], [ 131.2988387380002, -0.226657809999892 ], [ 131.29761803500014, -0.237237237999864 ], [ 131.30665123800031, -0.25139739399998 ], [ 131.33855228000016, -0.277601820999905 ], [ 131.34546959700003, -0.28818124799983 ], [ 131.34009850400025, -0.296075127999814 ], [ 131.31666100400003, -0.299574476999908 ], [ 131.31137129000012, -0.308851820999848 ], [ 131.30665123800031, -0.321221612999807 ], [ 131.29672285200002, -0.328545830999815 ], [ 131.28728274800028, -0.337172132999797 ], [ 131.28394616000026, -0.353936455999815 ], [ 131.27947024800028, -0.351739190999865 ], [ 131.2680770190002, -0.348565362999977 ], [ 131.26351972700002, -0.346449476999851 ], [ 131.26221764400009, -0.368340752999814 ], [ 131.2529403000002, -0.384372654 ], [ 131.23796634200028, -0.389255466999884 ], [ 131.2192488940002, -0.377536716999884 ], [ 131.18091881600003, -0.346449476999851 ], [ 131.15772545700008, -0.332940362999807 ], [ 131.1474715500002, -0.335870049999812 ], [ 131.14307701900009, -0.332126559999892 ], [ 131.1128035820002, -0.332126559999892 ], [ 131.10434004000012, -0.328220309999892 ], [ 131.10222415500016, -0.324395440999865 ], [ 131.09848066500001, -0.322930596999811 ], [ 131.0854598320002, -0.325860283999816 ], [ 131.0698348320002, -0.332940362999807 ], [ 131.02328535200013, -0.36687590899993 ], [ 131.02182050900012, -0.352959893999866 ], [ 131.0156356130002, -0.349867445999962 ], [ 130.99610436300009, -0.353936455999815 ], [ 130.99586022200003, -0.35491301899981 ], [ 130.99105879000024, -0.35702890399989 ], [ 130.98438561300009, -0.359144789999903 ], [ 130.97901451900032, -0.360039971999811 ], [ 130.97046959700003, -0.358005466999884 ], [ 130.95826256600003, -0.348565362999977 ], [ 130.9516707690002, -0.346449476999851 ], [ 130.93091881600014, -0.315362237999977 ], [ 130.90528405000009, -0.29843515399989 ], [ 130.8999129570002, -0.291192315999865 ], [ 130.90723717500032, -0.284926040000016 ], [ 130.8930770190002, -0.264336846999868 ], [ 130.8794051440002, -0.254082940999865 ], [ 130.8632918630002, -0.250583591999941 ], [ 130.83423912900014, -0.249281507999854 ], [ 130.81690514400032, -0.244886976999851 ], [ 130.80762780000009, -0.244073174999869 ], [ 130.79672285200002, -0.239190362999864 ], [ 130.7944442070002, -0.228204033999816 ], [ 130.7973738940002, -0.209242445999905 ], [ 130.79224694100014, -0.189873955999815 ], [ 130.78484134200028, -0.179375908999816 ], [ 130.73023522200015, -0.130466403999833 ], [ 130.71949303500014, -0.114108981999834 ], [ 130.71550540500004, -0.093194268999866 ], [ 130.7070418630002, -0.096286716999884 ], [ 130.70118248800031, -0.096449476999851 ], [ 130.68824303500003, -0.093194268999866 ], [ 130.69271894600001, -0.086358330999872 ], [ 130.69556725400003, -0.079522393999866 ], [ 130.67701256600003, -0.077894789999903 ], [ 130.65007571700005, -0.079766533999873 ], [ 130.62525475400003, -0.084974867999904 ], [ 130.61304772200003, -0.093194268999866 ], [ 130.63746178500014, -0.098728122999887 ], [ 130.64722741000014, -0.103855075999888 ], [ 130.65406334700003, -0.113702080999815 ], [ 130.63607832100001, -0.113457940999865 ], [ 130.62623131600026, -0.125746351999851 ], [ 130.62924238400012, -0.140720309999949 ], [ 130.66537519600001, -0.154392184999892 ], [ 130.68238366000026, -0.169854424999926 ], [ 130.7177840500002, -0.216973565999922 ], [ 130.7387801440002, -0.255791924999869 ], [ 130.7426863940002, -0.274672132999854 ], [ 130.75098717500009, -0.287530205999815 ], [ 130.79273522200015, -0.307224216999828 ], [ 130.8110457690002, -0.318536065999808 ], [ 130.8154403000002, -0.30217864399981 ], [ 130.8203231130002, -0.29412200299987 ], [ 130.8281356130002, -0.291436455999872 ], [ 130.87191816500012, -0.293226820999905 ], [ 130.88705488400012, -0.296482028999833 ], [ 130.89372806100016, -0.302015882999967 ], [ 130.89665774800028, -0.31210702899989 ], [ 130.90381920700031, -0.317559502999927 ], [ 130.91285241000026, -0.321058851999851 ], [ 130.9209090500002, -0.325860283999816 ], [ 130.92953535200002, -0.336114190999865 ], [ 130.94011478000016, -0.355889580999872 ], [ 130.94825280000032, -0.36687590899993 ], [ 130.94027754000012, -0.370863539999903 ], [ 130.93140709700026, -0.379001559999836 ], [ 130.92400149800017, -0.388604424999812 ], [ 130.9209090500002, -0.398044528999947 ], [ 130.91675866000014, -0.406019789999903 ], [ 130.90650475400014, -0.413018487999977 ], [ 130.86548912900014, -0.42929452899989 ], [ 130.7793074880002, -0.445082289999959 ], [ 130.75603274800017, -0.445977471999925 ], [ 130.73308353000004, -0.441501559999892 ], [ 130.71550540500004, -0.428399346999925 ], [ 130.70606530000009, -0.410251559999892 ], [ 130.68067467500009, -0.339613539999846 ], [ 130.69361412900014, -0.331312757999854 ], [ 130.69597415500016, -0.318129165000016 ], [ 130.69255618600005, -0.303480726999794 ], [ 130.68824303500003, -0.291192315999865 ], [ 130.60914147200003, -0.31406015399989 ], [ 130.5791121750002, -0.333916924999983 ], [ 130.56470787900014, -0.373711846999868 ], [ 130.57154381600003, -0.373711846999868 ], [ 130.58228600400014, -0.366143487999807 ], [ 130.57862389400009, -0.383884373 ], [ 130.5615340500002, -0.427015882999854 ], [ 130.55445397200026, -0.433526299999812 ], [ 130.5473738940002, -0.436130466999884 ], [ 130.54420006600014, -0.432061455999929 ], [ 130.54574629000001, -0.420179945999905 ], [ 130.55844160200013, -0.387383721999868 ], [ 130.54118899800005, -0.38250090899993 ], [ 130.54053795700031, -0.367933851999794 ], [ 130.5454207690002, -0.347751559999892 ], [ 130.54420006600014, -0.325860283999816 ], [ 130.53793379000001, -0.316501559999892 ], [ 130.52222741000026, -0.301934502999984 ], [ 130.51612389400009, -0.291192315999865 ], [ 130.5171004570002, -0.282647393999923 ], [ 130.5224715500002, -0.274834893999866 ], [ 130.52654056100005, -0.266778252999927 ], [ 130.52369225400014, -0.257582289999903 ], [ 130.50660241000014, -0.250258070999905 ], [ 130.48568769600013, -0.255303643999866 ], [ 130.45484459700003, -0.271254164999846 ], [ 130.45118248800009, -0.274183851999794 ], [ 130.44450931100016, -0.283135674999926 ], [ 130.44117272200003, -0.284926040000016 ], [ 130.4355574880002, -0.282891533999873 ], [ 130.43238366000014, -0.273695570999905 ], [ 130.42750084700015, -0.271254164999846 ], [ 130.40845787900014, -0.269707940999808 ], [ 130.39975019600001, -0.267673434999892 ], [ 130.39275149800028, -0.263848565999865 ], [ 130.38217207100024, -0.275648695999848 ], [ 130.37566165500027, -0.27459075299987 ], [ 130.37086022200015, -0.267998955999929 ], [ 130.36597741000003, -0.263848565999865 ], [ 130.33887780000009, -0.262872002999814 ], [ 130.33814537900014, -0.263848565999865 ], [ 130.31625410200002, -0.259942315999865 ], [ 130.31080162900014, -0.257582289999903 ], [ 130.30738366000026, -0.251885674999926 ], [ 130.30469811300009, -0.242771091999884 ], [ 130.30054772200015, -0.234144789999959 ], [ 130.29371178500003, -0.230401299999812 ], [ 130.26539147200015, -0.224786065999808 ], [ 130.23243248800031, -0.212823174999869 ], [ 130.21705162900025, -0.200860283999873 ], [ 130.24195397200015, -0.195570570999905 ], [ 130.25017337300017, -0.197442315999865 ], [ 130.2675887380002, -0.20614999799983 ], [ 130.27662194100026, -0.209242445999905 ], [ 130.27995853000016, -0.208672783999873 ], [ 130.3032332690002, -0.208672783999873 ], [ 130.30396569100014, -0.209242445999905 ], [ 130.33855228000004, -0.203220309999892 ], [ 130.35670006600014, -0.201836846999925 ], [ 130.36915123800009, -0.20614999799983 ], [ 130.38355553500014, -0.21445077899989 ], [ 130.39861087300005, -0.21445077899989 ], [ 130.41285241000014, -0.20842864399981 ], [ 130.42408287900014, -0.199314059999892 ], [ 130.42986087300017, -0.186293226999908 ], [ 130.41667728000016, -0.184177341999941 ], [ 130.39771569100014, -0.183363539999903 ], [ 130.38648522200015, -0.175062757999854 ], [ 130.40267988400001, -0.169854424999926 ], [ 130.4121199880002, -0.15732187299983 ], [ 130.41374759200005, -0.141534112999864 ], [ 130.4062606130002, -0.127373955999872 ], [ 130.39771569100014, -0.145928643999866 ], [ 130.38461347700002, -0.157484632999797 ], [ 130.3740340500002, -0.155857028999947 ], [ 130.37224368600005, -0.134209893999866 ], [ 130.36597741000003, -0.134209893999866 ], [ 130.36133873800009, -0.143243096999868 ], [ 130.35482832100013, -0.146661065999808 ], [ 130.34693444100014, -0.145440362999864 ], [ 130.33814537900014, -0.140313408999987 ], [ 130.3413192070002, -0.154473565999808 ], [ 130.34750410200013, -0.168389580999872 ], [ 130.35075931100005, -0.180352471999811 ], [ 130.34498131600014, -0.188734632999967 ], [ 130.3330184250002, -0.188246351999794 ], [ 130.31706790500004, -0.181817315999865 ], [ 130.30307050900012, -0.17294687299983 ], [ 130.29712975400014, -0.165215752999814 ], [ 130.2939559250002, -0.152032158999873 ], [ 130.27979576900032, -0.131442966999828 ], [ 130.27662194100026, -0.117120049999869 ], [ 130.28060957100013, -0.104994398999963 ], [ 130.29078209700015, -0.09921640399989 ], [ 130.30404707100013, -0.099867445999905 ], [ 130.31763756600003, -0.106784763999826 ], [ 130.32349694100003, -0.102634372999887 ], [ 130.32911217500032, -0.096612237999864 ], [ 130.33423912900014, -0.088962497999944 ], [ 130.33814537900014, -0.079522393999866 ], [ 130.34310957100001, -0.093519789999903 ], [ 130.34498131600014, -0.109063408999816 ], [ 130.34839928500026, -0.121840101999965 ], [ 130.35865319100003, -0.127373955999872 ], [ 130.36866295700008, -0.121840101999965 ], [ 130.36915123800009, -0.108330987999864 ], [ 130.36426842500009, -0.092380466999884 ], [ 130.35865319100003, -0.079522393999866 ], [ 130.3808699880002, -0.07366301899981 ], [ 130.39429772200026, -0.082818291999899 ], [ 130.40699303500003, -0.097263278999833 ], [ 130.42750084700015, -0.106784763999826 ], [ 130.42335045700031, -0.086195570999905 ], [ 130.42066491000014, -0.079522393999866 ], [ 130.42750084700015, -0.079522393999866 ], [ 130.42986087300017, -0.086602471999925 ], [ 130.43433678500014, -0.093194268999866 ], [ 130.47779381600003, -0.075494072999959 ], [ 130.4985457690002, -0.062676690999865 ], [ 130.51002037900025, -0.044732354999894 ], [ 130.5195418630002, -0.049655856999834 ], [ 130.52808678500003, -0.056410414999959 ], [ 130.54420006600014, -0.072686455999929 ], [ 130.5454207690002, -0.068617445999848 ], [ 130.55046634200016, -0.058444919999829 ], [ 130.5527449880002, -0.063083591999828 ], [ 130.55616295700008, -0.067925713999898 ], [ 130.55844160200013, -0.072686455999929 ], [ 130.56080162900003, -0.06560637799987 ], [ 130.57154381600003, -0.044732354999894 ], [ 130.57496178500014, -0.048597914999903 ], [ 130.5864363940002, -0.058444919999829 ], [ 130.59522545700008, -0.047214450999888 ], [ 130.62273196700016, -0.051771742999847 ], [ 130.6411238940002, -0.044732354999894 ], [ 130.66098066500012, -0.044732354999894 ], [ 130.69109134200016, -0.035739841999884 ], [ 130.71631920700031, -0.033257744999844 ], [ 130.72234134200016, -0.052178643999866 ], [ 130.73609459700026, -0.046888929999795 ], [ 130.76547285200024, -0.04998137799987 ], [ 130.78386478000016, -0.044732354999894 ], [ 130.7768660820002, -0.037286065999922 ], [ 130.76889082100013, -0.032525322999902 ], [ 130.75977623800009, -0.030531507999854 ], [ 130.74968509200028, -0.031101169999829 ], [ 130.76148522200015, -0.018365166999899 ], [ 130.77906334700015, -0.008965752999984 ], [ 130.80062910200002, -0.003838799999869 ], [ 130.82471764400032, -0.003838799999869 ] ] ], [ [ [ 98.559825066000144, -0.278252862999864 ], [ 98.555186394000202, -0.318536065999808 ], [ 98.555186394000202, -0.312269789999903 ], [ 98.551768425000091, -0.322198174999869 ], [ 98.543223504000196, -0.334079684999949 ], [ 98.541514519000089, -0.343031507999854 ], [ 98.542653842000107, -0.354180596999868 ], [ 98.547862175000205, -0.369235935 ], [ 98.549001498000052, -0.381117445999962 ], [ 98.541514519000089, -0.381117445999962 ], [ 98.512461785000198, -0.319024346999811 ], [ 98.405528191000144, -0.168226820999905 ], [ 98.389984571000127, -0.140394789999846 ], [ 98.363291863000143, -0.074395440999808 ], [ 98.343516472000204, -0.044732354999894 ], [ 98.33187910200013, -0.036797783999816 ], [ 98.315928582000197, -0.028334242999904 ], [ 98.301768425000148, -0.018731377999814 ], [ 98.295664910000085, -0.00725676899998 ], [ 98.304453972000033, -0.001722914999846 ], [ 98.324961785000198, 0.003973700000245 ], [ 98.364024285000141, 0.010484117000203 ], [ 98.40609785200013, -0.007378838999955 ], [ 98.443369988000086, -0.052015882999797 ], [ 98.469981316000144, -0.107517184999949 ], [ 98.479991082000197, -0.158379815999865 ], [ 98.497325066000201, -0.199802341999884 ], [ 98.532237175000205, -0.23935312299983 ], [ 98.559825066000144, -0.278252862999864 ] ] ], [ [ [ 104.58790123800009, 0.00828685100015 ], [ 104.62037194100009, -0.004245700999888 ], [ 104.6755477220002, -0.053806247999887 ], [ 104.68132571699999, -0.065240166999843 ], [ 104.64722741, -0.072686455999929 ], [ 104.64722741, -0.080743096999868 ], [ 104.65251712300005, -0.08953215899993 ], [ 104.65943444100009, -0.096530856999891 ], [ 104.66456139400015, -0.099379164999846 ], [ 104.67546634200022, -0.095798434999892 ], [ 104.68311608200008, -0.089613540000016 ], [ 104.69190514400003, -0.08749765399989 ], [ 104.7058211600002, -0.096286716999884 ], [ 104.7365828790002, -0.127373955999872 ], [ 104.7539168630002, -0.170586846999981 ], [ 104.7662866550001, -0.188246351999794 ], [ 104.78777103000004, -0.195570570999905 ], [ 104.81413821700005, -0.19280364399981 ], [ 104.8203231130002, -0.184340101999908 ], [ 104.81983483200003, -0.169610283999873 ], [ 104.82593834700015, -0.147719007999854 ], [ 104.84888756600009, -0.139580987999864 ], [ 104.87728925900024, -0.166599216999884 ], [ 104.92896569100009, -0.237237237999864 ], [ 105.01148522200009, -0.281508070999905 ], [ 105.00269616000014, -0.294854424999812 ], [ 104.98178144600013, -0.290704033999873 ], [ 104.9565535820002, -0.281182549999869 ], [ 104.93523196700022, -0.278090101999794 ], [ 104.91716556100022, -0.287530205999815 ], [ 104.92017662900014, -0.299004815999922 ], [ 104.93067467500009, -0.313409112999921 ], [ 104.93523196700022, -0.332126559999892 ], [ 104.88168379000012, -0.308363539999903 ], [ 104.86353600400014, -0.305433851999851 ], [ 104.85132897200015, -0.301202080999929 ], [ 104.83285566500012, -0.28240325299987 ], [ 104.7780867850002, -0.257582289999903 ], [ 104.76343834699998, -0.242933851999851 ], [ 104.75074303500014, -0.227146091999884 ], [ 104.73552493600016, -0.21445077899989 ], [ 104.71265709700015, -0.209242445999905 ], [ 104.67090905000009, -0.211602471999868 ], [ 104.65495853, -0.215915622999887 ], [ 104.64039147200015, -0.223402601999851 ], [ 104.61695397199998, -0.240329684999836 ], [ 104.60621178499997, -0.244073174999869 ], [ 104.60035241000003, -0.243584893999866 ], [ 104.58513431100005, -0.237237237999864 ], [ 104.57992597700024, -0.240329684999836 ], [ 104.57105553500008, -0.248467705999872 ], [ 104.56299889400009, -0.253513278999947 ], [ 104.55054772200015, -0.267998955999929 ], [ 104.54135175900018, -0.271254164999846 ], [ 104.52865644600018, -0.269952080999985 ], [ 104.52393639400009, -0.265883070999905 ], [ 104.52182050900012, -0.25937265399989 ], [ 104.51742597700013, -0.250176690999922 ], [ 104.50733483200014, -0.236097915000016 ], [ 104.49789472700024, -0.228122653999833 ], [ 104.4838973320002, -0.224379164999903 ], [ 104.45932050900018, -0.223402601999851 ], [ 104.44711347700019, -0.220961196000019 ], [ 104.43995201900003, -0.214288018999866 ], [ 104.43637129000018, -0.204359632999967 ], [ 104.43555748800014, -0.192152601999851 ], [ 104.43726647199998, -0.181084893999866 ], [ 104.44190514400009, -0.175551039999903 ], [ 104.45590254000024, -0.168226820999905 ], [ 104.49447675900024, -0.135674737999921 ], [ 104.51075280000015, -0.113702080999815 ], [ 104.51742597700013, -0.089450778999947 ], [ 104.52507571700016, -0.007745049999926 ], [ 104.53736412900008, 0.021307684000192 ], [ 104.55836022200015, 0.003078518000223 ], [ 104.5598250660002, 0.010158596000167 ], [ 104.56381269600007, 0.022609768000109 ], [ 104.56462649800011, 0.030340887000193 ], [ 104.57162519600007, 0.017645575000188 ], [ 104.58790123800009, 0.00828685100015 ] ] ], [ [ [ 129.54997806100005, -0.214125257999797 ], [ 129.54029381600014, -0.216729424999869 ], [ 129.52613366000026, -0.214613539999903 ], [ 129.51677493600016, -0.208754164999903 ], [ 129.5019637380002, -0.188734632999967 ], [ 129.45826256600014, -0.113702080999815 ], [ 129.37289472700013, -0.079522393999866 ], [ 129.37037194100014, -0.066338799999869 ], [ 129.37224368600016, -0.050347588999898 ], [ 129.3715926440002, -0.036797783999816 ], [ 129.36166425900012, -0.031101169999829 ], [ 129.33757571700016, 0.006781317000105 ], [ 129.33277428500003, 0.011379299000225 ], [ 129.31006920700008, 0.024847723000107 ], [ 129.29908287900003, 0.033433335000097 ], [ 129.2934676440002, 0.036322333000214 ], [ 129.29029381600014, 0.040594794000128 ], [ 129.2934676440002, 0.04767487200013 ], [ 129.30046634200028, 0.050604559000135 ], [ 129.30925540500016, 0.048041083000157 ], [ 129.45980879000001, -0.080173434999892 ], [ 129.5127059250002, -0.114353122999887 ], [ 129.53687584700026, -0.134209893999866 ], [ 129.55762780000009, -0.158786716999884 ], [ 129.56739342500032, -0.175551039999903 ], [ 129.57154381600014, -0.192152601999851 ], [ 129.56820722700013, -0.200127862999921 ], [ 129.56023196700016, -0.208103122999887 ], [ 129.54997806100005, -0.214125257999797 ] ] ], [ [ [ 127.40886478000004, 0.147040106000134 ], [ 127.43881269600013, 0.139715887000136 ], [ 127.45248457100024, 0.140204169000185 ], [ 127.44825280000032, 0.134263414000259 ], [ 127.44019616000014, 0.120266018000109 ], [ 127.4599715500002, -0.003838799999869 ], [ 127.46168053500003, -0.025160415000016 ], [ 127.46029707100024, -0.038872979999951 ], [ 127.45289147200015, -0.041029554999966 ], [ 127.4360457690002, -0.027683200999832 ], [ 127.43262780000032, -0.020806572999902 ], [ 127.43189537900003, -0.011569919999886 ], [ 127.43262780000032, 0.006781317000105 ], [ 127.42994225400014, 0.00828685100015 ], [ 127.41285241000003, 0.023504950000131 ], [ 127.41187584700015, 0.01609935100015 ], [ 127.4096785820002, 0.010565497000186 ], [ 127.40552819100003, 0.006496486000231 ], [ 127.39861087300005, 0.003078518000223 ], [ 127.39136803500014, 0.026027736000117 ], [ 127.39136803500014, 0.053045966000241 ], [ 127.39861087300005, 0.106105861000117 ], [ 127.40886478000004, 0.147040106000134 ] ] ], [ [ [ 98.625416223000173, 0.17515444500026 ], [ 98.673148818000072, 0.169812204000095 ], [ 98.717351713000198, 0.175119907000237 ], [ 98.743868042000088, 0.166265774000124 ], [ 98.766855252000141, 0.166260799000156 ], [ 98.80574359100018, 0.160915958000146 ], [ 98.835798913000247, 0.141468860000145 ], [ 98.85168541500019, 0.109621341000206 ], [ 98.84458901000022, 0.084859408000113 ], [ 98.802151388000027, 0.086636337000186 ], [ 98.763256051000155, 0.086647611000217 ], [ 98.726125446000083, 0.07428458000021 ], [ 98.689003552000088, 0.070775303000175 ], [ 98.650123449000205, 0.079621516000202 ], [ 98.620081454000058, 0.086702748000221 ], [ 98.575882542000215, 0.086750186000245 ], [ 98.538739882000129, 0.090335129000152 ], [ 98.528133186000218, 0.1115758790001 ], [ 98.524600567000221, 0.145197070000222 ], [ 98.547596606000184, 0.159326621000218 ], [ 98.590049144000147, 0.171655865000162 ], [ 98.625416223000173, 0.17515444500026 ] ] ], [ [ [ 104.43962649800022, 0.146185614000103 ], [ 104.49008222700024, 0.082586981000134 ], [ 104.4970809250002, 0.071275132000267 ], [ 104.48585045700003, 0.065822658000116 ], [ 104.4795028000002, 0.063950914000145 ], [ 104.46957441500018, 0.063788153000246 ], [ 104.47999108200008, 0.04511139500022 ], [ 104.48308353000016, 0.03571198100019 ], [ 104.48340905000009, 0.023504950000131 ], [ 104.47657311300014, 0.023504950000131 ], [ 104.45915774800011, 0.047308661000102 ], [ 104.41138756600014, 0.091701565000221 ], [ 104.40137780000009, 0.119086005000099 ], [ 104.40756269600024, 0.119086005000099 ], [ 104.41187584700015, 0.114569403000132 ], [ 104.41602623800009, 0.11172109600011 ], [ 104.42872155000015, 0.106105861000117 ], [ 104.42359459700003, 0.112209377000113 ], [ 104.40870201900009, 0.15094635600019 ], [ 104.40674889400003, 0.16120026200025 ], [ 104.40788821700005, 0.170599677000155 ], [ 104.41391035200019, 0.175848700000245 ], [ 104.4211531910002, 0.17275625200017 ], [ 104.42839603000021, 0.16376373900016 ], [ 104.43962649800022, 0.146185614000103 ] ] ], [ [ [ 104.51197350400025, 0.232896226000264 ], [ 104.53109785200024, 0.215969143000279 ], [ 104.53052819100026, 0.219061591000127 ], [ 104.53239993600016, 0.222886460000154 ], [ 104.53549238400024, 0.226385809000249 ], [ 104.53882897200009, 0.228257554000152 ], [ 104.54322350400025, 0.227443752000113 ], [ 104.54810631600014, 0.224310614000217 ], [ 104.68873131599997, 0.071275132000267 ], [ 104.70785566500024, 0.043646552000212 ], [ 104.70289147200009, 0.032782294000185 ], [ 104.68392988400007, 0.036281643000223 ], [ 104.66089928500014, 0.051418361000174 ], [ 104.63990319099997, 0.070054429000209 ], [ 104.63355553500003, 0.078111070000261 ], [ 104.62614993600005, 0.102240302000098 ], [ 104.6198022800001, 0.105780341000184 ], [ 104.60621178499997, 0.091782945000205 ], [ 104.59522545700014, 0.101629950000245 ], [ 104.57886803500008, 0.124904690000221 ], [ 104.56836998800003, 0.136786200000302 ], [ 104.56576582100013, 0.142726955000228 ], [ 104.56421959700026, 0.158148505000213 ], [ 104.5615340500002, 0.161281643000109 ], [ 104.5533960300001, 0.161525783000229 ], [ 104.54672285200024, 0.162502346000167 ], [ 104.54070071700011, 0.165228583000214 ], [ 104.53419030000015, 0.170599677000155 ], [ 104.52979576900009, 0.177313544000128 ], [ 104.5273543630002, 0.189886786000216 ], [ 104.5249129570002, 0.195461330000114 ], [ 104.49854576900009, 0.223293361000174 ], [ 104.4936629570002, 0.231146552000268 ], [ 104.49024498800009, 0.242621161000102 ], [ 104.50220787900025, 0.238267320000205 ], [ 104.51197350400025, 0.232896226000264 ] ] ], [ [ [ 102.87533613400024, 0.284084377000113 ], [ 102.84701582100007, 0.278062242000203 ], [ 102.83912194100014, 0.290961005000099 ], [ 102.85450280000009, 0.303168036000159 ], [ 102.8845320970002, 0.3152529970003 ], [ 102.91391035200013, 0.320257880000213 ], [ 102.92725670700014, 0.310858466000184 ], [ 102.90772545700003, 0.298529364000274 ], [ 102.87533613400024, 0.284084377000113 ] ] ], [ [ [ 104.41138756600014, 0.294419664000202 ], [ 104.40512129000018, 0.292141018000166 ], [ 104.3995874360001, 0.294989325000188 ], [ 104.39551842500015, 0.300930080000114 ], [ 104.39185631600009, 0.316595770000106 ], [ 104.38689212300011, 0.319281317000161 ], [ 104.38021894600018, 0.320379950000188 ], [ 104.3735457690002, 0.324530341000127 ], [ 104.34693444099997, 0.359930731000134 ], [ 104.33936608200003, 0.365464585000097 ], [ 104.34148196700022, 0.366359768000166 ], [ 104.34831790500004, 0.370510158000172 ], [ 104.35181725400014, 0.371242580000228 ], [ 104.35816491000008, 0.368882554000152 ], [ 104.37623131600009, 0.354315497000243 ], [ 104.4055281910002, 0.338812567000218 ], [ 104.41618899800022, 0.328802802000268 ], [ 104.42139733200003, 0.317938544000185 ], [ 104.4201766290002, 0.306301174000225 ], [ 104.41138756600014, 0.294419664000202 ] ] ], [ [ [ 127.41716556100016, 0.312933661000216 ], [ 127.39625084700026, 0.281073309000192 ], [ 127.35816491000014, 0.283514716000127 ], [ 127.34750410200024, 0.296128648000206 ], [ 127.34107506600014, 0.31464264500022 ], [ 127.3379012380002, 0.333970445000148 ], [ 127.33708743600016, 0.348781643000109 ], [ 127.3432723320002, 0.361395575000188 ], [ 127.35873457100013, 0.37128327000022 ], [ 127.3789168630002, 0.37767161700026 ], [ 127.39869225400014, 0.379584052000098 ], [ 127.41871178500026, 0.353989976000207 ], [ 127.41716556100016, 0.312933661000216 ] ] ], [ [ [ 103.08139082100024, 0.579291083000157 ], [ 103.07699629000018, 0.574774481000247 ], [ 103.07146243600005, 0.57721588700025 ], [ 103.06446373800009, 0.585191148000149 ], [ 103.05787194100009, 0.596380927000212 ], [ 103.0456649100002, 0.62783437700017 ], [ 103.04330488400018, 0.640448309000249 ], [ 103.04086347700024, 0.646714585000154 ], [ 103.03728274800017, 0.652655341000184 ], [ 103.0366317070002, 0.657538153000246 ], [ 103.04330488400018, 0.660956122000187 ], [ 103.05543053500008, 0.658677476000321 ], [ 103.06576582100024, 0.64923737200013 ], [ 103.07398522200009, 0.636460679000152 ], [ 103.07960045700008, 0.624416408000229 ], [ 103.08432050900018, 0.608547268000109 ], [ 103.0854598320002, 0.600083726000264 ], [ 103.08497155000015, 0.592027085000211 ], [ 103.08139082100024, 0.579291083000157 ] ] ], [ [ [ 103.49789472700024, 0.627020575000131 ], [ 103.48902428500014, 0.619940497000187 ], [ 103.47201582100024, 0.622992255000099 ], [ 103.4692488940002, 0.637396552000212 ], [ 103.47388756600014, 0.653469143000223 ], [ 103.47901451900003, 0.660956122000187 ], [ 103.48585045700008, 0.667385158000116 ], [ 103.4995223320002, 0.695502020000163 ], [ 103.50635826900009, 0.701890367000203 ], [ 103.51742597700013, 0.698431708000101 ], [ 103.52182050900012, 0.68984609600011 ], [ 103.52133222700024, 0.678656317000161 ], [ 103.51791425900024, 0.667629299000168 ], [ 103.50611412900014, 0.640773830000228 ], [ 103.49789472700024, 0.627020575000131 ] ] ], [ [ [ 103.18336022200015, 0.514837958000214 ], [ 103.17066491000008, 0.513739325000131 ], [ 103.15316816500024, 0.523830471000224 ], [ 103.14047285200007, 0.539374091000241 ], [ 103.1359969410002, 0.556219794000242 ], [ 103.13672936300003, 0.573879299000225 ], [ 103.1589461600002, 0.66478099200026 ], [ 103.17920983200014, 0.695502020000163 ], [ 103.21176191500007, 0.708156643000166 ], [ 103.23023522200009, 0.704169012000193 ], [ 103.24691816500012, 0.694037177000212 ], [ 103.26148522200009, 0.680324611000174 ], [ 103.27320397200015, 0.665676174000112 ], [ 103.28516686300009, 0.646389065000221 ], [ 103.29363040500016, 0.625433661000102 ], [ 103.29786217500015, 0.604722398000206 ], [ 103.29997806100005, 0.575425523000263 ], [ 103.29574629000012, 0.54938385600019 ], [ 103.2807723320002, 0.538031317000161 ], [ 103.19556725400014, 0.520453192000105 ], [ 103.18336022200015, 0.514837958000214 ] ] ], [ [ [ 104.28760826900009, 0.650783596000167 ], [ 104.27735436300009, 0.626166083000157 ], [ 104.26644941500018, 0.63300202000022 ], [ 104.26026451900003, 0.64337799700013 ], [ 104.24984785200013, 0.667181708000157 ], [ 104.22201582100007, 0.69603099200026 ], [ 104.21583092500009, 0.708156643000166 ], [ 104.24146569099997, 0.695379950000188 ], [ 104.27051842500009, 0.675034898000149 ], [ 104.28760826900009, 0.650783596000167 ] ] ], [ [ [ 104.7490340500002, 0.722601630000099 ], [ 104.73926842500015, 0.716253973000107 ], [ 104.7314559250002, 0.722479559000249 ], [ 104.72071373800014, 0.737860419000299 ], [ 104.72486412900014, 0.749660549000168 ], [ 104.74097741000026, 0.748928127000113 ], [ 104.7541610040002, 0.737250067000218 ], [ 104.7490340500002, 0.722601630000099 ] ] ], [ [ [ 127.43140709700003, 0.750921942000161 ], [ 127.4360457690002, 0.747219143000109 ], [ 127.43946373800009, 0.742865302000212 ], [ 127.44483483200031, 0.72744375200017 ], [ 127.44825280000032, 0.706610419000128 ], [ 127.44906660200013, 0.685003973000107 ], [ 127.4462996750002, 0.667181708000157 ], [ 127.43392988400024, 0.652167059000135 ], [ 127.41089928500026, 0.632269598000221 ], [ 127.3886824880002, 0.61884186400016 ], [ 127.37867272200003, 0.623032945000261 ], [ 127.37330162900014, 0.633490302000155 ], [ 127.36361738400024, 0.648260809000192 ], [ 127.35865319100014, 0.665838934000249 ], [ 127.37574303500014, 0.698797919000128 ], [ 127.38493899800017, 0.757147528000132 ], [ 127.3945418630002, 0.752590236000174 ], [ 127.4038192070002, 0.750392971000167 ], [ 127.41211998800009, 0.751654364000217 ], [ 127.4184676440002, 0.757147528000132 ], [ 127.42562910200013, 0.754217841000127 ], [ 127.43140709700003, 0.750921942000161 ] ] ], [ [ [ 134.33863366000014, 0.737534898000263 ], [ 134.32252037900014, 0.730536200000245 ], [ 134.30486087300005, 0.73289622600015 ], [ 134.30046634200028, 0.743475653000189 ], [ 134.31031334700015, 0.756496486000287 ], [ 134.32683353000016, 0.766180731000134 ], [ 134.34294681100016, 0.765204169000185 ], [ 134.34693444100003, 0.752020575000188 ], [ 134.33863366000014, 0.737534898000263 ] ] ], [ [ [ 103.1045028000002, 0.735419012000136 ], [ 103.09229576900015, 0.722357489000103 ], [ 103.08627363400024, 0.724676825000131 ], [ 103.08082116000026, 0.734279690000221 ], [ 103.07715905000015, 0.745510158000229 ], [ 103.07585696700011, 0.752834377000227 ], [ 103.07715905000015, 0.760891018000223 ], [ 103.08025149800022, 0.768622137000193 ], [ 103.08472741, 0.775702216000241 ], [ 103.09457441500018, 0.786037502000227 ], [ 103.10035241, 0.790187893000166 ], [ 103.1066186860001, 0.792954820000205 ], [ 103.11280358200008, 0.792954820000205 ], [ 103.12094160200019, 0.779974677000155 ], [ 103.11622155000009, 0.757757880000156 ], [ 103.1045028000002, 0.735419012000136 ] ] ], [ [ [ 104.62045332100007, 0.777044989000217 ], [ 104.6135360040002, 0.765855210000097 ], [ 104.60189863400007, 0.764349677000155 ], [ 104.57203209700009, 0.770819403000246 ], [ 104.55396569100009, 0.770697333000101 ], [ 104.54102623800014, 0.766587632000153 ], [ 104.51124108200008, 0.750311591000184 ], [ 104.511892123, 0.773749091000184 ], [ 104.52344811300014, 0.788397528000303 ], [ 104.54232832100013, 0.795884507000096 ], [ 104.56462649800011, 0.798163153000132 ], [ 104.60564212300011, 0.793890692000218 ], [ 104.62159264400009, 0.787420966000127 ], [ 104.62045332100007, 0.777044989000217 ] ] ], [ [ [ 104.27735436300009, 0.78790924700013 ], [ 104.27759850400014, 0.764308986000231 ], [ 104.27979576900009, 0.747056382000096 ], [ 104.28589928500008, 0.730373440000108 ], [ 104.29769941500018, 0.708156643000166 ], [ 104.28402754000024, 0.708156643000166 ], [ 104.27442467500015, 0.703436591000241 ], [ 104.26482181100016, 0.702215887000136 ], [ 104.25538170700014, 0.704901434000192 ], [ 104.2360945970002, 0.71845123900016 ], [ 104.21452884200011, 0.721177476000264 ], [ 104.20557701900009, 0.726060289000202 ], [ 104.1916610040002, 0.745998440000108 ], [ 104.18824303500008, 0.76447174700013 ], [ 104.19581139400003, 0.779974677000155 ], [ 104.21583092500009, 0.791327216000184 ], [ 104.23389733200003, 0.786444403000246 ], [ 104.24488366000008, 0.786525783000229 ], [ 104.24984785200013, 0.794745184000192 ], [ 104.25416100400014, 0.797837632000096 ], [ 104.26368248800014, 0.799139716000184 ], [ 104.2729598320002, 0.796535549000112 ], [ 104.27735436300009, 0.78790924700013 ] ] ], [ [ [ 103.72486412900014, 0.76650625200017 ], [ 103.7133895190002, 0.76243724200026 ], [ 103.70093834700009, 0.765692450000131 ], [ 103.69507897200015, 0.77391185100015 ], [ 103.68881269600018, 0.791652736000117 ], [ 103.66651451900003, 0.823635158000116 ], [ 103.66773522200009, 0.839667059000135 ], [ 103.7026473320002, 0.81415436400016 ], [ 103.71810957100013, 0.798081773000149 ], [ 103.72730553499997, 0.779852606000247 ], [ 103.72486412900014, 0.76650625200017 ] ] ], [ [ [ 104.64283287900008, 0.806830145000106 ], [ 104.6303817070002, 0.806545315000164 ], [ 104.6254988940002, 0.810695705000228 ], [ 104.63021894600013, 0.816351630000213 ], [ 104.6354272800001, 0.828558661000102 ], [ 104.63917076900015, 0.847967841000184 ], [ 104.64861087300017, 0.857896226000207 ], [ 104.65943444100009, 0.845892645000106 ], [ 104.66277103, 0.834214585000211 ], [ 104.66325931100016, 0.829087632000096 ], [ 104.66138756600009, 0.820135809000249 ], [ 104.65658613400018, 0.813869533000116 ], [ 104.6515405610001, 0.809963283000172 ], [ 104.64283287900008, 0.806830145000106 ] ] ], [ [ [ 127.34693444100026, 0.757391669000185 ], [ 127.33130944100003, 0.756415106000304 ], [ 127.31283613400001, 0.757147528000132 ], [ 127.30339603000016, 0.764878648000149 ], [ 127.29330488400012, 0.782660223000107 ], [ 127.28565514400009, 0.802150783000229 ], [ 127.28248131600003, 0.814886786000159 ], [ 127.28882897200003, 0.836900132000096 ], [ 127.30486087300017, 0.85516998900016 ], [ 127.32488040500016, 0.862860419000185 ], [ 127.36345462300005, 0.840969143000223 ], [ 127.37435957100013, 0.826239325000245 ], [ 127.3769637380002, 0.807766018000223 ], [ 127.37110436300009, 0.784491278000189 ], [ 127.36003665500004, 0.765082098000107 ], [ 127.34693444100026, 0.757391669000185 ] ] ], [ [ [ 103.52442467500015, 0.798488674000168 ], [ 103.52344811300014, 0.777818101000207 ], [ 103.4904891290002, 0.821275132000096 ], [ 103.47592207100013, 0.832220770000163 ], [ 103.44027754000012, 0.844224351000264 ], [ 103.42579186300014, 0.854396877000113 ], [ 103.42123457100018, 0.873236395000163 ], [ 103.4308374360001, 0.867661851000264 ], [ 103.48853600400014, 0.845445054000095 ], [ 103.49732506600009, 0.840236721000167 ], [ 103.50554446700011, 0.833970445000261 ], [ 103.51270592500003, 0.826808986000174 ], [ 103.51872806100022, 0.818426825000245 ], [ 103.52320397200009, 0.807928778000189 ], [ 103.52442467500015, 0.798488674000168 ] ] ], [ [ [ 103.9414168630002, 0.775702216000241 ], [ 103.9328719410002, 0.770331122000243 ], [ 103.92139733200014, 0.772772528000132 ], [ 103.91138756600009, 0.780747789000145 ], [ 103.89503014400009, 0.810248114000217 ], [ 103.88746178500008, 0.818019924000225 ], [ 103.85173587300017, 0.835353908000229 ], [ 103.84595787900014, 0.842474677000098 ], [ 103.84229576900015, 0.850653387000193 ], [ 103.81861412900025, 0.880072333000157 ], [ 103.81861412900025, 0.886216539000145 ], [ 103.86329186300009, 0.876898505000099 ], [ 103.89820397200015, 0.853338934000249 ], [ 103.92416425900018, 0.822455145000106 ], [ 103.94214928500008, 0.791327216000184 ], [ 103.9414168630002, 0.775702216000241 ] ] ], [ [ [ 103.45948326900015, 0.658107815000164 ], [ 103.43433678499997, 0.647284247000243 ], [ 103.41570071700011, 0.657375393000109 ], [ 103.4030867850002, 0.678208726000207 ], [ 103.39372806100016, 0.698797919000128 ], [ 103.38379967500009, 0.708156643000166 ], [ 103.34555097700013, 0.763373114000103 ], [ 103.3405054050001, 0.784002997000187 ], [ 103.33871504000018, 0.804917710000097 ], [ 103.34115644600024, 0.81736888200021 ], [ 103.35035241000008, 0.839178778000132 ], [ 103.35743248800009, 0.872463283000116 ], [ 103.3698836600002, 0.886053778000303 ], [ 103.38550866, 0.888861395000163 ], [ 103.40088951900009, 0.880072333000157 ], [ 103.41000410200013, 0.864569403000189 ], [ 103.41749108200014, 0.84650299700013 ], [ 103.42758222700013, 0.831610419000185 ], [ 103.4597274100002, 0.820379950000302 ], [ 103.4704695970002, 0.807928778000189 ], [ 103.48902428500014, 0.777044989000217 ], [ 103.5019637380002, 0.763373114000103 ], [ 103.50684655000009, 0.755438544000128 ], [ 103.51002037900025, 0.742865302000212 ], [ 103.48031660200024, 0.68524811400016 ], [ 103.45948326900015, 0.658107815000164 ] ] ], [ [ [ 103.83765709700003, 0.769517320000261 ], [ 103.8322860040002, 0.765366929000152 ], [ 103.82667076900015, 0.765692450000131 ], [ 103.82105553500008, 0.768947658000172 ], [ 103.80128014400015, 0.784247137000136 ], [ 103.76392662900008, 0.804917710000097 ], [ 103.74634850400025, 0.82273997600015 ], [ 103.73047936300003, 0.847560940000221 ], [ 103.72624759200011, 0.873236395000163 ], [ 103.74341881600014, 0.893744208000101 ], [ 103.75025475400014, 0.888861395000163 ], [ 103.76775149800028, 0.884344794000299 ], [ 103.7775985040002, 0.880072333000157 ], [ 103.80176842500015, 0.852728583000101 ], [ 103.81706790499999, 0.841701565000221 ], [ 103.83106530000009, 0.816351630000213 ], [ 103.83952884200011, 0.788397528000303 ], [ 103.83765709700003, 0.769517320000261 ] ] ], [ [ [ 103.47934004000024, 0.878851630000156 ], [ 103.46900475400025, 0.869614976000264 ], [ 103.45826256600014, 0.869696356000247 ], [ 103.44467207100018, 0.87360260600019 ], [ 103.43295332100007, 0.880682684000135 ], [ 103.42807050900024, 0.890041408000172 ], [ 103.42156009200022, 0.896714585000154 ], [ 103.4104110040002, 0.904730536000159 ], [ 103.40707441500007, 0.911444403000132 ], [ 103.45346113400024, 0.920558986000117 ], [ 103.46216881600003, 0.918931382000096 ], [ 103.47266686300009, 0.908840236000231 ], [ 103.4795028000002, 0.89362213700025 ], [ 103.47934004000024, 0.878851630000156 ] ] ], [ [ [ 104.17212975400014, 0.883490302000098 ], [ 104.1848250660002, 0.880072333000157 ], [ 104.22608483200003, 0.880072333000157 ], [ 104.24146569099997, 0.877020575000245 ], [ 104.2578231130002, 0.868597723000221 ], [ 104.26628665500021, 0.855861721000167 ], [ 104.25749759200016, 0.839667059000135 ], [ 104.25025475400025, 0.830023505000156 ], [ 104.23951256600014, 0.822455145000106 ], [ 104.18751061300009, 0.799261786000159 ], [ 104.17644290500021, 0.798488674000168 ], [ 104.1674910820002, 0.804917710000097 ], [ 104.16114342500015, 0.818793036000272 ], [ 104.15601647200009, 0.846380927000155 ], [ 104.1476343110001, 0.858954169000242 ], [ 104.13412519600013, 0.867254950000245 ], [ 104.10718834700009, 0.872992255000213 ], [ 104.09229576900009, 0.880072333000157 ], [ 104.09937584700009, 0.894761460000097 ], [ 104.0940047540002, 0.933091539000316 ], [ 104.09913170700014, 0.948919989000217 ], [ 104.1125594410002, 0.952582098000107 ], [ 104.1276961600002, 0.942531643000109 ], [ 104.15748131600014, 0.910793361000231 ], [ 104.16293379000024, 0.901922919000128 ], [ 104.16635175900018, 0.891791083000101 ], [ 104.17212975400014, 0.883490302000098 ] ] ], [ [ [ 103.90902754000018, 1.005926825000245 ], [ 103.94214928500008, 0.996079820000205 ], [ 103.95199629000007, 0.987941799000225 ], [ 103.96143639400009, 0.97479889500022 ], [ 103.96729576900003, 0.960109768000166 ], [ 103.96664472700019, 0.947211005000213 ], [ 103.95883222700019, 0.939764716000241 ], [ 103.94629967500009, 0.935614325000131 ], [ 103.93279056100022, 0.934027411000102 ], [ 103.92164147200009, 0.93463776200025 ], [ 103.91138756600009, 0.937933661000159 ], [ 103.85661868600016, 0.968410549000112 ], [ 103.84644616000008, 0.977484442000161 ], [ 103.83969160200024, 0.989935614000217 ], [ 103.83887780000003, 1.002997137000136 ], [ 103.8447371750002, 1.01268138200021 ], [ 103.85661868600016, 1.01439036700026 ], [ 103.87378991, 1.00360748900016 ], [ 103.87370853, 1.011908270000163 ], [ 103.8800561860001, 1.031480210000211 ], [ 103.89283287900025, 1.014349677000098 ], [ 103.90902754000018, 1.005926825000245 ] ] ], [ [ [ 104.83969160200024, 0.958807684000249 ], [ 104.83277428500014, 0.955145575000188 ], [ 104.82829837300017, 0.964992580000228 ], [ 104.82634524800011, 0.976629950000131 ], [ 104.82593834700015, 0.99298737200013 ], [ 104.82178795700008, 0.998724677000098 ], [ 104.79118899800005, 1.024074611000231 ], [ 104.79859459700003, 1.031480210000211 ], [ 104.81104576900015, 1.025620835000098 ], [ 104.83008873800009, 1.023382880000099 ], [ 104.84351647200015, 1.018215236000117 ], [ 104.8390405610001, 1.00360748900016 ], [ 104.84555097700019, 0.997788804000209 ], [ 104.84994550900018, 0.991197007000096 ], [ 104.8523055350002, 0.983710028000303 ], [ 104.8527938160002, 0.975490627000113 ], [ 104.84961998800014, 0.968898830000114 ], [ 104.84538821700022, 0.963324286000216 ], [ 104.83969160200024, 0.958807684000249 ] ] ], [ [ [ 131.2441512380002, 1.029730536000216 ], [ 131.2363387380002, 1.019354559000135 ], [ 131.23707116000003, 1.024969794000128 ], [ 131.24488366000003, 1.035345770000163 ], [ 131.2441512380002, 1.029730536000216 ] ] ], [ [ [ 107.60157311300014, 1.009833075000131 ], [ 107.57545006600014, 0.980169989000217 ], [ 107.55958092500009, 0.970160223000107 ], [ 107.54712975400008, 0.976263739000103 ], [ 107.54761803500008, 0.982123114000274 ], [ 107.55339603000021, 0.987453518000223 ], [ 107.55909264400009, 0.993963934000135 ], [ 107.55941816500012, 1.00360748900016 ], [ 107.55404707100018, 1.006903387000193 ], [ 107.54525800900018, 1.00625234600011 ], [ 107.53598066500012, 1.007879950000131 ], [ 107.52955162900003, 1.01805247600015 ], [ 107.53126061300003, 1.027899481000191 ], [ 107.53907311300003, 1.034328518000166 ], [ 107.55014082100007, 1.037502346000224 ], [ 107.56202233200003, 1.037176825000188 ], [ 107.5859481130002, 1.026068427000212 ], [ 107.59888756600009, 1.017157294000128 ], [ 107.60157311300014, 1.009833075000131 ] ] ], [ [ [ 131.26539147200015, 1.052720445000205 ], [ 131.2548934250002, 1.044256903000189 ], [ 131.25359134200028, 1.052639065000221 ], [ 131.25562584700003, 1.068793036000216 ], [ 131.26351972700002, 1.075913804000152 ], [ 131.27116946700005, 1.072007554000095 ], [ 131.27019290500004, 1.060980536000216 ], [ 131.26539147200015, 1.052720445000205 ] ] ], [ [ [ 120.68336022200003, 1.044582424000225 ], [ 120.66716556100005, 1.043117580000171 ], [ 120.63209069100014, 1.068508205000171 ], [ 120.60759524800017, 1.07245514500022 ], [ 120.61752363400012, 1.076808986000174 ], [ 120.62826582100013, 1.07884349200026 ], [ 120.6391707690002, 1.077582098000164 ], [ 120.64918053500003, 1.07245514500022 ], [ 120.65992272200003, 1.067613023000149 ], [ 120.66871178500014, 1.061021226000207 ], [ 120.68336022200003, 1.044582424000225 ] ] ], [ [ [ 120.3862410820002, 1.025946356000134 ], [ 120.37794030000009, 1.024074611000231 ], [ 120.3686629570002, 1.031724351000264 ], [ 120.36768639400032, 1.04922109600011 ], [ 120.3715926440002, 1.068019924000168 ], [ 120.37761478000004, 1.079901434000249 ], [ 120.39242597700013, 1.086086330000171 ], [ 120.4023543630002, 1.077215887000136 ], [ 120.40650475400014, 1.060980536000216 ], [ 120.40398196700005, 1.044867255000213 ], [ 120.39966881600026, 1.037502346000224 ], [ 120.39372806100016, 1.030747789000316 ], [ 120.3862410820002, 1.025946356000134 ] ] ], [ [ [ 103.44312584700015, 1.012762762000193 ], [ 103.44483483200003, 1.006170966000127 ], [ 103.44483483200003, 1.000311591000127 ], [ 103.44223066500012, 0.995266018000223 ], [ 103.43702233200008, 0.991400458000101 ], [ 103.42359459700009, 0.990179755000099 ], [ 103.40756269600024, 0.994940497000187 ], [ 103.38038170700008, 1.009833075000131 ], [ 103.35767662900014, 1.004461981000191 ], [ 103.3408309250002, 1.019517320000205 ], [ 103.31478925900024, 1.061590887000193 ], [ 103.31560306100005, 1.073187567000105 ], [ 103.3234969410002, 1.092759507000153 ], [ 103.33383222700024, 1.111395575000245 ], [ 103.34213300900012, 1.119696356000191 ], [ 103.34791100400025, 1.121771552000155 ], [ 103.36646569100009, 1.131170966000184 ], [ 103.37671959700009, 1.13328685100015 ], [ 103.3898218110001, 1.130275783000286 ], [ 103.39136803500014, 1.122463283000116 ], [ 103.38819420700008, 1.111721096000281 ], [ 103.38721764400015, 1.099798895000106 ], [ 103.39307701900015, 1.076076565000221 ], [ 103.39779707100024, 1.064154364000103 ], [ 103.40398196699999, 1.054836330000228 ], [ 103.4096785820002, 1.051174221000167 ], [ 103.42269941500024, 1.049709377000113 ], [ 103.42839603000004, 1.047186591000127 ], [ 103.43140709700003, 1.042710679000152 ], [ 103.43165123800009, 1.038153387000193 ], [ 103.43116295700008, 1.033392645000106 ], [ 103.43189537900014, 1.028387762000136 ], [ 103.43425540499999, 1.02423737200013 ], [ 103.4406030610001, 1.017157294000128 ], [ 103.44312584700015, 1.012762762000193 ] ] ], [ [ [ 102.64527428499997, 0.997219143000279 ], [ 102.66374759199999, 0.996079820000205 ], [ 102.67807050900018, 0.999416408000229 ], [ 102.70533287900025, 1.013902085000211 ], [ 102.71876061300014, 1.017279364000103 ], [ 102.74301191500018, 1.015936591000127 ], [ 102.76384524800022, 1.011175848000164 ], [ 102.78256269600013, 1.001776434000135 ], [ 102.83253014400015, 0.963771877000227 ], [ 102.90902754000024, 0.927720445000148 ], [ 103.02173912900025, 0.845282294000128 ], [ 103.03646894600013, 0.828192450000245 ], [ 103.04037519600024, 0.821275132000096 ], [ 103.04867597700019, 0.797023830000114 ], [ 103.05176842500009, 0.784654039000259 ], [ 103.05445397199998, 0.777736721000224 ], [ 103.05762780000003, 0.777044989000217 ], [ 103.04908287900014, 0.757798570000148 ], [ 103.04371178499997, 0.720689195000261 ], [ 103.03370201900009, 0.705023505000099 ], [ 103.02784264400015, 0.701239325000188 ], [ 103.01734459700009, 0.696112372000243 ], [ 103.00733483200008, 0.69383372600015 ], [ 103.00294030000009, 0.698472398000263 ], [ 102.99976647200003, 0.700751044000185 ], [ 102.98243248800009, 0.722357489000103 ], [ 102.9299422540002, 0.770005601000264 ], [ 102.89470462300005, 0.789984442000105 ], [ 102.8522241550001, 0.798163153000132 ], [ 102.76685631600014, 0.791327216000184 ], [ 102.74512780000015, 0.793768622000243 ], [ 102.70215905000009, 0.803900458000101 ], [ 102.68148847700019, 0.804917710000097 ], [ 102.5976668630002, 0.785060940000278 ], [ 102.5578719410002, 0.780259507000096 ], [ 102.5163680350002, 0.791327216000184 ], [ 102.46729576900015, 0.826971747000243 ], [ 102.45801842500009, 0.832220770000163 ], [ 102.40650475400014, 0.873236395000163 ], [ 102.40943444100014, 0.894720770000106 ], [ 102.42457116000014, 0.914496161000216 ], [ 102.4450789720002, 0.929022528000132 ], [ 102.48943118600016, 0.939764716000241 ], [ 102.50066165500004, 0.953273830000114 ], [ 102.5017195970002, 0.972886460000211 ], [ 102.46989993600005, 1.067368882000153 ], [ 102.46762129000018, 1.106431382000096 ], [ 102.48902428500014, 1.13328685100015 ], [ 102.52751712300022, 1.139837958000157 ], [ 102.55640709700015, 1.125677802000212 ], [ 102.6079207690002, 1.068915106000191 ], [ 102.6157332690002, 1.05768463700025 ], [ 102.61736087300022, 1.044256903000189 ], [ 102.60889733200008, 1.027777411000216 ], [ 102.6054793630002, 1.011175848000164 ], [ 102.62175540500021, 1.001613674000168 ], [ 102.64527428499997, 0.997219143000279 ] ] ], [ [ [ 103.0371199880002, 1.044582424000225 ], [ 103.0776473320002, 1.003404039000202 ], [ 103.1264754570002, 0.927883205000114 ], [ 103.16325931100027, 0.899603583000271 ], [ 103.1745711600002, 0.882147528000189 ], [ 103.16749108200003, 0.858954169000242 ], [ 103.12712649800017, 0.834418036000216 ], [ 103.08627363400024, 0.841009833000214 ], [ 102.95150800900012, 0.924627997000243 ], [ 102.95118248800009, 0.927883205000114 ], [ 102.90674889400015, 0.968817450000131 ], [ 102.89332116000008, 0.975327867000146 ], [ 102.85889733200003, 0.987697658000172 ], [ 102.8422957690002, 0.989935614000217 ], [ 102.82439212300011, 0.995428778000189 ], [ 102.8115340500002, 1.008042710000098 ], [ 102.8010360040002, 1.021958726000207 ], [ 102.79070071700011, 1.031480210000211 ], [ 102.77361087300011, 1.035467841000184 ], [ 102.71192467500015, 1.031480210000211 ], [ 102.69263756600014, 1.025824286000159 ], [ 102.67058353000021, 1.014553127000227 ], [ 102.64763431100022, 1.006293036000102 ], [ 102.62623131600026, 1.009833075000131 ], [ 102.6247664720002, 1.021958726000207 ], [ 102.63721764400015, 1.041001695000148 ], [ 102.67058353000021, 1.075588283000116 ], [ 102.68523196700011, 1.095404364000217 ], [ 102.70191491, 1.13776276200025 ], [ 102.71558678500008, 1.154445705000114 ], [ 102.75538170700008, 1.167914130000099 ], [ 102.80176842500015, 1.163275458000157 ], [ 102.88624108200014, 1.13328685100015 ], [ 102.96713300900012, 1.091538804000152 ], [ 103.0371199880002, 1.044582424000225 ] ] ], [ [ [ 104.1523543630002, 1.140041408000116 ], [ 104.15170332100013, 1.119452216000241 ], [ 104.13111412900014, 1.048773505000156 ], [ 104.12322024800022, 1.04962799700013 ], [ 104.10596764400003, 1.065008856000247 ], [ 104.10417728000004, 1.057766018000166 ], [ 104.10417728000004, 1.05166250200017 ], [ 104.10670006600009, 1.045477606000191 ], [ 104.11280358200008, 1.037746486000174 ], [ 104.10450280000015, 1.033270575000131 ], [ 104.10059655000009, 1.02704498900016 ], [ 104.09782962300022, 1.019110419000185 ], [ 104.09229576900009, 1.009833075000131 ], [ 104.09156334700009, 1.005560614000217 ], [ 104.0932723320002, 0.993638414000202 ], [ 104.09229576900009, 0.989935614000217 ], [ 104.0879012380002, 0.988959052000098 ], [ 104.0764266290002, 0.990464585000211 ], [ 104.07178795700008, 0.989935614000217 ], [ 104.04916425900007, 0.984198309000249 ], [ 104.0317488940002, 0.989447333000101 ], [ 103.99610436300014, 1.009833075000131 ], [ 103.98796634200016, 1.010484117000203 ], [ 103.96664472700019, 1.008124091000127 ], [ 103.9558211600002, 1.009833075000131 ], [ 103.95053144600018, 1.014105536000272 ], [ 103.91822350400008, 1.051336981000134 ], [ 103.90674889400015, 1.071682033000229 ], [ 103.90259850400008, 1.090521552000155 ], [ 103.91407311300014, 1.099798895000106 ], [ 103.9238387380002, 1.096136786000102 ], [ 103.93816165500016, 1.079575914000316 ], [ 103.94898522199998, 1.078599351000207 ], [ 103.95622806099999, 1.08486562700017 ], [ 103.9553328790002, 1.093573309000192 ], [ 103.95134524800022, 1.103583075000245 ], [ 103.94654381600014, 1.12470123900016 ], [ 103.94320722700019, 1.130926825000131 ], [ 103.94450931100027, 1.135239976000207 ], [ 103.9558211600002, 1.140773830000171 ], [ 103.96705162900008, 1.141669012000136 ], [ 103.98764082100013, 1.134222723000164 ], [ 103.99610436300014, 1.13328685100015 ], [ 104.01107832100013, 1.14472077000022 ], [ 104.01921634200011, 1.178859768000109 ], [ 104.03093509199999, 1.187892971000167 ], [ 104.04135175900012, 1.181382554000152 ], [ 104.07081139400015, 1.145941473000221 ], [ 104.0854598320002, 1.13328685100015 ], [ 104.09164472700024, 1.145493882000267 ], [ 104.09156334700009, 1.158433335000154 ], [ 104.08659915500021, 1.17096588700025 ], [ 104.07862389400015, 1.181708075000188 ], [ 104.09058678500008, 1.187811591000184 ], [ 104.10320071700016, 1.189520575000188 ], [ 104.11573326900009, 1.187241929000095 ], [ 104.1276961600002, 1.181301174000168 ], [ 104.13819420700008, 1.172023830000114 ], [ 104.14275149800011, 1.166489976000207 ], [ 104.14633222700019, 1.160467841000298 ], [ 104.1523543630002, 1.140041408000116 ] ] ], [ [ [ 104.59253991000003, 1.198797919000185 ], [ 104.58692467500003, 1.162054755000099 ], [ 104.58822675900012, 1.144598700000245 ], [ 104.59937584700015, 1.126450914000259 ], [ 104.64714603, 1.104966539000145 ], [ 104.6545516290002, 1.096380927000098 ], [ 104.65642337300017, 1.080389716000127 ], [ 104.66749108200008, 1.030585028000246 ], [ 104.65162194100009, 1.009019273000149 ], [ 104.64714603, 0.996893622000243 ], [ 104.65398196700011, 0.976874091000184 ], [ 104.65479576900015, 0.947699286000216 ], [ 104.65772545700008, 0.941473700000245 ], [ 104.66163170700014, 0.937241929000152 ], [ 104.6587020190002, 0.927883205000114 ], [ 104.64991295700008, 0.918443101000264 ], [ 104.63697350400014, 0.914211330000171 ], [ 104.62354576900015, 0.912176825000131 ], [ 104.61638431100022, 0.906195380000213 ], [ 104.6135360040002, 0.896429755000213 ], [ 104.61304772200026, 0.883124091000241 ], [ 104.59986412900025, 0.835028387000193 ], [ 104.56706790500021, 0.829535223000107 ], [ 104.48340905000009, 0.858954169000242 ], [ 104.48926842500003, 0.875148830000228 ], [ 104.48373457100013, 0.893296617000146 ], [ 104.4694930350002, 0.908107815000108 ], [ 104.44922936300009, 0.914211330000171 ], [ 104.44922936300009, 0.921616929000152 ], [ 104.47339928500008, 0.920599677000212 ], [ 104.4846297540002, 0.922186591000241 ], [ 104.49024498800009, 0.927883205000114 ], [ 104.48658287900025, 0.937079169000185 ], [ 104.47486412900014, 0.940090236000174 ], [ 104.44922936300009, 0.941473700000245 ], [ 104.4289656910002, 0.948919989000217 ], [ 104.42107181100022, 0.956610419000242 ], [ 104.42123457100018, 0.968817450000131 ], [ 104.42758222700013, 0.97479889500022 ], [ 104.46273847700019, 0.983099677000155 ], [ 104.45801842500009, 0.993719794000185 ], [ 104.45736738400012, 1.001939195000148 ], [ 104.46273847700019, 1.017279364000103 ], [ 104.4682723320002, 1.01805247600015 ], [ 104.47966556100005, 1.025336005000156 ], [ 104.48519941500018, 1.03367747600015 ], [ 104.47299238400012, 1.037746486000174 ], [ 104.46778405000009, 1.040920315000165 ], [ 104.45777428500014, 1.054999091000127 ], [ 104.45248457100013, 1.058172919000185 ], [ 104.43873131600003, 1.056870835000098 ], [ 104.42994225400025, 1.053615627000227 ], [ 104.3862410820002, 1.029852606000191 ], [ 104.37142988400018, 1.025620835000098 ], [ 104.34945722700019, 1.024074611000231 ], [ 104.34058678500003, 1.020900783000172 ], [ 104.32715905000003, 1.006781317000218 ], [ 104.31544030000015, 1.00360748900016 ], [ 104.2815047540002, 1.002142645000106 ], [ 104.27100670700014, 1.00360748900016 ], [ 104.24561608200014, 1.017279364000103 ], [ 104.24138431099999, 1.035549221000167 ], [ 104.24244225400025, 1.055894273000263 ], [ 104.23275800900018, 1.075588283000116 ], [ 104.2319442070002, 1.093329169000242 ], [ 104.25635826900015, 1.108872789000202 ], [ 104.30518639400015, 1.126450914000259 ], [ 104.316579623, 1.132879950000188 ], [ 104.3222762380002, 1.138657945000148 ], [ 104.3325301440002, 1.154445705000114 ], [ 104.33676191500012, 1.165025132000153 ], [ 104.33725019600013, 1.173732815000221 ], [ 104.34131920700008, 1.179592190000165 ], [ 104.35629316500018, 1.181708075000188 ], [ 104.3784285820002, 1.17649974200026 ], [ 104.38933353000004, 1.178656317000105 ], [ 104.39389082100013, 1.191595770000163 ], [ 104.39966881600009, 1.202622789000145 ], [ 104.41260826900015, 1.200628973000164 ], [ 104.43555748800014, 1.187892971000167 ], [ 104.4760848320002, 1.178290106000247 ], [ 104.50814863400018, 1.179510809000249 ], [ 104.53809655000003, 1.190252997000187 ], [ 104.57203209700009, 1.209051825000245 ], [ 104.56804446699999, 1.220160223000107 ], [ 104.57569420700003, 1.225409247000243 ], [ 104.58692467500003, 1.219916083000157 ], [ 104.59253991000003, 1.198797919000185 ] ] ], [ [ [ 126.38542728000027, 1.286281643000166 ], [ 126.38086998800009, 1.28339264500022 ], [ 126.35906009200016, 1.316107489000103 ], [ 126.35084069100014, 1.318508205000114 ], [ 126.34717858200008, 1.323309637000193 ], [ 126.35238691500024, 1.335882880000213 ], [ 126.36166425900001, 1.344712632000153 ], [ 126.3696395190002, 1.348822333000101 ], [ 126.37769616000003, 1.347479559000192 ], [ 126.38493899800017, 1.34218984600011 ], [ 126.39486738400012, 1.339341539000259 ], [ 126.40162194100014, 1.332017320000261 ], [ 126.39039147200026, 1.310248114000103 ], [ 126.39079837300005, 1.304022528000189 ], [ 126.38542728000027, 1.286281643000166 ] ] ], [ [ [ 102.46485436300014, 0.96344635600019 ], [ 102.45687910200007, 0.962347723000164 ], [ 102.44703209700009, 0.962958075000188 ], [ 102.43751061300009, 0.958889065000164 ], [ 102.40748131600009, 0.932847398000263 ], [ 102.39966881600014, 0.927883205000114 ], [ 102.36931399800017, 0.935207424000112 ], [ 102.33375084700009, 0.963690497000243 ], [ 102.26710045700008, 1.036851304000209 ], [ 102.25131269600024, 1.066799221000167 ], [ 102.23926842500015, 1.082098700000131 ], [ 102.2329207690002, 1.099514065000165 ], [ 102.23422285200019, 1.124212958000157 ], [ 102.24268639400003, 1.167425848000164 ], [ 102.24512780000009, 1.20392487200013 ], [ 102.24187259200022, 1.221869208000157 ], [ 102.2229110040002, 1.238023179000152 ], [ 102.21257571700011, 1.25800202000022 ], [ 102.20411217500009, 1.280829169000242 ], [ 102.20101972700019, 1.297756252000227 ], [ 102.20346113400012, 1.306545315000108 ], [ 102.21265709700009, 1.32542552300032 ], [ 102.21461022200015, 1.33563873900016 ], [ 102.20850670700008, 1.377183335000154 ], [ 102.21062259200005, 1.398260809000249 ], [ 102.2174585300001, 1.409165757000153 ], [ 102.2312117850002, 1.413234768000109 ], [ 102.25294030000009, 1.413804429000095 ], [ 102.29086347700019, 1.404527085000211 ], [ 102.32211347700019, 1.381496486000231 ], [ 102.37574303500014, 1.322251695000261 ], [ 102.45142662900025, 1.267279364000103 ], [ 102.4670516290002, 1.251206773000263 ], [ 102.47339928500014, 1.242010809000192 ], [ 102.47950280000003, 1.21914297100011 ], [ 102.47608483200003, 1.194525458000101 ], [ 102.44743899800005, 1.10049062700017 ], [ 102.44556725400008, 1.076157945000205 ], [ 102.44743899800005, 1.051336981000134 ], [ 102.46517988400018, 0.994818427000212 ], [ 102.4680281910002, 0.972560940000108 ], [ 102.46485436300014, 0.96344635600019 ] ] ], [ [ [ 97.374522332000083, 1.51854075700021 ], [ 97.391612175000205, 1.508937893000223 ], [ 97.40748131600003, 1.514064846000167 ], [ 97.416758660000085, 1.519232489000274 ], [ 97.424327019000202, 1.514878648000149 ], [ 97.437998894000145, 1.495266018000109 ], [ 97.438975457000026, 1.484605210000154 ], [ 97.441661004000139, 1.479681708000101 ], [ 97.4472762380002, 1.476874091000241 ], [ 97.459971550000091, 1.477972723000221 ], [ 97.470388217000163, 1.475653387000136 ], [ 97.481700066000087, 1.477443752000227 ], [ 97.4863387380002, 1.476548570000205 ], [ 97.487803582000026, 1.473089911000159 ], [ 97.491465691000258, 1.459784247000187 ], [ 97.493174675000091, 1.456040757000096 ], [ 97.516856316000144, 1.431789455000114 ], [ 97.524180535000141, 1.428127346000224 ], [ 97.528086785000198, 1.42291901200025 ], [ 97.533539259000179, 1.399847723000107 ], [ 97.539886915000068, 1.390570380000156 ], [ 97.592133009000179, 1.339911200000245 ], [ 97.604746941000087, 1.322333075000245 ], [ 97.616547071000127, 1.280910549000225 ], [ 97.693614129000139, 1.186021226000264 ], [ 97.71265709700009, 1.172674872000187 ], [ 97.757334832000083, 1.163885809000306 ], [ 97.776540561000104, 1.15509674700013 ], [ 97.792246941000087, 1.143988348000221 ], [ 97.80225670700014, 1.13328685100015 ], [ 97.819021029999988, 1.109930731000191 ], [ 97.826426629000196, 1.096258856000247 ], [ 97.829437696000184, 1.082098700000131 ], [ 97.836273634000179, 1.069973049000225 ], [ 97.852793815999974, 1.065008856000247 ], [ 97.872813347000033, 1.062486070000261 ], [ 97.89039147200009, 1.058172919000185 ], [ 97.904470248000223, 1.044012762000136 ], [ 97.922211134000122, 1.004339911000216 ], [ 97.928477410000085, 0.996079820000205 ], [ 97.93921959700009, 0.986070054000152 ], [ 97.934418165000181, 0.96360911700026 ], [ 97.917735222000147, 0.927883205000114 ], [ 97.917735222000147, 0.93463776200025 ], [ 97.901377800000148, 0.90595123900016 ], [ 97.898285352000244, 0.875311591000241 ], [ 97.904063347000204, 0.814886786000159 ], [ 97.901866082000197, 0.800726630000213 ], [ 97.892588738000143, 0.777044989000217 ], [ 97.884532097000147, 0.718207098000164 ], [ 97.882985873000109, 0.642971096000167 ], [ 97.874278191000087, 0.622015692000218 ], [ 97.827159050000091, 0.562689520000106 ], [ 97.819346550000091, 0.558539130000099 ], [ 97.809255405000158, 0.560288804000095 ], [ 97.80030358200014, 0.565497137000193 ], [ 97.774261915000238, 0.585191148000149 ], [ 97.764170769000202, 0.567572333000101 ], [ 97.752289259000122, 0.568345445000148 ], [ 97.726410352000187, 0.585191148000149 ], [ 97.725271030000101, 0.580755927000212 ], [ 97.715342644000202, 0.574448960000211 ], [ 97.704112175000091, 0.572739976000207 ], [ 97.696136915000125, 0.586371161000159 ], [ 97.690440300000148, 0.591620184000249 ], [ 97.683848504000252, 0.596136786000159 ], [ 97.678721550000091, 0.598863023000263 ], [ 97.690928582000026, 0.624212958000101 ], [ 97.683848504000252, 0.64305247600015 ], [ 97.668955925000205, 0.658758856000304 ], [ 97.6582137380002, 0.67462799700013 ], [ 97.657481315999974, 0.687241929000209 ], [ 97.659190300000148, 0.715399481000247 ], [ 97.654551629000139, 0.726060289000202 ], [ 97.647715691000144, 0.736314195000261 ], [ 97.633067254000196, 0.769476630000099 ], [ 97.63038170700014, 0.780747789000145 ], [ 97.613780144000089, 0.823553778000132 ], [ 97.574392123000109, 0.860907294000128 ], [ 97.4863387380002, 0.914211330000171 ], [ 97.491872592000107, 0.933010158000229 ], [ 97.479340040000181, 0.943426825000131 ], [ 97.457367384000065, 0.94798411700026 ], [ 97.43506920700014, 0.948919989000217 ], [ 97.395355665000125, 0.944891669000185 ], [ 97.388845248000166, 0.952093817000105 ], [ 97.389984571000184, 0.976263739000103 ], [ 97.387705925000091, 1.018784898000149 ], [ 97.371592644000145, 1.059759833000214 ], [ 97.32178795700014, 1.140773830000171 ], [ 97.31226647200009, 1.166937567000161 ], [ 97.308278842000163, 1.174872137000136 ], [ 97.298838738000143, 1.183254299000225 ], [ 97.287852410000141, 1.190822658000172 ], [ 97.278575066000087, 1.199693101000207 ], [ 97.271332227000244, 1.222235419000185 ], [ 97.256846550000091, 1.235012111000231 ], [ 97.25359134200022, 1.246893622000187 ], [ 97.251719596999976, 1.259222723000221 ], [ 97.247243686000274, 1.267035223000221 ], [ 97.240570509000179, 1.272406317000161 ], [ 97.233083529999988, 1.277289130000156 ], [ 97.222911004000139, 1.281887111000174 ], [ 97.212657097000204, 1.284328518000109 ], [ 97.202159050000148, 1.288316148000206 ], [ 97.191579623000109, 1.297756252000227 ], [ 97.185801629000196, 1.307766018000109 ], [ 97.175954623000109, 1.331854559000192 ], [ 97.168223504000196, 1.34284088700025 ], [ 97.128428582000197, 1.382635809000249 ], [ 97.107269727000187, 1.397772528000246 ], [ 97.082286004000252, 1.407619533000116 ], [ 97.082286004000252, 1.405340887000193 ], [ 97.068614129000139, 1.394598700000188 ], [ 97.06364993599999, 1.415228583000157 ], [ 97.080414259000236, 1.429144598000221 ], [ 97.106944207000083, 1.436021226000207 ], [ 97.130625847000204, 1.435532945000205 ], [ 97.139496290000238, 1.432196356000134 ], [ 97.150726759000122, 1.425930080000171 ], [ 97.160655144000145, 1.418280341000241 ], [ 97.164805535000255, 1.410711981000191 ], [ 97.169688347000147, 1.415961005000156 ], [ 97.181407097000033, 1.416449286000159 ], [ 97.205821160000085, 1.413804429000095 ], [ 97.235850457000083, 1.416693427000212 ], [ 97.257823113000143, 1.423651434000249 ], [ 97.277354363000029, 1.436224677000098 ], [ 97.321055535000141, 1.474066473000107 ], [ 97.330739779999988, 1.486558335000211 ], [ 97.334808790000238, 1.500148830000171 ], [ 97.331797722000147, 1.527818101000264 ], [ 97.335459832000083, 1.537665106000304 ], [ 97.349782748000166, 1.545396226000264 ], [ 97.374522332000083, 1.51854075700021 ] ] ], [ [ [ 125.21599368600005, 1.392726955000114 ], [ 125.18531334700003, 1.390692450000131 ], [ 125.17156009200016, 1.40448639500022 ], [ 125.17465254000001, 1.415472723000107 ], [ 125.18295332100001, 1.421332098000221 ], [ 125.20492597700013, 1.428127346000224 ], [ 125.25001061300009, 1.448635158000116 ], [ 125.29509524800017, 1.551662502000227 ], [ 125.30128014400009, 1.551662502000227 ], [ 125.30128014400009, 1.531195380000213 ], [ 125.29639733200031, 1.502752997000243 ], [ 125.29509524800017, 1.472845770000106 ], [ 125.29175866000014, 1.465277411000159 ], [ 125.27711022200015, 1.453070380000099 ], [ 125.2739363940002, 1.445217190000108 ], [ 125.26710045700031, 1.413804429000095 ], [ 125.24838300900012, 1.402980861000174 ], [ 125.21599368600005, 1.392726955000114 ] ] ], [ [ [ 102.23764082100013, 1.570257880000156 ], [ 102.29786217500015, 1.558498440000108 ], [ 102.32829837300011, 1.559271552000098 ], [ 102.33814537900025, 1.558498440000108 ], [ 102.34896894600024, 1.554632880000156 ], [ 102.3691512380002, 1.542303778000189 ], [ 102.37916100400025, 1.537990627000113 ], [ 102.46265709700003, 1.515448309000135 ], [ 102.4904891290002, 1.489691473000107 ], [ 102.49586022200009, 1.441799221000167 ], [ 102.49586022200009, 1.363592841000241 ], [ 102.51148522200003, 1.295314846000167 ], [ 102.5095320970002, 1.277289130000156 ], [ 102.47877037900014, 1.270738023000149 ], [ 102.43474368599999, 1.299139716000127 ], [ 102.37232506600003, 1.35984935100015 ], [ 102.33025149800017, 1.413275458000101 ], [ 102.314626498, 1.421332098000221 ], [ 102.3046981130002, 1.423529364000103 ], [ 102.28516686300014, 1.433335679000152 ], [ 102.13453209699998, 1.455715236000231 ], [ 102.09555097700019, 1.475246486000117 ], [ 102.05697675900012, 1.510687567000218 ], [ 102.02654056100016, 1.547674872000187 ], [ 102.0044051440002, 1.585679429000095 ], [ 102.00782311300009, 1.615383205000228 ], [ 102.05372155000015, 1.627346096000167 ], [ 102.07243899800022, 1.623236395000163 ], [ 102.1201278000002, 1.600734768000109 ], [ 102.13624108200008, 1.58954498900016 ], [ 102.15235436300009, 1.581122137000136 ], [ 102.1750594410002, 1.575751044000242 ], [ 102.23764082100013, 1.570257880000156 ] ] ], [ [ [ 98.504161004000196, 1.664943752000227 ], [ 98.521006707000026, 1.655585028000189 ], [ 98.531097852000187, 1.661444403000132 ], [ 98.54053795700014, 1.673407294000242 ], [ 98.555186394000202, 1.68203359600011 ], [ 98.570974155000101, 1.673081773000263 ], [ 98.590668165000125, 1.651922919000128 ], [ 98.59913170700014, 1.63198476800028 ], [ 98.581065300000205, 1.626776434000249 ], [ 98.559906446000127, 1.623602606000191 ], [ 98.528819207000197, 1.623236395000163 ], [ 98.497569207000083, 1.627264716000184 ], [ 98.4648543630002, 1.644191799000168 ], [ 98.451833530000158, 1.646226304000152 ], [ 98.439952019000202, 1.649847723000221 ], [ 98.4316512380002, 1.661525783000116 ], [ 98.430186394000145, 1.676459052000155 ], [ 98.434825066000087, 1.691961981000247 ], [ 98.445648634000179, 1.704331773000206 ], [ 98.462657097000147, 1.709295966000184 ], [ 98.477061394000089, 1.703599351000207 ], [ 98.48812910200013, 1.690497137000193 ], [ 98.504161004000196, 1.664943752000227 ] ] ], [ [ [ 125.06169681100005, 1.674546617000146 ], [ 125.08171634200016, 1.674383856000247 ], [ 125.14763431100005, 1.68203359600011 ], [ 125.17530358200008, 1.678168036000159 ], [ 125.17994225400025, 1.667425848000278 ], [ 125.16529381600026, 1.627346096000167 ], [ 125.16781660200002, 1.5847842470003 ], [ 125.18783613400024, 1.560532945000261 ], [ 125.21517988400024, 1.54393138200021 ], [ 125.23975670700031, 1.523667710000154 ], [ 125.24919681100005, 1.484686591000241 ], [ 125.2202254570002, 1.459051825000188 ], [ 125.17701256600014, 1.440171617000146 ], [ 125.14429772200003, 1.421332098000221 ], [ 125.11540774800017, 1.385199286000159 ], [ 125.09620201900009, 1.349514065000165 ], [ 125.0337020190002, 1.175441799000225 ], [ 124.98658287900003, 1.092962958000214 ], [ 124.95427493600027, 1.053534247000243 ], [ 124.92115319100026, 1.020656643000223 ], [ 124.91627037900014, 1.013006903000189 ], [ 124.90593509200028, 0.988104559000192 ], [ 124.90398196700016, 0.979681708000214 ], [ 124.89869225400014, 0.973049221000224 ], [ 124.86304772200015, 0.955145575000188 ], [ 124.83082116000026, 0.946437893000223 ], [ 124.82203209700015, 0.941473700000245 ], [ 124.8144637380002, 0.931708075000245 ], [ 124.79900149800017, 0.905747789000202 ], [ 124.7910262380002, 0.90058014500022 ], [ 124.76644941500001, 0.89500560100015 ], [ 124.74634850400003, 0.881252346000224 ], [ 124.71216881600003, 0.845282294000128 ], [ 124.6787215500002, 0.820379950000302 ], [ 124.66382897200003, 0.805609442000105 ], [ 124.6543074880002, 0.778021552000098 ], [ 124.63982181100016, 0.758449611000117 ], [ 124.63648522200015, 0.746649481000247 ], [ 124.63672936300009, 0.731756903000132 ], [ 124.63607832100013, 0.72508372600015 ], [ 124.6240340500002, 0.708156643000166 ], [ 124.58790123800009, 0.676988023000149 ], [ 124.57935631600026, 0.658189195000148 ], [ 124.5732528000002, 0.649115302000155 ], [ 124.56934655000009, 0.63886139500022 ], [ 124.57211347700013, 0.629584052000212 ], [ 124.57935631600026, 0.621039130000213 ], [ 124.58220462300028, 0.613755601000207 ], [ 124.58253014400032, 0.595445054000152 ], [ 124.57789147200015, 0.591620184000249 ], [ 124.55632571700028, 0.592962958000101 ], [ 124.54835045700031, 0.592027085000211 ], [ 124.54411868600016, 0.587713934000135 ], [ 124.5034285820002, 0.534002997000243 ], [ 124.49976647200026, 0.51854075700021 ], [ 124.5141707690002, 0.510077216000127 ], [ 124.5141707690002, 0.503322658000229 ], [ 124.49480228000016, 0.496283270000106 ], [ 124.4829207690002, 0.482896226000207 ], [ 124.4658309250002, 0.448675848000107 ], [ 124.4389754570002, 0.456447658000116 ], [ 124.4145613940002, 0.448146877000113 ], [ 124.39258873800009, 0.435003973000164 ], [ 124.37330162900014, 0.428168036000272 ], [ 124.34929446700016, 0.422796942000105 ], [ 124.32178795700008, 0.398871161000159 ], [ 124.1997176440002, 0.37409088700025 ], [ 124.15056399800028, 0.36985911700026 ], [ 124.10938561300031, 0.387193101000207 ], [ 124.09734134200016, 0.37962474200026 ], [ 124.06853274800017, 0.351874091000184 ], [ 124.04135175900001, 0.359198309000135 ], [ 124.03386478000004, 0.359320380000213 ], [ 124.0239363940002, 0.354437567000218 ], [ 124.00611412900003, 0.341457424000112 ], [ 123.99626712300028, 0.338812567000218 ], [ 123.93140709700003, 0.336249091000241 ], [ 123.91089928500026, 0.332017320000318 ], [ 123.86931399800017, 0.318304755000156 ], [ 123.8588973320002, 0.317043361000287 ], [ 123.82496178500014, 0.318304755000156 ], [ 123.80730228000004, 0.310858466000184 ], [ 123.7905379570002, 0.30125560100015 ], [ 123.78199303500003, 0.298570054000265 ], [ 123.77051842500032, 0.302069403000132 ], [ 123.75806725400014, 0.307521877000113 ], [ 123.74577884200016, 0.310858466000184 ], [ 123.7246199880002, 0.308823960000097 ], [ 123.68970787900014, 0.294501044000185 ], [ 123.65650475400014, 0.288275458000214 ], [ 123.64698326900032, 0.281642971000281 ], [ 123.63249759200016, 0.266506252000283 ], [ 123.62598717500009, 0.266587632000267 ], [ 123.61646569100014, 0.27204010600019 ], [ 123.58423912900025, 0.29759349200026 ], [ 123.57105553500003, 0.30361562700017 ], [ 123.46631920700008, 0.312323309000192 ], [ 123.44467207100013, 0.310858466000184 ], [ 123.4072371750002, 0.300441799000112 ], [ 123.3901473320002, 0.29783763200021 ], [ 123.29200280000009, 0.308335679000095 ], [ 123.25912519600013, 0.32086823100019 ], [ 123.2461043630002, 0.322088934000192 ], [ 123.2387801440002, 0.324530341000127 ], [ 123.23503665500016, 0.328924872000243 ], [ 123.2270613940002, 0.34267812700017 ], [ 123.22193444100003, 0.34564850500027 ], [ 123.21558678500014, 0.352769273000206 ], [ 123.19092858200008, 0.390326239000103 ], [ 123.18669681100016, 0.393866278000189 ], [ 123.16773522200026, 0.393052476000207 ], [ 123.1635848320002, 0.396795966000127 ], [ 123.16179446700016, 0.401353257000153 ], [ 123.13257897200026, 0.447577216000184 ], [ 123.08936608200008, 0.494289455000228 ], [ 123.07422936300009, 0.516302802000098 ], [ 123.0673934250002, 0.516302802000098 ], [ 123.05404707100013, 0.50096263200021 ], [ 123.03248131600014, 0.491359768000223 ], [ 122.97787519600001, 0.482814846000224 ], [ 122.83073978000004, 0.492336330000228 ], [ 122.7382918630002, 0.481675523000149 ], [ 122.69410241000014, 0.482814846000224 ], [ 122.68230228000027, 0.488592841000184 ], [ 122.66293379000012, 0.515692450000188 ], [ 122.64966881600014, 0.523830471000224 ], [ 122.65552819100014, 0.492865302000098 ], [ 122.65316816500012, 0.480414130000156 ], [ 122.63941491000014, 0.47532786700026 ], [ 122.62224368600016, 0.476548570000261 ], [ 122.60808353000016, 0.480861721000167 ], [ 122.59685306100027, 0.489447333000157 ], [ 122.58301842500009, 0.49433014500022 ], [ 122.5659285820002, 0.496527411000159 ], [ 122.32439212300017, 0.497056382000096 ], [ 122.31251061300009, 0.494859117000146 ], [ 122.29314212300005, 0.485052802000098 ], [ 122.28345787900003, 0.482814846000224 ], [ 122.20720462300005, 0.483832098000164 ], [ 122.19711347700002, 0.482814846000224 ], [ 122.18832441500001, 0.479681708000157 ], [ 122.1728621750002, 0.470933335000097 ], [ 122.16635175900012, 0.469183661000102 ], [ 122.1445418630002, 0.471258856000247 ], [ 122.10425866000026, 0.480698960000097 ], [ 122.03777103000004, 0.48212311400016 ], [ 122.01970462300005, 0.477118231000247 ], [ 122.00416100400003, 0.454901434000249 ], [ 121.98511803500014, 0.448431708000157 ], [ 121.89291425900001, 0.435451565000108 ], [ 121.8408309250002, 0.434393622000187 ], [ 121.80046634200028, 0.426459052000268 ], [ 121.78630618600005, 0.428168036000272 ], [ 121.77947024800017, 0.433172919000185 ], [ 121.73259524800017, 0.499945380000213 ], [ 121.71550540500004, 0.515082098000164 ], [ 121.69011478000004, 0.523830471000224 ], [ 121.67644290500016, 0.523260809000135 ], [ 121.64503014400032, 0.517157294000242 ], [ 121.63599694100003, 0.516302802000098 ], [ 121.62378991000014, 0.522528387000136 ], [ 121.61736087300017, 0.531317450000188 ], [ 121.61166425900012, 0.541408596000224 ], [ 121.60189863400024, 0.551743882000096 ], [ 121.5966903000002, 0.539007880000213 ], [ 121.58773847700002, 0.532863674000225 ], [ 121.57447350400025, 0.530747789000202 ], [ 121.55665123800009, 0.530585028000132 ], [ 121.54460696700016, 0.533677476000207 ], [ 121.53589928500003, 0.538397528000132 ], [ 121.5283309250002, 0.537420966000184 ], [ 121.51872806100016, 0.523830471000224 ], [ 121.51490319100014, 0.510402736000231 ], [ 121.5127059250002, 0.497056382000096 ], [ 121.50782311300009, 0.486802476000264 ], [ 121.4951278000002, 0.482814846000224 ], [ 121.4785262380002, 0.482082424000168 ], [ 121.4653426440002, 0.479641018000166 ], [ 121.4541121750002, 0.47532786700026 ], [ 121.44361412900014, 0.469183661000102 ], [ 121.42676842500032, 0.482367255000213 ], [ 121.41334069100014, 0.483099677000212 ], [ 121.3969832690002, 0.478461005000099 ], [ 121.36133873800009, 0.473211981000134 ], [ 121.34205162900014, 0.463853257000096 ], [ 121.33033287900025, 0.4617373720003 ], [ 121.31967207100013, 0.464748440000164 ], [ 121.2963973320002, 0.478583075000302 ], [ 121.28589928500014, 0.482814846000224 ], [ 121.26059004000001, 0.482489325000188 ], [ 121.22046959700003, 0.465969143000223 ], [ 121.20020592500009, 0.4617373720003 ], [ 121.17969811300031, 0.461004950000245 ], [ 121.16382897200003, 0.457464911000159 ], [ 121.1499129570002, 0.449286200000188 ], [ 121.13510175900024, 0.434393622000187 ], [ 121.12501061300009, 0.417629299000168 ], [ 121.1191512380002, 0.411444403000246 ], [ 121.10792076900032, 0.407131252000113 ], [ 121.09913170700008, 0.407375393000166 ], [ 121.06316165500027, 0.413967190000164 ], [ 121.0473738940002, 0.41893138200021 ], [ 121.01978600400003, 0.442043361000174 ], [ 121.00489342500009, 0.448675848000107 ], [ 120.98698978000016, 0.447007554000095 ], [ 120.95533287900014, 0.431870835000097 ], [ 120.89242597700002, 0.423325914000202 ], [ 120.87647545700008, 0.424505927000212 ], [ 120.86068769600024, 0.434393622000187 ], [ 120.85670006600014, 0.440863348000107 ], [ 120.85181725400003, 0.455755927000155 ], [ 120.84717858200008, 0.4617373720003 ], [ 120.83961022200003, 0.464097398000149 ], [ 120.80933678500003, 0.469183661000102 ], [ 120.80543053500026, 0.47235748900016 ], [ 120.80258222700013, 0.479396877000113 ], [ 120.79786217500009, 0.486476955000228 ], [ 120.78882897200026, 0.489650783000116 ], [ 120.77719160200013, 0.488104559000249 ], [ 120.76002037900014, 0.482611395000163 ], [ 120.75082441500012, 0.482814846000224 ], [ 120.73015384200005, 0.493475653000246 ], [ 120.69857832100001, 0.52415599200026 ], [ 120.67953535200013, 0.530585028000132 ], [ 120.50269616000003, 0.528876044000128 ], [ 120.48609459700003, 0.524237372000243 ], [ 120.40886478000016, 0.485744533000229 ], [ 120.39161217500009, 0.482814846000224 ], [ 120.37525475400014, 0.477687893000109 ], [ 120.3618270190002, 0.465643622000187 ], [ 120.35075931100027, 0.451971747000243 ], [ 120.34009850400014, 0.441880601000207 ], [ 120.31470787900003, 0.423163153000132 ], [ 120.2729598320002, 0.378119208000214 ], [ 120.21452884200016, 0.291937567000105 ], [ 120.1582137380002, 0.227769273000149 ], [ 120.13331139400009, 0.191229559000192 ], [ 120.1284285820002, 0.181097723000164 ], [ 120.12134850400014, 0.145168361000231 ], [ 120.11752363400024, 0.136786200000302 ], [ 120.10385175900001, 0.117254950000188 ], [ 120.09848066500012, 0.096991278000132 ], [ 120.0942488940002, 0.051418361000174 ], [ 120.08423912900014, 0.00625234600011 ], [ 120.07545006600014, -0.016412041999843 ], [ 120.06283613400001, -0.034519138999883 ], [ 120.02849368600005, -0.061822197999845 ], [ 120.02295983200031, -0.070977471999925 ], [ 120.02230879000001, -0.081719658999816 ], [ 120.02475019600001, -0.106784763999826 ], [ 120.01889082100013, -0.152520440999922 ], [ 120.01197350400025, -0.175225518999866 ], [ 120.0014754570002, -0.192152601999851 ], [ 119.9956160820002, -0.209242445999905 ], [ 119.9965926440002, -0.234307549999926 ], [ 120.01856530000032, -0.363457940999922 ], [ 120.02491295700008, -0.384047132999967 ], [ 120.05298912900025, -0.419366143999866 ], [ 120.05941816500012, -0.441989841999884 ], [ 120.05746504000012, -0.452406507999854 ], [ 120.04810631600003, -0.472751559999836 ], [ 120.04574629000024, -0.483005466999884 ], [ 120.0478621750002, -0.49374765399989 ], [ 120.05730228000016, -0.517185153999833 ], [ 120.07309004000024, -0.613946221999868 ], [ 120.08920332100001, -0.657321872999944 ], [ 120.24390709700003, -0.887627862999807 ], [ 120.25562584700015, -0.899346612999921 ], [ 120.30274498800009, -0.932305596999868 ], [ 120.32553144600001, -0.938653252999814 ], [ 120.34791100400003, -0.927504164999903 ], [ 120.36890709700015, -0.911065362999807 ], [ 120.38786868600016, -0.901299737999977 ], [ 120.41244550900001, -0.904961846999811 ], [ 120.4257918630002, -0.920017184999949 ], [ 120.43490644600013, -0.940362237999807 ], [ 120.44678795700031, -0.960056247999887 ], [ 120.4550887380002, -0.96599700299987 ], [ 120.46517988400012, -0.969008070999962 ], [ 120.48780358200008, -0.970310154 ], [ 120.50033613400024, -0.975274346999868 ], [ 120.50814863400024, -0.987074476999794 ], [ 120.5180770190002, -1.011163018999866 ], [ 120.58236738400001, -1.105238539999846 ], [ 120.58676191500012, -1.11663176899981 ], [ 120.58790123800009, -1.128594658999873 ], [ 120.58375084700003, -1.138116143999866 ], [ 120.57699629000001, -1.146742445999962 ], [ 120.57545006600026, -1.154392184999892 ], [ 120.57536868600027, -1.16334400799991 ], [ 120.57349694100014, -1.176364841999884 ], [ 120.5669051440002, -1.201429945999905 ], [ 120.56544030000009, -1.215508721999868 ], [ 120.57243899800017, -1.227715752999927 ], [ 120.61939537900014, -1.280450127999814 ], [ 120.6308699880002, -1.300469658999873 ], [ 120.6391707690002, -1.341241143999923 ], [ 120.6489363940002, -1.364353122999887 ], [ 120.66187584700015, -1.384860934999836 ], [ 120.67595462300028, -1.394707940999865 ], [ 120.7373153000002, -1.367445570999905 ], [ 120.7373153000002, -1.360609632999967 ], [ 120.80388431100027, -1.342868747999944 ], [ 120.83008873800031, -1.340101820999905 ], [ 120.83277428500014, -1.34482187299983 ], [ 120.8266707690002, -1.377699476999794 ], [ 120.83204186300009, -1.384454033999873 ], [ 120.84441165500004, -1.389580987999977 ], [ 120.8676863940002, -1.394707940999865 ], [ 120.88990319100014, -1.395277601999851 ], [ 120.95777428500003, -1.386895440999865 ], [ 120.97657311300031, -1.382094007999797 ], [ 120.9878035820002, -1.381117445999905 ], [ 120.99830162900003, -1.385918877999814 ], [ 121.02247155000032, -1.408379815999808 ], [ 121.03272545700031, -1.415785414999903 ], [ 121.0732528000002, -1.421319268999923 ], [ 121.10547936300009, -1.40585702899989 ], [ 121.13054446700028, -1.379815362999807 ], [ 121.16700280000009, -1.322930596999868 ], [ 121.17400149800005, -1.305433851999851 ], [ 121.17847741000003, -1.268161716999884 ], [ 121.18970787900014, -1.221368096999868 ], [ 121.19711347700002, -1.202894789999846 ], [ 121.2065535820002, -1.191338799999869 ], [ 121.22282962300005, -1.175388278999833 ], [ 121.24097741000014, -1.161228122999887 ], [ 121.25562584700015, -1.155205987999807 ], [ 121.26677493600016, -1.148614190999808 ], [ 121.27686608200031, -1.132907809999949 ], [ 121.29216556100027, -1.100518487999864 ], [ 121.31836998800031, -1.067152601999794 ], [ 121.37452233200031, -1.020684502999814 ], [ 121.42994225400003, -0.933770440999922 ], [ 121.45248457100013, -0.905694268999866 ], [ 121.50066165500004, -0.859307549999869 ], [ 121.51596113400001, -0.850274346999868 ], [ 121.5361434250002, -0.846774997999887 ], [ 121.57781009200028, -0.846774997999887 ], [ 121.58521569100026, -0.842705987999807 ], [ 121.5859481130002, -0.832940362999864 ], [ 121.58513431100027, -0.82170989399998 ], [ 121.58765709700003, -0.812595309999892 ], [ 121.59489993600005, -0.808282158999987 ], [ 121.62012780000009, -0.80038827899989 ], [ 121.62916100400014, -0.798923434999836 ], [ 121.6406356130002, -0.800957940999865 ], [ 121.64869225400003, -0.805596612999807 ], [ 121.65479576900009, -0.810316664999903 ], [ 121.65967858200008, -0.812595309999892 ], [ 121.6606551440002, -0.873223565999865 ], [ 121.66285241000014, -0.887627862999807 ], [ 121.69011478000004, -0.908786716999828 ], [ 121.69996178500003, -0.923435153999833 ], [ 121.70720462300005, -0.931735934999892 ], [ 121.71420332100013, -0.935479424999926 ], [ 121.79997806100016, -0.935479424999926 ], [ 121.84538821700016, -0.94101327899989 ], [ 121.88697350400014, -0.951348565999979 ], [ 121.92603600400003, -0.955336195999848 ], [ 121.96371504000012, -0.94296640399989 ], [ 121.99952233200008, -0.922051690999865 ], [ 122.01856530000009, -0.916761976999908 ], [ 122.04322350400014, -0.914971612999921 ], [ 122.0664168630002, -0.919528903999947 ], [ 122.08570397200015, -0.926446221999868 ], [ 122.10531660200002, -0.926202080999872 ], [ 122.1289168630002, -0.908786716999828 ], [ 122.14136803500014, -0.886814059999892 ], [ 122.1528426440002, -0.853204033999873 ], [ 122.15943444100014, -0.820000908999873 ], [ 122.15626061300031, -0.798923434999836 ], [ 122.19361412900003, -0.768975518999866 ], [ 122.20769290500016, -0.764743747999887 ], [ 122.41016686300009, -0.75750090899993 ], [ 122.45101972700002, -0.750583591999828 ], [ 122.48747806100016, -0.749688408999873 ], [ 122.55713951900009, -0.768161716999884 ], [ 122.59498131600003, -0.764743747999887 ], [ 122.60059655000009, -0.761407158999816 ], [ 122.60572350400014, -0.756524346999981 ], [ 122.61247806100005, -0.752211195999848 ], [ 122.62232506600014, -0.750583591999828 ], [ 122.6357528000002, -0.753838799999869 ], [ 122.65642337300017, -0.767754815999865 ], [ 122.68336022200015, -0.775567315999865 ], [ 122.69890384200005, -0.784926039999903 ], [ 122.71648196700016, -0.792413018999866 ], [ 122.73902428500026, -0.791436455999985 ], [ 122.78744550900024, -0.773695570999962 ], [ 122.91244550900012, -0.76287200299987 ], [ 122.92904707100001, -0.75888437299983 ], [ 122.94450931100005, -0.750583591999828 ], [ 122.95972741000003, -0.737074476999851 ], [ 122.96021569100026, -0.730564059999892 ], [ 122.89730879000012, -0.716403903999833 ], [ 122.89405358200008, -0.712579033999816 ], [ 122.88624108200008, -0.699395440999865 ], [ 122.88298587300005, -0.695896091999884 ], [ 122.86784915500004, -0.69280364399981 ], [ 122.78012129000024, -0.68661874799983 ], [ 122.76644941500012, -0.683038018999866 ], [ 122.75269616000014, -0.676039320999962 ], [ 122.74170983200031, -0.668064059999836 ], [ 122.73324629000001, -0.657972914999959 ], [ 122.73462975400014, -0.648370049999869 ], [ 122.75269616000014, -0.641289971999925 ], [ 122.7656356130002, -0.649834893999866 ], [ 122.7793074880002, -0.646254164999903 ], [ 122.80738366000026, -0.627618096999811 ], [ 122.81275475400003, -0.62224700299987 ], [ 122.8173934250002, -0.615492445999905 ], [ 122.82300866000003, -0.612237237999864 ], [ 122.8388778000002, -0.620538018999866 ], [ 122.84644616000003, -0.619235934999836 ], [ 122.85254967500009, -0.615329684999836 ], [ 122.85499108200031, -0.610528252999927 ], [ 122.94304446700005, -0.60507577899989 ], [ 122.9643660820002, -0.599704684999836 ], [ 122.9760848320002, -0.607191664999903 ], [ 122.99431399800017, -0.608005466999941 ], [ 123.01295006600014, -0.604424737999864 ], [ 123.0263778000002, -0.599704684999836 ], [ 123.03825931100016, -0.589613539999903 ], [ 123.05005944100026, -0.566989841999828 ], [ 123.06055748800009, -0.558689059999836 ], [ 123.07585696700005, -0.556410414999903 ], [ 123.23951256600014, -0.570489190999808 ], [ 123.27369225400003, -0.583265882999854 ], [ 123.3418074880002, -0.620212497999887 ], [ 123.40349368600016, -0.642673434999892 ], [ 123.41732832100001, -0.654880466999884 ], [ 123.40593509200016, -0.668389580999872 ], [ 123.4038192070002, -0.672539971999925 ], [ 123.40593509200016, -0.677911065999865 ], [ 123.41529381600014, -0.686944268999866 ], [ 123.41732832100001, -0.69280364399981 ], [ 123.4194442070002, -0.70273202899989 ], [ 123.42530358200031, -0.70842864399981 ], [ 123.4340926440002, -0.710625908999987 ], [ 123.44467207100013, -0.709567966999828 ], [ 123.43848717500009, -0.730401299999812 ], [ 123.45435631600014, -0.758233330999985 ], [ 123.4404403000002, -0.792901299999869 ], [ 123.4448348320002, -0.83310312299983 ], [ 123.43783613400024, -0.853610934999892 ], [ 123.40992272200003, -0.88030364399981 ], [ 123.40015709700015, -0.894789320999848 ], [ 123.38965905000009, -0.98365650799991 ], [ 123.3833113940002, -1.003676039999846 ], [ 123.35238691500012, -1.039727471999811 ], [ 123.31120853000004, -1.051446221999811 ], [ 123.26978600400014, -1.044610283999873 ], [ 123.2387801440002, -1.024834893999866 ], [ 123.2109481130002, -0.983330987999977 ], [ 123.20101972700013, -0.976983330999872 ], [ 123.1962996750002, -0.970391533999987 ], [ 123.14991295700008, -0.935479424999926 ], [ 123.14779707100024, -0.92294687299983 ], [ 123.15552819100026, -0.898125908999873 ], [ 123.15674889400009, -0.887627862999807 ], [ 123.15088951900032, -0.872979424999812 ], [ 123.14087975400014, -0.862237237999807 ], [ 123.11890709700026, -0.84295012799987 ], [ 123.0962020190002, -0.835056247999887 ], [ 123.06080162900014, -0.880547783999873 ], [ 123.04004967500009, -0.880791924999812 ], [ 123.00945071700016, -0.893731377999814 ], [ 122.91700280000009, -0.89959075299987 ], [ 122.87614993600016, -0.908786716999828 ], [ 122.83871504000001, -0.899183851999851 ], [ 122.81169681100005, -0.924086195999905 ], [ 122.76970462300017, -1.019789320999848 ], [ 122.76075280000032, -1.034356377999984 ], [ 122.73560631600014, -1.062676690999922 ], [ 122.7304793630002, -1.070000908999816 ], [ 122.72706139400032, -1.078545830999872 ], [ 122.72527103000004, -1.087660414999903 ], [ 122.72478274800005, -1.097100518999923 ], [ 122.72095787900014, -1.109063408999873 ], [ 122.71208743600016, -1.114353122999944 ], [ 122.70069420700031, -1.116875908999987 ], [ 122.69068444100014, -1.121026299999812 ], [ 122.66163170700008, -1.142836195999848 ], [ 122.64828535200013, -1.159437757999854 ], [ 122.63843834700015, -1.206149997999887 ], [ 122.6264754570002, -1.218438408999873 ], [ 122.58814537900014, -1.237074476999851 ], [ 122.57211347700002, -1.253187757999854 ], [ 122.52955162900025, -1.31601327899989 ], [ 122.51197350400003, -1.326592705999929 ], [ 122.50269616000014, -1.333754164999903 ], [ 122.49878991000014, -1.34319426899981 ], [ 122.4961043630002, -1.352959893999866 ], [ 122.48292076900032, -1.375095309999892 ], [ 122.47828209700015, -1.381117445999905 ], [ 122.40601647200003, -1.446221612999864 ], [ 122.38209069100026, -1.478692315999865 ], [ 122.36882571700005, -1.492771091999884 ], [ 122.30632571700016, -1.524346612999864 ], [ 122.23316491000003, -1.57431406 ], [ 122.20053144600013, -1.604180596999811 ], [ 122.18392988400012, -1.614190362999864 ], [ 122.1718856130002, -1.609795830999872 ], [ 122.15984134200016, -1.600192966999941 ], [ 122.14323978000004, -1.594008070999848 ], [ 122.1240340500002, -1.597588799999812 ], [ 122.08350670700008, -1.61679452899989 ], [ 122.06373131600003, -1.621270440999865 ], [ 122.05404707100013, -1.619805596999981 ], [ 122.03646894600013, -1.613946221999868 ], [ 122.02588951900009, -1.614434502999814 ], [ 122.01856530000009, -1.618096612999977 ], [ 122.01392662900025, -1.623630466999884 ], [ 122.0102645190002, -1.629652601999794 ], [ 122.0053817070002, -1.634942315999979 ], [ 121.97364342500009, -1.65536874799983 ], [ 121.95476321700016, -1.663832289999903 ], [ 121.94320722700013, -1.662286065999865 ], [ 121.91928144600001, -1.67302825299987 ], [ 121.90137780000032, -1.675469658999873 ], [ 121.8613387380002, -1.669691664999846 ], [ 121.85613040500016, -1.688083591999884 ], [ 121.84766686300031, -1.690199476999794 ], [ 121.83122806100005, -1.701918226999794 ], [ 121.82016035200002, -1.707614841999884 ], [ 121.81039472700013, -1.71013762799987 ], [ 121.79859459700003, -1.717950127999984 ], [ 121.7900496750002, -1.736423435 ], [ 121.78003991000003, -1.772149346999811 ], [ 121.75513756600014, -1.833754164999846 ], [ 121.73902428500003, -1.861748955999872 ], [ 121.71802819100026, -1.888278903999833 ], [ 121.69214928500014, -1.908135674999869 ], [ 121.66114342500009, -1.920668226999851 ], [ 121.62769616000014, -1.92734140399989 ], [ 121.56251061300031, -1.930596612999864 ], [ 121.55298912900025, -1.92913176899981 ], [ 121.54004967500032, -1.92343515399989 ], [ 121.53451582100001, -1.916599216999884 ], [ 121.53052819100014, -1.908379815999922 ], [ 121.51156660200002, -1.883558851999851 ], [ 121.50473066500001, -1.876722914999903 ], [ 121.4951278000002, -1.873955987999864 ], [ 121.49146569100014, -1.871677341999884 ], [ 121.45671634200005, -1.86093515399989 ], [ 121.44507897200015, -1.841566664999846 ], [ 121.44516035200013, -1.825616143999866 ], [ 121.44092858200008, -1.813571872999944 ], [ 121.41627037900014, -1.80575937299983 ], [ 121.37134850400025, -1.80575937299983 ], [ 121.36459394600013, -1.802341403999833 ], [ 121.35450280000009, -1.785577080999815 ], [ 121.34742272200015, -1.778985283999873 ], [ 121.31185957100013, -1.78289153399993 ], [ 121.29607181100016, -1.816664321000019 ], [ 121.3042098320002, -1.84693775799991 ], [ 121.34058678500003, -1.839776299999869 ], [ 121.34571373800031, -1.855726820999905 ], [ 121.34009850400003, -1.875664971999868 ], [ 121.33139082100001, -1.897556248 ], [ 121.32699629000012, -1.91904062299983 ], [ 121.32911217500032, -1.927911065999979 ], [ 121.3383895190002, -1.937595309999836 ], [ 121.34058678500003, -1.946547132999967 ], [ 121.34058678500003, -1.991306247999887 ], [ 121.35132897200003, -1.984144789999846 ], [ 121.36085045700031, -1.97584400799991 ], [ 121.3686629570002, -1.966566664999903 ], [ 121.37476647200026, -1.957126559999892 ], [ 121.37956790500016, -1.94296640399989 ], [ 121.38249759200028, -1.928887627999927 ], [ 121.38843834700015, -1.91716887799987 ], [ 121.40202884200016, -1.90935637799987 ], [ 121.4145613940002, -1.92734140399989 ], [ 121.43628991000014, -1.980157158999987 ], [ 121.46664472700013, -2.000909112999864 ], [ 121.47787519600001, -2.020277601999794 ], [ 121.49146569100014, -2.035332940999808 ], [ 121.51189212300005, -2.032321872999887 ], [ 121.53532962300017, -2.058770440999808 ], [ 121.55502363400012, -2.13396575299987 ], [ 121.57455488400024, -2.162530205999872 ], [ 121.6176863940002, -2.177992445999905 ], [ 121.65992272200003, -2.176690362999807 ], [ 121.70085696700005, -2.180352471999868 ], [ 121.73902428500003, -2.211032809999836 ], [ 121.76693769600024, -2.241631768999866 ], [ 121.82292728000016, -2.287286065999808 ], [ 121.84766686300031, -2.320896091999828 ], [ 121.86475670700008, -2.35849374799983 ], [ 121.87208092500009, -2.380303643999866 ], [ 121.8750106130002, -2.398695570999905 ], [ 121.88257897200015, -2.413344007999854 ], [ 121.92969811300009, -2.462985934999836 ], [ 121.96550540500016, -2.518243096999868 ], [ 121.97787519600001, -2.553969007999797 ], [ 122.00928795700031, -2.593519789999959 ], [ 122.01905358200008, -2.615004164999846 ], [ 122.01921634200005, -2.635430596999868 ], [ 122.01335696700016, -2.680922132999797 ], [ 122.0156356130002, -2.693536065999808 ], [ 122.05990644600024, -2.744805596999811 ], [ 122.08383222700002, -2.763929945999905 ], [ 122.09896894600001, -2.770277601999851 ], [ 122.13705488400001, -2.775485934999949 ], [ 122.14576256600014, -2.778741143999866 ], [ 122.14942467500009, -2.782647393999866 ], [ 122.15267988400024, -2.794122002999814 ], [ 122.16049238400024, -2.798760674999869 ], [ 122.16968834700015, -2.801364841999828 ], [ 122.1772567070002, -2.806817315999979 ], [ 122.18165123800009, -2.822930596999925 ], [ 122.18531334700015, -2.845798434999836 ], [ 122.19263756600014, -2.866306247999887 ], [ 122.20769290500016, -2.875176690999865 ], [ 122.24537194100003, -2.875258070999848 ], [ 122.2661238940002, -2.879164320999905 ], [ 122.28711998800031, -2.888767184999892 ], [ 122.31251061300009, -2.926853122999887 ], [ 122.29444420700008, -2.964532158999873 ], [ 122.27084394600001, -3.002129815999979 ], [ 122.27963300900012, -3.039646091999884 ], [ 122.28687584700003, -3.044691664999903 ], [ 122.31373131600014, -3.060153903999833 ], [ 122.38591556100016, -3.132012627999927 ], [ 122.39437910200013, -3.133477471999981 ], [ 122.40699303500003, -3.127618096999868 ], [ 122.42009524800028, -3.119561455999815 ], [ 122.43043053500026, -3.114678643999923 ], [ 122.43384850400014, -3.128594658999816 ], [ 122.43873131600014, -3.140069268999866 ], [ 122.44613691500024, -3.149346612999807 ], [ 122.45728600400014, -3.156345309999892 ], [ 122.46753991000014, -3.148207289999959 ], [ 122.47291100400014, -3.151136976999794 ], [ 122.4721785820002, -3.161797783999816 ], [ 122.46469160200024, -3.17685312299983 ], [ 122.45915774800005, -3.180108330999872 ], [ 122.44263756600014, -3.185235283999816 ], [ 122.43669681100016, -3.190362237999807 ], [ 122.43539472700024, -3.196384372999944 ], [ 122.43718509200016, -3.211195570999905 ], [ 122.43669681100016, -3.217705987999864 ], [ 122.43360436300031, -3.234551690999865 ], [ 122.43295332100001, -3.243096612999921 ], [ 122.4292098320002, -3.245863539999959 ], [ 122.41627037900014, -3.24570077899989 ], [ 122.41879316500012, -3.24374765399989 ], [ 122.41342207100001, -3.238946221999868 ], [ 122.40259850400003, -3.232028903999947 ], [ 122.39535566500012, -3.230238539999959 ], [ 122.38982181100016, -3.231703382999967 ], [ 122.3857528000002, -3.234958591999884 ], [ 122.38266035200013, -3.238213799999869 ], [ 122.3579207690002, -3.217543226999851 ], [ 122.3393660820002, -3.237562757999797 ], [ 122.32129967500032, -3.257094007999854 ], [ 122.29566491000014, -3.312920830999929 ], [ 122.30355879000012, -3.341241143999923 ], [ 122.3169051440002, -3.344821872999944 ], [ 122.3593856130002, -3.363457940999865 ], [ 122.3725692070002, -3.372247002999814 ], [ 122.38062584700015, -3.391534112999977 ], [ 122.38363691500001, -3.418633721999868 ], [ 122.3784285820002, -3.438734632999854 ], [ 122.36158287900014, -3.437432549999869 ], [ 122.36890709700003, -3.425713799999926 ], [ 122.36198978000016, -3.413344007999797 ], [ 122.34620201900009, -3.404473565999865 ], [ 122.32748457100001, -3.403252862999864 ], [ 122.3320418630002, -3.393487237999807 ], [ 122.3349715500002, -3.389743747999887 ], [ 122.3252059250002, -3.375258070999905 ], [ 122.3110457690002, -3.368584893999866 ], [ 122.29509524800028, -3.364027601999851 ], [ 122.27963300900012, -3.355564059999892 ], [ 122.2768660820002, -3.366306247999887 ], [ 122.27247155000032, -3.37623463299991 ], [ 122.26482181100016, -3.381117445999848 ], [ 122.25171959700003, -3.376071872999944 ], [ 122.2544051440002, -3.395114841999828 ], [ 122.26124108200031, -3.409926040000016 ], [ 122.27125084700003, -3.422295830999872 ], [ 122.28345787900003, -3.434014580999815 ], [ 122.29216556100016, -3.450860283999816 ], [ 122.2905379570002, -3.471368096999868 ], [ 122.2827254570002, -3.492771091999828 ], [ 122.26661217500009, -3.52288176899998 ], [ 122.26246178500014, -3.528985283999873 ], [ 122.25660241000014, -3.533461195999848 ], [ 122.24561608200008, -3.539808851999965 ], [ 122.2343856130002, -3.544203382999854 ], [ 122.21070397200003, -3.550551039999846 ], [ 122.20053144600013, -3.556573174999983 ], [ 122.19792728000016, -3.57170989399998 ], [ 122.20541425900012, -3.593845309999836 ], [ 122.22510826900009, -3.629164320999848 ], [ 122.23560631600026, -3.643161716999828 ], [ 122.2504988940002, -3.656182549999812 ], [ 122.26880944100026, -3.665785414999903 ], [ 122.29029381600014, -3.66961028399993 ], [ 122.30543053500014, -3.67498137799987 ], [ 122.31519616000014, -3.688164971999811 ], [ 122.32357832100001, -3.704278252999984 ], [ 122.3349715500002, -3.71803150799991 ], [ 122.35523522200015, -3.727797132999854 ], [ 122.37647545700008, -3.729180596999811 ], [ 122.41968834700015, -3.724786065999865 ], [ 122.44141686300031, -3.731052341999884 ], [ 122.45337975400025, -3.746270440999865 ], [ 122.47095787900003, -3.786309502999814 ], [ 122.52955162900025, -3.865411065999808 ], [ 122.54867597700002, -3.878676039999903 ], [ 122.56869550900001, -3.882907809999949 ], [ 122.63689212300028, -3.883477471999811 ], [ 122.64730879000012, -3.884942315999865 ], [ 122.65642337300017, -3.889336846999868 ], [ 122.66334069100014, -3.897149346999925 ], [ 122.6689559250002, -3.908623955999872 ], [ 122.66724694100026, -3.918877862999807 ], [ 122.64616946700005, -3.925469658999873 ], [ 122.6381942070002, -3.930352471999981 ], [ 122.63184655000009, -3.936211846999811 ], [ 122.62435957100013, -3.952406507999854 ], [ 122.61329186300009, -3.95647551899981 ], [ 122.58814537900014, -3.957614841999884 ], [ 122.56576582100013, -3.963962498 ], [ 122.55128014400032, -3.970798434999892 ], [ 122.55250084700003, -3.976332289999903 ], [ 122.60075931100016, -3.98015715899993 ], [ 122.62281334700015, -3.985039971999811 ], [ 122.64210045700008, -3.99374765399989 ], [ 122.65642337300017, -4.006605726999851 ], [ 122.66382897200015, -4.023125908999873 ], [ 122.6655379570002, -4.04216887799987 ], [ 122.66325931100016, -4.084567966999884 ], [ 122.6665145190002, -4.102471612999864 ], [ 122.67505944100026, -4.122735283999873 ], [ 122.68816165500016, -4.138360283999816 ], [ 122.70427493600016, -4.142510674999983 ], [ 122.70777428500003, -4.139092705999872 ], [ 122.71021569100003, -4.132094007999854 ], [ 122.71143639400032, -4.123467705999872 ], [ 122.71111087300005, -4.115329684999836 ], [ 122.73902428500026, -4.129327080999815 ], [ 122.77816816500001, -4.136976820999848 ], [ 122.81641686300009, -4.137302341999884 ], [ 122.84205162900003, -4.128838799999812 ], [ 122.78931725400003, -4.073988539999903 ], [ 122.77515709700003, -4.048272393999866 ], [ 122.80738366000026, -4.040704033999816 ], [ 122.84498131600014, -4.057712497999887 ], [ 122.87281334700003, -4.09319426899998 ], [ 122.89185631600014, -4.136488539999846 ], [ 122.90707441500012, -4.195977471999868 ], [ 122.90894616000014, -4.216729424999869 ], [ 122.90723717500032, -4.23552825299987 ], [ 122.89242597700013, -4.266045830999872 ], [ 122.89389082100013, -4.286065362999921 ], [ 122.90357506600026, -4.328220309999892 ], [ 122.9052840500002, -4.370212497999944 ], [ 122.90015709700015, -4.388767184999949 ], [ 122.88640384200005, -4.396416924999812 ], [ 122.86687259200016, -4.400323174999926 ], [ 122.85914147200015, -4.410332940999865 ], [ 122.8540145190002, -4.423923434999836 ], [ 122.84205162900003, -4.438083591999884 ], [ 122.82740319100014, -4.41961028399993 ], [ 122.7587996750002, -4.369073174999926 ], [ 122.72291100400003, -4.332452080999815 ], [ 122.6997176440002, -4.318291924999869 ], [ 122.67017662900014, -4.314548434999836 ], [ 122.68083743600016, -4.334161065999922 ], [ 122.72169030000009, -4.372491143999866 ], [ 122.72779381600014, -4.381117445999848 ], [ 122.73812910200013, -4.400567315999922 ], [ 122.74512780000032, -4.410088799999869 ], [ 122.74935957100001, -4.410902601999851 ], [ 122.76221764400009, -4.409112237999864 ], [ 122.76628665500016, -4.410088799999869 ], [ 122.77027428500003, -4.416761976999908 ], [ 122.76872806100016, -4.420586846999811 ], [ 122.76587975400014, -4.424086195999792 ], [ 122.76628665500016, -4.430433851999851 ], [ 122.7710067070002, -4.442559502999814 ], [ 122.7729598320002, -4.450127862999977 ], [ 122.77312259200016, -4.46843840899993 ], [ 122.76880944100014, -4.478448174999812 ], [ 122.75814863400012, -4.484795830999929 ], [ 122.74577884200016, -4.486504815999865 ], [ 122.73560631600014, -4.482354424999926 ], [ 122.71111087300005, -4.451755467 ], [ 122.69996178500003, -4.451836846999981 ], [ 122.6972762380002, -4.457940362999864 ], [ 122.69988040500004, -4.46607838299991 ], [ 122.70427493600016, -4.472100518999923 ], [ 122.69117272200003, -4.48381926899998 ], [ 122.68230228000027, -4.480401299999869 ], [ 122.67017662900014, -4.458428643999866 ], [ 122.67009524800005, -4.432224216999941 ], [ 122.64047285200013, -4.408461195999848 ], [ 122.5991317070002, -4.396742445999848 ], [ 122.56373131600003, -4.406914971999868 ], [ 122.53142337300028, -4.427911065999808 ], [ 122.49756920700031, -4.43523528399993 ], [ 122.46363366000003, -4.43084075299987 ], [ 122.43043053500026, -4.416924737999977 ], [ 122.39193769600001, -4.438083591999884 ], [ 122.35035241000003, -4.452894789999846 ], [ 122.30600019600013, -4.461683851999794 ], [ 122.24040774800005, -4.465915622999944 ], [ 122.23324629000001, -4.46803150799991 ], [ 122.22510826900009, -4.472100518999923 ], [ 122.2089949880002, -4.484551690999808 ], [ 122.19939212300005, -4.490166924999812 ], [ 122.17652428500003, -4.495782158999816 ], [ 122.15894616000014, -4.509942315999865 ], [ 122.1528426440002, -4.513116143999923 ], [ 122.11622155000009, -4.517510674999983 ], [ 122.10775800900012, -4.519952080999815 ], [ 122.08716881600014, -4.543226820999848 ], [ 122.06568444100003, -4.582289320999792 ], [ 122.04835045700008, -4.625909112999921 ], [ 122.0395613940002, -4.66334400799991 ], [ 122.04297936300031, -4.707777601999851 ], [ 122.05933678500014, -4.742445570999905 ], [ 122.08277428500014, -4.770196221999811 ], [ 122.10775800900012, -4.793633721999981 ], [ 122.11158287900025, -4.795830987999864 ], [ 122.1289168630002, -4.80046965899993 ], [ 122.1289168630002, -4.80787525799991 ], [ 122.11060631600014, -4.813246351999851 ], [ 122.09099368600005, -4.836683851999851 ], [ 122.07740319100014, -4.842054945999792 ], [ 122.0551863940002, -4.844333591999884 ], [ 122.01124108200008, -4.853692315999865 ], [ 121.9917098320002, -4.855726820999905 ], [ 121.88746178500014, -4.846368096999868 ], [ 121.8696395190002, -4.840915622999944 ], [ 121.8408309250002, -4.821547132999854 ], [ 121.82325280000009, -4.813083591999884 ], [ 121.80876712300005, -4.81406015399989 ], [ 121.79224694100014, -4.818780205999872 ], [ 121.7695418630002, -4.821547132999854 ], [ 121.75082441500012, -4.81601327899989 ], [ 121.74244225400014, -4.816094658999873 ], [ 121.73902428500003, -4.824639580999929 ], [ 121.73487389400032, -4.828220309999949 ], [ 121.72535241000014, -4.832289320999848 ], [ 121.7138778000002, -4.835219007999854 ], [ 121.70435631600014, -4.835219007999854 ], [ 121.68555748800009, -4.822442315999922 ], [ 121.65723717500032, -4.787204684999892 ], [ 121.63917076900009, -4.779961846999868 ], [ 121.6254988940002, -4.77678801899998 ], [ 121.56657962300017, -4.752618096999868 ], [ 121.55420983200008, -4.743747653999947 ], [ 121.5034285820002, -4.674899997999887 ], [ 121.49830162900014, -4.66334400799991 ], [ 121.49439537900003, -4.660902601999908 ], [ 121.49122155000032, -4.661309502999927 ], [ 121.48804772200026, -4.661065362999977 ], [ 121.48462975400025, -4.656426690999865 ], [ 121.47771243600005, -4.622979424999869 ], [ 121.4804793630002, -4.580824476999908 ], [ 121.49830162900014, -4.500095309999892 ], [ 121.5205184250002, -4.439629815999808 ], [ 121.5293074880002, -4.39755624799983 ], [ 121.53296959700015, -4.356215101999794 ], [ 121.5293074880002, -4.277520440999808 ], [ 121.53353925900024, -4.247735283999816 ], [ 121.5332137380002, -4.238051039999959 ], [ 121.53630618600027, -4.230564059999892 ], [ 121.54672285200002, -4.225192966999828 ], [ 121.55958092500032, -4.225192966999828 ], [ 121.56316165500016, -4.232517184999836 ], [ 121.56023196700005, -4.243096612999864 ], [ 121.55298912900025, -4.252373955999872 ], [ 121.5849715500002, -4.236748955999872 ], [ 121.6171981130002, -4.166924737999807 ], [ 121.62769616000014, -4.08709075299987 ], [ 121.59449303500014, -4.040704033999816 ], [ 121.55518639400032, -4.021416924999869 ], [ 121.43002363400001, -3.999200127999814 ], [ 121.35425866000003, -3.968438408999873 ], [ 121.35108483200008, -3.958265882999797 ], [ 121.33692467500032, -3.943536065999922 ], [ 121.33375084700026, -3.934340101999851 ], [ 121.33139082100001, -3.92302825299987 ], [ 121.32569420700031, -3.912530205999872 ], [ 121.31267337300005, -3.897393487999807 ], [ 121.29615319100014, -3.886814059999836 ], [ 121.28443444100003, -3.889906507999854 ], [ 121.27263431100016, -3.898207290000016 ], [ 121.25562584700015, -3.903008721999868 ], [ 121.24610436300009, -3.894219658999816 ], [ 121.25131269600024, -3.874118747999887 ], [ 121.26099694100003, -3.851250908999987 ], [ 121.26490319100014, -3.834649346999811 ], [ 121.25513756600014, -3.81568775799991 ], [ 121.2402449880002, -3.807875257999797 ], [ 121.20020592500009, -3.807305596999868 ], [ 121.17611738400024, -3.804457289999903 ], [ 121.16032962300017, -3.796156507999854 ], [ 121.10515384200016, -3.730238539999903 ], [ 120.89380944100003, -3.539157809999892 ], [ 120.8745223320002, -3.498955987999807 ], [ 120.8676863940002, -3.469496351999851 ], [ 120.8676863940002, -3.457940362999807 ], [ 120.87029056100005, -3.445733330999815 ], [ 120.8794051440002, -3.423516533999873 ], [ 120.88135826900009, -3.413262627999814 ], [ 120.88941491000014, -3.388767184999892 ], [ 120.90853925900001, -3.367608330999872 ], [ 120.93140709700015, -3.347914320999848 ], [ 120.9502059250002, -3.32756926899998 ], [ 120.96802819100003, -3.285739841999828 ], [ 120.97901451900009, -3.267022393999866 ], [ 120.99488366000014, -3.259372653999833 ], [ 121.00554446700016, -3.257256768999866 ], [ 121.01531009200016, -3.251641533999816 ], [ 121.02247155000032, -3.243829033999873 ], [ 121.02523847700002, -3.235039971999868 ], [ 121.0297957690002, -3.226820570999905 ], [ 121.04037519600001, -3.220961195999905 ], [ 121.05193118600016, -3.216403904 ], [ 121.05933678500014, -3.211521091999941 ], [ 121.06674238400012, -3.193780205999815 ], [ 121.07341556100005, -3.139418226999794 ], [ 121.07300866000003, -3.114678643999923 ], [ 121.06836998800009, -3.090427341999828 ], [ 121.06332441500024, -3.078708591999884 ], [ 121.05632571700016, -3.07366301899981 ], [ 121.04810631600026, -3.066176039999959 ], [ 121.05290774800028, -3.049493096999925 ], [ 121.06690514400032, -3.022149346999868 ], [ 121.06853274800005, -3.007989190999808 ], [ 121.07683353000016, -2.989434502999814 ], [ 121.08041425900001, -2.97763437299983 ], [ 121.07943769600013, -2.936700127999927 ], [ 121.08383222700002, -2.926364841999884 ], [ 121.08725019600001, -2.904554945999962 ], [ 121.08171634200028, -2.87232838299991 ], [ 121.0708113940002, -2.851006768999866 ], [ 121.05933678500014, -2.862074476999794 ], [ 121.05323326900009, -2.862074476999794 ], [ 121.04810631600026, -2.851250908999873 ], [ 121.0410262380002, -2.824395440999808 ], [ 121.03272545700031, -2.814222914999846 ], [ 121.0244246750002, -2.822686455999929 ], [ 121.01677493600005, -2.84286874799983 ], [ 121.0117293630002, -2.848402601999851 ], [ 121.00171959700003, -2.848077080999815 ], [ 120.99301191500012, -2.841729424999812 ], [ 120.98682701900009, -2.832614841999884 ], [ 120.98438561300031, -2.82390715899993 ], [ 120.9907332690002, -2.811618747999887 ], [ 121.00489342500009, -2.808363540000016 ], [ 121.01889082100013, -2.80185312299983 ], [ 121.02523847700002, -2.778903903999833 ], [ 121.04167728000016, -2.783868096999868 ], [ 121.05250084700015, -2.777601820999848 ], [ 121.06690514400032, -2.752211195999905 ], [ 121.07064863400001, -2.755303643999923 ], [ 121.07374108200008, -2.756605726999908 ], [ 121.07683353000016, -2.75741952899989 ], [ 121.08041425900001, -2.75904713299991 ], [ 121.04818769600024, -2.698988539999903 ], [ 121.03589928500014, -2.690118096999868 ], [ 121.03646894600013, -2.686455987999864 ], [ 121.0293074880002, -2.678399346999811 ], [ 121.01539147200015, -2.665948174999869 ], [ 121.0058699880002, -2.660821221999981 ], [ 120.88502037900003, -2.642347914999959 ], [ 120.87240644600013, -2.644138278999947 ], [ 120.86255944100003, -2.646661065999865 ], [ 120.85377037900014, -2.64617278399993 ], [ 120.8437606130002, -2.638604424999812 ], [ 120.83277428500014, -2.627862237999807 ], [ 120.82349694100014, -2.621514580999872 ], [ 120.81324303500014, -2.617933851999794 ], [ 120.79932701900009, -2.615004164999846 ], [ 120.77605228000004, -2.614922783999987 ], [ 120.76099694100003, -2.622002862999864 ], [ 120.74870853000016, -2.630629164999846 ], [ 120.7338973320002, -2.634942315999865 ], [ 120.71257571700016, -2.636895440999808 ], [ 120.69629967500009, -2.64218515399989 ], [ 120.64210045700031, -2.670342705999872 ], [ 120.62671959700003, -2.674737237999921 ], [ 120.60450280000032, -2.676446221999925 ], [ 120.5844832690002, -2.682061455999872 ], [ 120.5747176440002, -2.695977471999811 ], [ 120.56869550900012, -2.713799737999807 ], [ 120.55982506600026, -2.731133721999868 ], [ 120.5429793630002, -2.74724700299987 ], [ 120.29224694100003, -2.903008721999925 ], [ 120.25294030000009, -2.936455987999977 ], [ 120.23161868600016, -2.95037200299987 ], [ 120.20346113400012, -2.957696221999868 ], [ 120.2089949880002, -2.97039153399993 ], [ 120.22641035200013, -2.988051039999846 ], [ 120.23023522200015, -3.001722914999959 ], [ 120.23121178500003, -3.014336846999868 ], [ 120.23438561300009, -3.026543877999814 ], [ 120.24000084700015, -3.035902601999965 ], [ 120.24781334700015, -3.039646091999884 ], [ 120.26140384200005, -3.05038827899989 ], [ 120.27540123800009, -3.102715752999814 ], [ 120.28541100400014, -3.122165622999887 ], [ 120.27865644600013, -3.125258070999905 ], [ 120.27426191500001, -3.129489841999884 ], [ 120.26433353000016, -3.14202239399981 ], [ 120.28532962300028, -3.162530205999872 ], [ 120.30681399800017, -3.173516533999816 ], [ 120.35377037900025, -3.190362237999807 ], [ 120.38306725400014, -3.209079684999892 ], [ 120.38786868600016, -3.214613540000016 ], [ 120.38941491000003, -3.223321221999868 ], [ 120.39389082100013, -3.237237237999864 ], [ 120.40040123800009, -3.250909112999807 ], [ 120.40821373800009, -3.259372653999833 ], [ 120.4257918630002, -3.256117445999905 ], [ 120.42156009200016, -3.267510674999869 ], [ 120.40919030000032, -3.284112237999807 ], [ 120.40211022200015, -3.296807549999983 ], [ 120.40398196700005, -3.307224216999884 ], [ 120.40699303500014, -3.318454684999892 ], [ 120.40853925900012, -3.329034112999807 ], [ 120.40284264400032, -3.345635674999983 ], [ 120.39527428500026, -3.38225676899981 ], [ 120.39771569100003, -3.39218515399989 ], [ 120.4062606130002, -3.412367445999848 ], [ 120.40821373800009, -3.423760674999926 ], [ 120.40772545700008, -3.433363539999903 ], [ 120.40316816500012, -3.449639580999815 ], [ 120.3989363940002, -3.500909112999864 ], [ 120.40015709700003, -3.517836195999848 ], [ 120.41781660200013, -3.56357187299983 ], [ 120.42188561300009, -3.582452080999872 ], [ 120.42204837300005, -3.666436455999872 ], [ 120.42505944100014, -3.673028252999814 ], [ 120.44369550900024, -3.690687757999854 ], [ 120.44654381600003, -3.728692315999865 ], [ 120.43002363400024, -3.766778252999927 ], [ 120.38786868600016, -3.827894789999903 ], [ 120.37142988400001, -3.86044687299983 ], [ 120.35971113400012, -3.894219658999816 ], [ 120.3535262380002, -3.930840752999927 ], [ 120.35189863400001, -4.100274346999868 ], [ 120.35564212300017, -4.116469007999797 ], [ 120.37720787900014, -4.152764580999872 ], [ 120.3813582690002, -4.167250257999854 ], [ 120.38160241000003, -4.207696221999981 ], [ 120.38054446700016, -4.217950127999814 ], [ 120.37525475400014, -4.237725518999923 ], [ 120.37419681100005, -4.249281507999854 ], [ 120.37582441500012, -4.26327890399989 ], [ 120.38786868600016, -4.294040622999887 ], [ 120.3862410820002, -4.32927825299987 ], [ 120.36231530000009, -4.386976820999792 ], [ 120.36736087300005, -4.424411716999828 ], [ 120.39177493600016, -4.452894789999846 ], [ 120.40259850400025, -4.472100518999923 ], [ 120.39869225400014, -4.489190362999864 ], [ 120.39275149800005, -4.506280205999872 ], [ 120.39307701900009, -4.531670830999929 ], [ 120.39714603000004, -4.557224216999884 ], [ 120.40211022200015, -4.574476820999792 ], [ 120.41423587300017, -4.59286874799983 ], [ 120.44410241000026, -4.626641533999816 ], [ 120.44996178500014, -4.646579684999892 ], [ 120.44662519600001, -4.656670830999872 ], [ 120.4384871750002, -4.66513437299983 ], [ 120.41920006600003, -4.680759373 ], [ 120.41586347700002, -4.68889739399981 ], [ 120.39616946700005, -4.787204684999892 ], [ 120.39527428500026, -4.810967705999985 ], [ 120.38656660200013, -4.82927825299987 ], [ 120.36638431100005, -4.835625908999873 ], [ 120.34343509200016, -4.837497653999833 ], [ 120.32642662900014, -4.842054945999792 ], [ 120.30941816500012, -4.871270440999922 ], [ 120.3066512380002, -4.992852471999868 ], [ 120.28402754000001, -5.111586195999792 ], [ 120.27564537900014, -5.13388437299983 ], [ 120.26433353000016, -5.14999765399989 ], [ 120.3066512380002, -5.211358330999815 ], [ 120.3149520190002, -5.228936455999872 ], [ 120.32829837300017, -5.26873137799987 ], [ 120.33692467500009, -5.283786716999884 ], [ 120.38111412900025, -5.337334893999866 ], [ 120.38786868600016, -5.352227471999811 ], [ 120.38892662900014, -5.371677341999884 ], [ 120.43295332100013, -5.527601820999848 ], [ 120.43628991000026, -5.565199476999851 ], [ 120.44060306100016, -5.573988539999903 ], [ 120.45932050900024, -5.601983330999815 ], [ 120.46363366000026, -5.620212497999887 ], [ 120.45834394600013, -5.62607187299983 ], [ 120.43051191500001, -5.613946221999868 ], [ 120.41635175900012, -5.61679452899989 ], [ 120.37964928500026, -5.576348565999865 ], [ 120.37419681100005, -5.565199476999851 ], [ 120.37126712300017, -5.55388762799987 ], [ 120.35499108200008, -5.522393487999864 ], [ 120.34750410200002, -5.513604424999869 ], [ 120.3232528000002, -5.509535414999903 ], [ 120.2978621750002, -5.51897551899981 ], [ 120.2734481130002, -5.532403252999814 ], [ 120.25196373800031, -5.540948174999869 ], [ 120.20671634200016, -5.547784112999864 ], [ 120.1992293630002, -5.550551039999903 ], [ 120.17554772200015, -5.568942966999884 ], [ 120.15691165500016, -5.576836846999868 ], [ 120.1186629570002, -5.587985934999836 ], [ 120.10043379000012, -5.595635674999869 ], [ 120.09400475400003, -5.590752862999807 ], [ 120.08790123800009, -5.589288018999866 ], [ 120.07309004000024, -5.588799737999864 ], [ 120.01026451900009, -5.577813408999816 ], [ 119.99805748800009, -5.571954033999873 ], [ 119.98658287900014, -5.564222914999846 ], [ 119.96070397200003, -5.562595309999836 ], [ 119.9326278000002, -5.564711195999848 ], [ 119.91488691500012, -5.568942966999884 ], [ 119.89918053500026, -5.579359632999854 ], [ 119.85718834700015, -5.620212497999887 ], [ 119.85124759200005, -5.630547783999816 ], [ 119.84815514400009, -5.652032158999816 ], [ 119.84351647200015, -5.661065362999864 ], [ 119.82349694100014, -5.679375908999816 ], [ 119.80567467500009, -5.692478122999887 ], [ 119.77222741000014, -5.701267184999836 ], [ 119.72364342500009, -5.703789971999868 ], [ 119.67693118600016, -5.697035414999903 ], [ 119.6479598320002, -5.67880624799983 ], [ 119.6440535820002, -5.660088799999869 ], [ 119.64242597700002, -5.636976820999848 ], [ 119.63404381600003, -5.617445570999848 ], [ 119.60971113400012, -5.609144789999846 ], [ 119.5903426440002, -5.62053801899981 ], [ 119.57984459700015, -5.642266533999873 ], [ 119.56999759200005, -5.655938408999816 ], [ 119.55241946700005, -5.643324476999851 ], [ 119.54712975400014, -5.631768487999807 ], [ 119.54761803500003, -5.608168226999794 ], [ 119.54566491000014, -5.595635674999869 ], [ 119.53834069100014, -5.585219007999797 ], [ 119.52898196700005, -5.57968515399989 ], [ 119.52116946700005, -5.572523695999848 ], [ 119.5175887380002, -5.558038018999866 ], [ 119.50277754000001, -5.55584075299987 ], [ 119.4741317070002, -5.560804945999848 ], [ 119.45533287900014, -5.573825778999833 ], [ 119.46989993600005, -5.595635674999869 ], [ 119.4482528000002, -5.594984632999854 ], [ 119.43327884200016, -5.587823174999869 ], [ 119.42481530000032, -5.57333749799983 ], [ 119.42212975400014, -5.551202080999872 ], [ 119.42595462300017, -5.541761976999851 ], [ 119.43327884200016, -5.532159112999864 ], [ 119.4375106130002, -5.521742445999792 ], [ 119.43238366000014, -5.510349216999828 ], [ 119.42481530000032, -5.501234632999854 ], [ 119.41472415500016, -5.482354424999812 ], [ 119.38013756600003, -5.434014580999872 ], [ 119.36036217500009, -5.396416924999869 ], [ 119.35279381600014, -5.355645440999808 ], [ 119.36060631600014, -5.307549737999864 ], [ 119.3696395190002, -5.276788018999866 ], [ 119.37525475400003, -5.211521091999884 ], [ 119.3798934250002, -5.191664320999848 ], [ 119.39470462300017, -5.156833591999828 ], [ 119.40365644600024, -5.124118747999887 ], [ 119.40845787900003, -5.115817966999828 ], [ 119.41700280000009, -5.109470309999892 ], [ 119.43734785200024, -5.09880950299987 ], [ 119.44597415500016, -5.092461846999811 ], [ 119.45997155000032, -5.073500257999854 ], [ 119.46566816500012, -5.055596612999864 ], [ 119.46989993600005, -5.020196221999868 ], [ 119.48324629000012, -4.986260674999812 ], [ 119.51978600400014, -4.916680596999811 ], [ 119.52515709700003, -4.883070570999792 ], [ 119.49122155000009, -4.754082940999865 ], [ 119.4970809250002, -4.717950127999927 ], [ 119.50212649800005, -4.713555596999811 ], [ 119.51905358200031, -4.703545830999815 ], [ 119.52515709700003, -4.698011976999851 ], [ 119.53882897200015, -4.666680596999868 ], [ 119.54184004000001, -4.652927341999828 ], [ 119.5849715500002, -4.579196872999887 ], [ 119.59107506600026, -4.564141533999873 ], [ 119.60621178500026, -4.420342705999985 ], [ 119.62330162900003, -4.352227471999925 ], [ 119.62680097700002, -4.314548434999836 ], [ 119.62582441500012, -4.304457289999959 ], [ 119.62159264400032, -4.286879164999959 ], [ 119.6206160820002, -4.276625257999854 ], [ 119.61752363400012, -4.26506926899981 ], [ 119.60336347700024, -4.251641533999816 ], [ 119.6001082690002, -4.242445570999848 ], [ 119.60450280000009, -4.222914320999962 ], [ 119.62330162900003, -4.183770440999808 ], [ 119.62680097700002, -4.163018487999807 ], [ 119.61841881600026, -4.121026299999869 ], [ 119.61353600400025, -4.112969658999816 ], [ 119.60865319100003, -4.107679945999905 ], [ 119.60629316500024, -4.104668877999814 ], [ 119.60816491000003, -4.09319426899998 ], [ 119.61719811300031, -4.076755467 ], [ 119.6206160820002, -4.066827080999872 ], [ 119.6211043630002, -4.057061455999872 ], [ 119.61841881600026, -4.038506768999866 ], [ 119.6206160820002, -4.026462497999944 ], [ 119.64307701900032, -3.992771091999941 ], [ 119.6469832690002, -3.977959893999923 ], [ 119.63062584700015, -3.97185637799987 ], [ 119.60710696700005, -3.975844007999854 ], [ 119.60043379000001, -3.986993096999868 ], [ 119.59961998800009, -4.004164320999792 ], [ 119.59343509200005, -4.026462497999944 ], [ 119.58773847700013, -4.008884372999887 ], [ 119.58521569100003, -3.97031015399989 ], [ 119.56609134200005, -3.939873955999872 ], [ 119.51986738400012, -3.826348565999865 ], [ 119.49740644600013, -3.793877862999864 ], [ 119.48568769600024, -3.754082940999865 ], [ 119.45671634200028, -3.714532158999816 ], [ 119.45427493600005, -3.700127862999921 ], [ 119.46989993600005, -3.66961028399993 ], [ 119.48365319100003, -3.614922783999873 ], [ 119.49398847700013, -3.597588799999869 ], [ 119.50896243600016, -3.57773202899989 ], [ 119.51400800900001, -3.563083591999884 ], [ 119.51197350400014, -3.547621351999851 ], [ 119.4975692070002, -3.49529387799987 ], [ 119.49398847700013, -3.488376559999836 ], [ 119.48585045700031, -3.483493747999887 ], [ 119.46566816500012, -3.477227471999811 ], [ 119.45679772200026, -3.470961195999905 ], [ 119.43238366000014, -3.475030205999929 ], [ 119.40300540500027, -3.461521091999884 ], [ 119.37289472700024, -3.442559502999927 ], [ 119.34693444100026, -3.430596612999807 ], [ 119.31177819100014, -3.426364842 ], [ 119.29761803500003, -3.427911065999865 ], [ 119.29167728000027, -3.434014580999815 ], [ 119.28394616000014, -3.445896091999884 ], [ 119.24537194100014, -3.476169528999947 ], [ 119.22966556100016, -3.485284112999864 ], [ 119.20899498800009, -3.48984140399989 ], [ 119.19214928500003, -3.486911716999884 ], [ 119.17595462300017, -3.481377862999864 ], [ 119.15796959700015, -3.478448174999869 ], [ 119.14087975400025, -3.482110283999873 ], [ 119.1176863940002, -3.499688408999816 ], [ 119.09937584700015, -3.50505950299987 ], [ 119.02702884200016, -3.509698174999812 ], [ 118.99870853000027, -3.524997653999947 ], [ 119.0044051440002, -3.559747002999814 ], [ 118.99236087300005, -3.556735934999949 ], [ 118.97917728000027, -3.542168877999814 ], [ 118.9702254570002, -3.539808851999965 ], [ 118.96192467500009, -3.54607512799987 ], [ 118.94947350400014, -3.569024346999868 ], [ 118.93881269600001, -3.573988539999846 ], [ 118.92676842500009, -3.566094658999873 ], [ 118.91684004000001, -3.546807549999812 ], [ 118.88013756600014, -3.443129165000016 ], [ 118.8588973320002, -3.411309502999984 ], [ 118.84896894600001, -3.390557549999869 ], [ 118.8422957690002, -3.368340752999814 ], [ 118.8398543630002, -3.348077080999815 ], [ 118.8437606130002, -3.329034112999807 ], [ 118.85043379000001, -3.312432549999983 ], [ 118.8525496750002, -3.295586846999981 ], [ 118.8344832690002, -3.259942315999922 ], [ 118.82341556100016, -3.193291924999869 ], [ 118.81714928500026, -3.171807549999812 ], [ 118.81185957100001, -3.162530205999872 ], [ 118.80347741000026, -3.156508070999848 ], [ 118.79200280000009, -3.151543877999814 ], [ 118.78199303500014, -3.144301039999903 ], [ 118.7778426440002, -3.132012627999927 ], [ 118.77564537900003, -3.122165622999887 ], [ 118.76636803500003, -3.10263437299983 ], [ 118.76417076900032, -3.09091562299983 ], [ 118.76775149800017, -3.084161065999808 ], [ 118.78492272200003, -3.064548434999836 ], [ 118.79135175900024, -3.060153903999833 ], [ 118.79916425900024, -3.061781507999854 ], [ 118.82252037900003, -3.071465752999814 ], [ 118.83611087300028, -3.07366301899981 ], [ 118.84839928500014, -3.06780364399998 ], [ 118.85328209700003, -3.053399346999811 ], [ 118.8569442070002, -2.972832940999865 ], [ 118.86402428500003, -2.94296640399989 ], [ 118.88249759200005, -2.923760674999812 ], [ 118.88575280000009, -2.909926039999903 ], [ 118.88770592500032, -2.882500908999873 ], [ 118.88550866000014, -2.869561455999872 ], [ 118.88062584700015, -2.861016533999816 ], [ 118.87240644600013, -2.854668877999927 ], [ 118.8603621750002, -2.848402601999851 ], [ 118.83432050900001, -2.840997002999984 ], [ 118.81299889400032, -2.844170830999815 ], [ 118.77165774800028, -2.862074476999794 ], [ 118.77100670700008, -2.83928801899998 ], [ 118.76010175900001, -2.796807549999869 ], [ 118.7573348320002, -2.775811455999929 ], [ 118.76042728000004, -2.765394789999846 ], [ 118.77458743600016, -2.745293877999814 ], [ 118.7778426440002, -2.734795830999872 ], [ 118.7778426440002, -2.690118096999868 ], [ 118.78248131600014, -2.672946872999887 ], [ 118.79232832100001, -2.64999765399989 ], [ 118.8061629570002, -2.629815362999864 ], [ 118.82276451900009, -2.621270440999808 ], [ 118.84148196700005, -2.627699476999908 ], [ 118.85547936300031, -2.641534112999921 ], [ 118.87110436300009, -2.65390390399989 ], [ 118.89454186300009, -2.656019789999903 ], [ 118.91439863400001, -2.648370049999869 ], [ 118.95850670700008, -2.61874765399989 ], [ 118.98170006600003, -2.597426039999846 ], [ 119.0044051440002, -2.58513762799987 ], [ 119.01490319100003, -2.577243747999887 ], [ 119.02100670700008, -2.567478122999887 ], [ 119.03158613400012, -2.532484632999967 ], [ 119.04737389400009, -2.512872002999927 ], [ 119.06478925900012, -2.503024997999887 ], [ 119.0835067070002, -2.495049737999921 ], [ 119.1357528000002, -2.45427825299987 ], [ 119.14144941500012, -2.441989841999884 ], [ 119.13754316500012, -2.379571221999868 ], [ 119.13038170700008, -2.354750257999797 ], [ 119.12720787900003, -2.25530364399981 ], [ 119.13119550900001, -2.244398695999905 ], [ 119.13843834700003, -2.231052341999828 ], [ 119.14185631600003, -2.216729424999869 ], [ 119.13404381600003, -2.203545830999872 ], [ 119.17123457100013, -2.149509372999887 ], [ 119.1855574880002, -2.120863539999903 ], [ 119.21607506600014, -2.009942315999808 ], [ 119.23462975400014, -1.982191664999903 ], [ 119.26441491000026, -1.963311455999985 ], [ 119.28736412900025, -1.958428643999923 ], [ 119.30404707100013, -1.961521092 ], [ 119.31902103000016, -1.967054945999905 ], [ 119.3364363940002, -1.97014739399981 ], [ 119.34701582100024, -1.959405205999872 ], [ 119.3540145190002, -1.93474700299987 ], [ 119.36744225400003, -1.847263278999947 ], [ 119.36703535200013, -1.832940362999864 ], [ 119.36524498800031, -1.82773202899989 ], [ 119.36011803500003, -1.824476820999905 ], [ 119.35010826900032, -1.816176039999846 ], [ 119.33570397200015, -1.79810963299991 ], [ 119.32878665500016, -1.781182549999926 ], [ 119.30844160200002, -1.69491952899989 ], [ 119.30543053500026, -1.65203215899993 ], [ 119.30982506600014, -1.630140882999797 ], [ 119.32886803500014, -1.593194268999866 ], [ 119.33326256600014, -1.573500257999797 ], [ 119.30909264400032, -1.504571221999925 ], [ 119.30241946700016, -1.493747653999833 ], [ 119.2968856130002, -1.411390882999797 ], [ 119.29476972700013, -1.405368747999887 ], [ 119.2944442070002, -1.399183851999851 ], [ 119.29859459700015, -1.38787200299987 ], [ 119.30551191500024, -1.380547783999873 ], [ 119.32846113400024, -1.360609632999967 ], [ 119.33326256600014, -1.350192966999884 ], [ 119.33073978000004, -1.330254815999865 ], [ 119.31283613400001, -1.284844658999873 ], [ 119.31364993600016, -1.24578215899993 ], [ 119.32837975400025, -1.214450779 ], [ 119.35043379000012, -1.189141533999873 ], [ 119.37370853000016, -1.168877862999864 ], [ 119.38135826900009, -1.158623955999815 ], [ 119.38941491000026, -1.145196221999925 ], [ 119.39918053500014, -1.133477471999811 ], [ 119.41187584700003, -1.12851327899989 ], [ 119.42920983200031, -1.124281507999854 ], [ 119.44361412900003, -1.113051039999959 ], [ 119.45313561300009, -1.096449476999908 ], [ 119.45997155000032, -1.057712497999887 ], [ 119.4741317070002, -1.020928643999866 ], [ 119.4824324880002, -0.963474216999884 ], [ 119.4897567070002, -0.945977471999811 ], [ 119.50082441500024, -0.932305596999868 ], [ 119.50855553500026, -0.918715101999908 ], [ 119.5180770190002, -0.876722914999846 ], [ 119.52515709700003, -0.860446872999887 ], [ 119.53736412900014, -0.850030205999815 ], [ 119.56625410200002, -0.833672783999816 ], [ 119.57357832100001, -0.829522393999866 ], [ 119.58716881600014, -0.819431247999887 ], [ 119.5991317070002, -0.795505466999828 ], [ 119.60328209700026, -0.791436455999985 ], [ 119.63445071700005, -0.778415622999887 ], [ 119.68213951900009, -0.736911716999884 ], [ 119.65821373800031, -0.71209075299987 ], [ 119.6547957690002, -0.706149997999944 ], [ 119.65943444100014, -0.696221612999807 ], [ 119.67017662900025, -0.689222914999959 ], [ 119.69263756600014, -0.67880624799983 ], [ 119.70386803500026, -0.666761976999851 ], [ 119.72461998800009, -0.639255466999884 ], [ 119.73365319100014, -0.63388437299983 ], [ 119.73519941500001, -0.641045830999872 ], [ 119.75049889400009, -0.67880624799983 ], [ 119.75562584700003, -0.703789971999868 ], [ 119.79200280000009, -0.778415622999887 ], [ 119.80982506600014, -0.833916924999869 ], [ 119.82488040500016, -0.858656507999854 ], [ 119.84652754000012, -0.874607028999833 ], [ 119.86231530000009, -0.834161065999922 ], [ 119.86589603000016, -0.813571872999887 ], [ 119.8671981130002, -0.78834400799991 ], [ 119.86500084700015, -0.782891533999873 ], [ 119.85613040500016, -0.769138278999833 ], [ 119.8540145190002, -0.761000257999854 ], [ 119.85523522200015, -0.727146091999884 ], [ 119.8540145190002, -0.716403903999833 ], [ 119.84693444100014, -0.701267184999836 ], [ 119.82406660200013, -0.67506275799991 ], [ 119.8193465500002, -0.665459893999866 ], [ 119.81576582100013, -0.65341562299983 ], [ 119.79200280000009, -0.607110283999873 ], [ 119.78248131600014, -0.569105726999851 ], [ 119.7783309250002, -0.535088799999812 ], [ 119.7754012380002, -0.52263762799987 ], [ 119.76156660200002, -0.490655205999872 ], [ 119.75782311300009, -0.46990325299987 ], [ 119.78109785200002, -0.23935312299983 ], [ 119.7905379570002, -0.208754164999903 ], [ 119.80225670700008, -0.195570570999905 ], [ 119.80836022200015, -0.18279387799987 ], [ 119.80640709700015, -0.15398528399993 ], [ 119.79997806100016, -0.123793226999794 ], [ 119.79200280000009, -0.106784763999826 ], [ 119.76254316500001, -0.119480075999888 ], [ 119.7304793630002, -0.121351820999962 ], [ 119.69996178500014, -0.114108981999834 ], [ 119.67530358200008, -0.099379164999846 ], [ 119.65756269600001, -0.080132744999901 ], [ 119.6386824880002, -0.050876559999892 ], [ 119.62769616000014, -0.018365166999899 ], [ 119.63445071700005, 0.010484117000203 ], [ 119.65064537900014, 0.001613674000168 ], [ 119.65943444100014, -0.001519463999898 ], [ 119.66846764400009, -0.003838799999869 ], [ 119.66797936300009, 0.007025458000101 ], [ 119.66895592500032, 0.016262111000117 ], [ 119.67139733200008, 0.023993231000304 ], [ 119.67530358200008, 0.030340887000193 ], [ 119.69809004000001, 0.016913153000132 ], [ 119.71583092500009, 0.001532294000185 ], [ 119.7441512380002, -0.031101169999829 ], [ 119.76587975400003, -0.063246351999794 ], [ 119.7783309250002, -0.076348565999865 ], [ 119.79883873800009, -0.085707289999903 ], [ 119.8164168630002, -0.090020440999808 ], [ 119.82593834700015, -0.089939059999949 ], [ 119.83269290500004, -0.084405205999815 ], [ 119.84717858200031, -0.061578057999895 ], [ 119.85678144600013, -0.041029554999966 ], [ 119.8779403000002, 0.04547760600019 ], [ 119.8881942070002, 0.071275132000267 ], [ 119.86980228000016, 0.105658270000106 ], [ 119.7939559250002, 0.196600653000132 ], [ 119.78785241000014, 0.208400783000229 ], [ 119.7856551440002, 0.221096096000167 ], [ 119.7851668630002, 0.239488023000206 ], [ 119.7944442070002, 0.25018952000022 ], [ 119.8540145190002, 0.269924221000167 ], [ 119.86947675900012, 0.287176825000188 ], [ 119.8676863940002, 0.302069403000132 ], [ 119.85914147200003, 0.318915106000134 ], [ 119.8540145190002, 0.342230536000159 ], [ 119.85873457100013, 0.364243882000267 ], [ 119.88355553500003, 0.400051174000168 ], [ 119.89503014400032, 0.420721747000243 ], [ 119.89730879000001, 0.431138414000145 ], [ 119.8984481130002, 0.451605536000216 ], [ 119.90186608200008, 0.4617373720003 ], [ 119.91179446700005, 0.473700262000136 ], [ 119.9238387380002, 0.480861721000167 ], [ 119.93620853000016, 0.486395575000245 ], [ 119.94654381600014, 0.493353583000101 ], [ 119.96461022200003, 0.501125393000109 ], [ 120.01246178500014, 0.504787502000113 ], [ 120.0322371750002, 0.516302802000098 ], [ 120.04517662900003, 0.549994208000101 ], [ 120.04037519600001, 0.588120835000154 ], [ 120.02963300900001, 0.628119208000157 ], [ 120.02475019600001, 0.667181708000157 ], [ 120.02751712300028, 0.688910223000221 ], [ 120.0341903000002, 0.713812567000218 ], [ 120.04574629000024, 0.734361070000205 ], [ 120.06283613400001, 0.742865302000212 ], [ 120.0722762380002, 0.744045315000221 ], [ 120.09742272200003, 0.750311591000184 ], [ 120.11052493600005, 0.751410223000164 ], [ 120.12086022200026, 0.754339911000102 ], [ 120.1865340500002, 0.784002997000187 ], [ 120.20728600400025, 0.797593492000146 ], [ 120.22706139400009, 0.814886786000159 ], [ 120.23552493600005, 0.831529039000202 ], [ 120.24708092500009, 0.933294989000274 ], [ 120.25652103000016, 0.968898830000114 ], [ 120.27849368600016, 0.994208075000188 ], [ 120.31959069100014, 0.996079820000205 ], [ 120.34164472700002, 0.982855536000102 ], [ 120.3466903000002, 0.963080145000163 ], [ 120.34009850400014, 0.917914130000099 ], [ 120.3403426440002, 0.872381903000132 ], [ 120.34644616000026, 0.855617580000114 ], [ 120.3618270190002, 0.866400458000214 ], [ 120.36736087300005, 0.866400458000214 ], [ 120.37525475400014, 0.848700262000136 ], [ 120.38705488400001, 0.83392975500027 ], [ 120.40284264400032, 0.821722723000107 ], [ 120.42204837300005, 0.811753648000263 ], [ 120.45337975400003, 0.80508047100011 ], [ 120.46957441500001, 0.796820380000156 ], [ 120.47681725400003, 0.800970770000163 ], [ 120.48267662900003, 0.808050848000164 ], [ 120.48780358200008, 0.811753648000263 ], [ 120.51148522200026, 0.810614325000245 ], [ 120.52759850400025, 0.806057033000116 ], [ 120.5410262380002, 0.796576239000103 ], [ 120.55640709700015, 0.780747789000145 ], [ 120.56812584700015, 0.78213125200017 ], [ 120.58472741000003, 0.797552802000155 ], [ 120.61443118600005, 0.832220770000163 ], [ 120.60222415500016, 0.855698960000097 ], [ 120.61784915500016, 0.898586330000171 ], [ 120.66228274800028, 0.968817450000131 ], [ 120.68336022200003, 0.991929429000095 ], [ 120.69019616000003, 0.996079820000205 ], [ 120.69955488400012, 0.992377020000106 ], [ 120.71094811300031, 0.98346588700025 ], [ 120.72266686300009, 0.976752020000106 ], [ 120.7338973320002, 0.979681708000214 ], [ 120.74000084700026, 0.989162502000227 ], [ 120.74756920700031, 1.010565497000187 ], [ 120.75424238400001, 1.020656643000223 ], [ 120.76303144600024, 1.026027736000117 ], [ 120.78370201900009, 1.031968492000146 ], [ 120.7924910820002, 1.037746486000174 ], [ 120.80176842500009, 1.052639065000221 ], [ 120.8032332690002, 1.068426825000188 ], [ 120.79867597700002, 1.130845445000148 ], [ 120.79948978000016, 1.142075914000259 ], [ 120.80250084700015, 1.146958726000321 ], [ 120.80250084700015, 1.152044989000217 ], [ 120.80909264400009, 1.162787177000155 ], [ 120.81690514400009, 1.172674872000187 ], [ 120.8198348320002, 1.174872137000136 ], [ 120.82593834700015, 1.196682033000116 ], [ 120.82764733200008, 1.214016018000166 ], [ 120.8266707690002, 1.253729559000135 ], [ 120.81967207100024, 1.290920315000108 ], [ 120.8208113940002, 1.310003973000107 ], [ 120.8335067070002, 1.325669664000145 ], [ 120.84302819100003, 1.328314520000163 ], [ 120.86459394600013, 1.325140692000105 ], [ 120.8745223320002, 1.325669664000145 ], [ 120.88445071700005, 1.330633856000191 ], [ 120.9091903000002, 1.353664455000171 ], [ 120.90609785200013, 1.324286200000245 ], [ 120.90853925900001, 1.31142812700017 ], [ 120.91920006600003, 1.31517161700026 ], [ 120.93848717500032, 1.337225653000189 ], [ 120.94947350400003, 1.343817450000131 ], [ 120.9672957690002, 1.346177476000207 ], [ 121.06120853000004, 1.327093817000105 ], [ 121.08041425900001, 1.331935940000108 ], [ 121.13379967500032, 1.314601955000228 ], [ 121.15870201900009, 1.302801825000131 ], [ 121.18279056100016, 1.271429755000213 ], [ 121.26490319100014, 1.229559637000307 ], [ 121.31763756600003, 1.253851630000156 ], [ 121.33716881600014, 1.25682200700021 ], [ 121.38168379000001, 1.256659247000243 ], [ 121.39909915500016, 1.262396552000212 ], [ 121.42253665500004, 1.277289130000156 ], [ 121.44166100400014, 1.294582424000168 ], [ 121.45142662900014, 1.297552802000098 ], [ 121.46412194100003, 1.291571356000247 ], [ 121.46949303500026, 1.282863674000225 ], [ 121.47201582100001, 1.269924221000167 ], [ 121.47152754000001, 1.25657786700026 ], [ 121.46753991000014, 1.246893622000187 ], [ 121.45948326900009, 1.242661851000264 ], [ 121.4350692070002, 1.235296942000105 ], [ 121.43002363400001, 1.232977606000191 ], [ 121.43140709700026, 1.226019598000221 ], [ 121.43962649800017, 1.212103583000157 ], [ 121.44361412900014, 1.202215887000193 ], [ 121.44507897200015, 1.193345445000261 ], [ 121.44459069100003, 1.186835028000246 ], [ 121.44556725400003, 1.179185289000145 ], [ 121.45045006600014, 1.167425848000164 ], [ 121.46843509200016, 1.146307684000249 ], [ 121.47095787900003, 1.137030341000127 ], [ 121.48072350400014, 1.120917059000249 ], [ 121.52857506600003, 1.083238023000149 ], [ 121.54672285200002, 1.07245514500022 ], [ 121.58676191500024, 1.061753648000206 ], [ 121.6308699880002, 1.061957098000164 ], [ 121.92611738400001, 1.09870026200025 ], [ 121.94320722700013, 1.091131903000132 ], [ 121.95582116000014, 1.045558986000174 ], [ 121.97022545700008, 1.02948639500022 ], [ 121.9902449880002, 1.021918036000216 ], [ 122.01221764400009, 1.024074611000231 ], [ 122.02719160200002, 1.03400299700013 ], [ 122.04883873800009, 1.059759833000214 ], [ 122.06373131600003, 1.065008856000247 ], [ 122.08773847700013, 1.061590887000193 ], [ 122.14942467500009, 1.037746486000174 ], [ 122.17790774800017, 1.03563060100015 ], [ 122.19092858200031, 1.031480210000211 ], [ 122.1973576180003, 1.027655341000241 ], [ 122.22282962300005, 1.012355861000174 ], [ 122.2353621750002, 1.009833075000131 ], [ 122.24537194100003, 1.010931708000214 ], [ 122.26465905000032, 1.016058661000102 ], [ 122.27621504000001, 1.017279364000103 ], [ 122.28142337300017, 1.016058661000102 ], [ 122.29070071700016, 1.010931708000214 ], [ 122.29672285200013, 1.009833075000131 ], [ 122.2998153000002, 1.011786200000188 ], [ 122.30827884200005, 1.021185614000217 ], [ 122.31373131600014, 1.024074611000231 ], [ 122.32829837300005, 1.024359442000105 ], [ 122.3759871750002, 1.009833075000131 ], [ 122.39551842500009, 1.010972398000206 ], [ 122.44174238400012, 1.02167389500022 ], [ 122.45411217500009, 1.020656643000223 ], [ 122.48560631600014, 0.995998440000221 ], [ 122.52418053500014, 0.979966539000259 ], [ 122.56519616000014, 0.971380927000212 ], [ 122.62378991000003, 0.966376044000128 ], [ 122.64527428500014, 0.959173895000106 ], [ 122.66285241000014, 0.947414455000171 ], [ 122.67017662900014, 0.931301174000225 ], [ 122.67937259200028, 0.918850002000113 ], [ 122.70045006600003, 0.908189195000261 ], [ 122.73902428500026, 0.893744208000101 ], [ 122.74691816500012, 0.886664130000156 ], [ 122.75114993600016, 0.880072333000157 ], [ 122.7568465500002, 0.875148830000228 ], [ 122.76970462300017, 0.873236395000163 ], [ 122.7788192070002, 0.870062567000105 ], [ 122.78101647200015, 0.855902411000159 ], [ 122.80600019600024, 0.847845770000163 ], [ 122.83073978000004, 0.824937242000203 ], [ 122.84888756600014, 0.818019924000225 ], [ 122.88990319100026, 0.848211981000134 ], [ 122.90699303500014, 0.852728583000101 ], [ 122.9184676440002, 0.85956452000022 ], [ 122.93824303500014, 0.907416083000214 ], [ 122.94304446700005, 0.912502346000167 ], [ 122.95386803500026, 0.921454169000185 ], [ 122.95818118600005, 0.927883205000114 ], [ 122.95818118600005, 0.945746161000159 ], [ 122.96078535200013, 0.957261460000211 ], [ 122.96802819100026, 0.96259186400016 ], [ 122.99089603000016, 0.961859442000161 ], [ 123.00505618600016, 0.959458726000264 ], [ 123.07129967500009, 0.934759833000101 ], [ 123.0957137380002, 0.928900458000157 ], [ 123.09725996200018, 0.929144598000107 ], [ 123.11207116000003, 0.931301174000225 ], [ 123.13445071700005, 0.938910223000164 ], [ 123.17562910200013, 0.922552802000212 ], [ 123.19092858200008, 0.927883205000114 ], [ 123.18669681100016, 0.938177802000212 ], [ 123.18238366000014, 0.960109768000166 ], [ 123.18669681100016, 0.97361888200021 ], [ 123.20785566500012, 0.958889065000164 ], [ 123.22575931100016, 0.949530341000127 ], [ 123.2548934250002, 0.960679429000152 ], [ 123.27344811300009, 0.948919989000217 ], [ 123.2783309250002, 0.938788153000189 ], [ 123.27906334700026, 0.929836330000171 ], [ 123.28207441500012, 0.921779690000221 ], [ 123.2939559250002, 0.914211330000171 ], [ 123.30396569100003, 0.912298895000106 ], [ 123.33130944100014, 0.912827867000203 ], [ 123.3418074880002, 0.914211330000171 ], [ 123.35206139400009, 0.918158270000276 ], [ 123.35962975400025, 0.923407294000242 ], [ 123.36866295700008, 0.927435614000103 ], [ 123.3833113940002, 0.927883205000114 ], [ 123.3911238940002, 0.923814195000261 ], [ 123.39714603000016, 0.917873440000108 ], [ 123.40495853000004, 0.915350653000189 ], [ 123.41732832100001, 0.921616929000152 ], [ 123.44507897200015, 0.902980861000287 ], [ 123.51978600400025, 0.886623440000164 ], [ 123.55054772200015, 0.869818427000155 ], [ 123.5629988940002, 0.866929429000209 ], [ 123.5966903000002, 0.881822007000153 ], [ 123.6123153000002, 0.886216539000145 ], [ 123.63200931100016, 0.881659247000187 ], [ 123.67212975400003, 0.859930731000247 ], [ 123.69117272200015, 0.852728583000101 ], [ 123.83179772200026, 0.832220770000163 ], [ 123.90040123800009, 0.839667059000135 ], [ 123.90992272200015, 0.837876695000148 ], [ 123.92920983200031, 0.831529039000202 ], [ 123.9375106130002, 0.832220770000163 ], [ 123.94792728000016, 0.838934637000307 ], [ 123.95142662900003, 0.846136786000159 ], [ 123.94809004000012, 0.853013414000145 ], [ 123.9375106130002, 0.858954169000242 ], [ 123.95240319100014, 0.867987372000243 ], [ 123.9917098320002, 0.880682684000135 ], [ 124.00806725400025, 0.898179429000209 ], [ 124.12029056100016, 0.939113674000225 ], [ 124.15300540500016, 0.945949611000117 ], [ 124.16667728000016, 0.956935940000108 ], [ 124.19076582100001, 0.983099677000155 ], [ 124.2236434250002, 0.998724677000098 ], [ 124.29037519600013, 1.017320054000095 ], [ 124.31495201900009, 1.037746486000174 ], [ 124.32976321700005, 1.070542710000211 ], [ 124.34652754000012, 1.139634507000096 ], [ 124.36280358200008, 1.167425848000164 ], [ 124.37403405000009, 1.177069403000246 ], [ 124.38941491000003, 1.186102606000247 ], [ 124.40772545700008, 1.192775783000229 ], [ 124.42790774800005, 1.195379950000131 ], [ 124.49431399800005, 1.192206122000243 ], [ 124.5141707690002, 1.195379950000131 ], [ 124.5234481130002, 1.201239325000245 ], [ 124.52955162900003, 1.208685614000217 ], [ 124.5366317070002, 1.214667059000135 ], [ 124.54835045700031, 1.215806382000153 ], [ 124.55600019600001, 1.210598049000112 ], [ 124.56072024800017, 1.201076565000108 ], [ 124.56690514400032, 1.192043361000174 ], [ 124.5791121750002, 1.187892971000167 ], [ 124.5937606130002, 1.195868231000304 ], [ 124.60678144600013, 1.214789130000213 ], [ 124.61500084700003, 1.237534898000149 ], [ 124.61597741000014, 1.25682200700021 ], [ 124.60645592500009, 1.273342190000278 ], [ 124.5908309250002, 1.278794664000202 ], [ 124.55144290500016, 1.277289130000156 ], [ 124.53443444100014, 1.288641669000242 ], [ 124.53296959700003, 1.314520575000245 ], [ 124.53980553500003, 1.342433986000287 ], [ 124.54835045700031, 1.35984935100015 ], [ 124.60181725400025, 1.400132554000152 ], [ 124.60971113400024, 1.410711981000191 ], [ 124.62037194100026, 1.417141018000166 ], [ 124.69174238400024, 1.401434637000136 ], [ 124.7172957690002, 1.405829169000128 ], [ 124.7324324880002, 1.415676174000112 ], [ 124.75660241000014, 1.445217190000108 ], [ 124.77418053500026, 1.455226955000285 ], [ 124.81576582100024, 1.460598049000225 ], [ 124.83570397200015, 1.469142971000224 ], [ 124.85043379000012, 1.489691473000107 ], [ 124.84392337300005, 1.508530992000203 ], [ 124.82984459700015, 1.52753327000022 ], [ 124.82203209700015, 1.54852936400016 ], [ 124.82593834700003, 1.572902736000117 ], [ 124.83692467500009, 1.588853257000153 ], [ 124.9365340500002, 1.665594794000299 ], [ 124.94556725400003, 1.678290106000134 ], [ 124.94988040500016, 1.682603257000267 ], [ 124.96859785200013, 1.673814195000261 ], [ 124.97291100400014, 1.678290106000134 ], [ 124.97095787900025, 1.713202216000241 ], [ 124.97291100400014, 1.722967841000127 ], [ 124.9838973320002, 1.731594143000109 ], [ 125.00473066500024, 1.74103424700013 ], [ 125.02515709700015, 1.744126695000205 ], [ 125.03443444100014, 1.73346588700025 ], [ 125.03492272200003, 1.692043361000231 ], [ 125.04273522200003, 1.680568752000227 ], [ 125.06169681100005, 1.674546617000146 ] ] ], [ [ [ 125.1494246750002, 1.742173570000148 ], [ 125.14470462300005, 1.741848049000168 ], [ 125.13721764400009, 1.747951565000108 ], [ 125.13209069100014, 1.758368231000134 ], [ 125.12973066500012, 1.772406317000105 ], [ 125.12387129000024, 1.789048570000148 ], [ 125.12232506600014, 1.807033596000167 ], [ 125.1259871750002, 1.815415757000096 ], [ 125.12940514400009, 1.828436591000127 ], [ 125.1352645190002, 1.830959377000113 ], [ 125.14454186300009, 1.822333075000131 ], [ 125.15398196700016, 1.81073639500022 ], [ 125.16570071700016, 1.802232164000259 ], [ 125.17221113400001, 1.799221096000167 ], [ 125.17660566500012, 1.792792059000135 ], [ 125.17701256600014, 1.778753973000221 ], [ 125.15406334700015, 1.756496486000231 ], [ 125.15202884200005, 1.747707424000112 ], [ 125.1494246750002, 1.742173570000148 ] ] ], [ [ [ 97.142914259000179, 2.09227122600015 ], [ 97.148448113000086, 2.074164130000156 ], [ 97.151133660000141, 2.058091539000145 ], [ 97.144786004000196, 2.051947333000157 ], [ 97.123057488000086, 2.039292710000211 ], [ 97.120127800000148, 2.03485748900016 ], [ 97.124278191000087, 2.021673895000163 ], [ 97.115000847000204, 2.014715887000193 ], [ 97.102305535000141, 2.016058661000102 ], [ 97.069021030000158, 2.087144273000206 ], [ 97.075450066000087, 2.086004950000188 ], [ 97.087250196000127, 2.096869208000101 ], [ 97.092539910000141, 2.105536200000245 ], [ 97.100352410000085, 2.111273505000213 ], [ 97.120127800000148, 2.113348700000245 ], [ 97.133799675000091, 2.107163804000095 ], [ 97.142914259000179, 2.09227122600015 ] ] ], [ [ [ 101.72120201900003, 2.058091539000145 ], [ 101.75798587300011, 2.011297919000185 ], [ 101.77027428500008, 1.985052802000155 ], [ 101.77556399800017, 1.947984117000203 ], [ 101.76775149800017, 1.925604559000192 ], [ 101.73585045700003, 1.887681382000096 ], [ 101.72877037900025, 1.863226630000156 ], [ 101.73243248800014, 1.817938544000242 ], [ 101.7291772800001, 1.799058335000098 ], [ 101.71509850400014, 1.778225002000227 ], [ 101.66627037900014, 1.744940497000243 ], [ 101.65984134200011, 1.73346588700025 ], [ 101.64942467500003, 1.722235419000242 ], [ 101.62525475400014, 1.714422919000299 ], [ 101.59750410200013, 1.710028387000136 ], [ 101.5773218110001, 1.709295966000184 ], [ 101.53060957100013, 1.718166408000116 ], [ 101.49073326900015, 1.736761786000216 ], [ 101.46013431100005, 1.765529690000165 ], [ 101.44068444100014, 1.80487702000022 ], [ 101.43034915500016, 1.850287177000212 ], [ 101.42221113400012, 1.872992255000213 ], [ 101.3971460300001, 1.909369208000101 ], [ 101.3938094410002, 1.930609442000161 ], [ 101.40577233200014, 2.013861395000163 ], [ 101.41814212300017, 2.044419664000202 ], [ 101.4409285820002, 2.064927476000264 ], [ 101.47828209700003, 2.072414455000228 ], [ 101.49577884200011, 2.06883372600015 ], [ 101.53101647200015, 2.056463934000249 ], [ 101.5505477220002, 2.058091539000145 ], [ 101.56641686300009, 2.067938544000185 ], [ 101.61508222700019, 2.117092190000221 ], [ 101.64926191500007, 2.128485419000242 ], [ 101.68165123800009, 2.108954169000185 ], [ 101.70720462300005, 2.078802802000098 ], [ 101.72120201900003, 2.058091539000145 ] ] ], [ [ [ 96.643565300000205, 2.074448960000098 ], [ 96.62289472700013, 2.070624091000241 ], [ 96.609629754000252, 2.080145575000245 ], [ 96.609873894000202, 2.10651276200025 ], [ 96.613291863000143, 2.119126695000205 ], [ 96.618337436000047, 2.126857815000221 ], [ 96.627696160000255, 2.129461981000247 ], [ 96.644053582000083, 2.127020575000188 ], [ 96.657969596999976, 2.121812242000317 ], [ 96.668223504000139, 2.113430080000228 ], [ 96.67172285200013, 2.101996161000216 ], [ 96.665375196000184, 2.087876695000261 ], [ 96.643565300000205, 2.074448960000098 ] ] ], [ [ [ 125.40845787900003, 2.122259833000101 ], [ 125.4062606130002, 2.107326565000165 ], [ 125.40316816500012, 2.102769273000206 ], [ 125.39779707100013, 2.104193427000098 ], [ 125.39332116000003, 2.104396877000227 ], [ 125.39087975400025, 2.101752020000163 ], [ 125.3754988940002, 2.092108466000184 ], [ 125.3701278000002, 2.091701565000165 ], [ 125.36215254000001, 2.086371161000216 ], [ 125.35613040500016, 2.077215887000136 ], [ 125.3491317070002, 2.071234442000218 ], [ 125.34050540500016, 2.07330963700025 ], [ 125.33423912900025, 2.081854559000249 ], [ 125.33521569100014, 2.092433986000117 ], [ 125.34058678500014, 2.100775458000157 ], [ 125.34457441500001, 2.102240302000212 ], [ 125.35035241000014, 2.109035549000168 ], [ 125.35718834700015, 2.10984935100015 ], [ 125.35718834700015, 2.113918361000231 ], [ 125.35377037900014, 2.116685289000202 ], [ 125.35124759200016, 2.122259833000101 ], [ 125.35425866000014, 2.12986888200021 ], [ 125.3598738940002, 2.127630927000098 ], [ 125.36451256600014, 2.123602606000304 ], [ 125.36793053500026, 2.125637111000117 ], [ 125.3720809250002, 2.124416408000116 ], [ 125.3779403000002, 2.120591539000259 ], [ 125.38624108200031, 2.118312893000223 ], [ 125.39340254000001, 2.118231512000136 ], [ 125.40495853000016, 2.130275783000229 ], [ 125.40845787900003, 2.122259833000101 ] ] ], [ [ [ 128.05665123800031, 2.192450262000136 ], [ 128.05681399800028, 2.169907945000261 ], [ 128.05014082100013, 2.14752838700025 ], [ 128.02906334700015, 2.109686591000184 ], [ 128.0161238940002, 2.093003648000149 ], [ 128.00464928500026, 2.086004950000188 ], [ 127.99952233200008, 2.081691799000112 ], [ 127.99447675900012, 2.072088934000192 ], [ 127.98764082100001, 2.062445380000213 ], [ 127.96461022200003, 2.05361562700017 ], [ 127.95850670700008, 2.042425848000107 ], [ 127.95411217500009, 2.017157294000128 ], [ 127.94336998800009, 1.980780341000241 ], [ 127.9345809250002, 1.963202216000184 ], [ 127.92302493600016, 1.955715236000174 ], [ 127.90495853000004, 1.953436591000184 ], [ 127.88900800900012, 1.947333075000188 ], [ 127.87566165500004, 1.938788153000189 ], [ 127.8647567070002, 1.929022528000132 ], [ 127.85661868600016, 1.912502346000167 ], [ 127.84929446700016, 1.88353099200026 ], [ 127.84644616000014, 1.851467190000108 ], [ 127.85173587300005, 1.825384833000214 ], [ 127.87566165500004, 1.807928778000132 ], [ 127.94068444100026, 1.800034898000149 ], [ 127.95411217500009, 1.788153387000193 ], [ 127.96355228000027, 1.773586330000114 ], [ 128.0053817070002, 1.739406643000109 ], [ 128.01490319100003, 1.71922435100015 ], [ 128.00586998800009, 1.645493882000153 ], [ 128.00228925900012, 1.633734442000275 ], [ 127.9956160820002, 1.627346096000167 ], [ 128.00147545700031, 1.613836981000191 ], [ 128.00855553500014, 1.606390692000161 ], [ 128.01579837300028, 1.600775458000101 ], [ 128.02222741000003, 1.592596747000243 ], [ 128.02719160200013, 1.58055247600015 ], [ 128.03532962300028, 1.537990627000113 ], [ 128.0322371750002, 1.516994533000172 ], [ 128.01596113400012, 1.464178778000132 ], [ 128.01490319100003, 1.435532945000205 ], [ 128.01636803500014, 1.404038804000209 ], [ 128.01490319100003, 1.394598700000188 ], [ 128.01059004000012, 1.389349677000098 ], [ 128.00416100400003, 1.385402736000117 ], [ 127.99822024800005, 1.380072333000101 ], [ 127.9956160820002, 1.370754299000225 ], [ 127.99984785200002, 1.352280992000203 ], [ 128.01539147200026, 1.317287502000113 ], [ 128.01490319100003, 1.305243231000191 ], [ 128.00611412900014, 1.299872137000193 ], [ 127.98292076900009, 1.300360419000128 ], [ 127.97388756600003, 1.297756252000227 ], [ 127.96949303500014, 1.290432033000229 ], [ 127.95850670700008, 1.264593817000161 ], [ 127.95069420700008, 1.253729559000135 ], [ 127.93140709700015, 1.233791408000229 ], [ 127.91911868600027, 1.216050523000206 ], [ 127.8994246750002, 1.174872137000136 ], [ 127.89527428500014, 1.162990627000113 ], [ 127.89429772200003, 1.156642971000167 ], [ 127.8906356130002, 1.152411200000245 ], [ 127.87826582100013, 1.146958726000321 ], [ 127.86744225400003, 1.145697333000101 ], [ 127.84359785200013, 1.147772528000132 ], [ 127.8339949880002, 1.143866278000246 ], [ 127.7548934250002, 1.078599351000207 ], [ 127.67107181100016, 1.031805731000247 ], [ 127.63754316500012, 1.000718492000146 ], [ 127.62452233200031, 0.955145575000188 ], [ 127.62761478000016, 0.937404690000221 ], [ 127.63550866000014, 0.918931382000096 ], [ 127.64535566500012, 0.902411200000131 ], [ 127.65512129000024, 0.890041408000172 ], [ 127.67009524800017, 0.878973700000131 ], [ 127.70541425900024, 0.863714911000159 ], [ 127.7207137380002, 0.852728583000101 ], [ 127.72543379000012, 0.845404364000103 ], [ 127.73511803500014, 0.825913804000209 ], [ 127.74187259200016, 0.818019924000225 ], [ 127.75033613400012, 0.814764716000184 ], [ 127.75912519600013, 0.815659898000206 ], [ 127.7685653000002, 0.815375067000161 ], [ 127.79566491000014, 0.799058335000154 ], [ 127.81560306100016, 0.799058335000154 ], [ 127.83545983200031, 0.804632880000156 ], [ 127.85173587300005, 0.811753648000263 ], [ 127.87240644600013, 0.823960679000152 ], [ 127.90658613400001, 0.852484442000275 ], [ 127.92302493600016, 0.869818427000155 ], [ 127.92758222700002, 0.88515859600011 ], [ 127.93295332100024, 0.97321198100019 ], [ 127.93230228000004, 0.989935614000217 ], [ 127.93637129000012, 1.007310289000145 ], [ 127.99390709700015, 1.082993882000096 ], [ 128.01490319100003, 1.099798895000106 ], [ 128.03549238400012, 1.112127997000243 ], [ 128.05494225400014, 1.120428778000246 ], [ 128.0756942070002, 1.125067450000188 ], [ 128.14478600400025, 1.124660549000168 ], [ 128.1606551440002, 1.132147528000132 ], [ 128.17945397200003, 1.154445705000114 ], [ 128.1923934250002, 1.177435614000274 ], [ 128.19605553500014, 1.196437893000166 ], [ 128.19060306100016, 1.214056708000157 ], [ 128.1762801440002, 1.232977606000191 ], [ 128.15650475400003, 1.241766669000242 ], [ 128.11361738400012, 1.231838283000172 ], [ 128.09742272200003, 1.236314195000148 ], [ 128.09205162900014, 1.257269598000164 ], [ 128.10710696700016, 1.27643463700025 ], [ 128.1421004570002, 1.301459052000155 ], [ 128.15455162900014, 1.319281317000161 ], [ 128.17448978000016, 1.356634833000101 ], [ 128.18677819100003, 1.374172268000109 ], [ 128.2046004570002, 1.389960028000246 ], [ 128.24708092500009, 1.41648997600015 ], [ 128.26531009200005, 1.431830145000106 ], [ 128.28239993600027, 1.442613023000206 ], [ 128.32618248800009, 1.456610419000128 ], [ 128.34449303500003, 1.469142971000224 ], [ 128.35027103000016, 1.477932033000229 ], [ 128.35767662900014, 1.495062567000218 ], [ 128.36491946700028, 1.503241278000246 ], [ 128.37273196700028, 1.507473049000168 ], [ 128.39356530000009, 1.515041408000116 ], [ 128.41716556100016, 1.530585028000132 ], [ 128.43726647200015, 1.539292710000098 ], [ 128.45972741000014, 1.544989325000131 ], [ 128.48161868600016, 1.545396226000264 ], [ 128.48894290500016, 1.542181708000214 ], [ 128.49333743600016, 1.536932684000249 ], [ 128.49854576900009, 1.532294012000136 ], [ 128.50904381600014, 1.531195380000213 ], [ 128.51929772200026, 1.535589911000102 ], [ 128.5273543630002, 1.544256903000246 ], [ 128.53931725400014, 1.561916408000116 ], [ 128.55372155000009, 1.568426825000245 ], [ 128.60466556100016, 1.576890367000146 ], [ 128.64722741000026, 1.579006252000113 ], [ 128.71949303500014, 1.570624091000184 ], [ 128.72478274800005, 1.565985419000242 ], [ 128.72730553500003, 1.558579820000261 ], [ 128.7280379570002, 1.54852936400016 ], [ 128.72478274800005, 1.54197825700021 ], [ 128.70069420700008, 1.523667710000154 ], [ 128.6875106130002, 1.503241278000246 ], [ 128.68392988400012, 1.483343817000161 ], [ 128.68637129000001, 1.445217190000108 ], [ 128.68913821700016, 1.436753648000263 ], [ 128.69548587300017, 1.429754950000245 ], [ 128.71461022200026, 1.414618231000247 ], [ 128.72681725400014, 1.408758856000134 ], [ 128.74097741000014, 1.404852606000247 ], [ 128.74333743600016, 1.398382880000156 ], [ 128.7417098320002, 1.387152411000216 ], [ 128.74577884200005, 1.369452216000241 ], [ 128.74830162900014, 1.344061591000184 ], [ 128.7465926440002, 1.321275132000153 ], [ 128.73829186300009, 1.311468817000161 ], [ 128.7212020190002, 1.304185289000202 ], [ 128.7158309250002, 1.286525783000116 ], [ 128.71436608200031, 1.243150132000267 ], [ 128.70240319100014, 1.19375234600011 ], [ 128.70069420700008, 1.171128648000149 ], [ 128.70850670700008, 1.103461005000099 ], [ 128.70687910200024, 1.085516669000242 ], [ 128.70362389400032, 1.075018622000187 ], [ 128.70118248800009, 1.070868231000191 ], [ 128.68637129000001, 1.065008856000247 ], [ 128.67628014400032, 1.063706773000263 ], [ 128.6626082690002, 1.063788153000246 ], [ 128.65064537900014, 1.061957098000164 ], [ 128.64551842500009, 1.054754950000245 ], [ 128.56332441500012, 1.007391669000128 ], [ 128.5488387380002, 0.996039130000213 ], [ 128.5424910820002, 0.986517645000163 ], [ 128.5332137380002, 0.979437567000161 ], [ 128.47478274800028, 0.96259186400016 ], [ 128.45289147200003, 0.941229559000192 ], [ 128.43978925900012, 0.931789455000228 ], [ 128.42335045700008, 0.927883205000114 ], [ 128.40398196700005, 0.925482489000103 ], [ 128.3154403000002, 0.901556708000101 ], [ 128.30046634200005, 0.893744208000101 ], [ 128.2920028000002, 0.879868882000153 ], [ 128.28931725400003, 0.855861721000167 ], [ 128.2963973320002, 0.835760809000249 ], [ 128.2983504570002, 0.823431708000157 ], [ 128.29297936300031, 0.818019924000225 ], [ 128.28060957100001, 0.820461330000285 ], [ 128.25945071700028, 0.830633856000134 ], [ 128.24878991000026, 0.832220770000163 ], [ 128.23178144600001, 0.826076565000108 ], [ 128.22095787900014, 0.812689520000106 ], [ 128.21509850400025, 0.794623114000217 ], [ 128.21355228000016, 0.77391185100015 ], [ 128.21949303500014, 0.758368231000134 ], [ 128.23422285200013, 0.742621161000159 ], [ 128.26872806100016, 0.715562242000146 ], [ 128.29517662900014, 0.684637762000136 ], [ 128.31348717500009, 0.668158270000106 ], [ 128.34343509200028, 0.657782294000128 ], [ 128.36459394600001, 0.643622137000307 ], [ 128.37517337300005, 0.640448309000249 ], [ 128.40886478000016, 0.641546942000105 ], [ 128.43628991000026, 0.63886139500022 ], [ 128.4428817070002, 0.63641998900016 ], [ 128.45053144600013, 0.629584052000212 ], [ 128.46664472700013, 0.611517645000106 ], [ 128.4765731130002, 0.602728583000157 ], [ 128.48503665500027, 0.598863023000263 ], [ 128.52019290500027, 0.594427802000155 ], [ 128.53931725400014, 0.589097398000206 ], [ 128.57056725400014, 0.570257880000156 ], [ 128.58545983200008, 0.568508205000114 ], [ 128.60035241000003, 0.570868231000134 ], [ 128.6181746750002, 0.571600653000189 ], [ 128.62956790500004, 0.567450262000193 ], [ 128.64144941500001, 0.560980536000102 ], [ 128.65406334700015, 0.558050848000221 ], [ 128.66667728000027, 0.564764716000241 ], [ 128.68083743600027, 0.554510809000135 ], [ 128.68433678500014, 0.541693427000098 ], [ 128.6801863940002, 0.510077216000127 ], [ 128.6777449880002, 0.504828192000105 ], [ 128.67359459700015, 0.499579169000242 ], [ 128.67172285200013, 0.493719794000299 ], [ 128.68165123800009, 0.47931549700013 ], [ 128.6845809250002, 0.470689195000148 ], [ 128.68604576900009, 0.461371161000102 ], [ 128.68539472700024, 0.382025458000157 ], [ 128.69011478000004, 0.346991278000246 ], [ 128.70386803500014, 0.332017320000318 ], [ 128.7622176440002, 0.321437893000223 ], [ 128.7705184250002, 0.315904039000145 ], [ 128.8242293630002, 0.310858466000184 ], [ 128.85043379000012, 0.289862372000243 ], [ 128.87973066500012, 0.255845445000205 ], [ 128.90015709700003, 0.221991278000189 ], [ 128.89958743600016, 0.207790432000252 ], [ 128.86117597700024, 0.243557033000116 ], [ 128.84791100400003, 0.250067450000245 ], [ 128.83415774800017, 0.251532294000128 ], [ 128.70036868600027, 0.290961005000099 ], [ 128.6801863940002, 0.283514716000127 ], [ 128.6567488940002, 0.297023830000228 ], [ 128.62867272200015, 0.308050848000221 ], [ 128.59791100400025, 0.315619208000101 ], [ 128.56666100400003, 0.318304755000156 ], [ 128.53760826900032, 0.326849677000212 ], [ 128.51343834700003, 0.346828518000109 ], [ 128.47478274800028, 0.387193101000207 ], [ 128.46111087300017, 0.394842841000241 ], [ 128.44955488400001, 0.396795966000127 ], [ 128.41960696700016, 0.39345937700017 ], [ 128.4028426440002, 0.393500067000161 ], [ 128.37671959700015, 0.398871161000159 ], [ 128.36150149800017, 0.400213934000135 ], [ 128.29460696700028, 0.388983466000127 ], [ 128.26221764400009, 0.391343492000203 ], [ 128.23462975400014, 0.413967190000164 ], [ 128.21021569100003, 0.406805731000134 ], [ 128.18799889400032, 0.420843817000218 ], [ 128.1684676440002, 0.441880601000207 ], [ 128.15202884200016, 0.455511786000159 ], [ 128.0703231130002, 0.463364976000321 ], [ 128.05591881600003, 0.4617373720003 ], [ 128.03158613400012, 0.471340236000231 ], [ 127.97868899800017, 0.472560940000164 ], [ 127.96021569100014, 0.482814846000224 ], [ 127.94109134200016, 0.465806382000153 ], [ 127.92335045700008, 0.453436591000127 ], [ 127.91049238400012, 0.43768952000022 ], [ 127.8964949880002, 0.35565827000022 ], [ 127.8828231130002, 0.335923570000205 ], [ 127.87826582100013, 0.324530341000127 ], [ 127.8808699880002, 0.301743882000096 ], [ 127.90609785200013, 0.275376695000148 ], [ 127.91236412900003, 0.253485419000185 ], [ 127.92123457100013, 0.14557526200025 ], [ 127.91920006600026, 0.13133372600015 ], [ 127.91146894600013, 0.118882554000209 ], [ 127.89576256600014, 0.102362372000243 ], [ 127.88786868600016, 0.087469794000128 ], [ 127.88461347700024, 0.067043361000117 ], [ 127.8857528000002, 0.023504950000131 ], [ 127.89242597700013, -0.01718515399989 ], [ 127.90381920700031, -0.049493096999868 ], [ 127.93344160200024, -0.106784763999826 ], [ 127.9546004570002, -0.16350676899981 ], [ 127.9731551440002, -0.19687265399989 ], [ 127.97657311300009, -0.243340752999814 ], [ 127.98072350400003, -0.263848565999865 ], [ 127.99170983200008, -0.281426690999922 ], [ 128.01734459700003, -0.312595309999892 ], [ 128.02222741000003, -0.329034112999921 ], [ 128.02418053500014, -0.349786065999808 ], [ 128.03549238400012, -0.395928643999923 ], [ 128.04273522200015, -0.41529713299991 ], [ 128.08448326900009, -0.480889580999929 ], [ 128.09636478000004, -0.517266533999816 ], [ 128.12574303500014, -0.543633721999925 ], [ 128.13892662900014, -0.558689059999836 ], [ 128.22779381600003, -0.709567966999828 ], [ 128.28199303500003, -0.766208591999828 ], [ 128.33765709700015, -0.812595309999892 ], [ 128.34742272200015, -0.823418877999984 ], [ 128.36890709700015, -0.852715752999927 ], [ 128.38542728000004, -0.867120049999869 ], [ 128.4204207690002, -0.883070570999905 ], [ 128.43539472700013, -0.893324476999794 ], [ 128.44068444100014, -0.908786716999828 ], [ 128.43327884200016, -0.908786716999828 ], [ 128.40601647200026, -0.892266533999873 ], [ 128.37086022200015, -0.884860934999892 ], [ 128.28402754000012, -0.878187757999797 ], [ 128.26636803500003, -0.873711846999868 ], [ 128.2509871750002, -0.866794528999833 ], [ 128.23804772200015, -0.857028904 ], [ 128.22885175900012, -0.839939059999949 ], [ 128.23511803500014, -0.829034112999864 ], [ 128.24870853000027, -0.826104424999869 ], [ 128.26189212300005, -0.83310312299983 ], [ 128.26872806100016, -0.83310312299983 ], [ 128.2495223320002, -0.79648202899989 ], [ 128.20394941500012, -0.769463799999869 ], [ 128.04883873800031, -0.712823174999869 ], [ 128.0322371750002, -0.699314059999892 ], [ 128.02068118600016, -0.682061455999872 ], [ 127.96851647200003, -0.559502862999977 ], [ 127.91236412900003, -0.476739190999922 ], [ 127.88559004000024, -0.406019789999903 ], [ 127.86882571700028, -0.389336846999868 ], [ 127.85132897200015, -0.365492445999962 ], [ 127.84083092500009, -0.360039971999811 ], [ 127.83220462300017, -0.357517184999892 ], [ 127.77759850400003, -0.328057549999812 ], [ 127.74146569100014, -0.303399346999811 ], [ 127.72413170700008, -0.298597914999959 ], [ 127.70834394600013, -0.287041924999812 ], [ 127.68881269600024, -0.260186455999815 ], [ 127.6723738940002, -0.230157158999873 ], [ 127.66602623800031, -0.209242445999905 ], [ 127.66724694100014, -0.185804945999962 ], [ 127.68262780000009, -0.144952080999872 ], [ 127.68653405000009, -0.123874606999948 ], [ 127.68539472700013, -0.008314710999912 ], [ 127.68653405000009, 0.003078518000223 ], [ 127.6894637380002, 0.014837958000101 ], [ 127.6982528000002, 0.037787177000098 ], [ 127.7002059250002, 0.04767487200013 ], [ 127.69752037900014, 0.070786851000264 ], [ 127.68458092500032, 0.099351304000152 ], [ 127.6796981130002, 0.119086005000099 ], [ 127.6806746750002, 0.162258205000114 ], [ 127.71371504000001, 0.277329820000148 ], [ 127.71680748800009, 0.296454169000242 ], [ 127.71558678500014, 0.312567450000188 ], [ 127.70915774800005, 0.327215887000136 ], [ 127.6967879570002, 0.342230536000159 ], [ 127.68588300900024, 0.346625067000218 ], [ 127.66423587300005, 0.339789130000099 ], [ 127.65512129000024, 0.342230536000159 ], [ 127.61085045700031, 0.379787502000227 ], [ 127.60865319100003, 0.382879950000131 ], [ 127.60580488400001, 0.390448309000249 ], [ 127.60401451900009, 0.39345937700017 ], [ 127.58350670700031, 0.407131252000113 ], [ 127.57650800900012, 0.415513414000202 ], [ 127.5722762380002, 0.422349351000264 ], [ 127.57032311300009, 0.431138414000145 ], [ 127.56861412900014, 0.462836005000156 ], [ 127.56104576900032, 0.509426174000225 ], [ 127.5561629570002, 0.523830471000224 ], [ 127.55054772200015, 0.529364325000131 ], [ 127.54249108200031, 0.534654039000145 ], [ 127.53443444100003, 0.541652736000174 ], [ 127.52833092500009, 0.551743882000096 ], [ 127.52686608200031, 0.560614325000131 ], [ 127.52947024800005, 0.605902411000216 ], [ 127.54249108200031, 0.667181708000157 ], [ 127.54737389400009, 0.715399481000247 ], [ 127.55543053500003, 0.739894924000112 ], [ 127.58806399800017, 0.761175848000164 ], [ 127.60466556100016, 0.786037502000227 ], [ 127.61833743600016, 0.813462632000096 ], [ 127.62452233200031, 0.832220770000163 ], [ 127.61158287900014, 0.857733466000241 ], [ 127.57748457100024, 0.869289455000285 ], [ 127.53760826900009, 0.87571849200026 ], [ 127.5078231130002, 0.886216539000145 ], [ 127.49463951900009, 0.905015367000203 ], [ 127.49854576900009, 0.922796942000161 ], [ 127.5087996750002, 0.940375067000218 ], [ 127.51465905000009, 0.958889065000164 ], [ 127.51254316500012, 0.968898830000114 ], [ 127.50359134200005, 0.98720937700017 ], [ 127.50163821700016, 0.99298737200013 ], [ 127.49935957100001, 0.996486721000224 ], [ 127.49000084700015, 0.995998440000221 ], [ 127.48780358200008, 0.999904690000164 ], [ 127.48853600400014, 1.018255927000212 ], [ 127.48780358200008, 1.024074611000231 ], [ 127.48902428500014, 1.034572658000116 ], [ 127.4926863940002, 1.044867255000213 ], [ 127.49195397200015, 1.054917710000211 ], [ 127.48047936300009, 1.065008856000247 ], [ 127.47144616000014, 1.065578518000166 ], [ 127.46290123800031, 1.060614325000188 ], [ 127.45533287900014, 1.054388739000217 ], [ 127.44947350400014, 1.051336981000134 ], [ 127.43213951900009, 1.046820380000099 ], [ 127.41627037900014, 1.040350653000246 ], [ 127.40414472700013, 1.042792059000135 ], [ 127.39861087300005, 1.065008856000247 ], [ 127.39975019600013, 1.078762111000174 ], [ 127.40447024800017, 1.087388414000259 ], [ 127.41098066500024, 1.095160223000221 ], [ 127.4184676440002, 1.105943101000264 ], [ 127.42546634200016, 1.120428778000246 ], [ 127.42741946700005, 1.128485419000299 ], [ 127.4257918630002, 1.150702216000241 ], [ 127.42066491000003, 1.163804429000095 ], [ 127.41000410200013, 1.175523179000209 ], [ 127.40023847700013, 1.189439195000205 ], [ 127.39861087300005, 1.209051825000245 ], [ 127.40593509200005, 1.229885158000116 ], [ 127.43482506600014, 1.277411200000131 ], [ 127.46338951900032, 1.314113674000225 ], [ 127.48780358200008, 1.380316473000221 ], [ 127.5263778000002, 1.43854401200025 ], [ 127.54078209700015, 1.475653387000136 ], [ 127.53199303500014, 1.506903387000136 ], [ 127.51937910200002, 1.531927802000212 ], [ 127.52515709700003, 1.556626695000205 ], [ 127.5561629570002, 1.600043036000272 ], [ 127.54672285200013, 1.61542389500022 ], [ 127.54371178500026, 1.622992255000213 ], [ 127.54249108200031, 1.630438544000242 ], [ 127.5463973320002, 1.642889716000127 ], [ 127.55518639400009, 1.648423570000261 ], [ 127.56430097700013, 1.651027736000231 ], [ 127.5698348320002, 1.654689846000224 ], [ 127.57309004000024, 1.66400788000027 ], [ 127.57488040500004, 1.675279039000145 ], [ 127.57154381600014, 1.684800523000149 ], [ 127.55933678500003, 1.688869533000172 ], [ 127.55567467500009, 1.692531643000166 ], [ 127.5595809250002, 1.700832424000112 ], [ 127.5698348320002, 1.715521552000155 ], [ 127.58090254000012, 1.751776434000135 ], [ 127.62973066500012, 1.835394598000164 ], [ 127.65463300900001, 1.865668036000159 ], [ 127.67741946700016, 1.907456773000206 ], [ 127.68995201900009, 1.925279039000259 ], [ 127.74659264400009, 1.973130601000207 ], [ 127.76970462300017, 2.008693752000113 ], [ 127.86109459700003, 2.104437567000218 ], [ 127.8925887380002, 2.129055080000228 ], [ 127.8994246750002, 2.137884833000101 ], [ 127.90430748800009, 2.153998114000274 ], [ 127.91724694100003, 2.172105210000098 ], [ 127.93482506600003, 2.187648830000285 ], [ 127.95411217500009, 2.195868231000247 ], [ 127.9731551440002, 2.193101304000209 ], [ 127.98812910200013, 2.18431224200026 ], [ 128.0039168630002, 2.180609442000105 ], [ 128.0473738940002, 2.203843492000146 ], [ 128.05665123800031, 2.192450262000136 ] ] ], [ [ [ 97.191579623000109, 2.208929755000213 ], [ 97.208018425000091, 2.207586981000134 ], [ 97.220713738000086, 2.214300848000107 ], [ 97.232920769000145, 2.223822333000214 ], [ 97.246755405000101, 2.230658270000106 ], [ 97.264659050000091, 2.232245184000135 ], [ 97.281260613000143, 2.229071356000247 ], [ 97.289235873000109, 2.221177476000321 ], [ 97.281504754000196, 2.208929755000213 ], [ 97.305837436000161, 2.185370184000192 ], [ 97.31983483200014, 2.178656317000218 ], [ 97.323741082000197, 2.169582424000225 ], [ 97.328623894000089, 2.14752838700025 ], [ 97.336273634000122, 2.12665436400016 ], [ 97.341075066000201, 2.105698960000211 ], [ 97.34302819100003, 2.083319403000132 ], [ 97.342295769000202, 2.058091539000145 ], [ 97.339528842000163, 2.049465236000231 ], [ 97.335215691000087, 2.042181708000157 ], [ 97.329356316000087, 2.036322333000214 ], [ 97.32178795700014, 2.03143952000022 ], [ 97.320323113000086, 2.049994208000157 ], [ 97.32178795700014, 2.058091539000145 ], [ 97.306162957000197, 2.057196356000247 ], [ 97.296153191000258, 2.069525458000214 ], [ 97.287852410000141, 2.087469794000242 ], [ 97.278086785000085, 2.103094794000242 ], [ 97.233897332000197, 2.147162177000155 ], [ 97.226817254000252, 2.158026434000135 ], [ 97.207367384000122, 2.175523179000152 ], [ 97.102793816000144, 2.212713934000249 ], [ 97.109385613000143, 2.220160223000221 ], [ 97.125173373000052, 2.225490627000227 ], [ 97.167002800000091, 2.233099677000269 ], [ 97.171722852000187, 2.233099677000269 ], [ 97.178477410000028, 2.230658270000106 ], [ 97.182790561000104, 2.226060289000259 ], [ 97.191579623000109, 2.208929755000213 ] ] ], [ [ [ 127.75993899800017, 2.26992422100011 ], [ 127.78589928500003, 2.264227606000134 ], [ 127.80144290500027, 2.265041408000172 ], [ 127.81055748800009, 2.263861395000163 ], [ 127.81511478000016, 2.255275783000116 ], [ 127.81617272200015, 2.233791408000172 ], [ 127.80518639400032, 2.212347723000221 ], [ 127.78126061300009, 2.208929755000213 ], [ 127.75766035200024, 2.221380927000155 ], [ 127.74822024800005, 2.247381903000132 ], [ 127.75171959700015, 2.265855210000154 ], [ 127.75993899800017, 2.26992422100011 ] ] ], [ [ [ 118.5898543630002, 2.30556875200017 ], [ 118.6225692070002, 2.286118882000096 ], [ 118.63379967500009, 2.271673895000106 ], [ 118.63266035200002, 2.260687567000105 ], [ 118.61744225400014, 2.268540757000267 ], [ 118.58594811300009, 2.291489976000207 ], [ 118.57488040500004, 2.294175523000149 ], [ 118.57488040500004, 2.292425848000221 ], [ 118.58033287900003, 2.286851304000095 ], [ 118.58594811300009, 2.277818101000264 ], [ 118.5996199880002, 2.24433014500022 ], [ 118.62387129000001, 2.213080145000106 ], [ 118.63949629000001, 2.198635158000116 ], [ 118.6543074880002, 2.189683335000098 ], [ 118.6543074880002, 2.182277736000117 ], [ 118.63209069100003, 2.187241929000095 ], [ 118.61011803500014, 2.202297268000109 ], [ 118.59115644600001, 2.221014716000127 ], [ 118.57846113400001, 2.236883856000247 ], [ 118.56836998800009, 2.255601304000152 ], [ 118.55689537900003, 2.28595612200013 ], [ 118.55640709700015, 2.31220123900016 ], [ 118.57846113400001, 2.318793036000102 ], [ 118.5898543630002, 2.30556875200017 ] ] ], [ [ [ 125.45264733200008, 2.333075262000193 ], [ 125.42310631600014, 2.317124742000317 ], [ 125.39234459700015, 2.325669664000145 ], [ 125.37094160200002, 2.348130601000207 ], [ 125.36947675900012, 2.374090887000193 ], [ 125.38062584700003, 2.385728257000153 ], [ 125.39682050900012, 2.39142487200013 ], [ 125.41504967500009, 2.391831773000149 ], [ 125.43213951900032, 2.387681382000153 ], [ 125.4506942070002, 2.377915757000153 ], [ 125.45622806100016, 2.367743231000304 ], [ 125.45264733200008, 2.333075262000193 ] ] ], [ [ [ 128.1699324880002, 2.297430731000191 ], [ 128.15463300900012, 2.286363023000149 ], [ 128.14112389400009, 2.296372789000202 ], [ 128.13070722700002, 2.316473700000245 ], [ 128.12525475400025, 2.335638739000103 ], [ 128.12525475400025, 2.347479559000192 ], [ 128.12867272200026, 2.358303127000113 ], [ 128.1347762380002, 2.368312893000166 ], [ 128.1421004570002, 2.37783437700017 ], [ 128.14975019600013, 2.390611070000261 ], [ 128.15414472700002, 2.400580145000106 ], [ 128.1601668630002, 2.404852606000191 ], [ 128.17318769600013, 2.400702216000184 ], [ 128.19361412900025, 2.367254950000131 ], [ 128.19223066500024, 2.354641018000223 ], [ 128.1699324880002, 2.297430731000191 ] ] ], [ [ [ 109.05347741000008, 2.53790924700013 ], [ 109.0968530610001, 2.537176825000245 ], [ 109.1086531910002, 2.531683661000159 ], [ 109.11394290500016, 2.523179429000152 ], [ 109.11085045700008, 2.516058661000159 ], [ 109.09506269600024, 2.504380601000264 ], [ 109.07846113400007, 2.496039130000099 ], [ 109.05225670700008, 2.487616278000246 ], [ 109.02670332100018, 2.485825914000259 ], [ 109.01246178500008, 2.497544664000145 ], [ 109.0148218110001, 2.511053778000246 ], [ 109.02247155000003, 2.520005601000264 ], [ 109.02328535200024, 2.527818101000264 ], [ 109.00562584700003, 2.53790924700013 ], [ 109.00082441500012, 2.537420966000127 ], [ 108.99073326900009, 2.529730536000102 ], [ 108.98560631599997, 2.527736721000281 ], [ 108.97982832100018, 2.529120184000249 ], [ 108.97437584700009, 2.53290436400016 ], [ 108.97006269600018, 2.53815338700025 ], [ 108.96810957100013, 2.543646552000098 ], [ 108.97193444100003, 2.555121161000159 ], [ 108.98275800900012, 2.560614325000245 ], [ 108.99642988400007, 2.561753648000263 ], [ 109.00831139400015, 2.560126044000242 ], [ 109.01978600400008, 2.555121161000159 ], [ 109.04200280000015, 2.541978257000153 ], [ 109.05347741000008, 2.53790924700013 ] ] ], [ [ [ 128.59603925900001, 2.608587958000271 ], [ 128.62012780000032, 2.560451565000108 ], [ 128.6303817070002, 2.544623114000274 ], [ 128.64210045700008, 2.53790924700013 ], [ 128.68637129000001, 2.483954169000185 ], [ 128.69450931100016, 2.438869533000229 ], [ 128.68165123800009, 2.399074611000231 ], [ 128.66081790500016, 2.362290757000153 ], [ 128.64551842500009, 2.326239325000131 ], [ 128.64210045700008, 2.261175848000221 ], [ 128.58521569100003, 2.154852606000247 ], [ 128.57300866000014, 2.120591539000259 ], [ 128.56666100400003, 2.109930731000134 ], [ 128.50953209700003, 2.062445380000213 ], [ 128.49024498800009, 2.054266669000242 ], [ 128.34498131600014, 2.039943752000227 ], [ 128.33082116000003, 2.03485748900016 ], [ 128.31706790500016, 2.019720770000163 ], [ 128.2895613940002, 2.001410223000107 ], [ 128.26905358200008, 1.995347398000149 ], [ 128.27556399800017, 2.017157294000128 ], [ 128.2885848320002, 2.039618231000247 ], [ 128.28370201900009, 2.057603257000096 ], [ 128.25196373800031, 2.089422919000128 ], [ 128.24610436300009, 2.106146552000155 ], [ 128.24878991000026, 2.175441799000168 ], [ 128.24146569100026, 2.222479559000135 ], [ 128.23210696700016, 2.246812242000203 ], [ 128.21713300900001, 2.257391669000242 ], [ 128.19711347700024, 2.266180731000191 ], [ 128.20777428500026, 2.286525783000116 ], [ 128.24878991000026, 2.326239325000131 ], [ 128.27662194100003, 2.368719794000185 ], [ 128.32113691500012, 2.458644924000168 ], [ 128.35808353000016, 2.497544664000145 ], [ 128.40072675900001, 2.518377997000243 ], [ 128.4194442070002, 2.532619533000116 ], [ 128.43002363400012, 2.567572333000214 ], [ 128.43767337300005, 2.575669664000259 ], [ 128.45736738400001, 2.590073960000154 ], [ 128.46656334700015, 2.594305731000247 ], [ 128.47478274800028, 2.590765692000161 ], [ 128.48845462300028, 2.579535223000107 ], [ 128.5151473320002, 2.573391018000223 ], [ 128.52515709700015, 2.582424221000224 ], [ 128.53142337300017, 2.601141669000242 ], [ 128.5459090500002, 2.623846747000243 ], [ 128.5664168630002, 2.633612372000243 ], [ 128.58326256600026, 2.62518952000022 ], [ 128.59603925900001, 2.608587958000271 ] ] ], [ [ [ 111.41244550900024, 2.387355861000174 ], [ 111.41334069100003, 2.378241278000189 ], [ 111.41049238400018, 2.372219143000223 ], [ 111.40088951900015, 2.37783437700017 ], [ 111.39096113400012, 2.382147528000246 ], [ 111.3818465500002, 2.377875067000161 ], [ 111.37435957100024, 2.369086005000156 ], [ 111.3698836600002, 2.359808661000159 ], [ 111.35914147200009, 2.373114325000245 ], [ 111.34262129000012, 2.413885809000192 ], [ 111.33204186300009, 2.422430731000247 ], [ 111.31267337300011, 2.431341864000103 ], [ 111.30811608200008, 2.452134507000153 ], [ 111.31568444100003, 2.496242580000228 ], [ 111.31763756600026, 2.536769924000112 ], [ 111.299001498, 2.702704169000185 ], [ 111.30095462300022, 2.752630927000212 ], [ 111.3154403000002, 2.784491278000132 ], [ 111.34994550900012, 2.771307684000192 ], [ 111.37029056099999, 2.739732164000316 ], [ 111.38103274800022, 2.697902736000174 ], [ 111.3818465500002, 2.523342190000165 ], [ 111.39039147200003, 2.449164130000156 ], [ 111.4113875660002, 2.391099351000264 ], [ 111.41244550900024, 2.387355861000174 ] ] ], [ [ [ 125.42107181100016, 2.633937893000109 ], [ 125.4111434250002, 2.627264716000127 ], [ 125.3925887380002, 2.628892320000148 ], [ 125.38257897200015, 2.641831773000263 ], [ 125.37826582100001, 2.660345770000106 ], [ 125.37761478000004, 2.678778387000136 ], [ 125.37427819100014, 2.693101304000095 ], [ 125.35971113400001, 2.723089911000272 ], [ 125.3564559250002, 2.740545966000127 ], [ 125.36011803500026, 2.753322658000172 ], [ 125.37891686300031, 2.790961005000156 ], [ 125.3872176440002, 2.802394924000225 ], [ 125.40162194100026, 2.810207424000168 ], [ 125.41700280000032, 2.81024811400016 ], [ 125.43148847700013, 2.804103908000229 ], [ 125.44361412900014, 2.793036200000188 ], [ 125.45101972700013, 2.778387762000136 ], [ 125.45045006600026, 2.764837958000101 ], [ 125.44304446700028, 2.752590236000117 ], [ 125.4160262380002, 2.730780341000241 ], [ 125.4096785820002, 2.724514065000108 ], [ 125.40495853000016, 2.716701565000165 ], [ 125.4018660820002, 2.699937242000146 ], [ 125.40658613400012, 2.686346747000187 ], [ 125.4184676440002, 2.668890692000105 ], [ 125.42188561300009, 2.65721263200021 ], [ 125.42367597700013, 2.644720770000106 ], [ 125.42107181100016, 2.633937893000109 ] ] ], [ [ [ 106.24154707100013, 2.738023179000209 ], [ 106.23780358200008, 2.732855536000102 ], [ 106.23243248800014, 2.741766669000128 ], [ 106.2194930350002, 2.758368231000304 ], [ 106.2126570970002, 2.781480210000211 ], [ 106.2043563160002, 2.796128648000263 ], [ 106.19898522200009, 2.809515692000161 ], [ 106.20329837300017, 2.81907786700026 ], [ 106.21631920700014, 2.822455145000276 ], [ 106.22624759200016, 2.817043361000117 ], [ 106.23316491000014, 2.806301174000112 ], [ 106.23780358200008, 2.793768622000187 ], [ 106.24317467500015, 2.760484117000203 ], [ 106.24341881599997, 2.745428778000189 ], [ 106.24154707100013, 2.738023179000209 ] ] ], [ [ [ 104.19206790500021, 2.709051825000131 ], [ 104.17212975400014, 2.707749742000317 ], [ 104.15748131600014, 2.713283596000224 ], [ 104.1384383470002, 2.733628648000149 ], [ 104.13062584700003, 2.745794989000217 ], [ 104.13013756600003, 2.754543361000174 ], [ 104.13070722700019, 2.760077216000184 ], [ 104.12582441500012, 2.77704498900016 ], [ 104.1269637380002, 2.785589911000216 ], [ 104.13160241000008, 2.791083075000131 ], [ 104.14421634199999, 2.797593492000146 ], [ 104.1506453790002, 2.802394924000225 ], [ 104.16032962300017, 2.817857164000202 ], [ 104.16032962300017, 2.832668361000117 ], [ 104.15626061300009, 2.847723700000131 ], [ 104.15381920700008, 2.86408112200013 ], [ 104.15601647200009, 2.874579169000185 ], [ 104.1618758470002, 2.884833075000245 ], [ 104.17066491000008, 2.89109935100015 ], [ 104.18140709700009, 2.889797268000166 ], [ 104.1862085300001, 2.885321356000191 ], [ 104.18775475400014, 2.87970612200013 ], [ 104.18897545700014, 2.867580471000224 ], [ 104.1916610040002, 2.860296942000218 ], [ 104.20435631600009, 2.840887762000307 ], [ 104.21062259200022, 2.827866929000209 ], [ 104.22266686300014, 2.785589911000216 ], [ 104.22510826900015, 2.735907294000185 ], [ 104.22266686300014, 2.724107164000145 ], [ 104.21078535200019, 2.715073960000211 ], [ 104.19206790500021, 2.709051825000131 ] ] ], [ [ [ 95.911875847000033, 2.906236070000148 ], [ 95.910411004000252, 2.873683986000117 ], [ 95.890798373000109, 2.889105536000159 ], [ 95.882985873000109, 2.883937893000223 ], [ 95.883067254000196, 2.846380927000155 ], [ 95.917246941000201, 2.860663153000189 ], [ 95.927744988000086, 2.844549872000243 ], [ 95.964528842000163, 2.827948309000192 ], [ 95.981700066000201, 2.790350653000303 ], [ 96.003265821000127, 2.777004299000168 ], [ 96.028330925000091, 2.76845937700017 ], [ 96.090505405000272, 2.757798570000148 ], [ 96.106781446000241, 2.749660549000112 ], [ 96.126312696000127, 2.733710028000132 ], [ 96.130869988000086, 2.715277411000102 ], [ 96.101817254000196, 2.675441799000112 ], [ 96.102793816000144, 2.654608466000184 ], [ 96.118662957000197, 2.666001695000261 ], [ 96.129730665000238, 2.66478099200026 ], [ 96.138438347000204, 2.65839264500022 ], [ 96.147146030000101, 2.654608466000184 ], [ 96.156260613000086, 2.648423570000205 ], [ 96.161875847000204, 2.647772528000189 ], [ 96.164235873000223, 2.654608466000184 ], [ 96.160899285000198, 2.66120026200025 ], [ 96.146983269000032, 2.670721747000187 ], [ 96.14372806099999, 2.678778387000136 ], [ 96.15796959700026, 2.680405992000203 ], [ 96.246104363000086, 2.600002346000224 ], [ 96.2578231130002, 2.591864325000245 ], [ 96.290700717000163, 2.57518138200021 ], [ 96.30420983200014, 2.572088934000135 ], [ 96.321299675000091, 2.566148179000152 ], [ 96.335948113000086, 2.552150783000229 ], [ 96.359141472000033, 2.521429755000156 ], [ 96.363942905000215, 2.508490302000212 ], [ 96.367849155000101, 2.489691473000107 ], [ 96.375254754000139, 2.473863023000149 ], [ 96.390147332000083, 2.469671942000218 ], [ 96.395274284999971, 2.477362372000243 ], [ 96.396983269000202, 2.493109442000161 ], [ 96.3964949880002, 2.524847723000164 ], [ 96.410655144000145, 2.508937893000223 ], [ 96.417246941000258, 2.50633372600015 ], [ 96.424327019000089, 2.510565497000243 ], [ 96.444102409999971, 2.490383205000114 ], [ 96.465017123000223, 2.437811591000241 ], [ 96.479502800000205, 2.414984442000275 ], [ 96.475108269000089, 2.397853908000229 ], [ 96.481211785000255, 2.378851630000213 ], [ 96.481211785000255, 2.36399974200026 ], [ 96.45850670700014, 2.359808661000159 ], [ 96.465830925000034, 2.359808661000159 ], [ 96.430674675000205, 2.348781643000109 ], [ 96.420909050000148, 2.343003648000149 ], [ 96.411387566000144, 2.343817450000131 ], [ 96.369639519000089, 2.367254950000131 ], [ 96.351084832000083, 2.355047919000242 ], [ 96.334971550000205, 2.355454820000205 ], [ 96.320811394000089, 2.363470770000163 ], [ 96.307627800000148, 2.374090887000193 ], [ 96.312836134000179, 2.378648179000152 ], [ 96.322601759000179, 2.389797268000109 ], [ 96.328135613000143, 2.394517320000205 ], [ 96.306162957000197, 2.405096747000243 ], [ 96.285166863000086, 2.43642812700017 ], [ 96.239919467000107, 2.448675848000278 ], [ 96.065684441000087, 2.579413153000132 ], [ 96.042653842000107, 2.592027085000211 ], [ 96.020274285000141, 2.600002346000224 ], [ 96.010996941000087, 2.600897528000246 ], [ 95.98609459700009, 2.600002346000224 ], [ 95.980642123000109, 2.602687893000109 ], [ 95.971934441000144, 2.612209377000113 ], [ 95.965098504000196, 2.614243882000153 ], [ 95.961273634000122, 2.607123114000217 ], [ 95.958018425000148, 2.602240302000155 ], [ 95.955088738000143, 2.600002346000224 ], [ 95.947520379000196, 2.598049221000167 ], [ 95.939952019000145, 2.595160223000278 ], [ 95.931407097000147, 2.595607815000165 ], [ 95.911468946000241, 2.610296942000275 ], [ 95.892100457000197, 2.615627346000224 ], [ 95.883067254000196, 2.620428778000132 ], [ 95.87818444100003, 2.628566799000112 ], [ 95.877777540000238, 2.637111721000167 ], [ 95.874766472000147, 2.645819403000132 ], [ 95.862559441000087, 2.654608466000184 ], [ 95.79053795700014, 2.654608466000184 ], [ 95.785329623000109, 2.660589911000102 ], [ 95.787445509000236, 2.674058335000211 ], [ 95.794281446000184, 2.696234442000161 ], [ 95.788910352000187, 2.70400625200017 ], [ 95.758962436000161, 2.724107164000145 ], [ 95.76156660200013, 2.739935614000274 ], [ 95.748789910000255, 2.749904690000165 ], [ 95.735199415000125, 2.757879950000131 ], [ 95.735687696000127, 2.767889716000184 ], [ 95.740082227000187, 2.778062242000203 ], [ 95.727875196000127, 2.779242255000099 ], [ 95.710215691000144, 2.777492580000171 ], [ 95.698008660000028, 2.778753973000164 ], [ 95.692637566000087, 2.792059637000307 ], [ 95.692637566000087, 2.812811591000127 ], [ 95.699554884000065, 2.831773179000095 ], [ 95.714854363000029, 2.840155341000184 ], [ 95.768728061000161, 2.840806382000096 ], [ 95.780039910000085, 2.846380927000155 ], [ 95.781504754000139, 2.855047919000128 ], [ 95.776621941000144, 2.860988674000225 ], [ 95.769867384000179, 2.864894924000168 ], [ 95.766368035000141, 2.867499091000241 ], [ 95.766774936000104, 2.878119208000101 ], [ 95.771820509000236, 2.895453192000105 ], [ 95.773203972000033, 2.905015367000146 ], [ 95.784678582000197, 2.924953518000223 ], [ 95.786875846999976, 2.932684637000136 ], [ 95.791514519000089, 2.942531643000109 ], [ 95.801524285000198, 2.937567450000131 ], [ 95.811045769000202, 2.927435614000103 ], [ 95.81413821700005, 2.922105210000098 ], [ 95.884043816000201, 2.919012762000193 ], [ 95.911875847000033, 2.906236070000148 ] ] ], [ [ [ 108.84587649800028, 2.850653387000136 ], [ 108.84245853000027, 2.846380927000155 ], [ 108.8296004570002, 2.847601630000156 ], [ 108.81812584700003, 2.855902411000102 ], [ 108.80014082100018, 2.873683986000117 ], [ 108.78296959699998, 2.882269598000107 ], [ 108.7758895190002, 2.888006903000303 ], [ 108.77515709699998, 2.895086981000247 ], [ 108.7758895190002, 2.895941473000221 ], [ 108.79688561300014, 2.907660223000164 ], [ 108.81430097700013, 2.921454169000128 ], [ 108.82927493600016, 2.936265367000146 ], [ 108.83627363400012, 2.947577216000184 ], [ 108.84083092500015, 2.960109768000109 ], [ 108.84245853000027, 2.973618882000153 ], [ 108.85572350400003, 3.003363348000107 ], [ 108.8813582690002, 3.00299713700025 ], [ 108.898610873, 2.982855536000216 ], [ 108.88624108200014, 2.953111070000148 ], [ 108.88412519600024, 2.941636460000154 ], [ 108.89226321700011, 2.903876044000128 ], [ 108.88965905000015, 2.888006903000303 ], [ 108.88355553500008, 2.883978583000214 ], [ 108.8628035820002, 2.87714264500022 ], [ 108.8554793630002, 2.873683986000117 ], [ 108.85173587300005, 2.867661851000207 ], [ 108.84587649800028, 2.850653387000136 ] ] ], [ [ [ 107.76823978000027, 2.979071356000134 ], [ 107.7561141290002, 2.978461005000156 ], [ 107.74512780000003, 2.983547268000109 ], [ 107.75123131600003, 3.012030341000184 ], [ 107.7729598320002, 3.025295315000108 ], [ 107.79623457100013, 3.025539455000228 ], [ 107.8071395190002, 3.014878648000206 ], [ 107.8132430350002, 2.99494049700013 ], [ 107.81120853000016, 2.98680247600015 ], [ 107.76823978000027, 2.979071356000134 ] ] ], [ [ [ 101.25961347700024, 3.030218817000161 ], [ 101.24382571700028, 3.02619049700013 ], [ 101.23698978, 3.035060940000165 ], [ 101.2443953790002, 3.04901764500022 ], [ 101.26286868599999, 3.056341864000217 ], [ 101.27116946700016, 3.046454169000242 ], [ 101.26734459700009, 3.035305080000114 ], [ 101.25961347700024, 3.030218817000161 ] ] ], [ [ [ 105.77816816500012, 2.97760651200025 ], [ 105.78492272200026, 2.97736237200013 ], [ 105.79029381600003, 2.981594143000223 ], [ 105.79224694100009, 2.988267320000205 ], [ 105.79460696700016, 2.994533596000167 ], [ 105.80201256600014, 2.997259833000214 ], [ 105.81348717500015, 2.996039130000213 ], [ 105.8440047540002, 2.988470770000163 ], [ 105.85328209699998, 2.983547268000109 ], [ 105.84693444100003, 2.969916083000157 ], [ 105.83961022200003, 2.969916083000157 ], [ 105.83961022200003, 2.97736237200013 ], [ 105.83334394600007, 2.97736237200013 ], [ 105.81185957100013, 2.904486395000106 ], [ 105.80201256600014, 2.898179429000152 ], [ 105.78891035200019, 2.907171942000161 ], [ 105.781423373, 2.904974677000155 ], [ 105.77556399800005, 2.898504950000188 ], [ 105.72974694100014, 2.881170966000184 ], [ 105.73406009200005, 2.873277085000098 ], [ 105.73894290500021, 2.869289455000228 ], [ 105.74537194100014, 2.867743231000191 ], [ 105.7541610040002, 2.867499091000241 ], [ 105.76221764400015, 2.864203192000105 ], [ 105.76514733200008, 2.856919664000202 ], [ 105.76441491000003, 2.849676825000188 ], [ 105.76099694100014, 2.846380927000155 ], [ 105.74887129000024, 2.844549872000243 ], [ 105.73658287899997, 2.841253973000107 ], [ 105.72445722700019, 2.839667059000249 ], [ 105.71265709700009, 2.843166408000172 ], [ 105.70484459700015, 2.850978908000172 ], [ 105.69947350400008, 2.861639716000127 ], [ 105.69646243600016, 2.873480536000159 ], [ 105.69556725399997, 2.884588934000192 ], [ 105.69760175900018, 2.896470445000148 ], [ 105.70687910200013, 2.920803127000113 ], [ 105.71168053500014, 2.943670966000127 ], [ 105.7221785820002, 2.969224351000264 ], [ 105.72348066500018, 2.97736237200013 ], [ 105.7153426440002, 2.988999742000203 ], [ 105.69117272199998, 3.00234609600011 ], [ 105.68189537900003, 3.011460679000152 ], [ 105.6919051440002, 3.020493882000153 ], [ 105.69556725399997, 3.034165757000096 ], [ 105.69410241000008, 3.048570054000209 ], [ 105.68873131600014, 3.059963283000116 ], [ 105.70289147200009, 3.066107489000103 ], [ 105.71029707100024, 3.048488674000225 ], [ 105.71290123800014, 3.045640367000203 ], [ 105.71517988400024, 3.043890692000105 ], [ 105.7321883470002, 3.035386460000098 ], [ 105.73707116, 3.03196849200026 ], [ 105.73943118600022, 3.015122789000259 ], [ 105.73682701900015, 2.999579169000242 ], [ 105.73853600400003, 2.988104559000135 ], [ 105.7541610040002, 2.983547268000109 ], [ 105.76238040500021, 2.982326565000278 ], [ 105.77816816500012, 2.97760651200025 ] ] ], [ [ [ 101.27564537900014, 2.967718817000218 ], [ 101.26807701900009, 2.965155341000241 ], [ 101.26636803500008, 2.971502997000187 ], [ 101.26807701900009, 2.982123114000217 ], [ 101.29232832100007, 3.042914130000156 ], [ 101.30591881600003, 3.063950914000259 ], [ 101.32349694100009, 3.071112372000187 ], [ 101.3361922540002, 3.065008856000247 ], [ 101.3376570970002, 3.05182526200025 ], [ 101.33643639400015, 3.044745184000135 ], [ 101.33790123800003, 3.031927802000098 ], [ 101.33529707100013, 3.009019273000263 ], [ 101.32146243600022, 2.996161200000188 ], [ 101.3022567070002, 2.988674221000167 ], [ 101.28728274800017, 2.978216864000103 ], [ 101.281423373, 2.972479559000135 ], [ 101.27564537900014, 2.967718817000218 ] ] ], [ [ [ 106.23853600400014, 3.22650788000027 ], [ 106.25912519600013, 3.214748440000165 ], [ 106.27735436300003, 3.196234442000275 ], [ 106.2851668630002, 3.179103908000229 ], [ 106.2851668630002, 3.087225653000189 ], [ 106.27906334700003, 3.087225653000189 ], [ 106.25782311300014, 3.113918361000231 ], [ 106.24187259200016, 3.107855536000102 ], [ 106.2338973320002, 3.115220445000318 ], [ 106.2260848320002, 3.125555731000134 ], [ 106.21070397200015, 3.128159898000206 ], [ 106.21509850400014, 3.134833075000188 ], [ 106.21607506600009, 3.140814520000106 ], [ 106.2159936860001, 3.147162177000098 ], [ 106.21697024800011, 3.154933986000231 ], [ 106.20582116000026, 3.205715236000231 ], [ 106.20777428500014, 3.225327867000203 ], [ 106.2238061860001, 3.223781643000166 ], [ 106.23853600400014, 3.22650788000027 ] ] ], [ [ [ 117.53028405000009, 3.305650132000153 ], [ 117.52751712300005, 3.290838934000192 ], [ 117.5214949880002, 3.288072007000096 ], [ 117.51335696700016, 3.290838934000192 ], [ 117.50359134200028, 3.292669989000217 ], [ 117.4721785820002, 3.293605861000231 ], [ 117.46192467500009, 3.292669989000217 ], [ 117.45337975400014, 3.289252020000163 ], [ 117.44027754000001, 3.280015367000146 ], [ 117.43392988400001, 3.278998114000103 ], [ 117.4170028000002, 3.288723049000168 ], [ 117.41391035200013, 3.304836330000114 ], [ 117.42090905000009, 3.322414455000171 ], [ 117.43336022200015, 3.33641185100015 ], [ 117.44988040500027, 3.343939520000106 ], [ 117.46843509200028, 3.345282294000185 ], [ 117.48707116000014, 3.341457424000225 ], [ 117.50359134200028, 3.333644924000225 ], [ 117.52084394600013, 3.324530341000241 ], [ 117.52784264400009, 3.31736888200021 ], [ 117.53028405000009, 3.305650132000153 ] ] ], [ [ [ 106.29200280000015, 3.316555080000228 ], [ 106.2939559250002, 3.281073309000135 ], [ 106.29200280000015, 3.271551825000131 ], [ 106.2856551440002, 3.263861395000106 ], [ 106.28158613400012, 3.267523505000099 ], [ 106.27963300900012, 3.277655341000127 ], [ 106.27906334700003, 3.288967190000221 ], [ 106.27670332100018, 3.292385158000229 ], [ 106.27173912900014, 3.293524481000247 ], [ 106.26685631600014, 3.292385158000229 ], [ 106.26465905000009, 3.288967190000221 ], [ 106.26547285200007, 3.281805731000134 ], [ 106.27515709700015, 3.254217841000127 ], [ 106.28028405000003, 3.247503973000107 ], [ 106.28288821700016, 3.240871486000117 ], [ 106.27906334700003, 3.230617580000114 ], [ 106.23047936300009, 3.257961330000171 ], [ 106.23536217500015, 3.262640692000105 ], [ 106.2368270190002, 3.26854075700021 ], [ 106.2368270190002, 3.285223700000245 ], [ 106.2467554050001, 3.30634186400016 ], [ 106.24976647200009, 3.326646226000264 ], [ 106.2548934250002, 3.345160223000107 ], [ 106.27084394600024, 3.360988674000112 ], [ 106.29200280000015, 3.368150132000096 ], [ 106.29737389400009, 3.358303127000227 ], [ 106.29200280000015, 3.316555080000228 ] ] ], [ [ [ 117.65992272200015, 3.255275783000116 ], [ 117.64844811300031, 3.246039130000156 ], [ 117.63795006600026, 3.248724677000212 ], [ 117.63331139400032, 3.268215236000174 ], [ 117.62484785200002, 3.283270575000188 ], [ 117.57178795700008, 3.313137111000117 ], [ 117.55640709700003, 3.331854559000192 ], [ 117.54363040500016, 3.354803778000189 ], [ 117.53467858200008, 3.37938060100015 ], [ 117.5312606130002, 3.403143622000187 ], [ 117.54151451900009, 3.428452867000203 ], [ 117.56666100400014, 3.438421942000218 ], [ 117.62525475400014, 3.437689520000163 ], [ 117.64047285200002, 3.436509507000153 ], [ 117.65699303500014, 3.433539130000156 ], [ 117.67156009200028, 3.426988023000149 ], [ 117.68165123800009, 3.415513414000145 ], [ 117.68392988400012, 3.399603583000101 ], [ 117.68197675900012, 3.377508856000134 ], [ 117.6772567070002, 3.35643138200021 ], [ 117.66537519600024, 3.329291083000157 ], [ 117.66732832100013, 3.271551825000131 ], [ 117.65992272200015, 3.255275783000116 ] ] ], [ [ [ 117.8960067070002, 3.468410549000168 ], [ 117.89128665500004, 3.455633856000247 ], [ 117.87745201900032, 3.459947007000153 ], [ 117.8261824880002, 3.494086005000213 ], [ 117.81885826900009, 3.511623440000108 ], [ 117.78549238400012, 3.538478908000229 ], [ 117.77759850400014, 3.558417059000135 ], [ 117.78492272200015, 3.581976630000213 ], [ 117.80372155000009, 3.591050523000206 ], [ 117.82699629000024, 3.588080145000106 ], [ 117.84791100400003, 3.575425523000206 ], [ 117.86304772200015, 3.559027411000216 ], [ 117.87663821700005, 3.539780992000146 ], [ 117.88721764400009, 3.518947658000172 ], [ 117.89389082100013, 3.497503973000221 ], [ 117.89551842500009, 3.486273505000213 ], [ 117.8960067070002, 3.468410549000168 ] ] ], [ [ [ 117.50619550900001, 3.502142645000163 ], [ 117.51392662900025, 3.495306708000214 ], [ 117.51710045700031, 3.486273505000213 ], [ 117.51726321700028, 3.47703685100015 ], [ 117.49675540500004, 3.455552476000264 ], [ 117.45582116000003, 3.464260158000229 ], [ 117.37305748800009, 3.497503973000221 ], [ 117.2876082690002, 3.497503973000221 ], [ 117.27076256600014, 3.500189520000106 ], [ 117.2548934250002, 3.507066148000149 ], [ 117.24089603000027, 3.516180731000134 ], [ 117.22974694100003, 3.525376695000205 ], [ 117.22201582100013, 3.535549221000224 ], [ 117.21778405000009, 3.547837632000096 ], [ 117.21802819100014, 3.560288804000209 ], [ 117.22413170700031, 3.570990302000155 ], [ 117.23292076900009, 3.578680731000247 ], [ 117.24447675900012, 3.586493231000247 ], [ 117.25709069100003, 3.592027085000154 ], [ 117.26840254000012, 3.592922268000223 ], [ 117.27857506600003, 3.588527736000287 ], [ 117.29712975400014, 3.575873114000217 ], [ 117.30795332100013, 3.573187567000105 ], [ 117.39372806100027, 3.566392320000205 ], [ 117.4082137380002, 3.556097723000107 ], [ 117.43531334700026, 3.524603583000157 ], [ 117.4516707690002, 3.517971096000224 ], [ 117.46176191500012, 3.515936591000184 ], [ 117.48210696700016, 3.506984768000166 ], [ 117.50619550900001, 3.502142645000163 ] ] ], [ [ [ 125.62728925900024, 3.518215236000174 ], [ 125.63892662900014, 3.514349677000155 ], [ 125.64437910200013, 3.514878648000149 ], [ 125.64698326900009, 3.492010809000135 ], [ 125.65251712300017, 3.46963125200017 ], [ 125.65552819100003, 3.461737372000187 ], [ 125.66342207100001, 3.446112372000243 ], [ 125.66578209700015, 3.438788153000246 ], [ 125.6645613940002, 3.430894273000263 ], [ 125.65951582100013, 3.424790757000096 ], [ 125.62435957100024, 3.397650458000214 ], [ 125.61719811300009, 3.395086981000134 ], [ 125.60271243600016, 3.398098049000225 ], [ 125.59913170700008, 3.405503648000206 ], [ 125.59839928500014, 3.415472723000221 ], [ 125.59302819100014, 3.426092841000184 ], [ 125.57203209700003, 3.438137111000174 ], [ 125.52418053500003, 3.450588283000116 ], [ 125.5073348320002, 3.463324286000216 ], [ 125.50505618600016, 3.480780341000127 ], [ 125.51392662900003, 3.529120184000192 ], [ 125.51758873800031, 3.539048570000148 ], [ 125.52076256600014, 3.544012762000193 ], [ 125.5210067070002, 3.576971747000243 ], [ 125.51734459700003, 3.582342841000184 ], [ 125.49366295700008, 3.594387111000231 ], [ 125.44214928500003, 3.63776276200025 ], [ 125.43051191500012, 3.65135325700021 ], [ 125.42115319100014, 3.668036200000245 ], [ 125.4165145190002, 3.687567450000131 ], [ 125.4184676440002, 3.70978424700013 ], [ 125.44206790500004, 3.736558335000098 ], [ 125.47779381600026, 3.730780341000241 ], [ 125.51295006600014, 3.707912502000227 ], [ 125.53451582100013, 3.683050848000221 ], [ 125.56999759200016, 3.628119208000101 ], [ 125.57545006600026, 3.610785223000221 ], [ 125.57455488400012, 3.604396877000113 ], [ 125.57300866000003, 3.598456122000187 ], [ 125.57260175900001, 3.591253973000164 ], [ 125.57545006600026, 3.580633856000134 ], [ 125.57976321700005, 3.575873114000217 ], [ 125.59652754000001, 3.560980536000216 ], [ 125.6035262380002, 3.552720445000261 ], [ 125.6137801440002, 3.525376695000205 ], [ 125.61654707100013, 3.523016669000128 ], [ 125.62728925900024, 3.518215236000174 ] ] ], [ [ [ 126.83791507200021, 3.743390532000262 ], [ 126.81153026000004, 3.731861627000171 ], [ 126.76538184400022, 3.772892250000211 ], [ 126.739012355, 3.823800694000113 ], [ 126.74399309000012, 3.853385379000201 ], [ 126.78026560600017, 3.84355403200027 ], [ 126.81158808600003, 3.823865680000154 ], [ 126.83300521500018, 3.795958589000122 ], [ 126.84288583400007, 3.779539954000256 ], [ 126.85605696000005, 3.758195233000151 ], [ 126.83791507200021, 3.743390532000262 ] ] ], [ [ [ 117.76677493600005, 3.874009507000096 ], [ 117.78760826900032, 3.866685289000202 ], [ 117.80738366000026, 3.856146552000155 ], [ 117.82911217500032, 3.841253973000107 ], [ 117.84424889400032, 3.827541408000172 ], [ 117.85287519600013, 3.812404690000278 ], [ 117.84620201900009, 3.799139716000127 ], [ 117.8315535820002, 3.798081773000263 ], [ 117.81226647200003, 3.804673570000261 ], [ 117.78402754000001, 3.819647528000189 ], [ 117.7695418630002, 3.831244208000101 ], [ 117.7446395190002, 3.85789622600015 ], [ 117.7295028000002, 3.86806875200017 ], [ 117.73617597700013, 3.867987372000187 ], [ 117.75521894600013, 3.873358466000184 ], [ 117.76295006600026, 3.874497789000202 ], [ 117.76677493600005, 3.874009507000096 ] ] ], [ [ [ 126.696088573, 3.812256189000152 ], [ 126.67792364500019, 3.812235590000114 ], [ 126.66968603400028, 3.85495674800012 ], [ 126.66143107800008, 3.897676902000171 ], [ 126.66639148400009, 3.930547457000216 ], [ 126.64821454700007, 3.951896161000207 ], [ 126.62672243600002, 3.965031270000168 ], [ 126.62009585600015, 3.991323517000183 ], [ 126.61346434300003, 4.025835761000224 ], [ 126.61510771900021, 4.043914712000117 ], [ 126.64322211600017, 4.027484228000105 ], [ 126.65654675900009, 3.981478084000116 ], [ 126.70107204300018, 3.933851241000184 ], [ 126.71262861800005, 3.920714118000262 ], [ 126.71427584700007, 3.901001649000193 ], [ 126.70105399100032, 3.879630668000232 ], [ 126.68785141700016, 3.853330733000121 ], [ 126.696088573, 3.812256189000152 ] ] ], [ [ [ 117.7055770190002, 3.987494208000157 ], [ 117.66529381600026, 3.983058986000174 ], [ 117.62029056100005, 4.015326239000217 ], [ 117.59449303500003, 4.063869533000172 ], [ 117.61280358200008, 4.10822174700013 ], [ 117.64633222700013, 4.140814520000276 ], [ 117.6611434250002, 4.14923737200013 ], [ 117.67359459700003, 4.140611070000318 ], [ 117.69874108200031, 4.111314195000205 ], [ 117.74122155000009, 4.088283596000224 ], [ 117.7500106130002, 4.080308335000154 ], [ 117.75318444100003, 4.05182526200025 ], [ 117.74105879000001, 4.025620835000211 ], [ 117.7055770190002, 3.987494208000157 ] ] ], [ [ [ 108.30681399800005, 4.086493231000134 ], [ 108.36540774800011, 4.015448309000192 ], [ 108.3913680350002, 3.997015692000161 ], [ 108.39616946700011, 3.990912177000269 ], [ 108.39820397200009, 3.976467190000108 ], [ 108.39771569100014, 3.949367580000171 ], [ 108.40357506600009, 3.936346747000243 ], [ 108.39283287900008, 3.924383856000134 ], [ 108.37826582100024, 3.915757554000152 ], [ 108.36597741, 3.905462958000157 ], [ 108.36207116000008, 3.888576565000165 ], [ 108.37208092500009, 3.89354075700021 ], [ 108.38013756600009, 3.891180731000134 ], [ 108.39616946700011, 3.874823309000135 ], [ 108.4065047540002, 3.884588934000135 ], [ 108.40626061300014, 3.874335028000132 ], [ 108.38933353000016, 3.822170315000108 ], [ 108.38257897200015, 3.809881903000132 ], [ 108.34107506600014, 3.756293036000216 ], [ 108.33326256600014, 3.74042389500022 ], [ 108.32789147199998, 3.724066473000221 ], [ 108.32398522200026, 3.692694403000246 ], [ 108.31763756600014, 3.68378327000022 ], [ 108.30005944100014, 3.676255601000264 ], [ 108.28516686300014, 3.674465236000174 ], [ 108.25359134200016, 3.676988023000263 ], [ 108.23853600400008, 3.676255601000264 ], [ 108.2236434250002, 3.67039622600015 ], [ 108.19499759200016, 3.652289130000099 ], [ 108.18384850400014, 3.648342190000221 ], [ 108.1744897800001, 3.651922919000128 ], [ 108.14226321700022, 3.676255601000264 ], [ 108.10482832100013, 3.690578518000223 ], [ 108.09449303500008, 3.69619375200017 ], [ 108.1181746750002, 3.725775458000101 ], [ 108.12183678499997, 3.734605210000098 ], [ 108.12501061300003, 3.747870184000192 ], [ 108.13233483200003, 3.752183335000098 ], [ 108.14047285200013, 3.751776434000306 ], [ 108.1460067070002, 3.750718492000146 ], [ 108.16488691500018, 3.757269598000221 ], [ 108.1713973320002, 3.771470445000205 ], [ 108.17554772200003, 3.785834052000212 ], [ 108.1870223320002, 3.792303778000132 ], [ 108.20248457100013, 3.792466539000202 ], [ 108.21363366000003, 3.791164455000114 ], [ 108.22437584700003, 3.785345770000106 ], [ 108.23853600400008, 3.772406317000218 ], [ 108.26685631600009, 3.738755601000207 ], [ 108.28003991000008, 3.731512762000193 ], [ 108.27759850400003, 3.745062567000161 ], [ 108.26238040500004, 3.792303778000132 ], [ 108.25733483200014, 3.795355536000216 ], [ 108.24887129000007, 3.809312242000203 ], [ 108.24537194099997, 3.81346263200021 ], [ 108.23682701900015, 3.815008856000247 ], [ 108.20753014400003, 3.81346263200021 ], [ 108.18034915500021, 3.816839911000159 ], [ 108.10336347700024, 3.84589264500022 ], [ 108.07154381600009, 3.852240302000212 ], [ 108.06234785200024, 3.855943101000264 ], [ 108.05298912900008, 3.864650783000286 ], [ 108.04476972700019, 3.877020575000188 ], [ 108.03003991000014, 3.908880927000212 ], [ 108.02808678500008, 3.917222398000206 ], [ 108.0261336600002, 3.932928778000189 ], [ 108.02344811300014, 3.941717841000241 ], [ 108.01685631599997, 3.946763414000145 ], [ 108.00993899800017, 3.951076565000108 ], [ 108.00513756600009, 3.957464911000216 ], [ 108.00391686300009, 3.964341539000202 ], [ 108.00513756600009, 3.987494208000157 ], [ 108.00212649800017, 3.997626044000185 ], [ 107.99545332100018, 4.002264716000127 ], [ 107.98853600400014, 4.005601304000152 ], [ 107.98462975400003, 4.012030341000184 ], [ 107.98780358200008, 4.020697333000157 ], [ 107.99724368600027, 4.034247137000193 ], [ 108.02247155000009, 4.063544012000136 ], [ 108.03223717500009, 4.069973049000168 ], [ 108.04151451900015, 4.070949611000117 ], [ 108.05054772199998, 4.07078685100015 ], [ 108.0603133470002, 4.074123440000108 ], [ 108.06666100400003, 4.080145575000188 ], [ 108.08033287899997, 4.097235419000242 ], [ 108.08423912900008, 4.100775458000157 ], [ 108.09449303500008, 4.105373440000278 ], [ 108.17025800900018, 4.179429429000209 ], [ 108.18197675900024, 4.204535223000221 ], [ 108.1955672540002, 4.220363674000225 ], [ 108.21159915499999, 4.235419012000193 ], [ 108.22486412900014, 4.244818427000098 ], [ 108.24244225399997, 4.230698960000098 ], [ 108.25025475400014, 4.211249091000241 ], [ 108.2522078790002, 4.159165757000096 ], [ 108.25733483200014, 4.130560614000217 ], [ 108.2707625660002, 4.112982489000217 ], [ 108.30681399800005, 4.086493231000134 ] ] ], [ [ [ 117.70360790399411, 4.16341454199312 ], [ 117.69711347700002, 4.169053453000231 ], [ 117.6440535820002, 4.215236721000167 ], [ 117.64014733200008, 4.227443752000227 ], [ 117.64763431100005, 4.240627346000167 ], [ 117.66553795700008, 4.253119208000101 ], [ 117.6860457690002, 4.262844143000109 ], [ 117.7016707690002, 4.267523505000213 ], [ 117.72022545700031, 4.266424872000187 ], [ 117.75635826900009, 4.254584052000155 ], [ 117.77442467500009, 4.251654364000217 ], [ 117.78541100400014, 4.246649481000247 ], [ 117.79493248800031, 4.235256252000227 ], [ 117.80827884200005, 4.214056708000101 ], [ 117.81771894600001, 4.204738674000282 ], [ 117.82634524800017, 4.199408270000106 ], [ 117.83619225400014, 4.196966864000103 ], [ 117.84986412900014, 4.196356512000193 ], [ 117.89625084700015, 4.181341864000103 ], [ 117.90064537900014, 4.171454169000242 ], [ 117.90072675900012, 4.171291408000229 ], [ 117.90703902788994, 4.156683014952591 ], [ 117.9121199880002, 4.144924221000224 ], [ 117.91822350400014, 4.100043036000102 ], [ 117.93482506600014, 4.059881903000303 ], [ 117.90137780000009, 4.036688544000185 ], [ 117.88705488400012, 4.031927802000098 ], [ 117.8725692070002, 4.031561591000241 ], [ 117.83855228000004, 4.040187893000223 ], [ 117.81910241000014, 4.068670966000184 ], [ 117.76270592500009, 4.100734768000166 ], [ 117.73943118600016, 4.132310289000145 ], [ 117.70360790399411, 4.16341454199312 ] ] ], [ [ [ 118.68165123800031, 4.437079169000185 ], [ 118.6748153000002, 4.436590887000136 ], [ 118.66920006600014, 4.439846096000224 ], [ 118.66920006600014, 4.443060614000103 ], [ 118.6679793630002, 4.463934637000193 ], [ 118.66325931100027, 4.46922435100015 ], [ 118.65121504000012, 4.479071356000191 ], [ 118.6474715500002, 4.484442450000131 ], [ 118.6440535820002, 4.495306708000214 ], [ 118.64763431100005, 4.498032945000261 ], [ 118.65805097700002, 4.498195705000228 ], [ 118.66065514400009, 4.498195705000228 ], [ 118.67514082100013, 4.498358466000127 ], [ 118.72624759200016, 4.491888739000103 ], [ 118.74878991000014, 4.485500393000166 ], [ 118.76002037900003, 4.471380927000098 ], [ 118.75611412900014, 4.45722077000022 ], [ 118.73308353000016, 4.450873114000103 ], [ 118.6958113940002, 4.450873114000103 ], [ 118.68165123800031, 4.437079169000185 ] ] ], [ [ [ 126.87501061300009, 4.494330145000163 ], [ 126.87728925900012, 4.478013414000202 ], [ 126.87720787900014, 4.478176174000168 ], [ 126.88477623800031, 4.456854559000192 ], [ 126.87907962300005, 4.435858466000184 ], [ 126.86890709700003, 4.414374091000241 ], [ 126.86353600400014, 4.391913153000246 ], [ 126.85912907900001, 4.367569102000118 ], [ 126.87070871900005, 4.331393328000104 ], [ 126.9004258130002, 4.306702378000125 ], [ 126.92212975400003, 4.282049872000187 ], [ 126.86353600400014, 4.210638739000217 ], [ 126.80987476200005, 4.157243649000236 ], [ 126.80830740000022, 4.086611311000127 ], [ 126.80997871500028, 4.037348902000247 ], [ 126.79843750500015, 4.017644473000189 ], [ 126.75889699200013, 3.993006460000231 ], [ 126.71452884200005, 4.011623440000165 ], [ 126.67641998500005, 4.004482550000148 ], [ 126.66476202300021, 4.034055368000225 ], [ 126.67628605300013, 4.060346120000247 ], [ 126.69118589000016, 4.078410261000158 ], [ 126.72092916300016, 4.096468192000259 ], [ 126.75869722000004, 4.18520012900018 ], [ 126.80320654700017, 4.222968111000171 ], [ 126.79163159300003, 4.241055919000189 ], [ 126.77677227500021, 4.245998363000183 ], [ 126.75860813200018, 4.25094311200013 ], [ 126.71070033200021, 4.264137215000176 ], [ 126.70735641200008, 4.287164127000096 ], [ 126.71565150200013, 4.308494709000229 ], [ 126.70720462300005, 4.333563544000242 ], [ 126.70337975400003, 4.343247789000145 ], [ 126.69996178500014, 4.355454820000205 ], [ 126.69922936300009, 4.367905992000317 ], [ 126.69720714800019, 4.39742678000016 ], [ 126.70540705600013, 4.423747300000116 ], [ 126.73951256600014, 4.473089911000102 ], [ 126.74073326900009, 4.480169989000217 ], [ 126.74122155000009, 4.491888739000103 ], [ 126.74008222700013, 4.501695054000152 ], [ 126.7348738940002, 4.523871161000102 ], [ 126.73373457100013, 4.535874742000203 ], [ 126.74439537900003, 4.545599677000098 ], [ 126.76872806100027, 4.550279039000202 ], [ 126.79639733200008, 4.55048248900016 ], [ 126.81625410200013, 4.546454169000299 ], [ 126.82984459700026, 4.537054755000099 ], [ 126.83334394600013, 4.527736721000224 ], [ 126.83513431100005, 4.517523505000156 ], [ 126.84302819100003, 4.50486888200021 ], [ 126.85572350400025, 4.498277085000211 ], [ 126.86695397200015, 4.497992255000099 ], [ 126.87501061300009, 4.494330145000163 ] ] ], [ [ [ 118.4931746750002, 4.661851304000095 ], [ 118.51026451900009, 4.648871161000159 ], [ 118.52377363400001, 4.66571686400016 ], [ 118.54948978000004, 4.665187893000223 ], [ 118.57781009200028, 4.65509674700013 ], [ 118.5996199880002, 4.642645575000245 ], [ 118.5996199880002, 4.635199286000216 ], [ 118.58480879000012, 4.634019273000206 ], [ 118.57536868600005, 4.627386786000272 ], [ 118.57105553500003, 4.616034247000187 ], [ 118.5722762380002, 4.601141669000242 ], [ 118.55298912900014, 4.618801174000225 ], [ 118.54810631600003, 4.621568101000264 ], [ 118.54297936300031, 4.616929429000152 ], [ 118.5395613940002, 4.607855536000159 ], [ 118.53516686300031, 4.601304429000209 ], [ 118.52735436300031, 4.60455963700025 ], [ 118.51197350400014, 4.616359768000223 ], [ 118.49561608200008, 4.62392812700017 ], [ 118.47999108200031, 4.627875067000218 ], [ 118.46656334700015, 4.629055080000285 ], [ 118.46265709700003, 4.630804755000156 ], [ 118.45362389400009, 4.639471747000187 ], [ 118.44890384200016, 4.642645575000245 ], [ 118.41472415500016, 4.648871161000159 ], [ 118.34644616000003, 4.669907945000148 ], [ 118.34644616000003, 4.676214911000272 ], [ 118.4253035820002, 4.676214911000272 ], [ 118.43628991000003, 4.679266669000128 ], [ 118.44320722700002, 4.686102606000247 ], [ 118.44898522200015, 4.693182684000249 ], [ 118.45630944100014, 4.697251695000205 ], [ 118.4760848320002, 4.693793036000102 ], [ 118.48511803500003, 4.679429429000095 ], [ 118.4931746750002, 4.661851304000095 ] ] ], [ [ [ 107.9934188160002, 4.691310940000278 ], [ 107.98121178500014, 4.683661200000245 ], [ 107.95899498800014, 4.684393622000243 ], [ 107.94646243600005, 4.686712958000157 ], [ 107.93734785200019, 4.691392320000261 ], [ 107.9355574880002, 4.694525458000101 ], [ 107.93531334700015, 4.698391018000223 ], [ 107.9367781910002, 4.703070380000156 ], [ 107.9406030610001, 4.708644924000225 ], [ 107.9519149100002, 4.717678127000227 ], [ 107.96664472700007, 4.726141669000128 ], [ 107.9791772800001, 4.735988674000112 ], [ 107.98462975400003, 4.74876536700026 ], [ 107.98633873800003, 4.755804755000213 ], [ 107.99122155000009, 4.763983466000241 ], [ 107.99781334700009, 4.770453192000161 ], [ 108.00513756600009, 4.772365627000227 ], [ 108.0127059250002, 4.768133856000247 ], [ 108.01197350400008, 4.760931708000157 ], [ 108.00782311300014, 4.752630927000155 ], [ 108.00513756600009, 4.745062567000105 ], [ 108.00049889400015, 4.709133205000228 ], [ 107.9934188160002, 4.691310940000278 ] ] ], [ [ [ 127.14576256600014, 4.752183335000098 ], [ 127.13599694100003, 4.740383205000228 ], [ 127.12305748800009, 4.752508856000134 ], [ 127.12142988400012, 4.768500067000105 ], [ 127.12403405000009, 4.772040106000191 ], [ 127.1303817070002, 4.77440013200021 ], [ 127.13917076900009, 4.76658763200021 ], [ 127.14576256600014, 4.752183335000098 ] ] ], [ [ [ 119.84978274800017, 4.796861070000205 ], [ 119.8339949880002, 4.796616929000209 ], [ 119.8193465500002, 4.803859768000223 ], [ 119.81234785200024, 4.816839911000102 ], [ 119.83090254000012, 4.820949611000174 ], [ 119.85377037900014, 4.808254299000112 ], [ 119.85767662900025, 4.798570054000209 ], [ 119.84978274800017, 4.796861070000205 ] ] ], [ [ [ 119.46705162900025, 4.666449286000216 ], [ 119.45655358200031, 4.655707098000107 ], [ 119.45655358200031, 4.71775950700021 ], [ 119.46273847700002, 4.77578359600011 ], [ 119.45687910200024, 4.842718817000105 ], [ 119.44849694100014, 4.874416408000116 ], [ 119.43539472700013, 4.902777411000216 ], [ 119.44703209700003, 4.905503648000263 ], [ 119.4585067070002, 4.901800848000164 ], [ 119.4687606130002, 4.893703518000223 ], [ 119.47592207100001, 4.883775132000153 ], [ 119.47934004000012, 4.875962632000153 ], [ 119.48145592500032, 4.867743231000134 ], [ 119.4829207690002, 4.859361070000148 ], [ 119.48324629000012, 4.850897528000132 ], [ 119.48658287900014, 4.83222077000022 ], [ 119.5009871750002, 4.799139716000127 ], [ 119.50440514400032, 4.782619533000229 ], [ 119.50359134200005, 4.764227606000191 ], [ 119.50082441500024, 4.748480536000216 ], [ 119.49659264400032, 4.733587958000101 ], [ 119.46705162900025, 4.666449286000216 ] ] ], [ [ [ 119.8369246750002, 4.862860419000242 ], [ 119.82105553500014, 4.862779039000259 ], [ 119.79859459700026, 4.879787502000227 ], [ 119.79037519600013, 4.905951239000103 ], [ 119.79314212300017, 4.921861070000318 ], [ 119.80437259200005, 4.927435614000217 ], [ 119.81568444100014, 4.922430731000247 ], [ 119.82146243600016, 4.914129950000131 ], [ 119.84262129000024, 4.904852606000247 ], [ 119.85075931100016, 4.887884833000101 ], [ 119.84986412900003, 4.873277085000268 ], [ 119.84205162900003, 4.865668036000102 ], [ 119.8369246750002, 4.862860419000242 ] ] ], [ [ [ 119.80795332100013, 5.058661200000245 ], [ 119.80103600400003, 5.05516185100015 ], [ 119.79656009200005, 5.05760325700021 ], [ 119.79224694100014, 5.055894273000206 ], [ 119.79029381600014, 5.053045966000127 ], [ 119.7861434250002, 5.046332098000107 ], [ 119.77466881600014, 5.041896877000227 ], [ 119.75212649800017, 5.036078192000105 ], [ 119.74577884200016, 5.04401276200025 ], [ 119.74870853000016, 5.062689520000106 ], [ 119.76929772200003, 5.097560940000221 ], [ 119.78296959700015, 5.110988674000168 ], [ 119.79835045700031, 5.121039130000213 ], [ 119.80600019600013, 5.118475653000132 ], [ 119.80551191500012, 5.105047919000185 ], [ 119.80713951900009, 5.093410549000112 ], [ 119.8105574880002, 5.082464911000216 ], [ 119.81251061300031, 5.069891669000128 ], [ 119.80795332100013, 5.058661200000245 ] ] ], [ [ [ 120.22022545700008, 5.269598700000245 ], [ 120.2275496750002, 5.26845937700017 ], [ 120.23568769600001, 5.271958726000264 ], [ 120.24390709700003, 5.273504950000131 ], [ 120.25196373800031, 5.26650625200017 ], [ 120.25294030000009, 5.251532294000185 ], [ 120.23764082100013, 5.190130927000155 ], [ 120.2324324880002, 5.150458075000131 ], [ 120.22681725400014, 5.129380601000207 ], [ 120.21656334700015, 5.114976304000209 ], [ 120.20199629000001, 5.119940497000187 ], [ 120.19117272200015, 5.126369533000116 ], [ 120.1845809250002, 5.136460679000152 ], [ 120.18238366000003, 5.15281810100015 ], [ 120.18873131600014, 5.182359117000146 ], [ 120.18962649800005, 5.196519273000263 ], [ 120.18238366000003, 5.204413153000189 ], [ 120.17595462300017, 5.202622789000202 ], [ 120.17310631600014, 5.195624091000241 ], [ 120.17156009200005, 5.187648830000171 ], [ 120.16871178500003, 5.183294989000103 ], [ 120.16358483200008, 5.182318427000155 ], [ 120.1455184250002, 5.183294989000103 ], [ 120.13795006600003, 5.187201239000217 ], [ 120.13054446700005, 5.196600653000246 ], [ 120.1245223320002, 5.20807526200025 ], [ 120.12094160200024, 5.218003648000149 ], [ 120.11052493600005, 5.203436591000241 ], [ 120.10816491000014, 5.170843817000161 ], [ 120.10043379000012, 5.15664297100011 ], [ 120.0859481130002, 5.150702216000127 ], [ 120.07097415500004, 5.153876044000185 ], [ 120.05697675900012, 5.159898179000152 ], [ 120.04574629000024, 5.163478908000172 ], [ 120.02540123800009, 5.160549221000167 ], [ 120.01742597700002, 5.152492580000114 ], [ 120.01351972700002, 5.141262111000231 ], [ 120.0048934250002, 5.128648179000152 ], [ 119.99773196700005, 5.126898505000156 ], [ 119.9882918630002, 5.127671617000203 ], [ 119.9804793630002, 5.126450914000145 ], [ 119.97706139400032, 5.118719794000128 ], [ 119.9702254570002, 5.087713934000135 ], [ 119.95411217500009, 5.075506903000246 ], [ 119.94336998800031, 5.078070380000156 ], [ 119.93425540500016, 5.085516669000128 ], [ 119.9223738940002, 5.087713934000135 ], [ 119.91431725400025, 5.082017320000261 ], [ 119.90015709700003, 5.063706773000206 ], [ 119.8916121750002, 5.059800523000263 ], [ 119.8603621750002, 5.059800523000263 ], [ 119.84717858200031, 5.054510809000135 ], [ 119.83814537900014, 5.048976955000171 ], [ 119.82984459700003, 5.048814195000205 ], [ 119.8193465500002, 5.059800523000263 ], [ 119.81690514400032, 5.072211005000213 ], [ 119.81910241000003, 5.106634833000214 ], [ 119.81251061300031, 5.122503973000164 ], [ 119.82178795700008, 5.130560614000217 ], [ 119.82943769600001, 5.134955145000106 ], [ 119.8647567070002, 5.146470445000205 ], [ 119.8955184250002, 5.161200262000136 ], [ 119.90186608200008, 5.166896877000113 ], [ 119.90796959700003, 5.169378973000107 ], [ 119.94271894600001, 5.190130927000155 ], [ 119.95671634200005, 5.214829820000318 ], [ 119.9648543630002, 5.222601630000099 ], [ 119.99626712300017, 5.227525132000153 ], [ 120.01986738400024, 5.236517645000163 ], [ 120.02849368600005, 5.238511460000211 ], [ 120.03614342500009, 5.241603908000116 ], [ 120.05258222700013, 5.258978583000214 ], [ 120.0629988940002, 5.259751695000205 ], [ 120.07007897200015, 5.25665924700013 ], [ 120.07683353000004, 5.254828192000218 ], [ 120.0869246750002, 5.258978583000214 ], [ 120.08871504000001, 5.263739325000302 ], [ 120.0932723320002, 5.282700914000202 ], [ 120.09742272200003, 5.290025132000096 ], [ 120.12419681100016, 5.305650132000096 ], [ 120.13379967500009, 5.317572333000214 ], [ 120.14625084700003, 5.323879299000168 ], [ 120.16879316500001, 5.332261460000154 ], [ 120.18783613400012, 5.345119533000229 ], [ 120.19857832100013, 5.349595445000205 ], [ 120.20875084700003, 5.347967841000184 ], [ 120.2143660820002, 5.340236721000167 ], [ 120.2163192070002, 5.329046942000105 ], [ 120.2163192070002, 5.276841539000259 ], [ 120.22022545700008, 5.269598700000245 ] ] ], [ [ [ 115.2592879570002, 5.291205145000163 ], [ 115.2417098320002, 5.272691148000149 ], [ 115.23194420700008, 5.273138739000103 ], [ 115.21225019600013, 5.284979559000192 ], [ 115.2041121750002, 5.283596096000167 ], [ 115.18425540500016, 5.267035223000107 ], [ 115.1591903000002, 5.252183335000154 ], [ 115.16089928500003, 5.266994533000116 ], [ 115.18913821700028, 5.34479401200025 ], [ 115.19727623800009, 5.354641018000166 ], [ 115.2260848320002, 5.381048895000163 ], [ 115.2417098320002, 5.387396552000155 ], [ 115.24854576900032, 5.365464585000154 ], [ 115.2597762380002, 5.315375067000161 ], [ 115.2592879570002, 5.291205145000163 ] ] ], [ [ [ 125.4233504570002, 5.377915757000096 ], [ 125.41871178500003, 5.368475653000246 ], [ 125.41163170700008, 5.368109442000218 ], [ 125.39909915500016, 5.371771552000212 ], [ 125.38062584700003, 5.370347398000149 ], [ 125.36378014400032, 5.367173570000261 ], [ 125.3515731130002, 5.371730861000117 ], [ 125.3432723320002, 5.380601304000152 ], [ 125.33423912900025, 5.387681382000096 ], [ 125.3335067070002, 5.392523505000099 ], [ 125.34205162900025, 5.400295315000108 ], [ 125.35816491000003, 5.422064520000163 ], [ 125.37680097700002, 5.431219794000242 ], [ 125.40479576900032, 5.430487372000187 ], [ 125.41871178500003, 5.425482489000274 ], [ 125.42221113400001, 5.420233466000184 ], [ 125.42457116000026, 5.407375393000223 ], [ 125.4233504570002, 5.377915757000096 ] ] ], [ [ [ 100.30982506600014, 5.450751044000128 ], [ 100.31853274800017, 5.435288804000095 ], [ 100.33399498800014, 5.426947333000101 ], [ 100.34343509200016, 5.417629299000112 ], [ 100.32520592500009, 5.383286851000207 ], [ 100.3208113940002, 5.3445498720003 ], [ 100.3166610040002, 5.326646226000207 ], [ 100.29224694100014, 5.280462958000101 ], [ 100.28874759200022, 5.26268138200021 ], [ 100.23471113400012, 5.272691148000149 ], [ 100.19499759200011, 5.27228424700013 ], [ 100.19361412900014, 5.270086981000191 ], [ 100.19271894600024, 5.267645575000188 ], [ 100.18970787900025, 5.26650625200017 ], [ 100.18433678500008, 5.268540757000153 ], [ 100.18002363400018, 5.273342190000165 ], [ 100.17896569100014, 5.277980861000174 ], [ 100.19271894600024, 5.285956122000243 ], [ 100.19613691500018, 5.299994208000214 ], [ 100.1911727220002, 5.35252513200021 ], [ 100.19312584700009, 5.399318752000227 ], [ 100.19092858200008, 5.408433335000211 ], [ 100.18628991000014, 5.41620514500022 ], [ 100.1816512380002, 5.422349351000207 ], [ 100.17945397200015, 5.426906643000109 ], [ 100.1816512380002, 5.43659088700025 ], [ 100.18523196700011, 5.444281317000105 ], [ 100.18588300900012, 5.451117255000156 ], [ 100.17945397200015, 5.458197333000101 ], [ 100.19206790500027, 5.462958075000188 ], [ 100.19711347700013, 5.457261460000211 ], [ 100.20118248800009, 5.448472398000206 ], [ 100.21062259200028, 5.443996486000287 ], [ 100.21859785200024, 5.446722723000164 ], [ 100.22445722700019, 5.452948309000135 ], [ 100.22934004000018, 5.459906317000105 ], [ 100.23471113400012, 5.464504299000225 ], [ 100.25375410200013, 5.469061591000184 ], [ 100.2740991550001, 5.468491929000095 ], [ 100.29330488400018, 5.46259186400016 ], [ 100.30982506600014, 5.450751044000128 ] ] ], [ [ [ 126.59937584700026, 5.553615627000227 ], [ 126.59546959700015, 5.548407294000128 ], [ 126.59115644600001, 5.557114976000264 ], [ 126.5986434250002, 5.565375067000105 ], [ 126.60287519600013, 5.564032294000128 ], [ 126.59937584700026, 5.553615627000227 ] ] ], [ [ [ 120.89779707100013, 5.498521226000264 ], [ 120.87989342500009, 5.495754299000168 ], [ 120.85084069100003, 5.505438544000242 ], [ 120.84343509200005, 5.510077216000184 ], [ 120.83301842500009, 5.521063544000242 ], [ 120.82374108200031, 5.533636786000159 ], [ 120.8198348320002, 5.543280341000184 ], [ 120.82439212300005, 5.553208726000207 ], [ 120.83529707100013, 5.562933661000216 ], [ 120.84888756600014, 5.570461330000228 ], [ 120.86068769600024, 5.574367580000114 ], [ 120.87305748800009, 5.572414455000228 ], [ 120.88998457100013, 5.557928778000132 ], [ 120.90455162900014, 5.538031317000218 ], [ 120.9091903000002, 5.519720770000163 ], [ 120.89779707100013, 5.498521226000264 ] ] ], [ [ [ 95.502696160000028, 5.605129299000112 ], [ 95.511241082000083, 5.603013414000259 ], [ 95.521250847000033, 5.609198309000135 ], [ 95.533702019000145, 5.62213776200025 ], [ 95.576182488000029, 5.631252346000167 ], [ 95.611582879000139, 5.626654364000217 ], [ 95.762217644000202, 5.576849677000212 ], [ 95.83961022200009, 5.528550523000206 ], [ 95.855479363000086, 5.522162177000098 ], [ 95.87256920700014, 5.519720770000163 ], [ 95.887543165000068, 5.512152411000216 ], [ 95.894379102000187, 5.493801174000168 ], [ 95.903575066000087, 5.450751044000128 ], [ 95.930430535000141, 5.414496161000216 ], [ 96.054942254000252, 5.313625393000166 ], [ 96.088063998000166, 5.295477606000247 ], [ 96.126231316000144, 5.281805731000134 ], [ 96.290537957000197, 5.258978583000214 ], [ 96.303965691000087, 5.25429922100011 ], [ 96.344411655000158, 5.232326565000165 ], [ 96.362152540000125, 5.22549062700017 ], [ 96.406586134000236, 5.217230536000159 ], [ 96.429453972000147, 5.218329169000185 ], [ 96.448496941000087, 5.228583075000245 ], [ 96.46631920700014, 5.235541083000214 ], [ 96.4863387380002, 5.229396877000227 ], [ 96.507090691000087, 5.218573309000135 ], [ 96.5273543630002, 5.211167710000154 ], [ 96.567637566000201, 5.208441473000107 ], [ 96.650563998, 5.216253973000107 ], [ 96.684906446000241, 5.22549062700017 ], [ 96.785131729000057, 5.259857206000163 ], [ 96.828379754000252, 5.280178127000113 ], [ 96.848643425000091, 5.276597398000206 ], [ 96.894379102000187, 5.262111721000281 ], [ 96.907237175000091, 5.26268138200021 ], [ 96.922862175000091, 5.269476630000099 ], [ 96.973399285000198, 5.273423570000148 ], [ 97.030198010000106, 5.251295019000224 ], [ 97.074338566000108, 5.238154799000313 ], [ 97.109640546000151, 5.2140924630001 ], [ 97.149344777000181, 5.198772387000133 ], [ 97.166026238000086, 5.173732815000108 ], [ 97.175954623000109, 5.161281643000223 ], [ 97.195160352000187, 5.15664297100011 ], [ 97.226552943000115, 5.146221342000104 ], [ 97.268368278000196, 5.155068075000145 ], [ 97.496836785000085, 5.251898505000213 ], [ 97.526215040000125, 5.242254950000188 ], [ 97.664398634000179, 5.073431708000214 ], [ 97.8300887380002, 4.938788153000303 ], [ 97.873871290000125, 4.918850002000227 ], [ 97.893809440999974, 4.905829169000128 ], [ 97.909190300000148, 4.889593817000105 ], [ 97.956065300000091, 4.808010158000229 ], [ 97.963226759000122, 4.789496161000216 ], [ 97.975352410000198, 4.706244208000214 ], [ 97.983734571000184, 4.678412177000155 ], [ 98.007009311000161, 4.633856512000136 ], [ 98.008799675000148, 4.623683986000117 ], [ 98.007090691000144, 4.597723700000131 ], [ 97.996836785000141, 4.570217190000108 ], [ 97.992523634000236, 4.553778387000193 ], [ 97.996836785000141, 4.546454169000299 ], [ 98.026215040000238, 4.553168036000216 ], [ 98.038828972000147, 4.551947333000214 ], [ 98.04802493599999, 4.539007880000099 ], [ 98.053965691000144, 4.553168036000216 ], [ 98.061289910000141, 4.554836330000228 ], [ 98.075938347000033, 4.546454169000299 ], [ 98.078868035000141, 4.540513414000145 ], [ 98.082855665000238, 4.536078192000161 ], [ 98.089610222000147, 4.532782294000128 ], [ 98.094004754000139, 4.533189195000148 ], [ 98.105723504000252, 4.53782786700026 ], [ 98.113536004000196, 4.539007880000099 ], [ 98.138194207000197, 4.534409898000149 ], [ 98.15967858200014, 4.522284247000243 ], [ 98.176117384000122, 4.504828192000218 ], [ 98.185801629000196, 4.484442450000131 ], [ 98.192149285000141, 4.484442450000131 ], [ 98.19516035200013, 4.489203192000218 ], [ 98.201914909999971, 4.494086005000213 ], [ 98.205739780000101, 4.498032945000261 ], [ 98.219004754000196, 4.484767971000167 ], [ 98.240570509000122, 4.456732489000217 ], [ 98.254161004000252, 4.443426825000131 ], [ 98.268321160000198, 4.432318427000098 ], [ 98.275563998000109, 4.425360419000128 ], [ 98.27857506600003, 4.415472723000221 ], [ 98.282481316000144, 4.364935614000217 ], [ 98.267751498000166, 4.292629299000225 ], [ 98.2675887380002, 4.28790924700013 ], [ 98.266368035000141, 4.211574611000174 ], [ 98.263438347000033, 4.202866929000209 ], [ 98.240489129000139, 4.190171617000146 ], [ 98.196136915000181, 4.175116278000132 ], [ 98.185801629000196, 4.169745184000192 ], [ 98.180023634000236, 4.158189195000148 ], [ 98.178070509000179, 4.141831773000149 ], [ 98.178965691000201, 4.10822174700013 ], [ 98.201833529999988, 4.132147528000246 ], [ 98.217051629000196, 4.144110419000185 ], [ 98.237071160000028, 4.14923737200013 ], [ 98.239593946000241, 4.153713283000172 ], [ 98.256846550000091, 4.171779690000108 ], [ 98.260915561000218, 4.173163153000246 ], [ 98.263031446000241, 4.177313544000185 ], [ 98.299489779999988, 4.089016018000223 ], [ 98.305674675000091, 4.080308335000154 ], [ 98.362966342000107, 4.087551174000168 ], [ 98.38445071700022, 4.086493231000134 ], [ 98.405772332000197, 4.078924872000187 ], [ 98.441661004000082, 4.057521877000227 ], [ 98.462657097000147, 4.053045966000184 ], [ 98.477224155000158, 4.046210028000132 ], [ 98.497569207000083, 4.01455312700017 ], [ 98.507985873000223, 4.004584052000212 ], [ 98.526377800000091, 4.003241278000132 ], [ 98.544200066000144, 4.005194403000132 ], [ 98.557790561000104, 4.000799872000243 ], [ 98.567881707000197, 3.966457424000225 ], [ 98.579600457000083, 3.953843492000146 ], [ 98.594899936000218, 3.943670966000298 ], [ 98.610362175000148, 3.936346747000243 ], [ 98.676619801000129, 3.914546933000281 ], [ 98.700268798000138, 3.875304345000131 ], [ 98.699717644000145, 3.833929755000156 ], [ 98.71062259200005, 3.803778387000136 ], [ 98.796581921000097, 3.725442643000179 ], [ 98.896582865000141, 3.681402408000224 ], [ 98.957530144000089, 3.671332098000107 ], [ 98.977906598000118, 3.657914212000151 ], [ 99.009251598000162, 3.635417095000264 ], [ 99.026885360000051, 3.629545113000233 ], [ 99.052357179000239, 3.621714496000095 ], [ 99.07391004800013, 3.608994286000097 ], [ 99.101340069000173, 3.582579167000233 ], [ 99.179760944000122, 3.546337688000165 ], [ 99.270038059000228, 3.484585772000116 ], [ 99.368174675000148, 3.407945054000095 ], [ 99.383962436000218, 3.398871161000102 ], [ 99.420909050000091, 3.391546942000275 ], [ 99.43327884200022, 3.382879950000245 ], [ 99.453868035000141, 3.360988674000112 ], [ 99.478770379000196, 3.346014716000184 ], [ 99.489756707000026, 3.336249091000184 ], [ 99.497569207000026, 3.309515692000218 ], [ 99.506032748000166, 3.29596588700025 ], [ 99.527679884000179, 3.271551825000131 ], [ 99.55811608200014, 3.244574286000102 ], [ 99.589366082000083, 3.227972723000221 ], [ 99.685313346999976, 3.204738674000112 ], [ 99.719493035000085, 3.191595770000163 ], [ 99.737559441000258, 3.189032294000128 ], [ 99.750743035000028, 3.18048737200013 ], [ 99.781586134000179, 3.120754299000225 ], [ 99.833994988000086, 3.072414455000228 ], [ 99.852875196000127, 3.047267971000224 ], [ 99.857920769000032, 3.011460679000152 ], [ 99.889984571000184, 3.018255927000155 ], [ 99.911306186000161, 3.000067450000245 ], [ 99.930511915000238, 2.975409247000243 ], [ 99.957286004000139, 2.963080145000106 ], [ 99.979502800000205, 2.948472398000206 ], [ 99.990244988000143, 2.914496161000159 ], [ 99.997894727000244, 2.799139716000184 ], [ 99.995860222000204, 2.785589911000216 ], [ 99.988617384000122, 2.772040106000247 ], [ 99.979014519000202, 2.75946686400016 ], [ 99.970713738000029, 2.745428778000189 ], [ 99.967133009000179, 2.727240302000212 ], [ 99.964610222000033, 2.719387111000117 ], [ 99.954356316000201, 2.703843492000203 ], [ 99.953461134000236, 2.696234442000161 ], [ 99.959239129000196, 2.687892971000224 ], [ 99.967621290000125, 2.684312242000146 ], [ 99.976735873000166, 2.682440497000243 ], [ 99.984141472000147, 2.678778387000136 ], [ 99.992686394000145, 2.66876862200013 ], [ 99.991709832000197, 2.664211330000171 ], [ 99.987640821000184, 2.660874742000146 ], [ 99.987640821000184, 2.654608466000184 ], [ 100.00879967500015, 2.620428778000132 ], [ 100.00586998800009, 2.609198309000192 ], [ 100.00798587300028, 2.60260651200025 ], [ 100.01392662900014, 2.601629950000245 ], [ 100.02247155000009, 2.607407945000205 ], [ 100.02816816500024, 2.61758047100011 ], [ 100.02515709700015, 2.624579169000242 ], [ 100.01889082100018, 2.630804755000213 ], [ 100.01563561300014, 2.638128973000107 ], [ 100.01449629000012, 2.671535549000168 ], [ 100.0122176440002, 2.678778387000136 ], [ 99.980235222000033, 2.697333075000188 ], [ 99.97396894600007, 2.703070380000213 ], [ 99.985687696000184, 2.71845123900016 ], [ 100.01856530000015, 2.731675523000263 ], [ 100.05494225400014, 2.727280992000203 ], [ 100.07699629000024, 2.68939850500027 ], [ 100.07781009200005, 2.675848700000302 ], [ 100.07601972700019, 2.648260809000192 ], [ 100.07699629000024, 2.634711005000099 ], [ 100.08838951900009, 2.601507880000099 ], [ 100.0900985040002, 2.590073960000154 ], [ 100.09595787900014, 2.570461330000114 ], [ 100.10971113400024, 2.545640367000146 ], [ 100.12582441500024, 2.53009674700013 ], [ 100.13851972700013, 2.53790924700013 ], [ 100.13746178500014, 2.551947333000101 ], [ 100.12142988400018, 2.588202216000184 ], [ 100.11744225400025, 2.603705145000106 ], [ 100.11744225400025, 2.645168361000117 ], [ 100.12110436300014, 2.663560289000202 ], [ 100.1311141290002, 2.681870835000211 ], [ 100.14380944100009, 2.695054429000152 ], [ 100.15943444100009, 2.703762111000117 ], [ 100.1792098320002, 2.708441473000221 ], [ 100.2033797540002, 2.709865627000113 ], [ 100.21062259200028, 2.706244208000271 ], [ 100.21257571700016, 2.697699286000216 ], [ 100.21338951900015, 2.687445380000213 ], [ 100.21745853000016, 2.678778387000136 ], [ 100.22486412900014, 2.673773505000099 ], [ 100.24244225400014, 2.666327216000127 ], [ 100.24838300900007, 2.662054755000156 ], [ 100.25131269600013, 2.65477122600015 ], [ 100.25464928500003, 2.627264716000127 ], [ 100.25806725400014, 2.619086005000156 ], [ 100.26693769600007, 2.60260651200025 ], [ 100.26880944100014, 2.596869208000157 ], [ 100.27369225400014, 2.590155341000241 ], [ 100.29957116000014, 2.572088934000135 ], [ 100.30836022200026, 2.569484768000109 ], [ 100.31218509200022, 2.56289297100011 ], [ 100.3136499360001, 2.55455149900024 ], [ 100.31373131600009, 2.554266669000128 ], [ 100.38168379000012, 2.355047919000242 ], [ 100.40528405000009, 2.312689520000163 ], [ 100.43433678500003, 2.273342190000221 ], [ 100.50733483200008, 2.199164130000213 ], [ 100.56104576900015, 2.156805731000134 ], [ 100.61784915500016, 2.129055080000228 ], [ 100.66618899800011, 2.13446686400016 ], [ 100.78907311300014, 2.048529364000103 ], [ 100.81275475400014, 2.039740302000098 ], [ 100.83228600400025, 2.016302802000155 ], [ 100.84083092500015, 2.010972398000149 ], [ 100.8557235040002, 1.999212958000101 ], [ 100.87240644600018, 1.971991278000189 ], [ 100.88624108200014, 1.940985419000242 ], [ 100.89210045700008, 1.91815827000022 ], [ 100.89551842500009, 1.886216539000145 ], [ 100.90593509199999, 1.856919664000202 ], [ 100.92310631600003, 1.83494700700021 ], [ 100.94727623800003, 1.825384833000214 ], [ 100.94190514400009, 1.841864325000188 ], [ 100.9460555350002, 1.861314195000261 ], [ 100.9482528000002, 1.882757880000213 ], [ 100.9370223320002, 1.904527085000098 ], [ 100.92408287900008, 1.92275625200017 ], [ 100.9157820970002, 1.944728908000116 ], [ 100.90577233200003, 1.990464585000211 ], [ 100.88550866000014, 2.036322333000214 ], [ 100.82349694099997, 2.115952867000146 ], [ 100.80323326900009, 2.161810614000217 ], [ 100.79997806100022, 2.208929755000213 ], [ 100.81275475400014, 2.249823309000192 ], [ 100.84115644600018, 2.280829169000185 ], [ 100.88591556100016, 2.298285223000164 ], [ 100.90788821700005, 2.299505927000098 ], [ 101.0503035820002, 2.291489976000207 ], [ 101.05860436300014, 2.280422268000223 ], [ 101.05648847700024, 2.241156317000161 ], [ 101.06739342500015, 2.21979401200025 ], [ 101.18181399800017, 2.145005601000207 ], [ 101.2999780610001, 2.046616929000209 ], [ 101.31714928500014, 2.024603583000101 ], [ 101.32585696700011, 2.002183335000098 ], [ 101.32699629000018, 1.981268622000243 ], [ 101.3234155610001, 1.938950914000202 ], [ 101.32667076900015, 1.916449286000216 ], [ 101.35132897200015, 1.86009349200026 ], [ 101.37761478000004, 1.773260809000249 ], [ 101.39730879000007, 1.736395575000188 ], [ 101.4270125660002, 1.709295966000184 ], [ 101.49447675900012, 1.678697007000153 ], [ 101.52963300900018, 1.67080312700017 ], [ 101.5673934250002, 1.655910549000225 ], [ 101.59156334700003, 1.654689846000224 ], [ 101.67351321700005, 1.669501044000185 ], [ 101.71168053500003, 1.671128648000206 ], [ 101.74919681100016, 1.661525783000116 ], [ 101.77857506600009, 1.644273179000152 ], [ 102.02149498800003, 1.43789297100011 ], [ 102.11817467500015, 1.386542059000192 ], [ 102.14332116000003, 1.357733466000127 ], [ 102.1533309250002, 1.311468817000161 ], [ 102.14698326900009, 1.273138739000217 ], [ 102.14722741000014, 1.247788804000152 ], [ 102.15674889400015, 1.236314195000148 ], [ 102.17310631600014, 1.230902411000159 ], [ 102.18726647200009, 1.217271226000207 ], [ 102.19727623800014, 1.199611721000224 ], [ 102.20101972700019, 1.181708075000188 ], [ 102.1931258470002, 1.10423411700026 ], [ 102.19418379000007, 1.065904039000145 ], [ 102.20850670700008, 1.024074611000231 ], [ 102.24008222700013, 0.982082424000282 ], [ 102.3210555350002, 0.917181708000101 ], [ 102.42505944100014, 0.804266669000128 ], [ 102.46387780000009, 0.774115302000212 ], [ 102.5095320970002, 0.750311591000184 ], [ 102.53223717500015, 0.742377020000163 ], [ 102.5519311860001, 0.738104559000249 ], [ 102.59498131600014, 0.736029364000217 ], [ 102.61638431100005, 0.738267320000261 ], [ 102.64795983200008, 0.748114325000131 ], [ 102.6671655610001, 0.750311591000184 ], [ 102.78126061300009, 0.730902411000102 ], [ 102.87712649800022, 0.726385809000135 ], [ 102.91814212300022, 0.707668361000287 ], [ 102.95378665499999, 0.675848700000131 ], [ 103.05632571700005, 0.558294989000217 ], [ 103.08375084700009, 0.515570380000213 ], [ 103.09229576900015, 0.469183661000102 ], [ 103.07471764400009, 0.442328192000161 ], [ 103.03728274800017, 0.42064036700026 ], [ 102.96143639400009, 0.387193101000207 ], [ 102.92123457100013, 0.357367255000156 ], [ 102.89909915500021, 0.344183661000216 ], [ 102.86150149800022, 0.335760809000135 ], [ 102.746267123, 0.277655341000184 ], [ 102.73243248800009, 0.266506252000283 ], [ 102.71566816500007, 0.257635809000192 ], [ 102.6460067070002, 0.242621161000102 ], [ 102.62769616000014, 0.234320380000099 ], [ 102.61988366000014, 0.229478257000153 ], [ 102.61198978, 0.222154039000202 ], [ 102.59180748800009, 0.186265367000146 ], [ 102.58187910200013, 0.181097723000164 ], [ 102.5549422540002, 0.186428127000113 ], [ 102.53663170700014, 0.19977448100019 ], [ 102.50269616000008, 0.236395575000131 ], [ 102.48585045700008, 0.242743231000247 ], [ 102.45997155000015, 0.247503973000164 ], [ 102.4372664720002, 0.249172268000109 ], [ 102.43043053500008, 0.246323960000154 ], [ 102.43962649800005, 0.239243882000153 ], [ 102.44939212300028, 0.236476955000114 ], [ 102.47201582100007, 0.236395575000131 ], [ 102.48072350400014, 0.234279690000108 ], [ 102.48658287900008, 0.228908596000167 ], [ 102.49586022200009, 0.215969143000279 ], [ 102.51783287900025, 0.192572333000101 ], [ 102.54574629000012, 0.169134833000101 ], [ 102.57789147200009, 0.158514716000241 ], [ 102.61198978, 0.173651434000135 ], [ 102.61898847700024, 0.181626695000205 ], [ 102.62794030000009, 0.195624091000184 ], [ 102.63306725400008, 0.201646226000264 ], [ 102.64437910200007, 0.209540106000247 ], [ 102.66773522200009, 0.219183661000102 ], [ 102.67774498800014, 0.22557200700021 ], [ 102.69548587300017, 0.232082424000225 ], [ 102.74154707100013, 0.226629950000131 ], [ 102.76343834700003, 0.228949286000159 ], [ 102.81820722700013, 0.253729559000135 ], [ 102.8859155610001, 0.26141998900016 ], [ 102.90267988400012, 0.267767645000106 ], [ 102.97291100400025, 0.313137111000174 ], [ 102.99244225400014, 0.318304755000156 ], [ 103.00757897200003, 0.324652411000102 ], [ 103.05762780000003, 0.372951565000164 ], [ 103.07593834700009, 0.383002020000106 ], [ 103.09888756600009, 0.391791083000157 ], [ 103.12256920700014, 0.397935289000145 ], [ 103.14356530000015, 0.400213934000135 ], [ 103.1662703790002, 0.40790436400016 ], [ 103.18132571700011, 0.426418361000174 ], [ 103.20150800900024, 0.469183661000102 ], [ 103.22364342500015, 0.488430080000114 ], [ 103.28012129000018, 0.498602606000134 ], [ 103.30811608200008, 0.513169664000202 ], [ 103.33578535200007, 0.531683661000216 ], [ 103.36215254000018, 0.536281643000166 ], [ 103.38990319100009, 0.530015367000203 ], [ 103.42123457100018, 0.516302802000098 ], [ 103.48096764400009, 0.482326565000221 ], [ 103.5410262380002, 0.434637762000136 ], [ 103.58765709700026, 0.376532294000185 ], [ 103.60629316500018, 0.310858466000184 ], [ 103.61752363400007, 0.33026764500022 ], [ 103.62501061300003, 0.339829820000261 ], [ 103.63428795700008, 0.34564850500027 ], [ 103.64527428500014, 0.345282294000242 ], [ 103.65577233200003, 0.340399481000247 ], [ 103.66488691500018, 0.334702867000203 ], [ 103.69019616000008, 0.325995184000135 ], [ 103.7111922540002, 0.311468817000161 ], [ 103.73047936300003, 0.29344310100015 ], [ 103.74341881600014, 0.277329820000148 ], [ 103.7600203790002, 0.239488023000206 ], [ 103.80046634200016, 0.034572658000172 ], [ 103.80836022200009, 0.023504950000131 ], [ 103.81397545700014, 0.018866278000189 ], [ 103.81128991000003, 0.008530992000146 ], [ 103.80176842500015, -0.00725676899998 ], [ 103.79151451900009, -0.012546481999834 ], [ 103.77833092500015, -0.01311614399981 ], [ 103.7565210300001, -0.010674737999864 ], [ 103.67115319099997, -0.017429294999886 ], [ 103.66374759200016, -0.021742445999905 ], [ 103.66423587300017, -0.040541273999963 ], [ 103.65748131600003, -0.044732354999894 ], [ 103.64470462300011, -0.045993747999887 ], [ 103.63624108200014, -0.048028252999814 ], [ 103.6291610040002, -0.048394463999841 ], [ 103.61988366000014, -0.044732354999894 ], [ 103.61182701900009, -0.036879164999903 ], [ 103.60075931100005, -0.016900322999902 ], [ 103.59205162900025, -0.010674737999864 ], [ 103.58619225400014, -0.011081638999883 ], [ 103.57699629000024, -0.013970635999897 ], [ 103.56869550900007, -0.018568617999847 ], [ 103.5647078790002, -0.024265231999948 ], [ 103.5669051440002, -0.035210869999901 ], [ 103.57341556099999, -0.037163994999844 ], [ 103.58082116, -0.037774346999925 ], [ 103.58578535200019, -0.044732354999894 ], [ 103.58423912900025, -0.053155205999872 ], [ 103.5803328790002, -0.063531182999839 ], [ 103.57813561300009, -0.07402923 ], [ 103.58716881600009, -0.094984632999854 ], [ 103.57585696700022, -0.104424737999977 ], [ 103.55827884199999, -0.11077239399981 ], [ 103.54420006600003, -0.113702080999815 ], [ 103.50798587300011, -0.11443450299987 ], [ 103.49439537900025, -0.118422132999854 ], [ 103.48902428500014, -0.130791924999869 ], [ 103.48308353, -0.159437757999854 ], [ 103.46680748800014, -0.183038018999866 ], [ 103.44304446700016, -0.202080987999977 ], [ 103.41456139400003, -0.216729424999869 ], [ 103.3014429050001, -0.237562757999967 ], [ 103.27051842500009, -0.257582289999903 ], [ 103.28711998800014, -0.257745049999869 ], [ 103.31666100400008, -0.262872002999814 ], [ 103.33253014400003, -0.263848565999865 ], [ 103.34986412900014, -0.260186455999815 ], [ 103.3806258470002, -0.247002862999864 ], [ 103.3971460300001, -0.244073174999869 ], [ 103.42481530000009, -0.234958591999941 ], [ 103.45932050900018, -0.218438408999873 ], [ 103.48926842500009, -0.211521091999884 ], [ 103.50269616000008, -0.230401299999812 ], [ 103.4946395190002, -0.25359465899993 ], [ 103.45671634200011, -0.288995049999869 ], [ 103.44800866000008, -0.315362237999977 ], [ 103.4367781910002, -0.337985934999836 ], [ 103.40951582100013, -0.349704684999892 ], [ 103.34555097700013, -0.360039971999811 ], [ 103.34555097700013, -0.36687590899993 ], [ 103.3794051440002, -0.380303643999923 ], [ 103.40056399800011, -0.384535414999846 ], [ 103.41797936300014, -0.377536716999884 ], [ 103.42953535200019, -0.374932549999869 ], [ 103.48218834700009, -0.373711846999868 ], [ 103.49301191500018, -0.375420830999872 ], [ 103.50269616000008, -0.378513278999833 ], [ 103.5114852220002, -0.383558851999794 ], [ 103.52003014400003, -0.391208591999884 ], [ 103.53052819100009, -0.397149346999925 ], [ 103.5525008470002, -0.399997653999947 ], [ 103.59050540500021, -0.424574476999794 ], [ 103.5983992850002, -0.436781507999854 ], [ 103.59205162900025, -0.456312757999854 ], [ 103.57325280000015, -0.475355726999851 ], [ 103.54704837300011, -0.48984140399989 ], [ 103.51579837300011, -0.499607028999833 ], [ 103.41797936300014, -0.517754815999808 ], [ 103.40162194100014, -0.509535414999903 ], [ 103.39014733200008, -0.490411065999865 ], [ 103.37289472700019, -0.449395440999865 ], [ 103.38038170700008, -0.514336846999811 ], [ 103.38477623800014, -0.522881768999866 ], [ 103.40650475400014, -0.540785414999903 ], [ 103.41456139400003, -0.55185312299983 ], [ 103.41627037900014, -0.57537200299987 ], [ 103.40853925900012, -0.604913018999866 ], [ 103.39356530000009, -0.63201262799987 ], [ 103.37289472700019, -0.648125908999873 ], [ 103.37289472700019, -0.654880466999884 ], [ 103.38892662900025, -0.665948174999812 ], [ 103.38575280000009, -0.680922132999854 ], [ 103.3693953790002, -0.693291924999812 ], [ 103.34555097700013, -0.695896091999884 ], [ 103.3564559250002, -0.711358330999815 ], [ 103.37598717500009, -0.726820570999848 ], [ 103.39991295700014, -0.738864841999941 ], [ 103.43604576900015, -0.74529387799987 ], [ 103.43873131600009, -0.746189059999836 ], [ 103.4506942070002, -0.750095309999836 ], [ 103.46314537900008, -0.757745049999983 ], [ 103.46851647200015, -0.767836195999848 ], [ 103.46485436300009, -0.782972914999846 ], [ 103.44752037900014, -0.799411716999828 ], [ 103.44117272200026, -0.812595309999892 ], [ 103.48536217500015, -0.804945570999962 ], [ 103.5073348320002, -0.804945570999962 ], [ 103.5271102220002, -0.81601327899989 ], [ 103.53760826900009, -0.830336195999905 ], [ 103.5525008470002, -0.861097914999846 ], [ 103.5647078790002, -0.874607028999833 ], [ 103.56910241000026, -0.875664971999868 ], [ 103.58106530000009, -0.873793226999851 ], [ 103.58578535200019, -0.874607028999833 ], [ 103.58741295700014, -0.877048434999892 ], [ 103.59050540500021, -0.885186455999872 ], [ 103.59205162900025, -0.887627862999807 ], [ 103.59831790500021, -0.894463799999869 ], [ 103.60474694100014, -0.90357838299991 ], [ 103.61264082100013, -0.911553643999866 ], [ 103.63445071700005, -0.91936614399998 ], [ 103.64063561300003, -0.92888762799987 ], [ 103.64478600400014, -0.93857187299983 ], [ 103.65040123800009, -0.94296640399989 ], [ 103.6887313160002, -0.949151299999869 ], [ 103.70289147200015, -0.960056247999887 ], [ 103.72510826900009, -0.985609632999967 ], [ 103.73975670700008, -0.990655205999872 ], [ 103.76205488400024, -0.992771091999884 ], [ 103.78003991000008, -0.998793226999908 ], [ 103.79411868600022, -1.009454033999816 ], [ 103.80494225400008, -1.024834893999866 ], [ 103.82081139400003, -1.063083591999941 ], [ 103.82886803500008, -1.073418877999814 ], [ 103.83912194100009, -1.032810153999947 ], [ 103.85629316500012, -1.013767184999836 ], [ 103.87859134200005, -0.99928150799991 ], [ 103.9004012380002, -0.990655205999872 ], [ 103.9423934250002, -0.98202890399989 ], [ 103.9558211600002, -0.976983330999872 ], [ 104.02230879000018, -1.008233330999815 ], [ 104.0407820970002, -1.021742445999905 ], [ 104.05689537900008, -1.027520440999865 ], [ 104.10792076900009, -1.028985283999816 ], [ 104.1269637380002, -1.031670830999872 ], [ 104.18946373800014, -1.068129164999846 ], [ 104.21241295700008, -1.07333749799983 ], [ 104.25367272200009, -1.05584075299987 ], [ 104.26270592500009, -1.050551040000016 ], [ 104.31959069100009, -1.033623955999929 ], [ 104.37720787900014, -1.031670830999872 ], [ 104.3818465500002, -1.040785414999903 ], [ 104.41049238400018, -1.128350518999923 ], [ 104.39747155000015, -1.191338799999869 ], [ 104.40137780000009, -1.230889580999985 ], [ 104.41065514400015, -1.262465101999794 ], [ 104.4150496750002, -1.271905205999872 ], [ 104.44499759200016, -1.304620049999812 ], [ 104.44922936300009, -1.31601327899989 ], [ 104.4560653000002, -1.379082940999865 ], [ 104.4543563160002, -1.531019789999903 ], [ 104.46273847700019, -1.573500257999797 ], [ 104.47925866000008, -1.615817966999884 ], [ 104.51734459700015, -1.688409112999807 ], [ 104.53158613400012, -1.73406340899993 ], [ 104.53353925900018, -1.740492445999848 ], [ 104.53760826900003, -1.760674737999864 ], [ 104.53736412900008, -1.772149346999811 ], [ 104.5334578790002, -1.783461196000019 ], [ 104.51742597700013, -1.809340101999851 ], [ 104.5123804050001, -1.821465752999814 ], [ 104.48902428500008, -1.860039971999868 ], [ 104.48340905000009, -1.881442966999828 ], [ 104.48406009200016, -1.897067966999828 ], [ 104.4868270190002, -1.910332940999922 ], [ 104.4970809250002, -1.935967705999815 ], [ 104.51351972700019, -1.918633721999811 ], [ 104.5273543630002, -1.867445570999848 ], [ 104.53736412900008, -1.854099216999884 ], [ 104.56446373800014, -1.857679945999905 ], [ 104.58668053500008, -1.877211195999905 ], [ 104.6057235040002, -1.899021091999884 ], [ 104.62354576900015, -1.90935637799987 ], [ 104.63697350400014, -1.921563408999873 ], [ 104.62964928500014, -1.949151299999869 ], [ 104.61426842500009, -1.97820403399993 ], [ 104.60279381600009, -1.994724216999828 ], [ 104.5947371750002, -2.003024997999887 ], [ 104.58741295700014, -2.01279062299983 ], [ 104.58887780000009, -2.019463799999869 ], [ 104.60621178499997, -2.018487237999807 ], [ 104.62061608200014, -2.010430596999981 ], [ 104.64258873800009, -1.981703382999854 ], [ 104.6545516290002, -1.97014739399981 ], [ 104.65984134200005, -1.990166924999869 ], [ 104.66041100400014, -2.012872002999814 ], [ 104.66382897200015, -2.031345309999836 ], [ 104.67790774800011, -2.038995049999869 ], [ 104.68083743599999, -2.040134372999887 ], [ 104.68287194100003, -2.04241301899998 ], [ 104.68580162900014, -2.044691664999846 ], [ 104.69190514400003, -2.045830987999864 ], [ 104.69467207100013, -2.043715101999794 ], [ 104.6967879570002, -2.038995049999869 ], [ 104.69996178500008, -2.03435637799987 ], [ 104.7058211600002, -2.032321872999887 ], [ 104.71045983200014, -2.029473565999865 ], [ 104.72917728000021, -2.011651299999812 ], [ 104.77263431100005, -1.997735283999816 ], [ 104.81462649800022, -2.008396091999941 ], [ 104.85027103, -2.037855726999851 ], [ 104.87427819100014, -2.080010674999869 ], [ 104.88282311300014, -2.125664971999811 ], [ 104.87614993599999, -2.164727471999868 ], [ 104.85971113400018, -2.199395440999865 ], [ 104.82829837300017, -2.246677341999884 ], [ 104.7570093110001, -2.330498955999815 ], [ 104.74341881600014, -2.34124114399981 ], [ 104.72689863400012, -2.344496351999851 ], [ 104.6847436860001, -2.345798434999892 ], [ 104.6713973320002, -2.35125090899993 ], [ 104.65723717500015, -2.364515882999854 ], [ 104.62338300900018, -2.387465101999851 ], [ 104.60621178499997, -2.402113539999846 ], [ 104.67603600400014, -2.371758721999868 ], [ 104.70964603000016, -2.370863539999846 ], [ 104.72917728000021, -2.408949476999851 ], [ 104.73015384199999, -2.452732028999833 ], [ 104.72681725400014, -2.478122653999833 ], [ 104.7131453790002, -2.511488539999903 ], [ 104.7131453790002, -2.557793877999814 ], [ 104.70923912900014, -2.573988539999846 ], [ 104.69874108200008, -2.582207940999865 ], [ 104.68091881599997, -2.590997002999814 ], [ 104.66098066500012, -2.597832940999865 ], [ 104.64380944100009, -2.60076262799987 ], [ 104.6328231130002, -2.605157158999873 ], [ 104.60279381600009, -2.626641533999873 ], [ 104.56950931100005, -2.656426690999865 ], [ 104.54867597700007, -2.684828382999797 ], [ 104.53598066500024, -2.719333591999828 ], [ 104.53736412900008, -2.75904713299991 ], [ 104.53541100400025, -2.757256768999923 ], [ 104.53321373800014, -2.762627862999807 ], [ 104.53109785200024, -2.77263762799987 ], [ 104.54721113400012, -2.759535415000016 ], [ 104.56275475400014, -2.738376559999892 ], [ 104.57439212300011, -2.714532158999816 ], [ 104.57886803500008, -2.693536065999808 ], [ 104.58513431100005, -2.677666924999983 ], [ 104.59986412900025, -2.663750908999987 ], [ 104.63355553500003, -2.642347914999959 ], [ 104.70281009200011, -2.609470309999836 ], [ 104.7314559250002, -2.590752862999864 ], [ 104.75025475400014, -2.560316664999903 ], [ 104.76856530000009, -2.494724216999884 ], [ 104.7707625660002, -2.47380950299987 ], [ 104.76823978000016, -2.430108330999872 ], [ 104.77182050900024, -2.414239190999922 ], [ 104.78435306100016, -2.395277601999851 ], [ 104.81641686300014, -2.364922783999873 ], [ 104.83220462300005, -2.34531015399989 ], [ 104.84595787900008, -2.30217864399998 ], [ 104.86264082100024, -2.288750908999987 ], [ 104.88331139400015, -2.284926039999959 ], [ 104.90105228000021, -2.292901299999812 ], [ 104.90870201900015, -2.312676690999865 ], [ 104.90870201900015, -2.33733489399981 ], [ 104.91163170700008, -2.360284112999807 ], [ 104.92896569100009, -2.374769789999846 ], [ 104.93091881600014, -2.351169528999947 ], [ 104.9414168630002, -2.336195570999962 ], [ 104.9582625660002, -2.328545830999872 ], [ 104.98023522200009, -2.326429945999848 ], [ 105.00196373800009, -2.331963799999869 ], [ 105.01644941500024, -2.344659112999864 ], [ 105.02906334700009, -2.35849374799983 ], [ 105.04509524800011, -2.367364190999979 ], [ 105.05396569100014, -2.367120049999926 ], [ 105.07520592500003, -2.361504815999865 ], [ 105.08668053499997, -2.361260674999869 ], [ 105.09701582100018, -2.365411065999922 ], [ 105.11133873800014, -2.377699476999794 ], [ 105.11670983200014, -2.380466403999833 ], [ 105.1384383470002, -2.376234632999854 ], [ 105.20215905000015, -2.347426039999903 ], [ 105.22364342500009, -2.343438408999816 ], [ 105.24691816500012, -2.34286874799983 ], [ 105.2692977220002, -2.347344658999816 ], [ 105.3073836600002, -2.36882903399993 ], [ 105.33106530000015, -2.373142184999836 ], [ 105.38021894600013, -2.374769789999846 ], [ 105.46680748800009, -2.388441664999903 ], [ 105.51124108200003, -2.390801690999865 ], [ 105.53500410200013, -2.394789320999905 ], [ 105.55209394600018, -2.402113539999846 ], [ 105.55209394600018, -2.408949476999851 ], [ 105.54883873800014, -2.40935637799987 ], [ 105.54175866, -2.408786716999884 ], [ 105.53842207100024, -2.408949476999851 ], [ 105.54900149800011, -2.421156507999854 ], [ 105.56381269600024, -2.414971612999977 ], [ 105.57886803500008, -2.402276299999812 ], [ 105.59001712300011, -2.395277601999851 ], [ 105.60857181099999, -2.396172783999816 ], [ 105.62378991, -2.40178801899981 ], [ 105.63331139400015, -2.416192315999979 ], [ 105.63477623800003, -2.443047783999873 ], [ 105.62924238400012, -2.464613539999959 ], [ 105.61117597700019, -2.505954684999892 ], [ 105.60743248800014, -2.528741143999923 ], [ 105.60840905000015, -2.55234140399989 ], [ 105.61207116000008, -2.574151299999812 ], [ 105.6184188160002, -2.594903252999927 ], [ 105.6279403000002, -2.615004164999846 ], [ 105.63851972700024, -2.630791924999812 ], [ 105.65447024800011, -2.648614190999865 ], [ 105.67310631599997, -2.663018487999864 ], [ 105.70199629000007, -2.671319268999866 ], [ 105.72250410200013, -2.681084893999866 ], [ 105.7334090500002, -2.683282158999873 ], [ 105.75709069100003, -2.682875257999854 ], [ 105.76807701900009, -2.684747002999814 ], [ 105.77808678499997, -2.690118096999868 ], [ 105.79493248800014, -2.724053643999923 ], [ 105.79175866000008, -2.862074476999794 ], [ 105.80958092500009, -2.899021091999828 ], [ 105.84017988400012, -2.930108330999872 ], [ 105.87924238400024, -2.951104424999869 ], [ 105.92261803500014, -2.957696221999868 ], [ 105.93327884200016, -2.955987237999864 ], [ 105.95183353000004, -2.950941664999903 ], [ 105.96314537900014, -2.950290622999887 ], [ 105.97510826900015, -2.952813408999873 ], [ 105.9909774100002, -2.961846612999807 ], [ 106.00082441500024, -2.963799737999864 ], [ 106.0156356130002, -2.969496351999908 ], [ 106.0284936860001, -2.982842705999872 ], [ 106.04558353000016, -3.012302341999828 ], [ 106.05404707100013, -3.046970309999892 ], [ 106.05347741000014, -3.128594658999816 ], [ 106.05933678500026, -3.170017184999836 ], [ 106.06373131599997, -3.179864190999922 ], [ 106.07650800900012, -3.200860283999987 ], [ 106.07976321700016, -3.211521091999941 ], [ 106.07935631600014, -3.223728122999887 ], [ 106.07422936300003, -3.244724216999941 ], [ 106.0730086600002, -3.255547783999816 ], [ 106.06316165499999, -3.26669687299983 ], [ 105.99724368600016, -3.300225518999866 ], [ 105.96273847700024, -3.328789971999981 ], [ 105.92904707100024, -3.365411065999808 ], [ 105.90023847700013, -3.407159112999921 ], [ 105.88111412900014, -3.451104424999869 ], [ 105.81959069099997, -3.672539971999811 ], [ 105.82569420700014, -3.711521091999884 ], [ 105.8510848320002, -3.74334075299987 ], [ 105.93344160200013, -3.802341404 ], [ 105.95248457100018, -3.833754165000016 ], [ 105.9528914720002, -3.869073174999869 ], [ 105.93580162900008, -3.909844658999816 ], [ 105.87012780000015, -4.004164320999792 ], [ 105.86060631599997, -4.036716403999833 ], [ 105.8552352220002, -4.070896091999828 ], [ 105.83130944100009, -4.14023202899989 ], [ 105.82797285200013, -4.157972914999959 ], [ 105.81275475400008, -4.238702080999929 ], [ 105.8142195970002, -4.27312590899993 ], [ 105.81902103, -4.300225518999866 ], [ 105.82960045700008, -4.324476820999848 ], [ 105.84603925900024, -4.35320403399993 ], [ 105.85743248800009, -4.381280205999815 ], [ 105.85328209699998, -4.403903903999947 ], [ 105.86817467500015, -4.412041924999869 ], [ 105.87916100400025, -4.424899997999944 ], [ 105.89478600400008, -4.458428643999866 ], [ 105.89698326900009, -4.455498955999872 ], [ 105.89747155000003, -4.454522393999866 ], [ 105.90162194099997, -4.451755467 ], [ 105.90626061300009, -4.469333591999828 ], [ 105.89869225399997, -4.511976820999848 ], [ 105.90943444099997, -4.546644789999959 ], [ 105.90267988400024, -4.56568775799991 ], [ 105.89291425900018, -4.58513762799987 ], [ 105.88795006600003, -4.601820570999905 ], [ 105.89063561300014, -4.619398695999792 ], [ 105.90503991000008, -4.670098565999865 ], [ 105.89047285200024, -4.677829684999892 ], [ 105.88184655000009, -4.696221612999864 ], [ 105.8686629570002, -4.780938408999816 ], [ 105.8674422540002, -4.824639580999929 ], [ 105.87240644600024, -4.848565362999864 ], [ 105.9084578790002, -4.910332940999865 ], [ 105.9096785820002, -4.943129164999903 ], [ 105.89682050900012, -4.975192966999884 ], [ 105.8795679050001, -5.007582289999903 ], [ 105.8674422540002, -5.041273695999792 ], [ 105.8618270190002, -5.126560153999833 ], [ 105.8674422540002, -5.211358330999815 ], [ 105.86451256600009, -5.255547783999873 ], [ 105.83952884200005, -5.337172132999797 ], [ 105.83334394600007, -5.383233330999872 ], [ 105.83961022200003, -5.468926690999808 ], [ 105.83619225400003, -5.49179452899989 ], [ 105.82406660200024, -5.53045012799987 ], [ 105.83277428500014, -5.592543226999794 ], [ 105.83334394600007, -5.633721612999864 ], [ 105.82960045700008, -5.654717705999815 ], [ 105.8112899100002, -5.696872653999833 ], [ 105.80543053500003, -5.718438408999873 ], [ 105.79363040500016, -5.795586846999811 ], [ 105.78256269600024, -5.828545830999872 ], [ 105.76441491000003, -5.856215101999794 ], [ 105.7335718110001, -5.890313408999873 ], [ 105.72974694100014, -5.896661065999808 ], [ 105.71989993600016, -5.887139580999815 ], [ 105.71949303500014, -5.848728122999887 ], [ 105.71290123800014, -5.832126559999836 ], [ 105.68100019600013, -5.819024346999868 ], [ 105.6020613940002, -5.809828382999797 ], [ 105.58619225400025, -5.790785414999903 ], [ 105.58082116000014, -5.713148695999792 ], [ 105.56861412900008, -5.680352471999868 ], [ 105.54525800900024, -5.657647393999866 ], [ 105.53988691500012, -5.662692966999884 ], [ 105.5302840500002, -5.675551039999903 ], [ 105.52540123800014, -5.67880624799983 ], [ 105.51498457100024, -5.677829684999892 ], [ 105.50733483200014, -5.672784112999864 ], [ 105.50074303500014, -5.66708749799983 ], [ 105.49390709700015, -5.664483330999872 ], [ 105.4835718110001, -5.658949476999851 ], [ 105.44971764400009, -5.623467705999872 ], [ 105.39820397199998, -5.581312757999797 ], [ 105.3759871750002, -5.557712497999887 ], [ 105.31072024800022, -5.46599700299987 ], [ 105.27963300900012, -5.444268487999807 ], [ 105.25049889400015, -5.459079684999892 ], [ 105.24634850400014, -5.478773695999848 ], [ 105.25700931100016, -5.517266533999816 ], [ 105.24708092500009, -5.537530205999815 ], [ 105.24789472700024, -5.541273695999848 ], [ 105.23878014400009, -5.568942966999884 ], [ 105.23617597700019, -5.571954033999873 ], [ 105.23080488400012, -5.576348565999865 ], [ 105.21900475400008, -5.574802341999884 ], [ 105.20215905000015, -5.568942966999884 ], [ 105.18002363400007, -5.580498955999872 ], [ 105.18018639400003, -5.596937757999797 ], [ 105.18978925900012, -5.617282809999892 ], [ 105.1958113940002, -5.640313408999873 ], [ 105.1958113940002, -5.667901299999869 ], [ 105.19922936300014, -5.678887627999814 ], [ 105.20671634200011, -5.686944268999866 ], [ 105.21371504000007, -5.69296640399989 ], [ 105.2163192070002, -5.698011976999794 ], [ 105.2019149100002, -5.706801039999846 ], [ 105.17546634200011, -5.715590101999851 ], [ 105.1547957690002, -5.726820570999848 ], [ 105.15805097700024, -5.742933851999794 ], [ 105.17798912900008, -5.750420830999872 ], [ 105.20215905000015, -5.753594658999816 ], [ 105.21534264400009, -5.759047132999854 ], [ 105.20215905000015, -5.773695570999792 ], [ 105.18360436300014, -5.782159112999807 ], [ 105.16325931100005, -5.786065362999807 ], [ 105.1306258470002, -5.787367445999848 ], [ 105.11841881600014, -5.782159112999807 ], [ 105.07300866000003, -5.746351820999792 ], [ 104.90105228000021, -5.671319268999866 ], [ 104.83863366000026, -5.623467705999872 ], [ 104.79078209700009, -5.609470309999892 ], [ 104.76929772200015, -5.591973565999865 ], [ 104.70972741000014, -5.525811455999872 ], [ 104.69841556100022, -5.515557549999812 ], [ 104.68132571699999, -5.506931247999887 ], [ 104.64226321700022, -5.497816664999903 ], [ 104.62281334700015, -5.490655205999872 ], [ 104.61304772200026, -5.478936455999872 ], [ 104.60621178499997, -5.478936455999872 ], [ 104.6081649100002, -5.483330987999864 ], [ 104.61304772200026, -5.499281507999797 ], [ 104.5870874360001, -5.499281507999797 ], [ 104.5676375660002, -5.501234632999854 ], [ 104.55144290500004, -5.508477471999868 ], [ 104.53419030000015, -5.523858330999872 ], [ 104.52849368600005, -5.540459893999866 ], [ 104.53321373800014, -5.559828382999854 ], [ 104.68873131599997, -5.807875257999854 ], [ 104.6977645190002, -5.845391533999873 ], [ 104.70240319100009, -5.886976820999848 ], [ 104.71387780000015, -5.910088799999812 ], [ 104.71607506600003, -5.92107512799987 ], [ 104.71094811300014, -5.927829684999892 ], [ 104.69906660200019, -5.930433851999794 ], [ 104.56128991000008, -5.928317966999884 ], [ 104.5533960300001, -5.919122002999814 ], [ 104.55836022200015, -5.883558851999851 ], [ 104.5537215500002, -5.860039971999868 ], [ 104.5417586600002, -5.841892184999892 ], [ 104.48878014400003, -5.796970309999892 ], [ 104.47877037900025, -5.79021575299987 ], [ 104.46314537900025, -5.78281015399989 ], [ 104.45671634200005, -5.772067966999884 ], [ 104.44922936300009, -5.752618096999868 ], [ 104.38404381600026, -5.692478122999887 ], [ 104.36768639400009, -5.685723565999865 ], [ 104.29769941500018, -5.643324476999851 ], [ 104.29078209699998, -5.625420830999872 ], [ 104.3144637380002, -5.60507577899989 ], [ 104.30152428500026, -5.585625908999873 ], [ 104.25798587300017, -5.539808851999794 ], [ 104.23617597700019, -5.527276299999812 ], [ 104.22478274800017, -5.524021091999884 ], [ 104.21566816500012, -5.522719007999854 ], [ 104.20671634200011, -5.520440362999864 ], [ 104.19532311300009, -5.513604424999869 ], [ 104.18978925900012, -5.505303643999866 ], [ 104.18490644600018, -5.49374765399989 ], [ 104.17750084699998, -5.483330987999864 ], [ 104.14486738400024, -5.473890882999854 ], [ 104.12663821700016, -5.461683851999794 ], [ 104.1108504570002, -5.446221612999864 ], [ 104.03882897199998, -5.35662200299987 ], [ 103.99317467500003, -5.312676690999865 ], [ 103.98812910200013, -5.296319268999866 ], [ 103.9997664720002, -5.276950778999833 ], [ 104.00245201900009, -5.26287200299987 ], [ 103.99138431100005, -5.246351820999848 ], [ 103.9751082690002, -5.232354424999869 ], [ 103.96257571700011, -5.225030205999872 ], [ 103.94109134199999, -5.222832940999865 ], [ 103.91879316500024, -5.223077080999815 ], [ 103.9013778000002, -5.218519789999846 ], [ 103.8942977220002, -5.201429945999848 ], [ 103.89730879000012, -5.191664320999848 ], [ 103.91098066500024, -5.172295830999872 ], [ 103.91407311300014, -5.160088799999869 ], [ 103.91342207100013, -5.139255466999884 ], [ 103.91187584700009, -5.130791924999869 ], [ 103.90845787900025, -5.123223565999808 ], [ 103.89112389400015, -5.104180596999811 ], [ 103.8322860040002, -5.068047783999873 ], [ 103.80762780000009, -5.041924737999807 ], [ 103.79216556100016, -5.030938408999873 ], [ 103.77377363400012, -5.026462497999887 ], [ 103.74822024800022, -5.02654387799987 ], [ 103.73682701900015, -5.023695570999848 ], [ 103.72608483200014, -5.01677825299987 ], [ 103.72584069100009, -5.007012627999814 ], [ 103.73552493600016, -4.97795989399981 ], [ 103.73292076900009, -4.971774997999887 ], [ 103.7268172540002, -4.968682549999869 ], [ 103.71745853000016, -4.961846612999864 ], [ 103.70541425900024, -4.955010674999869 ], [ 103.6920679050001, -4.951918226999851 ], [ 103.68165123800003, -4.95468515399989 ], [ 103.67172285200013, -4.961521091999828 ], [ 103.65406334700015, -4.979180596999868 ], [ 103.63062584700015, -4.934991143999866 ], [ 103.6169539720002, -4.919854424999869 ], [ 103.59205162900025, -4.910332940999865 ], [ 103.5846460300001, -4.909600518999866 ], [ 103.56128991000008, -4.910332940999865 ], [ 103.55355879000007, -4.908868096999811 ], [ 103.5500594410002, -4.905368747999944 ], [ 103.54786217500009, -4.901055596999811 ], [ 103.54420006600003, -4.897230726999794 ], [ 103.53370201900015, -4.890232028999947 ], [ 103.51832116000003, -4.875664971999811 ], [ 103.51002037900025, -4.869317315999865 ], [ 103.50001061300014, -4.863946221999811 ], [ 103.48780358200008, -4.859144790000016 ], [ 103.47478274800028, -4.856052341999941 ], [ 103.46168053500003, -4.855726820999905 ], [ 103.44988040500016, -4.859795830999985 ], [ 103.43702233200008, -4.866306247999887 ], [ 103.42481530000009, -4.870863539999903 ], [ 103.41456139400003, -4.869317315999865 ], [ 103.40984134200016, -4.860039971999811 ], [ 103.39340254000012, -4.814141533999873 ], [ 103.38599694100014, -4.804945570999848 ], [ 103.37818444099997, -4.798923434999892 ], [ 103.35922285200024, -4.787367445999848 ], [ 103.34449303499997, -4.80046965899993 ], [ 103.32886803499997, -4.794122002999984 ], [ 103.31657962300022, -4.776543877999927 ], [ 103.30355879000012, -4.734144789999846 ], [ 103.28451582100024, -4.715020440999865 ], [ 103.17286217500009, -4.617933851999851 ], [ 103.0499780610001, -4.543064059999892 ], [ 102.92042076900009, -4.492608330999872 ], [ 102.90430748800014, -4.477797132999854 ], [ 102.88990319099997, -4.440362237999864 ], [ 102.87631269600018, -4.420586846999811 ], [ 102.70118248800014, -4.270440362999977 ], [ 102.52751712300022, -4.151136976999851 ], [ 102.36622155000009, -4.026462497999944 ], [ 102.33936608200008, -4.011325778999947 ], [ 102.3125106130002, -3.991469007999854 ], [ 102.29175866000008, -3.965427341999828 ], [ 102.28353925900012, -3.93092213299991 ], [ 102.2878524100002, -3.915297132999967 ], [ 102.30665123800003, -3.884698174999812 ], [ 102.31088300900018, -3.865411065999808 ], [ 102.30453535200013, -3.845147393999866 ], [ 102.2740991550001, -3.810479424999812 ], [ 102.2631942070002, -3.793145440999808 ], [ 102.26107832100007, -3.781914971999925 ], [ 102.26172936300014, -3.772556247999887 ], [ 102.2631942070002, -3.76482512799987 ], [ 102.2631942070002, -3.758396091999884 ], [ 102.25766035200019, -3.746840101999851 ], [ 102.25082441500024, -3.737725518999866 ], [ 102.24512780000009, -3.72795989399981 ], [ 102.24268639400003, -3.714613539999903 ], [ 102.24048912900025, -3.678480726999851 ], [ 102.23438561300009, -3.65935637799987 ], [ 102.2221785820002, -3.642836195999792 ], [ 102.06568444100009, -3.550469658999873 ], [ 101.87696373800009, -3.421319268999866 ], [ 101.6374617850002, -3.250664971999868 ], [ 101.61133873800014, -3.224541924999812 ], [ 101.58448326900009, -3.17685312299983 ], [ 101.5649520190002, -3.162286065999922 ], [ 101.41895592500015, -2.92734140399989 ], [ 101.40796959700015, -2.885511976999851 ], [ 101.32699629000018, -2.739190362999921 ], [ 101.29932701900009, -2.707614841999941 ], [ 101.26254316500018, -2.683282158999873 ], [ 101.17839603000016, -2.641289971999868 ], [ 101.13982181100016, -2.616875908999816 ], [ 101.10482832100007, -2.587090752999814 ], [ 101.0178328790002, -2.467950127999814 ], [ 100.92310631600003, -2.333428643999923 ], [ 100.83952884200016, -2.167250257999797 ], [ 100.83399498800009, -2.159112237999864 ], [ 100.8315535820002, -2.141289971999811 ], [ 100.84571373800014, -2.119398695999848 ], [ 100.87826582100013, -2.080010674999869 ], [ 100.88721764400015, -2.037204684999892 ], [ 100.8813582690002, -1.994886976999794 ], [ 100.8706160820002, -1.953301690999808 ], [ 100.86459394600018, -1.912367445999962 ], [ 100.857595248, -1.891859632999854 ], [ 100.8410750660002, -1.870375257999797 ], [ 100.78394616000003, -1.815524998 ], [ 100.77605228000004, -1.80575937299983 ], [ 100.77133222700024, -1.795586846999925 ], [ 100.76465905000009, -1.772067966999828 ], [ 100.71843509199999, -1.698174737999921 ], [ 100.66830488400018, -1.639743747999887 ], [ 100.654470248, -1.617608330999872 ], [ 100.64551842500015, -1.594008070999848 ], [ 100.63656660200013, -1.551364841999941 ], [ 100.63257897200009, -1.507989190999865 ], [ 100.62435957100024, -1.497491143999866 ], [ 100.58464603000016, -1.460381768999866 ], [ 100.5705672540002, -1.442559502999814 ], [ 100.57642662900014, -1.437758070999905 ], [ 100.57992597700013, -1.431898695999848 ], [ 100.58423912900014, -1.415785414999903 ], [ 100.58171634200022, -1.416680596999868 ], [ 100.5732528000002, -1.40764739399998 ], [ 100.5705672540002, -1.408379815999808 ], [ 100.5727645190002, -1.404473565999922 ], [ 100.57740319100014, -1.398125908999873 ], [ 100.58187910200019, -1.39364999799983 ], [ 100.58423912900014, -1.394707940999865 ], [ 100.57683353000016, -1.355645440999922 ], [ 100.56918379000012, -1.330824476999851 ], [ 100.55990644600007, -1.319594007999854 ], [ 100.53980553500003, -1.314222914999903 ], [ 100.49870853000004, -1.290297132999854 ], [ 100.47917728000016, -1.282972914999903 ], [ 100.47348066500018, -1.278497002999984 ], [ 100.46412194100014, -1.268161716999884 ], [ 100.4582625660002, -1.263848565999865 ], [ 100.45557701900015, -1.265720309999836 ], [ 100.45346113400012, -1.269707940999808 ], [ 100.4504500660002, -1.271905205999872 ], [ 100.4257918630002, -1.276055596999925 ], [ 100.4155379570002, -1.274509372999887 ], [ 100.40601647200009, -1.264418226999851 ], [ 100.40967858200008, -1.258558851999908 ], [ 100.42652428500008, -1.243910414999959 ], [ 100.43181399800011, -1.234551690999865 ], [ 100.4336043630002, -1.228692315999808 ], [ 100.43327884199999, -1.206719658999873 ], [ 100.42741946700022, -1.19255950299987 ], [ 100.38493899800017, -1.155205987999807 ], [ 100.3701278000002, -1.160902601999908 ], [ 100.36605879000012, -1.150485935 ], [ 100.36801191500018, -1.133721612999864 ], [ 100.37126712300022, -1.121026299999812 ], [ 100.37419681100016, -1.117608330999815 ], [ 100.37875410200019, -1.115166924999983 ], [ 100.3830672540002, -1.111423434999836 ], [ 100.38493899800017, -1.103936455999872 ], [ 100.38331139400015, -1.096774997999944 ], [ 100.37126712300022, -1.07333749799983 ], [ 100.38103274800011, -1.068617445999848 ], [ 100.39193769600013, -1.067071221999811 ], [ 100.40284264400003, -1.068617445999848 ], [ 100.41285241000014, -1.07333749799983 ], [ 100.41635175900018, -1.064629815999979 ], [ 100.41773522199998, -1.05624765399989 ], [ 100.41635175900018, -1.047784112999977 ], [ 100.41285241000014, -1.039157809999836 ], [ 100.39096113400018, -1.041599216999884 ], [ 100.37989342500003, -1.03045012799987 ], [ 100.35303795700008, -0.977146091999884 ], [ 100.34400475400025, -0.908786716999828 ], [ 100.32789147199998, -0.858819268999866 ], [ 100.30144290499999, -0.816338799999812 ], [ 100.15967858200008, -0.667901299999869 ], [ 100.13404381600003, -0.634698174999869 ], [ 100.0905867850002, -0.557224216999884 ], [ 100.03492272199998, -0.487969658999816 ], [ 100.00131269600013, -0.456312757999854 ], [ 99.930430535000085, -0.409437757999797 ], [ 99.919444207000197, -0.398044528999947 ], [ 99.91032962300028, -0.375176690999808 ], [ 99.888845248000166, -0.357598565999865 ], [ 99.843597852000244, -0.332126559999892 ], [ 99.823985222000204, -0.313409112999921 ], [ 99.813812696000127, -0.294610283999873 ], [ 99.81006920700014, -0.273370049999869 ], [ 99.809580925000205, -0.24716562299983 ], [ 99.805918815999974, -0.227797132999854 ], [ 99.797211134000179, -0.215915622999887 ], [ 99.785980665000068, -0.206638278999833 ], [ 99.775401238000029, -0.195570570999905 ], [ 99.765879754000252, -0.18124765399989 ], [ 99.75945071700022, -0.168389580999872 ], [ 99.75603274800028, -0.154717705999929 ], [ 99.754893425000091, -0.137302341999941 ], [ 99.757985873000166, -0.115817966999828 ], [ 99.76384524800028, -0.095879815999865 ], [ 99.766774936000218, -0.075372002999814 ], [ 99.761729363000086, -0.052178643999866 ], [ 99.747243686000161, -0.029839776999836 ], [ 99.689463738000143, 0.02008698100019 ], [ 99.632823113000143, 0.081000067000105 ], [ 99.610850457000197, 0.098578192000161 ], [ 99.534027540000125, 0.14032623900016 ], [ 99.490489129000252, 0.155422268000166 ], [ 99.450205925000205, 0.161281643000109 ], [ 99.426931186000104, 0.161363023000263 ], [ 99.4082137380002, 0.163885809000135 ], [ 99.3925887380002, 0.171698309000135 ], [ 99.378184441000087, 0.18797435100015 ], [ 99.356618686000161, 0.225653387000193 ], [ 99.341075066000144, 0.238755601000207 ], [ 99.31617272200009, 0.242621161000102 ], [ 99.29656009200005, 0.237697658000116 ], [ 99.260590040000181, 0.219875393000166 ], [ 99.2441512380002, 0.215969143000279 ], [ 99.233409050000091, 0.217027085000211 ], [ 99.221934441000201, 0.220363674000168 ], [ 99.211273634000179, 0.225653387000193 ], [ 99.203135613000143, 0.232733466000298 ], [ 99.193695509000179, 0.243150132000096 ], [ 99.188812696000184, 0.245591539000202 ], [ 99.182302280000101, 0.244086005000156 ], [ 99.168711785000141, 0.242621161000102 ], [ 99.162119988000143, 0.245266018000166 ], [ 99.142344597000033, 0.258246161000102 ], [ 99.137950066000144, 0.263088283000172 ], [ 99.139333530000215, 0.273749091000127 ], [ 99.153086785000141, 0.287176825000188 ], [ 99.158457879000139, 0.29783763200021 ], [ 99.158457879000139, 0.32001373900016 ], [ 99.1484481130002, 0.333156643000166 ], [ 99.131521030000044, 0.340562242000146 ], [ 99.110606316000258, 0.34564850500027 ], [ 99.128754102000073, 0.391791083000157 ], [ 99.132334832000083, 0.412054755000099 ], [ 99.127207879000139, 0.484361070000261 ], [ 99.122569207000197, 0.509019273000263 ], [ 99.110606316000258, 0.523830471000224 ], [ 99.098399285000198, 0.514227606000134 ], [ 99.097341342000163, 0.530747789000202 ], [ 99.103851759000122, 0.578436591000184 ], [ 99.100271030000101, 0.601752020000106 ], [ 99.0898543630002, 0.622015692000218 ], [ 99.072764519000145, 0.630804755000099 ], [ 99.048594597000147, 0.619940497000187 ], [ 99.040049675000091, 0.650458075000131 ], [ 99.047373894000145, 0.739732164000145 ], [ 99.041758660000198, 0.777044989000217 ], [ 99.006114129000139, 0.818752346000281 ], [ 98.997325066000087, 0.825425523000206 ], [ 98.981211785000141, 0.83173248900016 ], [ 98.976735873000166, 0.84735748900016 ], [ 98.980316602000244, 0.886216539000145 ], [ 98.975840690999974, 0.920843817000161 ], [ 98.917328321000127, 1.117173570000205 ], [ 98.850596550000091, 1.277289130000156 ], [ 98.839040561000218, 1.301255601000264 ], [ 98.836924675000148, 1.311468817000161 ], [ 98.838877800000148, 1.321356512000136 ], [ 98.842946811000104, 1.333441473000221 ], [ 98.844574415000125, 1.345892645000163 ], [ 98.840017123, 1.356756903000246 ], [ 98.799082879000252, 1.398749091000127 ], [ 98.788584832000197, 1.413804429000095 ], [ 98.775401238000086, 1.451564846000224 ], [ 98.770274285000141, 1.474595445000205 ], [ 98.768077019000089, 1.493597723000164 ], [ 98.764659050000148, 1.498846747000187 ], [ 98.756521030000215, 1.504461981000247 ], [ 98.746267123000109, 1.508937893000223 ], [ 98.736989780000158, 1.510687567000218 ], [ 98.73023522200009, 1.514390367000203 ], [ 98.72584069100003, 1.523627020000163 ], [ 98.72022545700014, 1.545396226000264 ], [ 98.709646030000101, 1.564113674000168 ], [ 98.711273634000122, 1.56956614800032 ], [ 98.727061394000032, 1.572170315000221 ], [ 98.733653191000201, 1.569891669000128 ], [ 98.740407748000166, 1.563910223000107 ], [ 98.745371941000087, 1.556138414000202 ], [ 98.747406446000127, 1.54852936400016 ], [ 98.75342858200014, 1.535630601000264 ], [ 98.766449415000238, 1.549017645000163 ], [ 98.788584832000197, 1.586411851000321 ], [ 98.798187696000184, 1.599066473000164 ], [ 98.818858269000089, 1.619696356000134 ], [ 98.822601759000236, 1.630438544000242 ], [ 98.823578321000184, 1.666693427000155 ], [ 98.819102410000141, 1.682318427000098 ], [ 98.805918816000201, 1.688869533000172 ], [ 98.788096550000148, 1.691351630000156 ], [ 98.783702019000032, 1.699042059000249 ], [ 98.784515821000241, 1.711859442000161 ], [ 98.782969597000204, 1.729722398000263 ], [ 98.773936394000202, 1.748602606000247 ], [ 98.760101759000122, 1.764146226000264 ], [ 98.727061394000032, 1.79189687700017 ], [ 98.715017123000109, 1.784979559000135 ], [ 98.711110873000223, 1.779120184000192 ], [ 98.712738477000244, 1.763902085000211 ], [ 98.715098504000196, 1.763983466000127 ], [ 98.724945509000236, 1.756822007000096 ], [ 98.727061394000032, 1.756496486000231 ], [ 98.726735873000223, 1.749416408000116 ], [ 98.721527540000125, 1.739081122000243 ], [ 98.72022545700014, 1.73346588700025 ], [ 98.711110873000223, 1.725775458000157 ], [ 98.690684441000144, 1.736273505000213 ], [ 98.6582137380002, 1.763902085000211 ], [ 98.576182488000143, 1.888088283000116 ], [ 98.535166863000143, 1.936468817000105 ], [ 98.444021030000158, 1.991156317000218 ], [ 98.426117384000122, 1.997626044000242 ], [ 98.406993035000198, 2.001939195000148 ], [ 98.387868686000161, 2.003485419000185 ], [ 98.365977410000198, 2.002875067000161 ], [ 98.354502800000091, 2.003810940000221 ], [ 98.3496199880002, 2.007228908000229 ], [ 98.349375847000147, 2.021429755000213 ], [ 98.34717858200014, 2.02899811400016 ], [ 98.341156446000127, 2.033392645000106 ], [ 98.32984459700009, 2.038275458000214 ], [ 98.311778191000087, 2.039618231000247 ], [ 98.28882897200009, 2.037339585000154 ], [ 98.26921634199999, 2.03807200700021 ], [ 98.260915561000218, 2.048529364000103 ], [ 98.256114129000139, 2.07330963700025 ], [ 98.243662957000197, 2.087551174000225 ], [ 98.209483269000145, 2.109930731000134 ], [ 98.152598504000196, 2.156927802000155 ], [ 98.089610222000147, 2.195868231000247 ], [ 97.983571811000218, 2.244370835000211 ], [ 97.955902540000125, 2.271714585000098 ], [ 97.933360222000147, 2.269761460000098 ], [ 97.881114129000139, 2.250311591000241 ], [ 97.866872592000277, 2.247463283000116 ], [ 97.850759311000161, 2.251206773000263 ], [ 97.829437696000184, 2.264227606000134 ], [ 97.81771894600007, 2.258937893000109 ], [ 97.809906446000127, 2.263657945000205 ], [ 97.803396030000215, 2.272040106000134 ], [ 97.79476972700013, 2.277818101000264 ], [ 97.786143425000091, 2.278021552000155 ], [ 97.768565300000091, 2.273016669000185 ], [ 97.757334832000083, 2.271673895000106 ], [ 97.744395379000139, 2.281073309000135 ], [ 97.706065300000148, 2.346136786000216 ], [ 97.676442905000101, 2.375921942000105 ], [ 97.66358483200014, 2.392075914000145 ], [ 97.6582137380002, 2.411566473000164 ], [ 97.661143425000205, 2.527329820000261 ], [ 97.644053582000083, 2.668890692000105 ], [ 97.608897332000197, 2.848618882000096 ], [ 97.602712436000047, 2.866197007000153 ], [ 97.592784050000148, 2.873683986000117 ], [ 97.577403191000201, 2.875921942000161 ], [ 97.535329623000166, 2.888251044000128 ], [ 97.484629754000196, 2.913031317000105 ], [ 97.463877800000148, 2.919623114000103 ], [ 97.441661004000139, 2.922105210000098 ], [ 97.422129754000252, 2.928371486000231 ], [ 97.405039910000198, 2.943345445000261 ], [ 97.3320418630002, 3.031398830000228 ], [ 97.313487175000091, 3.061672268000223 ], [ 97.3007918630002, 3.093410549000168 ], [ 97.285166863000029, 3.17845286700026 ], [ 97.270762566000087, 3.214422919000128 ], [ 97.240489129000196, 3.238023179000095 ], [ 97.206716342000107, 3.240790106000134 ], [ 97.182627800000091, 3.245998440000165 ], [ 97.171641472000204, 3.254828192000105 ], [ 97.166351759000122, 3.267971096000224 ], [ 97.018565300000205, 3.52269114800032 ], [ 96.999766471999976, 3.54588450700021 ], [ 96.921722852000244, 3.605698960000098 ], [ 96.903493686000047, 3.634670315000108 ], [ 96.892100457000197, 3.666489976000207 ], [ 96.883555534999971, 3.682440497000243 ], [ 96.873057488000086, 3.689276434000135 ], [ 96.866058790000125, 3.69212474200026 ], [ 96.842051629000196, 3.706732489000217 ], [ 96.838145379000252, 3.712632554000152 ], [ 96.828868035000028, 3.716620184000249 ], [ 96.817637566000144, 3.719916083000157 ], [ 96.807871941000258, 3.724066473000221 ], [ 96.778005405000215, 3.74298737200013 ], [ 96.760508660000141, 3.748683986000231 ], [ 96.559825066000201, 3.746568101000207 ], [ 96.519867384000236, 3.754828192000161 ], [ 96.479502800000205, 3.778713283000172 ], [ 96.430349155000044, 3.82526276200025 ], [ 96.279307488000143, 4.02578359600011 ], [ 96.211436394000202, 4.093939520000106 ], [ 96.207530144000145, 4.100490627000113 ], [ 96.201914910000028, 4.115179755000099 ], [ 96.197764519000089, 4.121283270000163 ], [ 96.19092858200014, 4.125962632000096 ], [ 96.175303582000197, 4.132717190000165 ], [ 96.167653842000163, 4.138373114000217 ], [ 96.159678582000197, 4.141302802000155 ], [ 96.147146030000101, 4.142482815000165 ], [ 96.135264519000145, 4.14166901200025 ], [ 96.13013756600003, 4.138373114000217 ], [ 96.125173373000109, 4.13641998900016 ], [ 96.113780144000202, 4.147162177000098 ], [ 96.065196160000085, 4.205023505000099 ], [ 96.049652540000238, 4.214300848000221 ], [ 96.030772332000026, 4.217474677000212 ], [ 96.010020379000139, 4.225653387000136 ], [ 95.903493686000104, 4.344712632000096 ], [ 95.81413821700005, 4.432847398000263 ], [ 95.807139519000089, 4.446112372000187 ], [ 95.758962436000161, 4.484442450000131 ], [ 95.725840691000087, 4.531683661000102 ], [ 95.656504754000252, 4.579982815000108 ], [ 95.616547071000184, 4.628404039000145 ], [ 95.598968946000184, 4.635199286000216 ], [ 95.576182488000029, 4.634670315000108 ], [ 95.565440300000148, 4.63751862200013 ], [ 95.560883009000065, 4.64573802300032 ], [ 95.563243035000141, 4.651556708000101 ], [ 95.572927279999988, 4.660711981000247 ], [ 95.575205925000148, 4.666571356000191 ], [ 95.572520379000196, 4.673814195000205 ], [ 95.566661004000252, 4.675197658000172 ], [ 95.559580925000148, 4.674627997000243 ], [ 95.554047071000241, 4.676214911000272 ], [ 95.526866082000083, 4.697251695000205 ], [ 95.51514733200014, 4.713527736000117 ], [ 95.489105665000068, 4.762437242000203 ], [ 95.468435092000163, 4.789496161000216 ], [ 95.459971550000148, 4.797186591000241 ], [ 95.441254102000244, 4.810614325000131 ], [ 95.434336785000141, 4.817124742000146 ], [ 95.426280144000145, 4.827337958000157 ], [ 95.424571160000141, 4.832342841000127 ], [ 95.425059441000087, 4.837347723000164 ], [ 95.423838738000086, 4.847479559000192 ], [ 95.418467644000145, 4.862494208000214 ], [ 95.405772332000083, 4.88768138200021 ], [ 95.40015709700009, 4.910549221000224 ], [ 95.385996941000144, 4.935126044000242 ], [ 95.379893425000148, 4.960435289000259 ], [ 95.34888756600003, 5.037502346000167 ], [ 95.338877800000148, 5.05353424700013 ], [ 95.324473504000252, 5.070298570000148 ], [ 95.312836134000179, 5.087144273000149 ], [ 95.305918815999974, 5.103583075000131 ], [ 95.296885613000143, 5.116400458000101 ], [ 95.279795769000145, 5.122503973000164 ], [ 95.299164259000236, 5.150336005000156 ], [ 95.301605665000068, 5.172430731000191 ], [ 95.291270379000252, 5.191636460000098 ], [ 95.272959832000197, 5.211167710000154 ], [ 95.256032748000109, 5.223374742000146 ], [ 95.248708530000215, 5.231024481000247 ], [ 95.24561608200014, 5.241644598000107 ], [ 95.243988477000187, 5.256048895000106 ], [ 95.239512566000144, 5.270819403000246 ], [ 95.231944207000197, 5.282294012000307 ], [ 95.221446160000141, 5.286932684000192 ], [ 95.198985222000147, 5.292873440000221 ], [ 95.205332879000139, 5.307562567000161 ], [ 95.22217858200014, 5.326402085000211 ], [ 95.231944207000197, 5.344631252000283 ], [ 95.233897332000083, 5.359320380000099 ], [ 95.245290561000274, 5.379136460000098 ], [ 95.251719597000204, 5.39557526200025 ], [ 95.253591342000107, 5.411566473000107 ], [ 95.24968509199999, 5.424953518000109 ], [ 95.231944207000197, 5.450751044000128 ], [ 95.245453321000241, 5.460516669000128 ], [ 95.236827019000089, 5.474025783000229 ], [ 95.223887566000144, 5.489569403000246 ], [ 95.225108269000202, 5.505438544000242 ], [ 95.203623894000089, 5.53367747600015 ], [ 95.197276238000143, 5.546372789000259 ], [ 95.212738477000244, 5.573146877000113 ], [ 95.223887566000144, 5.58026764500022 ], [ 95.238780144000145, 5.574367580000114 ], [ 95.250498894000202, 5.579046942000218 ], [ 95.260427280000272, 5.577541408000172 ], [ 95.269704623000052, 5.574408270000106 ], [ 95.279795769000145, 5.574367580000114 ], [ 95.288340691000144, 5.578762111000174 ], [ 95.304942254000196, 5.591986395000106 ], [ 95.315765821000184, 5.597967841000127 ], [ 95.33529707100007, 5.612127997000243 ], [ 95.345225457000197, 5.615301825000131 ], [ 95.35889733200014, 5.61688873900016 ], [ 95.369151238000143, 5.62128327000022 ], [ 95.412852410000028, 5.649562893000223 ], [ 95.431895379000139, 5.65468984600011 ], [ 95.449717644000089, 5.649562893000223 ], [ 95.477061394000145, 5.623602606000134 ], [ 95.494313998000166, 5.61229075700021 ], [ 95.502696160000028, 5.605129299000112 ] ] ], [ [ [ 95.17741946700022, 5.628363348000221 ], [ 95.191091342000163, 5.608465887000136 ], [ 95.180511915000125, 5.609198309000135 ], [ 95.17139733200014, 5.607245184000306 ], [ 95.163259311000104, 5.602443752000227 ], [ 95.156260613000143, 5.594794012000193 ], [ 95.145274285000085, 5.60423411700026 ], [ 95.133799675000091, 5.606187242000146 ], [ 95.122325066000087, 5.606756903000132 ], [ 95.111582879000252, 5.611883856000191 ], [ 95.109141472000147, 5.622015692000105 ], [ 95.118174675000148, 5.63165924700013 ], [ 95.129893425000205, 5.640041408000116 ], [ 95.135752800000148, 5.646307684000249 ], [ 95.141774936000161, 5.664129950000131 ], [ 95.155039910000085, 5.656683661000159 ], [ 95.17741946700022, 5.628363348000221 ] ] ], [ [ [ 120.81999759200016, 5.667181708000214 ], [ 120.8081160820002, 5.664292710000098 ], [ 120.79932701900009, 5.667629299000225 ], [ 120.79664147200026, 5.678615627000113 ], [ 120.80738366000014, 5.69570547100011 ], [ 120.83301842500009, 5.706773179000152 ], [ 120.84864342500032, 5.706976630000213 ], [ 120.86011803500003, 5.703843492000146 ], [ 120.87924238400012, 5.69407786700026 ], [ 120.88266035200013, 5.685288804000209 ], [ 120.87370853000004, 5.682928778000189 ], [ 120.86011803500003, 5.675848700000188 ], [ 120.83887780000009, 5.668646552000098 ], [ 120.81999759200016, 5.667181708000214 ] ] ], [ [ [ 120.9243270190002, 5.71173737200013 ], [ 120.90992272200015, 5.700018622000243 ], [ 120.89087975400025, 5.709784247000243 ], [ 120.89234459700003, 5.741441148000206 ], [ 120.90430748800009, 5.759100653000246 ], [ 120.91618899800017, 5.753241278000132 ], [ 120.92937259200016, 5.733221747000243 ], [ 120.9243270190002, 5.71173737200013 ] ] ], [ [ [ 95.080902540000238, 5.74095286700026 ], [ 95.102305535000198, 5.720200914000145 ], [ 95.122080925000205, 5.704657294000128 ], [ 95.115244988000086, 5.711493231000247 ], [ 95.1269637380002, 5.702053127000227 ], [ 95.133311394000145, 5.691310940000221 ], [ 95.13233483200014, 5.680121161000159 ], [ 95.122080925000205, 5.669256903000246 ], [ 95.094737175000148, 5.683579820000205 ], [ 95.060720248000109, 5.656236070000148 ], [ 95.056895379000139, 5.669094143000109 ], [ 95.057139519000089, 5.674750067000161 ], [ 95.060720248000109, 5.683579820000205 ], [ 95.05030358200014, 5.686224677000098 ], [ 95.047862175000205, 5.689642645000106 ], [ 95.051036004000139, 5.694403387000193 ], [ 95.057302280000101, 5.700913804000209 ], [ 95.057139519000089, 5.707342841000241 ], [ 95.051036004000139, 5.712958075000131 ], [ 95.048675977000187, 5.718451239000274 ], [ 95.060720248000109, 5.724554755000213 ], [ 95.060720248000109, 5.732001044000242 ], [ 95.048838738000086, 5.736476955000114 ], [ 95.040375196000241, 5.736029364000103 ], [ 95.032725457000083, 5.73354726800028 ], [ 95.02312259200022, 5.732001044000242 ], [ 95.012705925000148, 5.735825914000145 ], [ 95.014659050000205, 5.744614976000264 ], [ 95.023692254000082, 5.754055080000114 ], [ 95.033946160000141, 5.759914455000228 ], [ 95.058278842000107, 5.757310289000259 ], [ 95.080902540000238, 5.74095286700026 ] ] ], [ [ [ 121.23113040500016, 5.800930080000285 ], [ 121.22527103000027, 5.799261786000272 ], [ 121.19703209700003, 5.800930080000285 ], [ 121.16211998800009, 5.78758372600015 ], [ 121.1464949880002, 5.789536851000207 ], [ 121.13502037900025, 5.807074286000216 ], [ 121.13502037900025, 5.821519273000206 ], [ 121.14226321700016, 5.833889065000165 ], [ 121.15267988400001, 5.843085028000132 ], [ 121.16285241000003, 5.848049221000281 ], [ 121.17994225400014, 5.846747137000193 ], [ 121.19516035200024, 5.840480861000231 ], [ 121.20785566500001, 5.83120351800028 ], [ 121.21745853000027, 5.820746161000159 ], [ 121.22982832100024, 5.816148179000265 ], [ 121.23462975400003, 5.810695705000114 ], [ 121.23113040500016, 5.800930080000285 ] ] ], [ [ [ 118.19548587300005, 5.820257880000213 ], [ 118.18921959700015, 5.819728908000116 ], [ 118.18189537900003, 5.820257880000213 ], [ 118.17253665500004, 5.822821356000191 ], [ 118.1655379570002, 5.827541408000116 ], [ 118.16382897200015, 5.834418036000102 ], [ 118.16993248800009, 5.843695380000156 ], [ 118.18100019600013, 5.851263739000103 ], [ 118.19312584700003, 5.854681708000214 ], [ 118.21949303500014, 5.855536200000245 ], [ 118.23308353000004, 5.851141669000128 ], [ 118.23609459700026, 5.841498114000103 ], [ 118.23080488400001, 5.831935940000108 ], [ 118.21949303500014, 5.827582098000107 ], [ 118.21314537900025, 5.826605536000159 ], [ 118.19548587300005, 5.820257880000213 ] ] ], [ [ [ 95.272471550000148, 5.870306708000214 ], [ 95.283864780000101, 5.857407945000261 ], [ 95.297129754000196, 5.858587958000157 ], [ 95.307302280000044, 5.872381903000246 ], [ 95.314952019000202, 5.887762762000193 ], [ 95.324961785000085, 5.898016669000128 ], [ 95.341807488000086, 5.896429755000099 ], [ 95.35132897200009, 5.887030341000241 ], [ 95.382823113000086, 5.841864325000131 ], [ 95.382823113000086, 5.807074286000216 ], [ 95.375987175000091, 5.807074286000216 ], [ 95.372569207000083, 5.813625393000223 ], [ 95.36866295700014, 5.818304755000156 ], [ 95.3554793630002, 5.827582098000107 ], [ 95.35531660200013, 5.795152085000098 ], [ 95.350433790000068, 5.783636786000102 ], [ 95.338389519000145, 5.779201565000221 ], [ 95.320323113000143, 5.780747789000259 ], [ 95.302744988000143, 5.785711981000304 ], [ 95.28663170700014, 5.794419664000202 ], [ 95.272959832000197, 5.807074286000216 ], [ 95.265879754000252, 5.821112372000187 ], [ 95.259776238000086, 5.839260158000172 ], [ 95.252696160000085, 5.854966539000259 ], [ 95.231455925000091, 5.869289455000171 ], [ 95.220550977000244, 5.885931708000214 ], [ 95.213552280000158, 5.902533270000163 ], [ 95.21461022200009, 5.910101630000213 ], [ 95.236175977000187, 5.909125067000161 ], [ 95.247813347000147, 5.905218817000218 ], [ 95.259287957000083, 5.896429755000099 ], [ 95.272471550000148, 5.870306708000214 ] ] ], [ [ [ 121.8462020190002, 6.042792059000192 ], [ 121.87094160200024, 6.033107815000221 ], [ 121.90235436300009, 6.033636786000216 ], [ 121.92904707100001, 6.045355536000102 ], [ 121.94044030000009, 6.046087958000157 ], [ 121.94320722700013, 6.033636786000216 ], [ 121.93775475400014, 6.029445705000114 ], [ 121.91277103000016, 6.016017971000167 ], [ 121.86841881600003, 5.999741929000152 ], [ 121.85767662900003, 6.002264716000241 ], [ 121.80494225400014, 6.037176825000131 ], [ 121.7846785820002, 6.05955638200021 ], [ 121.77662194100014, 6.077378648000263 ], [ 121.79371178500003, 6.074611721000224 ], [ 121.8462020190002, 6.042792059000192 ] ] ], [ [ [ 121.04224694100014, 6.097113348000107 ], [ 121.07740319100014, 6.095282294000128 ], [ 121.09636478000004, 6.096136786000159 ], [ 121.11475670700008, 6.095119533000116 ], [ 121.12582441500012, 6.090643622000243 ], [ 121.14828535200002, 6.077378648000263 ], [ 121.15935306100016, 6.074611721000224 ], [ 121.17904707100001, 6.063625393000166 ], [ 121.20232181100027, 6.013169664000145 ], [ 121.21778405000032, 5.99892812700017 ], [ 121.23601321700028, 6.003566799000112 ], [ 121.25245201900009, 6.017320054000209 ], [ 121.27125084700015, 6.026190497000243 ], [ 121.31657962300005, 6.006089585000098 ], [ 121.33887780000009, 6.004339911000102 ], [ 121.38160241000003, 6.005682684000249 ], [ 121.40349368600016, 5.999457098000107 ], [ 121.42123457100013, 5.987127997000243 ], [ 121.42872155000009, 5.969794012000193 ], [ 121.4194442070002, 5.947984117000146 ], [ 121.40992272200026, 5.943019924000168 ], [ 121.39991295700008, 5.942816473000164 ], [ 121.39177493600005, 5.939886786000102 ], [ 121.38843834700015, 5.926906643000223 ], [ 121.38949629000001, 5.90985748900016 ], [ 121.38575280000032, 5.911363023000206 ], [ 121.3476668630002, 5.906195380000099 ], [ 121.34058678500003, 5.903265692000161 ], [ 121.33082116000014, 5.895331122000243 ], [ 121.30298912900014, 5.865139065000108 ], [ 121.29249108200031, 5.858832098000107 ], [ 121.28142337300017, 5.859035549000112 ], [ 121.2710067070002, 5.863918361000174 ], [ 121.26172936300031, 5.871975002000227 ], [ 121.25342858200008, 5.885321356000134 ], [ 121.25196373800009, 5.896795966000298 ], [ 121.25318444100003, 5.906927802000155 ], [ 121.25245201900009, 5.916327216000184 ], [ 121.22779381600003, 5.942124742000203 ], [ 121.18946373800009, 5.94025299700013 ], [ 121.10792076900032, 5.903265692000161 ], [ 121.08822675900001, 5.891180731000247 ], [ 121.0810653000002, 5.888169664000259 ], [ 121.07300866000003, 5.88906484600011 ], [ 121.06714928500014, 5.89423248900016 ], [ 121.05445397200015, 5.912339585000211 ], [ 121.0498153000002, 5.916327216000184 ], [ 121.00831139400009, 5.923773505000156 ], [ 120.99952233200031, 5.920070705000171 ], [ 120.96387780000009, 5.896429755000099 ], [ 120.94361412900014, 5.886867580000171 ], [ 120.9340926440002, 5.885687567000161 ], [ 120.92286217500009, 5.88906484600011 ], [ 120.91765384200016, 5.893988348000164 ], [ 120.91675866000026, 5.899969794000128 ], [ 120.91724694100026, 5.905707098000221 ], [ 120.91537519600013, 5.910101630000213 ], [ 120.90935306100027, 5.913519598000221 ], [ 120.89682050900012, 5.916571356000134 ], [ 120.89185631600003, 5.920070705000171 ], [ 120.87631269600013, 5.942572333000214 ], [ 120.87183678500014, 5.961004950000245 ], [ 120.87647545700008, 5.97870514500022 ], [ 120.88884524800005, 5.99892812700017 ], [ 120.90552819100014, 6.015041408000116 ], [ 120.94320722700024, 6.031154690000165 ], [ 120.97095787900003, 6.050116278000189 ], [ 120.99284915500016, 6.052679755000099 ], [ 121.00171959700003, 6.057562567000161 ], [ 121.02418053500003, 6.088609117000203 ], [ 121.03272545700031, 6.095119533000116 ], [ 121.04224694100014, 6.097113348000107 ] ] ], [ [ [ 99.816952887000184, 6.176527626000166 ], [ 99.805596483000045, 6.171792982000113 ], [ 99.789522699000088, 6.185875956000189 ], [ 99.784059046000152, 6.201118998000197 ], [ 99.774710423000158, 6.204017199000134 ], [ 99.767234416000235, 6.223804251000217 ], [ 99.786291611000252, 6.24182214800021 ], [ 99.800442449000116, 6.272811332000117 ], [ 99.823921786000255, 6.282135856000139 ], [ 99.836978494000221, 6.294227056000125 ], [ 99.839782250000212, 6.277297115000238 ], [ 99.832317974000034, 6.268914560000098 ], [ 99.824858773000244, 6.257720434000248 ], [ 99.824961785000085, 6.245591539000259 ], [ 99.823252800000148, 6.239081122000243 ], [ 99.823812004000047, 6.222867477000136 ], [ 99.830233166000028, 6.205753451000248 ], [ 99.826427831000217, 6.190674611000134 ], [ 99.816952887000184, 6.176527626000166 ] ] ], [ [ [ 120.55982506600026, 6.239081122000243 ], [ 120.54558353000016, 6.23847077000022 ], [ 120.50611412900014, 6.244086005000213 ], [ 120.4946395190002, 6.249335028000132 ], [ 120.48861738400012, 6.260158596000167 ], [ 120.49203535200013, 6.267401434000135 ], [ 120.5019637380002, 6.271389065000108 ], [ 120.51498457100013, 6.272609768000109 ], [ 120.52214603000016, 6.277248440000221 ], [ 120.53003991000014, 6.28807200700021 ], [ 120.53646894600001, 6.300685940000221 ], [ 120.53931725400003, 6.310492255000213 ], [ 120.54249108200008, 6.318019924000225 ], [ 120.5566512380002, 6.340521552000212 ], [ 120.56267337300005, 6.362005927000155 ], [ 120.56959069100003, 6.37189362200013 ], [ 120.57862389400032, 6.379095770000106 ], [ 120.58814537900003, 6.380764065000165 ], [ 120.59538821700005, 6.376044012000193 ], [ 120.60035241000003, 6.367580471000224 ], [ 120.60352623800009, 6.357814846000167 ], [ 120.6049910820002, 6.349351304000152 ], [ 120.60434004000012, 6.329657294000128 ], [ 120.58285566500024, 6.261460679000209 ], [ 120.57732181100005, 6.251532294000185 ], [ 120.56983483200008, 6.243638414000202 ], [ 120.55982506600026, 6.239081122000243 ] ] ], [ [ [ 99.866465691000087, 6.429673570000148 ], [ 99.878265821000127, 6.419745184000249 ], [ 99.898936394000032, 6.41034577000022 ], [ 99.897594150000202, 6.402046953000252 ], [ 99.904795769000202, 6.397772528000132 ], [ 99.913340691000201, 6.390204169000185 ], [ 99.909030441000255, 6.378067794000117 ], [ 99.90061659800017, 6.364303784000299 ], [ 99.910865261000197, 6.348726301000227 ], [ 99.91447663800011, 6.339711457000249 ], [ 99.916270379000139, 6.331529039000202 ], [ 99.906102986000064, 6.326067391000208 ], [ 99.891694284000209, 6.321944661000146 ], [ 99.883161720000146, 6.312731168000141 ], [ 99.870508056000119, 6.304923615000121 ], [ 99.865691780000247, 6.290526604000206 ], [ 99.849417945000141, 6.300711598000191 ], [ 99.844585942000094, 6.324685901000123 ], [ 99.825332550000098, 6.324098670000296 ], [ 99.807306924000102, 6.317532434000214 ], [ 99.791770219000227, 6.298457169000301 ], [ 99.778031860999988, 6.28297272600031 ], [ 99.761664222000149, 6.282842796000182 ], [ 99.748949293000123, 6.270182652000187 ], [ 99.736672666000175, 6.264571008000246 ], [ 99.728734603000191, 6.261475800000312 ], [ 99.715457796000237, 6.310057516000256 ], [ 99.722132227000145, 6.327483499000095 ], [ 99.719043692000128, 6.353230673000212 ], [ 99.702807260000156, 6.358625424000138 ], [ 99.676838252000152, 6.363973760000135 ], [ 99.658702019000145, 6.362616278000246 ], [ 99.650075717000163, 6.376695054000209 ], [ 99.646006707000083, 6.394191799000112 ], [ 99.64522806000025, 6.435840878000306 ], [ 99.669443630000274, 6.426886127000216 ], [ 99.688751213000046, 6.435305316000211 ], [ 99.721371404000138, 6.434151632000123 ], [ 99.736478160000047, 6.423983516000305 ], [ 99.770926672000201, 6.419841624000242 ], [ 99.785996241000134, 6.422854432000122 ], [ 99.8022488430002, 6.436050476000219 ], [ 99.814291611000044, 6.454036660000156 ], [ 99.823950703000094, 6.45464585700023 ], [ 99.839203321000184, 6.454820054000152 ], [ 99.834483269000089, 6.463283596000167 ], [ 99.832774285000085, 6.470851955000114 ], [ 99.84202909600009, 6.469639039000128 ], [ 99.85108483200014, 6.465643622000243 ], [ 99.85889733200014, 6.443793036000102 ], [ 99.866465691000087, 6.429673570000148 ] ] ], [ [ [ 121.62330162900025, 6.567531643000166 ], [ 121.61638431100016, 6.56142812700017 ], [ 121.6103621750002, 6.569566148000206 ], [ 121.6079207690002, 6.591620184000249 ], [ 121.60157311300009, 6.605454820000261 ], [ 121.58961022200015, 6.62010325700021 ], [ 121.5825301440002, 6.63165924700013 ], [ 121.59083092500009, 6.636297919000242 ], [ 121.59929446700016, 6.645656643000109 ], [ 121.60726972700013, 6.662990627000283 ], [ 121.61670983200008, 6.67226797100011 ], [ 121.62891686300009, 6.657416083000157 ], [ 121.62891686300009, 6.588568427000098 ], [ 121.62330162900025, 6.567531643000166 ] ] ], [ [ [ 100.2123633220001, 6.689179383000123 ], [ 100.22750451700011, 6.688869324000166 ], [ 100.22750451700011, 6.6908330280001 ], [ 100.24264571200013, 6.700263977000134 ], [ 100.25174076399998, 6.701090801000191 ], [ 100.2633162840001, 6.700005595000107 ], [ 100.2739616300002, 6.696259053000233 ], [ 100.28078291900016, 6.688921000000164 ], [ 100.31788659700004, 6.576705628000298 ], [ 100.32920373500014, 6.557766215000243 ], [ 100.34878910300023, 6.540609639000195 ], [ 100.37765899000016, 6.526754413000276 ], [ 100.38739139900014, 6.52208363900013 ], [ 100.40966394000009, 6.515262349000295 ], [ 100.42651045700018, 6.513892925000107 ], [ 100.45234867400006, 6.51686431900032 ], [ 100.46723148600012, 6.513221131000137 ], [ 100.49916752200022, 6.490302633000113 ], [ 100.51740930200015, 6.481905213000232 ], [ 100.57843916800016, 6.464257711000244 ], [ 100.61264896700015, 6.449168193000162 ], [ 100.63068404100022, 6.444775696000249 ], [ 100.64840905700004, 6.447152812000297 ], [ 100.71284956900018, 6.493041484000173 ], [ 100.72995446800013, 6.4931965130001 ], [ 100.73150476100022, 6.487021179000237 ], [ 100.73119470200021, 6.464722799000185 ], [ 100.7338818770001, 6.456377055000303 ], [ 100.74230513500015, 6.450124207000215 ], [ 100.75160689400019, 6.448806457000217 ], [ 100.76189050400018, 6.448961487000247 ], [ 100.7732593180001, 6.447307841000225 ], [ 100.79630700700022, 6.433949484000095 ], [ 100.80560876500016, 6.414803365000182 ], [ 100.80845096900015, 6.36726104800016 ], [ 100.81072473200004, 6.355763041000159 ], [ 100.81516890500018, 6.344833476000247 ], [ 100.82710616100019, 6.324550477000287 ], [ 100.82901818900029, 6.316256409000232 ], [ 100.82689945500016, 6.307058004000226 ], [ 100.8237322180002, 6.298604273000194 ], [ 100.82338545800008, 6.29767873100019 ], [ 100.82152510600019, 6.288764547000142 ], [ 100.82214522400017, 6.259877422000216 ], [ 100.82457401500011, 6.251480001000232 ], [ 100.83299727400009, 6.236674703000176 ], [ 100.83733809400024, 6.237191467000116 ], [ 100.8428157960002, 6.243935242000248 ], [ 100.85511478700022, 6.24791432800015 ], [ 100.86844730700022, 6.246157328000095 ], [ 100.91009851100017, 6.235796204000224 ], [ 100.92890873200014, 6.240627950000146 ], [ 100.95516036000009, 6.268636576000176 ], [ 100.97428064000007, 6.272615662000248 ], [ 101.00647505700016, 6.246364034000123 ], [ 101.02306319200017, 6.240989685000159 ], [ 101.06895186400021, 6.25085988300026 ], [ 101.08166426600025, 6.246467387000223 ], [ 101.08827884900018, 6.233522441000162 ], [ 101.09101770000001, 6.213161926000112 ], [ 101.089157349, 6.188848165000195 ], [ 101.08001062000022, 6.180347392000215 ], [ 101.06688480700018, 6.174327088000155 ], [ 101.05344893400019, 6.157609761000117 ], [ 101.05251875900024, 6.134562073000268 ], [ 101.0685384520001, 6.119550069000184 ], [ 101.08714196800014, 6.105597433000185 ], [ 101.09427331500018, 6.085753683000178 ], [ 101.08900232000025, 6.04660878500016 ], [ 101.08745202700015, 5.989687195000101 ], [ 101.08042403200011, 5.957027690000132 ], [ 101.07877038600009, 5.938165792000177 ], [ 101.07112227400017, 5.919846497000094 ], [ 101.05293217000025, 5.91310272200019 ], [ 101.03184818500023, 5.908916931000135 ], [ 101.01531172700015, 5.898349101000235 ], [ 100.97428064000007, 5.81530507500031 ], [ 100.9677177330002, 5.804117126000165 ], [ 100.96528894000022, 5.792412415000285 ], [ 100.96720096800016, 5.781017762000261 ], [ 100.97242665500011, 5.772852627000134 ], [ 100.98001672400022, 5.760993144000224 ], [ 100.99174727400003, 5.73748036700016 ], [ 100.99862023900022, 5.729548035000221 ], [ 101.00838708500009, 5.725672302000248 ], [ 101.02740401200015, 5.726550802000304 ], [ 101.03732588700029, 5.724587097000267 ], [ 101.0598051350002, 5.709575094000286 ], [ 101.07877038600009, 5.687767640000175 ], [ 101.0939632570001, 5.6626528930002 ], [ 101.10543542600016, 5.637641500000143 ], [ 101.12217858900016, 5.62989003500013 ], [ 101.14998050900016, 5.638649190000194 ], [ 101.19685103400019, 5.666812846000255 ], [ 101.21230228700023, 5.681514791000154 ], [ 101.22501469000002, 5.699213969000141 ], [ 101.23359297700023, 5.71941945400016 ], [ 101.23664188700008, 5.741666158000214 ], [ 101.24899255400015, 5.786986389000219 ], [ 101.27968835500019, 5.803031921000184 ], [ 101.31896244400014, 5.810085755000102 ], [ 101.35756473800024, 5.828405050000185 ], [ 101.39265303600018, 5.851091004000125 ], [ 101.50020142500017, 5.89269360100019 ], [ 101.53465987100009, 5.906023051000148 ], [ 101.55791426600007, 5.911345724000114 ], [ 101.5793083100001, 5.906333109000229 ], [ 101.59512129800015, 5.885352478000243 ], [ 101.59977217600004, 5.874061178000147 ], [ 101.60514652500018, 5.866103007000106 ], [ 101.61289799000019, 5.861348775000238 ], [ 101.62457686400018, 5.859410909000303 ], [ 101.63408532700009, 5.855586853000261 ], [ 101.63439538600022, 5.847344462000308 ], [ 101.63129480000021, 5.837370911000107 ], [ 101.63077803600009, 5.828405050000185 ], [ 101.65036340400019, 5.782645569000238 ], [ 101.66591800900011, 5.765592346000119 ], [ 101.68669193600005, 5.761199849000207 ], [ 101.69661381100025, 5.76626414000026 ], [ 101.69756670000015, 5.767138300000113 ], [ 101.71475223800024, 5.782903951000094 ], [ 101.72679284700024, 5.786469625000279 ], [ 101.74002201400015, 5.782361349000155 ], [ 101.74787683100016, 5.772387797000249 ], [ 101.75418135600017, 5.760269674000256 ], [ 101.76286299700024, 5.749546814000155 ], [ 101.78415368600031, 5.738100484000199 ], [ 101.80048343900006, 5.739909159000206 ], [ 101.81226566599997, 5.752544047000242 ], [ 101.82022383600031, 5.773731384000314 ], [ 101.82549483300011, 5.779829203000247 ], [ 101.85474369300022, 5.797657573000095 ], [ 101.86084151200015, 5.806494242000213 ], [ 101.86425215700018, 5.815408427000136 ], [ 101.86921309400009, 5.823857524000118 ], [ 101.88032352800025, 5.83104054800026 ], [ 101.91293135600012, 5.859307556000147 ], [ 101.91928755700013, 5.897573955000269 ], [ 101.91975264500007, 5.940258687000267 ], [ 101.93473881000006, 5.981729024000231 ], [ 101.95938846900009, 6.011598002000142 ], [ 102.03344079600009, 6.068390402000148 ], [ 102.06000248200007, 6.094797058000154 ], [ 102.07126794400017, 6.126655579000101 ], [ 102.06665583400013, 6.204748336000137 ], [ 102.07311375502775, 6.257496632543223 ], [ 102.09864342500009, 6.239081122000243 ], [ 102.1521102220002, 6.203192450000188 ], [ 102.16358483200014, 6.197495835000211 ], [ 102.18702233200014, 6.203436591000241 ], [ 102.19166100400025, 6.215073960000211 ], [ 102.18311608200003, 6.22304922100011 ], [ 102.16684004000018, 6.217962958000157 ], [ 102.17807050900012, 6.233628648000149 ], [ 102.19955488400024, 6.23281484600011 ], [ 102.31568444100009, 6.190375067000218 ], [ 102.33814537900025, 6.176988023000149 ], [ 102.3798934250002, 6.132961330000228 ], [ 102.49984785200013, 5.897406317000218 ], [ 102.52076256600009, 5.871730861000174 ], [ 102.54200280000015, 5.854763088000198 ], [ 102.55046634200022, 5.848049221000281 ], [ 102.60328209700009, 5.815375067000218 ], [ 102.62631269600024, 5.797186591000241 ], [ 102.6460067070002, 5.772935289000259 ], [ 102.65902754000012, 5.740545966000241 ], [ 102.66920006600014, 5.725002346000224 ], [ 102.69646243600022, 5.712876695000148 ], [ 102.87566165500004, 5.571437893000109 ], [ 102.91814212300022, 5.550441799000168 ], [ 102.95948326900009, 5.54205963700025 ], [ 102.97559655000003, 5.531317450000245 ], [ 103.0275985040002, 5.485500393000166 ], [ 103.12029056100005, 5.38133372600015 ], [ 103.22242272200009, 5.221136786000216 ], [ 103.25733483200003, 5.136175848000107 ], [ 103.35661868600005, 4.970404364000103 ], [ 103.41529381600009, 4.863348700000245 ], [ 103.42123457100018, 4.844142971000167 ], [ 103.42505944100014, 4.837144273000206 ], [ 103.44263756600014, 4.816595770000106 ], [ 103.44800866000008, 4.806545315000108 ], [ 103.44857832100007, 4.795070705000171 ], [ 103.44117272200026, 4.765570380000099 ], [ 103.44263756600014, 4.742824611000231 ], [ 103.45248457100018, 4.701076565000108 ], [ 103.46941165500004, 4.550034898000149 ], [ 103.46810957100013, 4.527085679000152 ], [ 103.45826256600014, 4.50828685100015 ], [ 103.4514266290002, 4.48847077000022 ], [ 103.46371504000007, 4.443752346000167 ], [ 103.46168053500003, 4.429144598000164 ], [ 103.49415123800003, 4.336615302000155 ], [ 103.49642988400012, 4.306219794000185 ], [ 103.49390709699998, 4.29531484600011 ], [ 103.48031660200024, 4.260239976000207 ], [ 103.47234134200011, 4.248236395000106 ], [ 103.46583092500009, 4.242092190000221 ], [ 103.45167076900015, 4.225165106000134 ], [ 103.44800866000008, 4.217474677000212 ], [ 103.4484155610001, 4.208807684000135 ], [ 103.4548445970002, 4.182766018000166 ], [ 103.44857832100007, 4.172430731000247 ], [ 103.44280032600011, 4.168972072000145 ], [ 103.44092858200014, 4.167873440000221 ], [ 103.4327905610001, 4.16486237200013 ], [ 103.42465254000012, 4.159165757000096 ], [ 103.40398196699999, 4.13182200700021 ], [ 103.39519290500021, 4.11627838700025 ], [ 103.3940535820002, 4.09861888200021 ], [ 103.40088951900009, 4.067328192000105 ], [ 103.4379988940002, 3.975043036000216 ], [ 103.43433678499997, 3.950018622000187 ], [ 103.41163170700003, 3.963934637000307 ], [ 103.39470462300017, 3.935003973000164 ], [ 103.38404381600009, 3.89032623900016 ], [ 103.38038170700008, 3.857489325000131 ], [ 103.38135826900003, 3.820502020000163 ], [ 103.3784285820002, 3.80243561400016 ], [ 103.36101321700016, 3.801988023000149 ], [ 103.35108483200014, 3.789211330000228 ], [ 103.34278405000009, 3.771918036000216 ], [ 103.33871504000018, 3.75820547100011 ], [ 103.3396102220002, 3.738348700000188 ], [ 103.34498131600014, 3.72158437700017 ], [ 103.38355553500014, 3.637274481000304 ], [ 103.38721764400015, 3.624741929000209 ], [ 103.40455162900025, 3.600043036000216 ], [ 103.43873131600009, 3.567816473000164 ], [ 103.46216881600003, 3.534125067000161 ], [ 103.44800866000008, 3.504950262000193 ], [ 103.48218834700009, 3.511786200000245 ], [ 103.43336022200009, 3.408392645000276 ], [ 103.42807050900024, 3.367173570000261 ], [ 103.44450931100022, 3.243557033000229 ], [ 103.4514266290002, 3.223781643000166 ], [ 103.45606530000003, 3.203762111000231 ], [ 103.43458092500009, 2.961818752000113 ], [ 103.44117272200026, 2.922105210000098 ], [ 103.47364342500009, 2.851019598000164 ], [ 103.52019290500027, 2.789007880000099 ], [ 103.63843834700015, 2.672105210000154 ], [ 103.64031009199999, 2.671291408000172 ], [ 103.65211022200009, 2.666001695000261 ], [ 103.66749108200014, 2.662909247000187 ], [ 103.68506920700014, 2.662054755000156 ], [ 103.6904403000002, 2.659125067000275 ], [ 103.70541425900024, 2.645453192000105 ], [ 103.71615644600024, 2.641546942000218 ], [ 103.72584069100009, 2.643052476000264 ], [ 103.74968509200011, 2.654608466000184 ], [ 103.76514733200014, 2.648911851000207 ], [ 103.76677493600016, 2.641750393000109 ], [ 103.76417076900003, 2.633246161000216 ], [ 103.76710045700014, 2.623846747000243 ], [ 103.80176842500015, 2.596869208000157 ], [ 103.81397545700014, 2.581488348000107 ], [ 103.83969160200024, 2.524847723000164 ], [ 103.83106530000009, 2.501695054000209 ], [ 103.83033287900014, 2.482367255000156 ], [ 103.83765709700003, 2.463812567000275 ], [ 103.91138756600009, 2.370672919000185 ], [ 103.92009524800005, 2.362616278000189 ], [ 103.9420679050001, 2.346502997000187 ], [ 103.94898522199998, 2.339911200000245 ], [ 103.95337975400014, 2.329413153000189 ], [ 103.95362389400009, 2.309475002000113 ], [ 103.9558211600002, 2.298285223000164 ], [ 103.96241295700014, 2.287298895000106 ], [ 103.9799910820002, 2.265570380000213 ], [ 103.98365319100003, 2.253648179000095 ], [ 103.98145592500015, 2.24433014500022 ], [ 103.97169030000009, 2.224595445000205 ], [ 103.96941165500016, 2.212713934000249 ], [ 103.97641035200019, 2.192368882000153 ], [ 104.02328535200019, 2.13446686400016 ], [ 104.04883873800009, 2.071763414000259 ], [ 104.06723066500012, 2.046820380000099 ], [ 104.0788680350002, 2.021795966000241 ], [ 104.0854598320002, 2.010972398000149 ], [ 104.1064559250002, 1.986883856000134 ], [ 104.11280358200008, 1.976141669000128 ], [ 104.1208602220002, 1.954046942000161 ], [ 104.12232506600009, 1.934637762000193 ], [ 104.11963951900015, 1.891180731000191 ], [ 104.12427819100009, 1.870550848000221 ], [ 104.13542728000021, 1.848944403000132 ], [ 104.14918053500014, 1.837469794000128 ], [ 104.16114342500015, 1.847072658000116 ], [ 104.1674910820002, 1.847072658000116 ], [ 104.19532311300009, 1.798732815000165 ], [ 104.2042749360001, 1.752875067000161 ], [ 104.2229110040002, 1.726874091000184 ], [ 104.22803795700008, 1.712103583000214 ], [ 104.22950280000003, 1.678290106000134 ], [ 104.2353621750002, 1.664374091000241 ], [ 104.24724368600016, 1.650539455000285 ], [ 104.25521894600013, 1.637762762000136 ], [ 104.24984785200013, 1.627346096000167 ], [ 104.25652103, 1.613836981000191 ], [ 104.26368248800014, 1.572170315000221 ], [ 104.28402754000024, 1.517482815000278 ], [ 104.29371178500008, 1.471584377000113 ], [ 104.29468834700009, 1.446519273000263 ], [ 104.28785241000014, 1.435532945000205 ], [ 104.27955162900014, 1.426459052000212 ], [ 104.28239993600022, 1.382635809000249 ], [ 104.27735436300009, 1.367336330000114 ], [ 104.23959394600013, 1.367336330000114 ], [ 104.23462975400025, 1.36399974200026 ], [ 104.2241317070002, 1.349514065000165 ], [ 104.2192488940002, 1.346177476000207 ], [ 104.1740828790002, 1.348211981000247 ], [ 104.15447024800022, 1.352280992000203 ], [ 104.11402428500008, 1.368475653000132 ], [ 104.10621178500026, 1.375189520000106 ], [ 104.1052352220002, 1.385402736000117 ], [ 104.10596764400003, 1.40448639500022 ], [ 104.10059655000009, 1.41885000200017 ], [ 104.08863366000008, 1.429429429000209 ], [ 104.07488040500016, 1.438706773000263 ], [ 104.06495201900003, 1.448635158000116 ], [ 104.05941816500012, 1.48533763200021 ], [ 104.08627363400018, 1.502875067000218 ], [ 104.12322024800022, 1.51752350500027 ], [ 104.1476343110001, 1.545396226000264 ], [ 104.12891686300003, 1.549709377000227 ], [ 104.11117597700013, 1.545070705000114 ], [ 104.0944930350002, 1.535223700000245 ], [ 104.0608016290002, 1.510077216000241 ], [ 104.05339603000021, 1.506293036000159 ], [ 104.04981530000003, 1.513088283000116 ], [ 104.04395592500009, 1.531195380000213 ], [ 104.01221764400015, 1.596869208000214 ], [ 103.9885360040002, 1.632391669000242 ], [ 103.96599368600022, 1.647853908000172 ], [ 103.96021569100009, 1.63580963700025 ], [ 103.97038821700011, 1.608628648000263 ], [ 104.00831139400003, 1.548732815000221 ], [ 104.00863691500024, 1.534857489000217 ], [ 104.00342858200014, 1.506903387000136 ], [ 104.00570722700013, 1.493841864000217 ], [ 104.01002037900014, 1.479478257000096 ], [ 104.01246178499997, 1.464260158000116 ], [ 104.00977623800009, 1.448635158000116 ], [ 103.97445722700019, 1.419826565000278 ], [ 103.92652428500008, 1.431708075000131 ], [ 103.83969160200024, 1.476548570000205 ], [ 103.81430097700024, 1.474514065000221 ], [ 103.77409915500016, 1.453680731000247 ], [ 103.75310306099999, 1.448635158000116 ], [ 103.71265709700015, 1.452093817000218 ], [ 103.69760175900024, 1.450628973000164 ], [ 103.6814070970002, 1.441799221000167 ], [ 103.63005618600016, 1.37742747600015 ], [ 103.6001082690002, 1.353461005000213 ], [ 103.5647078790002, 1.35984935100015 ], [ 103.56275475400014, 1.364406643000109 ], [ 103.55551191500012, 1.374741929000095 ], [ 103.54786217500009, 1.382066148000263 ], [ 103.54420006600003, 1.377183335000154 ], [ 103.54525800900012, 1.365952867000146 ], [ 103.5500594410002, 1.351060289000202 ], [ 103.55103600400025, 1.34284088700025 ], [ 103.54851321700016, 1.331691799000225 ], [ 103.53052819100009, 1.305243231000191 ], [ 103.5163680350002, 1.270453192000161 ], [ 103.50407962300022, 1.289943752000227 ], [ 103.46900475400025, 1.319973049000168 ], [ 103.4548445970002, 1.339422919000242 ], [ 103.4462996750002, 1.359320380000156 ], [ 103.41391035200019, 1.467840887000136 ], [ 103.39535566500018, 1.506415106000134 ], [ 103.36736087300005, 1.538397528000132 ], [ 103.32504316500024, 1.56533437700017 ], [ 103.20606530000009, 1.61041901200025 ], [ 103.0371199880002, 1.715521552000155 ], [ 102.9963485040002, 1.734930731000134 ], [ 102.97413170700008, 1.741156317000105 ], [ 102.95118248800009, 1.743394273000206 ], [ 102.9345809250002, 1.747544664000145 ], [ 102.92318769600018, 1.757879950000131 ], [ 102.90674889400015, 1.784369208000214 ], [ 102.88746178500014, 1.80711497600015 ], [ 102.86361738400012, 1.827785549000225 ], [ 102.83562259200022, 1.845648505000099 ], [ 102.80445397200003, 1.86009349200026 ], [ 102.78842207100024, 1.854193427000155 ], [ 102.73878014400003, 1.846625067000105 ], [ 102.72185306100005, 1.847072658000116 ], [ 102.69939212300005, 1.859442450000245 ], [ 102.68620853000021, 1.879055080000114 ], [ 102.6671655610001, 1.92157623900016 ], [ 102.65064537900014, 1.940904039000259 ], [ 102.56885826900009, 2.006415106000191 ], [ 102.55762780000015, 2.018744208000157 ], [ 102.55046634200022, 2.03143952000022 ], [ 102.5590926440002, 2.033189195000148 ], [ 102.56031334700003, 2.036444403000189 ], [ 102.55827884200022, 2.040594794000128 ], [ 102.55730228000021, 2.045111395000163 ], [ 102.54468834700009, 2.05768463700025 ], [ 102.52686608200008, 2.070868231000191 ], [ 102.48902428500014, 2.092922268000166 ], [ 102.3486434250002, 2.149969794000185 ], [ 102.18799889400009, 2.216376044000242 ], [ 102.15430748800009, 2.235663153000246 ], [ 102.12696373800003, 2.257310289000259 ], [ 102.05128014400015, 2.340887762000193 ], [ 102.04029381600026, 2.346136786000216 ], [ 102.01872806100016, 2.35040924700013 ], [ 101.99903405000003, 2.361639716000184 ], [ 101.9870711600002, 2.377142645000106 ], [ 101.9887801440002, 2.394517320000205 ], [ 101.97217858200008, 2.398586330000228 ], [ 101.95622806100022, 2.404771226000207 ], [ 101.92676842500009, 2.422430731000247 ], [ 101.9091903000002, 2.410793361000117 ], [ 101.87745201900009, 2.408840236000117 ], [ 101.8652449880002, 2.394517320000205 ], [ 101.85816491000003, 2.419419664000202 ], [ 101.8562117850002, 2.451361395000163 ], [ 101.85108483200008, 2.478949286000272 ], [ 101.83423912900025, 2.49070872600015 ], [ 101.82740319100009, 2.494126695000261 ], [ 101.81771894600018, 2.502183335000154 ], [ 101.80323326900003, 2.518011786000216 ], [ 101.78305097700013, 2.575873114000217 ], [ 101.77442467500009, 2.586574611000231 ], [ 101.7609969410002, 2.592108466000241 ], [ 101.71338951900003, 2.596584377000113 ], [ 101.70093834700015, 2.604152736000117 ], [ 101.69092858200014, 2.614894924000168 ], [ 101.67351321700005, 2.627264716000127 ], [ 101.61833743600016, 2.636908270000106 ], [ 101.59791100400025, 2.646307684000135 ], [ 101.56421959700015, 2.652004299000112 ], [ 101.54232832100024, 2.661281643000166 ], [ 101.50277754000007, 2.68939850500027 ], [ 101.4796655610001, 2.716986395000106 ], [ 101.43018639400009, 2.792466539000202 ], [ 101.39918053500014, 2.81907786700026 ], [ 101.35515384200022, 2.829250393000109 ], [ 101.31055748800014, 2.833563544000185 ], [ 101.28638756600014, 2.849676825000188 ], [ 101.3034774100002, 2.894842841000127 ], [ 101.2810164720002, 2.897853908000116 ], [ 101.28305097700024, 2.911200262000193 ], [ 101.33277428500014, 2.97235748900016 ], [ 101.34717858200008, 2.985500393000109 ], [ 101.36158287900025, 2.991034247000243 ], [ 101.37281334700009, 3.00234609600011 ], [ 101.37281334700009, 3.028306382000153 ], [ 101.36500084700009, 3.076361395000106 ], [ 101.35857181100016, 3.089260158000229 ], [ 101.3298445970002, 3.111761786000216 ], [ 101.3234155610001, 3.124457098000107 ], [ 101.3034774100002, 3.254828192000105 ], [ 101.29761803500008, 3.274603583000214 ], [ 101.28321373800009, 3.290838934000192 ], [ 101.24887129000024, 3.319973049000112 ], [ 101.24488366, 3.327582098000278 ], [ 101.24146569100009, 3.336615302000155 ], [ 101.23568769600007, 3.34414297100011 ], [ 101.21558678500003, 3.349188544000242 ], [ 101.20573978000021, 3.353827216000184 ], [ 101.19760175900018, 3.359320380000099 ], [ 101.19418379000012, 3.364081122000187 ], [ 101.18718509200011, 3.380194403000189 ], [ 101.13965905000009, 3.442857164000202 ], [ 101.10840905000015, 3.473944403000303 ], [ 101.1022241550001, 3.48289622600015 ], [ 101.09400475400025, 3.505804755000099 ], [ 101.07422936300014, 3.534409898000206 ], [ 101.06446373800014, 3.579046942000105 ], [ 101.05713951900009, 3.600531317000218 ], [ 101.04053795700014, 3.621975002000113 ], [ 100.96794681100016, 3.672064520000163 ], [ 100.94336998800014, 3.68260325700021 ], [ 100.93360436300009, 3.689276434000135 ], [ 100.9279891290002, 3.696600653000189 ], [ 100.91244550900018, 3.724066473000221 ], [ 100.88648522200009, 3.756333726000207 ], [ 100.86963951900009, 3.768011786000159 ], [ 100.82292728000021, 3.776068427000155 ], [ 100.81226647200009, 3.786566473000164 ], [ 100.81324303500014, 3.803778387000136 ], [ 100.82374108200003, 3.827093817000161 ], [ 100.8415633470002, 3.843736070000205 ], [ 100.84538821700011, 3.85126373900016 ], [ 100.83399498800009, 3.854396877000227 ], [ 100.81177819100009, 3.851223049000168 ], [ 100.8005477220002, 3.847805080000285 ], [ 100.79590905000009, 3.843817450000188 ], [ 100.78484134200022, 3.839341539000145 ], [ 100.76010175900024, 3.847154039000145 ], [ 100.73462975400025, 3.859442450000188 ], [ 100.72071373800009, 3.86806875200017 ], [ 100.70948326900015, 3.883042710000098 ], [ 100.70337975400025, 3.898871161000159 ], [ 100.7006942070002, 3.917222398000206 ], [ 100.7011824880002, 3.967230536000216 ], [ 100.70630944100009, 3.983587958000214 ], [ 100.7187606130002, 3.990871486000174 ], [ 100.78174889400015, 3.988023179000152 ], [ 100.80152428500008, 3.991115627000227 ], [ 100.8173934250002, 4.01080963700025 ], [ 100.83464603000027, 4.018540757000096 ], [ 100.8549910820002, 4.022162177000212 ], [ 100.87142988400018, 4.018866278000246 ], [ 100.86150149800011, 4.040350653000189 ], [ 100.8381453790002, 4.03799062700017 ], [ 100.81430097700013, 4.026068427000098 ], [ 100.80323326900009, 4.018866278000246 ], [ 100.77759850400008, 4.021389065000221 ], [ 100.7729598320002, 4.037014065000165 ], [ 100.77670332100018, 4.060532945000148 ], [ 100.77605228000004, 4.086493231000134 ], [ 100.7658797540002, 4.099839585000211 ], [ 100.71387780000003, 4.134955145000106 ], [ 100.69752037900014, 4.15086497600015 ], [ 100.6777449880002, 4.165187893000109 ], [ 100.65552819100009, 4.169501044000242 ], [ 100.63257897200009, 4.155462958000101 ], [ 100.62256920700008, 4.175848700000131 ], [ 100.61304772199998, 4.208400783000116 ], [ 100.60889733200014, 4.238430080000285 ], [ 100.61524498800009, 4.251654364000217 ], [ 100.60027103000016, 4.256537177000155 ], [ 100.5957137380002, 4.268744208000271 ], [ 100.59498131599997, 4.284409898000206 ], [ 100.5909936860001, 4.300034898000206 ], [ 100.57960045700003, 4.311224677000155 ], [ 100.56967207100013, 4.313381252000113 ], [ 100.5654403000002, 4.3191592470003 ], [ 100.5705672540002, 4.341009833000214 ], [ 100.57984459699998, 4.366441148000263 ], [ 100.58301842500003, 4.380072333000214 ], [ 100.58423912900014, 4.399074611000174 ], [ 100.58855228000004, 4.412258205000171 ], [ 100.60767662900014, 4.426214911000102 ], [ 100.6120711600002, 4.440008856000191 ], [ 100.61475670700008, 4.467759507000096 ], [ 100.63257897200009, 4.532904364000103 ], [ 100.64551842500015, 4.560044664000259 ], [ 100.63021894600018, 4.553941148000263 ], [ 100.61231530000015, 4.558742580000171 ], [ 100.59734134200022, 4.571926174000112 ], [ 100.5909936860001, 4.590806382000153 ], [ 100.59441165499999, 4.610907294000242 ], [ 100.6037703790002, 4.629461981000247 ], [ 100.61695397200009, 4.638251044000128 ], [ 100.63257897200009, 4.629055080000285 ], [ 100.63949629000024, 4.643133856000191 ], [ 100.64730879000024, 4.654730536000159 ], [ 100.65609785200019, 4.663723049000168 ], [ 100.66618899800011, 4.669907945000148 ], [ 100.64234459700009, 4.674302476000207 ], [ 100.6203719410002, 4.666205145000163 ], [ 100.60417728000021, 4.665838934000135 ], [ 100.597829623, 4.69354889500022 ], [ 100.59449303499997, 4.743068752000113 ], [ 100.60385175900018, 4.756048895000163 ], [ 100.63257897200009, 4.758124091000127 ], [ 100.63257897200009, 4.765570380000099 ], [ 100.62680097700013, 4.76658763200021 ], [ 100.6120711600002, 4.772365627000227 ], [ 100.61980228000021, 4.786444403000132 ], [ 100.61736087300011, 4.792914130000156 ], [ 100.597829623, 4.799709377000113 ], [ 100.58765709700015, 4.800970770000106 ], [ 100.58122806100005, 4.797919012000193 ], [ 100.57618248800014, 4.799261786000102 ], [ 100.5705672540002, 4.813381252000227 ], [ 100.56950931100016, 4.827134507000153 ], [ 100.57740319100014, 4.843980210000154 ], [ 100.57740319100014, 4.854315497000243 ], [ 100.5715438160002, 4.857733466000127 ], [ 100.56177819100014, 4.858303127000113 ], [ 100.55307050900018, 4.86204661700026 ], [ 100.55005944100009, 4.875433661000159 ], [ 100.53988691500018, 4.870021877000227 ], [ 100.52914472700013, 4.867865302000212 ], [ 100.5053817070002, 4.867987372000187 ], [ 100.49439537900014, 4.872259833000101 ], [ 100.4992781910002, 4.88104889500022 ], [ 100.50961347700019, 4.888617255000099 ], [ 100.51531009199999, 4.88906484600011 ], [ 100.51465905000015, 4.902492580000171 ], [ 100.51099694100009, 4.906927802000155 ], [ 100.50342858200014, 4.910142320000205 ], [ 100.49170983200008, 4.919826565000108 ], [ 100.48170006599997, 4.92470937700017 ], [ 100.47071373800014, 4.922308661000102 ], [ 100.46070397200003, 4.916001695000148 ], [ 100.45386803500014, 4.908921617000203 ], [ 100.44157962300017, 4.922837632000096 ], [ 100.43580162900008, 4.936102606000191 ], [ 100.4323836600002, 4.949652411000159 ], [ 100.42652428500008, 4.964178778000132 ], [ 100.40186608200008, 4.992336330000171 ], [ 100.3956811860001, 5.01337311400016 ], [ 100.38070722700024, 5.04734935100015 ], [ 100.37232506600009, 5.061428127000113 ], [ 100.36451256600009, 5.084295966000127 ], [ 100.36589603, 5.092515367000146 ], [ 100.36947675900024, 5.093247789000145 ], [ 100.37419681100016, 5.091945705000228 ], [ 100.3786727220002, 5.09454987200013 ], [ 100.38884524800005, 5.105658270000163 ], [ 100.40007571700016, 5.114894924000225 ], [ 100.40902754000018, 5.126654364000103 ], [ 100.4162703790002, 5.159613348000107 ], [ 100.43091881600014, 5.190619208000101 ], [ 100.43327884199999, 5.211167710000154 ], [ 100.43067467500009, 5.222357489000103 ], [ 100.42115319100009, 5.242417710000154 ], [ 100.4189559250002, 5.248480536000102 ], [ 100.42123457100007, 5.260646877000227 ], [ 100.4311629570002, 5.278957424000282 ], [ 100.43327884199999, 5.290025132000096 ], [ 100.43002363400012, 5.302883205000228 ], [ 100.40601647200009, 5.348374742000203 ], [ 100.3852645190002, 5.376939195000261 ], [ 100.38021894600024, 5.390692450000188 ], [ 100.3786727220002, 5.413275458000157 ], [ 100.38493899800017, 5.499253648000263 ], [ 100.37842858200008, 5.522772528000246 ], [ 100.35572350400014, 5.56268952000022 ], [ 100.35084069100014, 5.584214585000154 ], [ 100.34400475400025, 5.669256903000246 ], [ 100.35320071700022, 5.665350653000132 ], [ 100.36491946700028, 5.662665106000247 ], [ 100.37631269600018, 5.663316148000149 ], [ 100.38493899800017, 5.669256903000246 ], [ 100.38640384200022, 5.679103908000229 ], [ 100.37875410200019, 5.685207424000225 ], [ 100.36915123800003, 5.689601955000114 ], [ 100.36451256600009, 5.69407786700026 ], [ 100.3757430350002, 5.810939846000167 ], [ 100.34913170700014, 6.012681382000096 ], [ 100.34058678500014, 6.029933986000287 ], [ 100.32593834700015, 6.049058335000154 ], [ 100.31397545700008, 6.070624091000184 ], [ 100.2961531910002, 6.115545966000241 ], [ 100.2600203790002, 6.180894273000206 ], [ 100.24789472700019, 6.220770575000188 ], [ 100.23259524800022, 6.236232815000221 ], [ 100.19996178500026, 6.258978583000157 ], [ 100.17457116000008, 6.290961005000156 ], [ 100.15284264400009, 6.333929755000213 ], [ 100.13746178500014, 6.380519924000168 ], [ 100.1311141290002, 6.423407294000185 ], [ 100.12728925900012, 6.442287502000227 ], [ 100.13557214400021, 6.457720643000243 ], [ 100.14435713700027, 6.479579773000182 ], [ 100.1484912520001, 6.504487814000243 ], [ 100.14807784100009, 6.513221131000137 ], [ 100.14482222500021, 6.530584412000167 ], [ 100.1457007250001, 6.53952443500026 ], [ 100.15241866100007, 6.549988912000231 ], [ 100.16120365400019, 6.557456156000228 ], [ 100.16719812000019, 6.566137797000124 ], [ 100.16518273900016, 6.580322978000254 ], [ 100.15717289200006, 6.60352569600019 ], [ 100.15608768800018, 6.620578919000309 ], [ 100.16275394700011, 6.661119080000219 ], [ 100.16404585800012, 6.683727519000229 ], [ 100.16683638600011, 6.695122172000254 ], [ 100.17329593900018, 6.703416240000308 ], [ 100.18755863400014, 6.707963766000148 ], [ 100.19665368700009, 6.702486064000254 ], [ 100.19920020200021, 6.69941363900017 ], [ 100.20378503500024, 6.693881938000118 ], [ 100.2123633220001, 6.689179383000123 ] ] ], [ [ [ 122.0576278000002, 6.413885809000135 ], [ 122.03874759200016, 6.410223700000245 ], [ 121.99488366000014, 6.41034577000022 ], [ 121.96225019600024, 6.404852606000134 ], [ 121.9575301440002, 6.407294012000136 ], [ 121.95639082100013, 6.42812734600011 ], [ 121.95411217500009, 6.436916408000116 ], [ 121.95004316500024, 6.444525458000157 ], [ 121.88005618600005, 6.503241278000132 ], [ 121.87956790500027, 6.556138414000259 ], [ 121.8750106130002, 6.574855861000231 ], [ 121.85564212300028, 6.583400783000116 ], [ 121.83318118600016, 6.585150458000157 ], [ 121.81446373800031, 6.592922268000166 ], [ 121.80681399800028, 6.619289455000171 ], [ 121.81080162900025, 6.645168361000174 ], [ 121.82203209700026, 6.660956122000243 ], [ 121.83920332100001, 6.66893138200021 ], [ 121.94019616000003, 6.677313544000242 ], [ 121.94825280000009, 6.680568752000113 ], [ 121.95834394600013, 6.695054429000265 ], [ 121.99789472700013, 6.712062893000109 ], [ 122.01295006600014, 6.729925848000107 ], [ 122.02312259200016, 6.736639716000127 ], [ 122.04021243600027, 6.739325262000136 ], [ 122.06666100400014, 6.740708726000207 ], [ 122.0752059250002, 6.739813544000185 ], [ 122.08423912900014, 6.735663153000246 ], [ 122.0981551440002, 6.721584377000113 ], [ 122.1059676440002, 6.715562242000203 ], [ 122.11646569100014, 6.711086330000228 ], [ 122.14128665500016, 6.705389716000184 ], [ 122.1528426440002, 6.704575914000145 ], [ 122.15626061300031, 6.700344143000223 ], [ 122.16114342500009, 6.690904039000202 ], [ 122.16871178500014, 6.681586005000156 ], [ 122.18043053500014, 6.677313544000242 ], [ 122.22510826900009, 6.671087958000101 ], [ 122.2353621750002, 6.666205145000106 ], [ 122.24154707100013, 6.660386460000154 ], [ 122.24634850400014, 6.65468984600011 ], [ 122.25171959700003, 6.649969794000185 ], [ 122.26254316500012, 6.645453192000218 ], [ 122.2880965500002, 6.637884833000101 ], [ 122.29672285200013, 6.633246161000159 ], [ 122.32927493600016, 6.613836981000247 ], [ 122.33521569100003, 6.603338934000192 ], [ 122.32129967500032, 6.588568427000098 ], [ 122.30062910200002, 6.582342841000127 ], [ 122.25416100400014, 6.581284898000263 ], [ 122.2353621750002, 6.571193752000227 ], [ 122.22486412900014, 6.558254299000112 ], [ 122.21566816500012, 6.544012762000136 ], [ 122.20866946700016, 6.528753973000164 ], [ 122.20386803500003, 6.512844143000223 ], [ 122.19825280000009, 6.4675967470003 ], [ 122.18864993600005, 6.451076565000108 ], [ 122.16635175900012, 6.444525458000157 ], [ 122.14380944100014, 6.442938544000128 ], [ 122.12175540500004, 6.438544012000136 ], [ 122.0576278000002, 6.413885809000135 ] ] ], [ [ [ 117.44304446700016, 6.635728257000153 ], [ 117.41236412900014, 6.634914455000171 ], [ 117.38168379000012, 6.639349677000155 ], [ 117.35621178500014, 6.647894598000278 ], [ 117.34693444100003, 6.654974677000155 ], [ 117.34343509200016, 6.663519598000221 ], [ 117.34595787900014, 6.672308661000102 ], [ 117.35499108200008, 6.679632880000099 ], [ 117.36557050900001, 6.683050848000107 ], [ 117.41627037900025, 6.685288804000209 ], [ 117.4321395190002, 6.689357815000165 ], [ 117.44385826900009, 6.698553778000132 ], [ 117.44825280000009, 6.715155341000184 ], [ 117.43930097700013, 6.723944403000189 ], [ 117.40357506600003, 6.725816148000206 ], [ 117.3999129570002, 6.739325262000136 ], [ 117.41163170700008, 6.751369533000229 ], [ 117.45248457100001, 6.75674062700017 ], [ 117.46876061300031, 6.766669012000193 ], [ 117.49390709700003, 6.735419012000193 ], [ 117.51075280000009, 6.704291083000101 ], [ 117.50660241000026, 6.673488674000168 ], [ 117.46876061300031, 6.643133856000191 ], [ 117.44304446700016, 6.635728257000153 ] ] ], [ [ [ 116.83814537900025, 6.962144273000206 ], [ 116.85181725400014, 6.890204169000299 ], [ 116.83326256600003, 6.900824286000159 ], [ 116.82252037900003, 6.904120184000192 ], [ 116.81763756600003, 6.900091864000103 ], [ 116.81120853000016, 6.86884186400016 ], [ 116.81080162900014, 6.862860419000185 ], [ 116.8222762380002, 6.852850653000132 ], [ 116.83814537900025, 6.847398179000209 ], [ 116.85238691500012, 6.838527736000174 ], [ 116.85865319100003, 6.817857164000145 ], [ 116.85466556100005, 6.778509833000157 ], [ 116.84392337300005, 6.752264716000127 ], [ 116.81080162900014, 6.704575914000145 ], [ 116.79273522200026, 6.669745184000192 ], [ 116.77849368600016, 6.626532294000185 ], [ 116.78394616000003, 6.591620184000249 ], [ 116.82447350400014, 6.581732489000103 ], [ 116.84546959700015, 6.592027085000098 ], [ 116.86101321700016, 6.610541083000214 ], [ 116.87305748800009, 6.628363348000164 ], [ 116.88306725400014, 6.636297919000242 ], [ 116.89673912900003, 6.642075914000202 ], [ 116.94117272200003, 6.684759833000214 ], [ 116.97380618600016, 6.708075262000136 ], [ 116.98023522200026, 6.720363674000112 ], [ 116.98414147200015, 6.75495026200025 ], [ 116.98902428500014, 6.759182033000229 ], [ 116.99561608200031, 6.761135158000229 ], [ 117.00261478000004, 6.766669012000193 ], [ 117.01628665500004, 6.793931382000096 ], [ 117.05250084700015, 6.830755927000212 ], [ 117.05787194100014, 6.845526434000135 ], [ 117.0517684250002, 6.86619700700021 ], [ 117.02930748800031, 6.909979559000135 ], [ 117.03052819100026, 6.931138414000145 ], [ 117.03858483200008, 6.942613023000149 ], [ 117.04656009200005, 6.943793036000159 ], [ 117.05583743600016, 6.940375067000105 ], [ 117.06812584700003, 6.937974351000207 ], [ 117.0766707690002, 6.941310940000165 ], [ 117.08326256600003, 6.948472398000263 ], [ 117.0859481130002, 6.955755927000098 ], [ 117.0820418630002, 6.959051825000131 ], [ 117.07447350400025, 6.963771877000227 ], [ 117.07252037900003, 6.974310614000103 ], [ 117.07447350400025, 6.985663153000189 ], [ 117.07837975400014, 6.992621161000159 ], [ 117.08887780000032, 6.994696356000191 ], [ 117.10084069100026, 6.991603908000116 ], [ 117.11215254000012, 6.98729075700021 ], [ 117.11988366000014, 6.985785223000164 ], [ 117.12867272200003, 6.990668036000159 ], [ 117.14380944100003, 7.003729559000192 ], [ 117.15023847700013, 7.003119208000271 ], [ 117.15805097700013, 6.998724677000155 ], [ 117.18344160200024, 6.987860419000299 ], [ 117.19166100400014, 6.985785223000164 ], [ 117.19499759200016, 6.981838283000116 ], [ 117.24675540500004, 6.950506903000132 ], [ 117.25245201900009, 6.945786851000207 ], [ 117.25652103000004, 6.937974351000207 ], [ 117.25733483200008, 6.920843817000218 ], [ 117.2509871750002, 6.872788804000209 ], [ 117.2465926440002, 6.862860419000185 ], [ 117.23275800900012, 6.855454820000205 ], [ 117.22836347700013, 6.838080145000163 ], [ 117.23031660200002, 6.817531643000109 ], [ 117.23601321700016, 6.800767320000261 ], [ 117.2719832690002, 6.753729559000249 ], [ 117.27759850400025, 6.735663153000246 ], [ 117.2802840500002, 6.673570054000152 ], [ 117.28443444100014, 6.657416083000157 ], [ 117.2959090500002, 6.636297919000242 ], [ 117.30892988400001, 6.628810940000108 ], [ 117.34929446700016, 6.630113023000263 ], [ 117.3647567070002, 6.625148830000114 ], [ 117.37818444100003, 6.61347077000022 ], [ 117.3999129570002, 6.588568427000098 ], [ 117.42481530000009, 6.565578518000109 ], [ 117.44223066500001, 6.553045966000184 ], [ 117.45850670700008, 6.547552802000098 ], [ 117.47486412900003, 6.551459052000155 ], [ 117.48585045700008, 6.562445380000213 ], [ 117.50977623800031, 6.602199611000117 ], [ 117.5254012380002, 6.620998440000108 ], [ 117.53370201900009, 6.621039130000099 ], [ 117.53695722700013, 6.605698960000211 ], [ 117.53760826900009, 6.578314520000163 ], [ 117.54175866000014, 6.577582098000164 ], [ 117.5649520190002, 6.554388739000217 ], [ 117.56104576900009, 6.555731512000193 ], [ 117.55844160200002, 6.551214911000159 ], [ 117.55738366000003, 6.544745184000135 ], [ 117.55811608200008, 6.540106512000193 ], [ 117.56177819100014, 6.538316148000206 ], [ 117.57455488400012, 6.534979559000306 ], [ 117.5786238940002, 6.533270575000302 ], [ 117.59359785200013, 6.519598700000131 ], [ 117.60328209700015, 6.514715887000193 ], [ 117.61622155000009, 6.512844143000223 ], [ 117.63021894600024, 6.519842841000184 ], [ 117.64087975400014, 6.521714585000154 ], [ 117.65064537900003, 6.516546942000275 ], [ 117.67465254000012, 6.488959052000212 ], [ 117.68531334700015, 6.473089911000216 ], [ 117.69532311300009, 6.45136139500022 ], [ 117.70215905000032, 6.45136139500022 ], [ 117.70582116000014, 6.46002838700025 ], [ 117.71070397200003, 6.46377187700017 ], [ 117.7163192070002, 6.462958075000188 ], [ 117.72250410200002, 6.458197333000101 ], [ 117.7270613940002, 6.451157945000261 ], [ 117.72828209700026, 6.443670966000127 ], [ 117.72820071700028, 6.434759833000101 ], [ 117.7295028000002, 6.423407294000185 ], [ 117.73275800900012, 6.414129950000188 ], [ 117.74195397200015, 6.396714585000098 ], [ 117.74382571700016, 6.389878648000149 ], [ 117.74000084700015, 6.38056061400016 ], [ 117.73308353000004, 6.371568101000321 ], [ 117.7285262380002, 6.36237213700025 ], [ 117.73878014400032, 6.335679429000209 ], [ 117.7295028000002, 6.269476630000213 ], [ 117.72299238400012, 6.25462474200026 ], [ 117.70801842500009, 6.252875067000161 ], [ 117.67481530000032, 6.258978583000157 ], [ 117.65626061300031, 6.252752997000187 ], [ 117.6381942070002, 6.24062734600011 ], [ 117.60922285200013, 6.214829820000261 ], [ 117.60035241000014, 6.197821356000191 ], [ 117.60564212300005, 6.18183014500022 ], [ 117.62712649800017, 6.156480210000211 ], [ 117.64332116000003, 6.117499091000127 ], [ 117.65788821700016, 6.111273505000156 ], [ 117.6611434250002, 6.105617580000171 ], [ 117.6626082690002, 6.095770575000131 ], [ 117.66521243600027, 6.088202216000184 ], [ 117.66553795700008, 6.079901434000135 ], [ 117.6611434250002, 6.067775783000229 ], [ 117.6528426440002, 6.05931224200026 ], [ 117.64356530000009, 6.056301174000168 ], [ 117.63607832100001, 6.051947333000101 ], [ 117.63331139400032, 6.039862372000187 ], [ 117.63990319100003, 6.023423570000205 ], [ 117.65414472700002, 6.019761460000211 ], [ 117.66830488400024, 6.013413804000095 ], [ 117.67481530000032, 5.988959052000155 ], [ 117.66895592500009, 5.972642320000148 ], [ 117.65463300900012, 5.95868561400016 ], [ 117.61963951900032, 5.937445380000099 ], [ 117.49284915500016, 5.894680080000171 ], [ 117.46876061300031, 5.868557033000116 ], [ 117.48650149800005, 5.871771552000098 ], [ 117.54379316500012, 5.896429755000099 ], [ 117.56934655000032, 5.902899481000191 ], [ 117.64014733200008, 5.903265692000161 ], [ 117.70704186300009, 5.911607164000259 ], [ 117.75660241000014, 5.906154690000108 ], [ 117.77426191500012, 5.908026434000249 ], [ 117.78028405000032, 5.919419664000259 ], [ 117.77165774800005, 5.944281317000218 ], [ 117.78223717500009, 5.950628973000107 ], [ 117.79265384200016, 5.950018622000187 ], [ 117.80445397200015, 5.946478583000101 ], [ 117.81885826900009, 5.944281317000218 ], [ 117.83659915500016, 5.94550202000022 ], [ 117.88404381600003, 5.954657294000128 ], [ 117.89389082100013, 5.961330471000224 ], [ 117.90007571700005, 5.973944403000132 ], [ 117.91391035200002, 5.986476955000228 ], [ 117.94109134200005, 6.005682684000249 ], [ 117.9736434250002, 6.04775625200017 ], [ 117.99138431100016, 6.056789455000171 ], [ 117.99545332100013, 6.061712958000101 ], [ 118.00261478000027, 6.064601955000171 ], [ 118.01685631600014, 6.060980536000102 ], [ 118.05095462300017, 6.026190497000243 ], [ 118.0532332690002, 6.016302802000212 ], [ 118.05250084700003, 6.005316473000107 ], [ 118.0537215500002, 5.996323960000268 ], [ 118.07097415500027, 5.987372137000193 ], [ 118.07357832100013, 5.975287177000212 ], [ 118.07203209700003, 5.954779364000103 ], [ 118.0771590500002, 5.931586005000156 ], [ 118.11898847700024, 5.875392971000167 ], [ 118.1245223320002, 5.870347398000206 ], [ 118.12517337300017, 5.863918361000174 ], [ 118.09595787900014, 5.824164130000099 ], [ 118.0810653000002, 5.815375067000218 ], [ 118.05884850400025, 5.80898672100011 ], [ 118.03541100400003, 5.807766018000109 ], [ 118.01685631600014, 5.814520575000245 ], [ 118.00001061300009, 5.80898672100011 ], [ 117.9379988940002, 5.814520575000245 ], [ 117.92115319100003, 5.809027411000102 ], [ 117.91041100400003, 5.796861070000205 ], [ 117.90845787900014, 5.784654039000145 ], [ 117.91773522200003, 5.779201565000221 ], [ 117.92204837300017, 5.771714585000154 ], [ 117.95199629000012, 5.69407786700026 ], [ 117.96029707100013, 5.687160549000112 ], [ 117.9648543630002, 5.686224677000098 ], [ 117.97055097700013, 5.68854401200025 ], [ 117.98267662900014, 5.691066799000168 ], [ 117.99805748800031, 5.695949611000231 ], [ 118.03785241000003, 5.714300848000107 ], [ 118.05469811300031, 5.718329169000299 ], [ 118.06275475400014, 5.716620184000192 ], [ 118.06959069100026, 5.707993882000153 ], [ 118.07886803500014, 5.704657294000128 ], [ 118.08659915500004, 5.706366278000132 ], [ 118.0962020190002, 5.710516669000128 ], [ 118.10661868600016, 5.712591864000103 ], [ 118.11646569100003, 5.708075262000136 ], [ 118.12671959700015, 5.69354889500022 ], [ 118.13404381600026, 5.689642645000106 ], [ 118.14372806100005, 5.69407786700026 ], [ 118.15154056100005, 5.705145575000131 ], [ 118.15162194100003, 5.714097398000149 ], [ 118.14714603000016, 5.724554755000213 ], [ 118.15381920700008, 5.742132880000099 ], [ 118.1582137380002, 5.74900950700021 ], [ 118.1645613940002, 5.756170966000241 ], [ 118.16724694100026, 5.764390367000203 ], [ 118.15935306100005, 5.782782294000242 ], [ 118.16081790500016, 5.793402411000102 ], [ 118.17628014400009, 5.805161851000207 ], [ 118.22095787900014, 5.809556382000096 ], [ 118.2622176440002, 5.827866929000152 ], [ 118.28370201900032, 5.82322825700021 ], [ 118.33578535200013, 5.795843817000161 ], [ 118.34066816500012, 5.794256903000132 ], [ 118.3457137380002, 5.798407294000242 ], [ 118.35670006600014, 5.810777085000098 ], [ 118.36524498800009, 5.813788153000189 ], [ 118.37533613400012, 5.809881903000132 ], [ 118.38453209700015, 5.803941148000149 ], [ 118.39079837300005, 5.800930080000285 ], [ 118.4106551440002, 5.796128648000206 ], [ 118.51303144600013, 5.736761786000102 ], [ 118.54810631600003, 5.708075262000136 ], [ 118.56185957100013, 5.699774481000191 ], [ 118.57927493600016, 5.691717841000241 ], [ 118.59400475400003, 5.682074286000159 ], [ 118.5996199880002, 5.669256903000246 ], [ 118.59595787900025, 5.659369208000214 ], [ 118.58863366000026, 5.653631903000246 ], [ 118.58171634200005, 5.649969794000185 ], [ 118.57846113400001, 5.646307684000249 ], [ 118.56869550900012, 5.589544989000103 ], [ 118.5620223320002, 5.568019924000168 ], [ 118.55884850400014, 5.546861070000261 ], [ 118.5654403000002, 5.525946356000134 ], [ 118.5722762380002, 5.525946356000134 ], [ 118.58220462300005, 5.551336981000134 ], [ 118.5883895190002, 5.56268952000022 ], [ 118.59595787900025, 5.571234442000218 ], [ 118.60059655000009, 5.581284898000263 ], [ 118.59896894600001, 5.607977606000134 ], [ 118.6030379570002, 5.618719794000242 ], [ 118.62907962300017, 5.636623440000108 ], [ 118.65105228000016, 5.636419989000217 ], [ 118.67025800900001, 5.623032945000148 ], [ 118.71729576900009, 5.565822658000116 ], [ 118.73658287900003, 5.54783763200021 ], [ 118.7539168630002, 5.540187893000109 ], [ 118.78028405000009, 5.535345770000163 ], [ 118.80005944100003, 5.522121486000174 ], [ 118.81299889400032, 5.502346096000167 ], [ 118.8193465500002, 5.478094794000185 ], [ 118.82683353000004, 5.483628648000263 ], [ 118.83106530000009, 5.488592841000241 ], [ 118.83277428500026, 5.495266018000223 ], [ 118.83236738400024, 5.505438544000242 ], [ 118.87956790500016, 5.469794012000136 ], [ 118.8979598320002, 5.464504299000225 ], [ 118.91879316500012, 5.454982815000221 ], [ 118.93572024800005, 5.43398672100011 ], [ 118.9394637380002, 5.412827867000203 ], [ 118.92172285200013, 5.403021552000155 ], [ 118.9326278000002, 5.394110419000128 ], [ 118.9482528000002, 5.388576565000221 ], [ 118.96452884200016, 5.388413804000152 ], [ 118.97641035200013, 5.39557526200025 ], [ 118.97925866000026, 5.409125067000218 ], [ 118.97339928500003, 5.419582424000112 ], [ 118.97087649800017, 5.428290106000134 ], [ 118.98389733200008, 5.436509507000096 ], [ 119.00831139400032, 5.435858466000184 ], [ 119.0556746750002, 5.41095612200013 ], [ 119.08570397200003, 5.409857489000103 ], [ 119.16382897200026, 5.44696686400016 ], [ 119.18930097700013, 5.450751044000128 ], [ 119.20484459700015, 5.443345445000148 ], [ 119.21957441500012, 5.427923895000106 ], [ 119.24333743600005, 5.39557526200025 ], [ 119.26498457100013, 5.374212958000214 ], [ 119.27426191500001, 5.361151434000249 ], [ 119.27808678500014, 5.344631252000283 ], [ 119.2758895190002, 5.322943427000212 ], [ 119.26644941500001, 5.289780992000146 ], [ 119.26441491000026, 5.272691148000149 ], [ 119.26929772200015, 5.226223049000168 ], [ 119.26710045700008, 5.201076565000165 ], [ 119.24415123800009, 5.181341864000274 ], [ 119.19556725400014, 5.128648179000152 ], [ 119.15593509200016, 5.10618724200026 ], [ 118.9731551440002, 5.03994375200017 ], [ 118.78663170700031, 4.986029364000274 ], [ 118.75074303500014, 4.964056708000157 ], [ 118.72730553500026, 4.9539248720003 ], [ 118.70248457100001, 4.946600653000246 ], [ 118.68148847700002, 4.94432200700021 ], [ 118.66586347700002, 4.947984117000146 ], [ 118.63445071700016, 4.96133047100011 ], [ 118.60580488400001, 4.965765692000161 ], [ 118.58497155000009, 4.971869208000157 ], [ 118.5722762380002, 4.971625067000105 ], [ 118.56023196700005, 4.967433986000174 ], [ 118.5307723320002, 4.94432200700021 ], [ 118.50904381600026, 4.931057033000116 ], [ 118.49935957100001, 4.931463934000249 ], [ 118.48633873800031, 4.940619208000157 ], [ 118.48072350400003, 4.947984117000146 ], [ 118.46265709700003, 4.978745835000211 ], [ 118.42839603000004, 5.018784898000263 ], [ 118.3969832690002, 5.034816799000282 ], [ 118.37623131600014, 5.041083075000188 ], [ 118.36687259200016, 5.035874742000146 ], [ 118.35718834700003, 5.038804429000152 ], [ 118.33578535200013, 5.025132554000209 ], [ 118.30486087300017, 4.99892812700017 ], [ 118.29672285200002, 5.004584052000155 ], [ 118.29167728000016, 5.000921942000218 ], [ 118.28972415500004, 4.990952867000203 ], [ 118.29127037900014, 4.977850653000246 ], [ 118.25269616000014, 4.98712799700013 ], [ 118.21697024800017, 4.965806382000153 ], [ 118.16081790500016, 4.902777411000216 ], [ 118.14389082100001, 4.890285549000112 ], [ 118.13648522200003, 4.882310289000145 ], [ 118.13355553500026, 4.871730861000231 ], [ 118.13493899800005, 4.859605210000098 ], [ 118.13900800900001, 4.855373440000108 ], [ 118.14576256600014, 4.853216864000217 ], [ 118.1713973320002, 4.836574611000174 ], [ 118.17798912900014, 4.830755927000098 ], [ 118.18384850400025, 4.821844794000242 ], [ 118.19499759200016, 4.792914130000156 ], [ 118.21900475400014, 4.756293036000216 ], [ 118.24642988400024, 4.723822333000214 ], [ 118.27759850400014, 4.695135809000249 ], [ 118.31226647200015, 4.669907945000148 ], [ 118.3252059250002, 4.657863674000225 ], [ 118.33350670700031, 4.651556708000101 ], [ 118.34262129000012, 4.648871161000159 ], [ 118.35181725400025, 4.648627020000163 ], [ 118.37281334700003, 4.645819403000303 ], [ 118.38054446700005, 4.642645575000245 ], [ 118.3852645190002, 4.636664130000099 ], [ 118.39323978000027, 4.618353583000214 ], [ 118.39771569100026, 4.611314195000261 ], [ 118.40406334700026, 4.605861721000167 ], [ 118.4111434250002, 4.601507880000213 ], [ 118.42839603000004, 4.594305731000191 ], [ 118.43083743600016, 4.611273505000099 ], [ 118.44459069100003, 4.61493561400016 ], [ 118.46241295700008, 4.610012111000174 ], [ 118.47673587300005, 4.601141669000242 ], [ 118.48747806100016, 4.587591864000103 ], [ 118.48951256600014, 4.57510000200017 ], [ 118.48438561300009, 4.562730210000211 ], [ 118.47331790500004, 4.549872137000307 ], [ 118.46941165500016, 4.537176825000245 ], [ 118.47820071700005, 4.526068427000212 ], [ 118.49040774800017, 4.516506252000113 ], [ 118.49659264400009, 4.50828685100015 ], [ 118.50489342500032, 4.502386786000159 ], [ 118.52328535200013, 4.511623440000221 ], [ 118.55193118600016, 4.532782294000128 ], [ 118.56316165500004, 4.527248440000221 ], [ 118.5874129570002, 4.52383047100011 ], [ 118.5996199880002, 4.519191799000168 ], [ 118.59400475400003, 4.505519924000225 ], [ 118.60564212300017, 4.486883856000191 ], [ 118.64527428500014, 4.444037177000212 ], [ 118.64576256600003, 4.436753648000149 ], [ 118.6372176440002, 4.426011460000098 ], [ 118.62623131600014, 4.419338283000116 ], [ 118.61752363400012, 4.420721747000187 ], [ 118.60759524800017, 4.425523179000095 ], [ 118.59213300900012, 4.429144598000164 ], [ 118.59742272200003, 4.412298895000163 ], [ 118.59278405000009, 4.39736562700017 ], [ 118.58277428500003, 4.384588934000249 ], [ 118.5722762380002, 4.374579169000242 ], [ 118.55689537900003, 4.363511460000154 ], [ 118.54281660200024, 4.360012111000231 ], [ 118.50342858200008, 4.361517645000106 ], [ 118.48658287900014, 4.359523830000228 ], [ 118.45435631600014, 4.350287177000098 ], [ 118.43523196700005, 4.347235419000185 ], [ 118.39193769600013, 4.346380927000212 ], [ 118.36890709700015, 4.35057200700021 ], [ 118.35328209700003, 4.361517645000106 ], [ 118.34017988400012, 4.344061591000127 ], [ 118.33253014400032, 4.339016018000166 ], [ 118.24203535200002, 4.313666083000157 ], [ 118.16081790500016, 4.306219794000185 ], [ 118.13705488400012, 4.298651434000135 ], [ 118.00456790500004, 4.231634833000157 ], [ 117.98267662900014, 4.231146552000155 ], [ 117.92107181100005, 4.249090887000136 ], [ 117.90447024800017, 4.251654364000217 ], [ 117.89226321700005, 4.256984768000166 ], [ 117.85368899800005, 4.292629299000225 ], [ 117.83961022200015, 4.300848700000245 ], [ 117.83122806100005, 4.304673570000148 ], [ 117.82252037900025, 4.306219794000185 ], [ 117.81885826900009, 4.310532945000261 ], [ 117.81202233200008, 4.329291083000157 ], [ 117.80827884200005, 4.333563544000242 ], [ 117.79476972700002, 4.334906317000218 ], [ 117.76351972700002, 4.347235419000185 ], [ 117.73845462300005, 4.351792710000211 ], [ 117.7295028000002, 4.354681708000157 ], [ 117.70753014400009, 4.36994049700013 ], [ 117.69613691500001, 4.387762762000136 ], [ 117.6870223320002, 4.407049872000243 ], [ 117.67115319100003, 4.426011460000098 ], [ 117.65601647200003, 4.42422109600011 ], [ 117.63412519600013, 4.410101630000156 ], [ 117.61459394600001, 4.393052476000264 ], [ 117.60580488400012, 4.382025458000214 ], [ 117.60962975400003, 4.373358466000241 ], [ 117.62875410200013, 4.361761786000159 ], [ 117.63331139400032, 4.350978908000229 ], [ 117.63331139400032, 4.309637762000193 ], [ 117.63697350400003, 4.299017645000163 ], [ 117.65211022200015, 4.284857489000217 ], [ 117.65365644600013, 4.272162177000155 ], [ 117.64909915500016, 4.26072825700021 ], [ 117.64047285200002, 4.251369533000172 ], [ 117.61963951900032, 4.237372137000193 ], [ 117.61304772200003, 4.230902411000102 ], [ 117.60808353000016, 4.222235419000128 ], [ 117.60206139400009, 4.215277411000159 ], [ 117.59896894600001, 4.206935940000165 ], [ 117.60271243600016, 4.201727606000191 ], [ 117.62029056100005, 4.184719143000223 ], [ 117.62712649800017, 4.176499742000203 ], [ 117.61703535200002, 4.17743561400016 ], [ 117.60840905000009, 4.176214911000159 ], [ 117.56714928500014, 4.159654039000202 ], [ 117.56706790500016, 4.159613348000107 ], [ 117.55551191500024, 4.151841539000202 ], [ 117.52833092500032, 4.127508856000134 ], [ 117.51856530000009, 4.122259833000271 ], [ 117.50782311300009, 4.123480536000102 ], [ 117.37305748800009, 4.169745184000192 ], [ 117.37387129000012, 4.165269273000263 ], [ 117.37712649800017, 4.154364325000245 ], [ 117.37924238400012, 4.14923737200013 ], [ 117.38689212300017, 4.142482815000165 ], [ 117.39616946700005, 4.13963450700021 ], [ 117.40398196700005, 4.135484117000203 ], [ 117.40739993600016, 4.124986070000148 ], [ 117.40308678500003, 4.120347398000206 ], [ 117.39633222700002, 4.109686591000184 ], [ 117.39584394600001, 4.098944403000246 ], [ 117.41041100400014, 4.093939520000106 ], [ 117.43132571700016, 4.09259674700013 ], [ 117.4506942070002, 4.088120835000154 ], [ 117.46648196700005, 4.079901434000135 ], [ 117.4755965500002, 4.067328192000105 ], [ 117.46827233200031, 4.052923895000106 ], [ 117.46827233200031, 4.043524481000247 ], [ 117.47901451900009, 4.039374091000241 ], [ 117.48894290500004, 4.042954820000318 ], [ 117.49968509200016, 4.04979075700021 ], [ 117.51042728000016, 4.053941148000149 ], [ 117.52027428500014, 4.049302476000207 ], [ 117.6137801440002, 3.957098700000188 ], [ 117.62794030000009, 3.947088934000306 ], [ 117.66146894600013, 3.940171617000203 ], [ 117.67847741000003, 3.932440497000187 ], [ 117.68930097700002, 3.921454169000128 ], [ 117.6884871750002, 3.909002997000187 ], [ 117.67269941500012, 3.897772528000132 ], [ 117.65088951900009, 3.895209052000098 ], [ 117.62810306100005, 3.900376695000205 ], [ 117.59066816500012, 3.926092841000241 ], [ 117.57007897200015, 3.933172919000185 ], [ 117.5234481130002, 3.936346747000243 ], [ 117.5234481130002, 3.929510809000249 ], [ 117.55209394600013, 3.927150783000229 ], [ 117.57943769600001, 3.91453685100015 ], [ 117.60377037900003, 3.896714585000268 ], [ 117.62330162900014, 3.878607489000217 ], [ 117.6367293630002, 3.872870184000249 ], [ 117.6523543630002, 3.875148830000171 ], [ 117.66822350400025, 3.880031643000109 ], [ 117.68165123800009, 3.882269598000107 ], [ 117.68970787900014, 3.878810940000108 ], [ 117.71908613400001, 3.860581773000206 ], [ 117.7251082690002, 3.850897528000132 ], [ 117.77719160200024, 3.799139716000127 ], [ 117.78199303500003, 3.787339585000154 ], [ 117.78288821700016, 3.779038804000209 ], [ 117.77670332100024, 3.774115302000155 ], [ 117.76050866000003, 3.772406317000218 ], [ 117.70215905000032, 3.778713283000172 ], [ 117.71485436300009, 3.763576565000278 ], [ 117.73422285200013, 3.752142645000106 ], [ 117.77719160200024, 3.737738348000164 ], [ 117.81788170700031, 3.730047919000242 ], [ 117.82927493600016, 3.72158437700017 ], [ 117.8261824880002, 3.70359935100015 ], [ 117.81723066500001, 3.694810289000202 ], [ 117.78793379000012, 3.678656317000105 ], [ 117.77719160200024, 3.668850002000113 ], [ 117.76107832100001, 3.643744208000101 ], [ 117.74854576900009, 3.636948960000098 ], [ 117.65064537900003, 3.627875067000105 ], [ 117.62867272200015, 3.632066148000206 ], [ 117.58765709700015, 3.650864976000264 ], [ 117.56836998800009, 3.655096747000187 ], [ 117.54664147200015, 3.664007880000213 ], [ 117.53370201900009, 3.684759833000101 ], [ 117.52426191500001, 3.708889065000108 ], [ 117.50855553500003, 3.735907294000185 ], [ 117.5053817070002, 3.746771552000269 ], [ 117.50359134200028, 3.768744208000157 ], [ 117.49919681100027, 3.775580145000106 ], [ 117.48894290500004, 3.782171942000275 ], [ 117.46876061300031, 3.792303778000132 ], [ 117.4799910820002, 3.771185614000217 ], [ 117.4824324880002, 3.764960028000246 ], [ 117.49195397200015, 3.707098700000245 ], [ 117.49976647200015, 3.692694403000246 ], [ 117.51335696700016, 3.674872137000193 ], [ 117.5234481130002, 3.650213934000192 ], [ 117.52426191500001, 3.625433661000216 ], [ 117.50977623800031, 3.607367255000213 ], [ 117.49439537900014, 3.608343817000161 ], [ 117.45101972700013, 3.629299221000167 ], [ 117.43091881600014, 3.634670315000108 ], [ 117.3022567070002, 3.633246161000216 ], [ 117.21949303500014, 3.64736562700017 ], [ 117.09050540500016, 3.645819403000132 ], [ 117.0556746750002, 3.631903387000136 ], [ 117.03052819100026, 3.594387111000231 ], [ 117.05396569100003, 3.60830312700017 ], [ 117.08318118600005, 3.616644598000164 ], [ 117.11426842500009, 3.620591539000145 ], [ 117.16928144600013, 3.621039130000156 ], [ 117.19922936300009, 3.616278387000136 ], [ 117.21656334700003, 3.603013414000145 ], [ 117.20533287900003, 3.576971747000243 ], [ 117.19996178500014, 3.554999091000127 ], [ 117.21029707100013, 3.528876044000242 ], [ 117.22754967500032, 3.505194403000246 ], [ 117.24284915500016, 3.490668036000102 ], [ 117.25310306100016, 3.486070054000209 ], [ 117.29070071700005, 3.47703685100015 ], [ 117.30453535200013, 3.469387111000174 ], [ 117.31202233200008, 3.461127020000163 ], [ 117.32545006600014, 3.43602122600015 ], [ 117.34498131600026, 3.446519273000206 ], [ 117.37435957100013, 3.448635158000229 ], [ 117.40495853000016, 3.444484768000223 ], [ 117.4277449880002, 3.43602122600015 ], [ 117.43572024800017, 3.434312242000146 ], [ 117.44214928500003, 3.435695705000171 ], [ 117.44654381600014, 3.434759833000157 ], [ 117.44825280000009, 3.426092841000184 ], [ 117.44825280000009, 3.398504950000245 ], [ 117.44654381600014, 3.385199286000159 ], [ 117.4419051440002, 3.373032945000261 ], [ 117.43441816500001, 3.364325262000136 ], [ 117.42432701900032, 3.360988674000112 ], [ 117.41439863400001, 3.35618724200026 ], [ 117.40552819100014, 3.345607815000165 ], [ 117.39372806100027, 3.326239325000245 ], [ 117.38689212300017, 3.319891669000128 ], [ 117.37777754000001, 3.313137111000117 ], [ 117.3696395190002, 3.305243231000134 ], [ 117.36638431100016, 3.295803127000113 ], [ 117.36312910200002, 3.254868882000096 ], [ 117.35954837300017, 3.244289455000228 ], [ 117.3447371750002, 3.230454820000148 ], [ 117.33366946700016, 3.23212311400016 ], [ 117.31177819100014, 3.251695054000209 ], [ 117.28158613400012, 3.263251044000128 ], [ 117.27377363400012, 3.264797268000166 ], [ 117.2646590500002, 3.261786200000302 ], [ 117.26441491000003, 3.254339911000102 ], [ 117.26783287900003, 3.24453359600011 ], [ 117.2700301440002, 3.234320380000213 ], [ 117.28150475400014, 3.223089911000159 ], [ 117.35271243600027, 3.182806708000157 ], [ 117.37029056100005, 3.177191473000164 ], [ 117.38990319100014, 3.175197658000116 ], [ 117.43091881600014, 3.175360419000185 ], [ 117.45394941500012, 3.171210028000246 ], [ 117.45777428500026, 3.160345770000163 ], [ 117.4541121750002, 3.145168361000174 ], [ 117.45508873800009, 3.128159898000206 ], [ 117.48170006600003, 3.10126373900016 ], [ 117.52003014400009, 3.0984561220003 ], [ 117.56373131600014, 3.101874091000184 ], [ 117.60580488400012, 3.093410549000168 ], [ 117.61719811300009, 3.085882880000213 ], [ 117.62086022200003, 3.079494533000172 ], [ 117.62322024800017, 3.07245514500022 ], [ 117.63013756600026, 3.062974351000207 ], [ 117.6342879570002, 3.052394924000168 ], [ 117.6294051440002, 3.042385158000229 ], [ 117.61963951900032, 3.034898179000095 ], [ 117.60922285200013, 3.03196849200026 ], [ 117.60084069100014, 3.024969794000128 ], [ 117.57504316500012, 2.992865302000155 ], [ 117.5649520190002, 2.983547268000109 ], [ 117.58033287900003, 2.97898997600015 ], [ 117.60157311300009, 2.980658270000163 ], [ 117.62240644600001, 2.986476955000114 ], [ 117.6367293630002, 2.994126695000148 ], [ 117.65560957100001, 2.997381903000189 ], [ 117.67546634200016, 2.985785223000278 ], [ 117.68799889400009, 2.970648505000156 ], [ 117.6850692070002, 2.963080145000106 ], [ 117.66732832100013, 2.959540106000247 ], [ 117.63054446700028, 2.942328192000218 ], [ 117.61280358200008, 2.936428127000113 ], [ 117.54379316500012, 2.928941148000149 ], [ 117.54379316500012, 2.922105210000098 ], [ 117.56739342500009, 2.922552802000212 ], [ 117.64014733200008, 2.908514716000241 ], [ 117.73633873800009, 2.901597398000263 ], [ 117.7251082690002, 2.886542059000249 ], [ 117.70427493600005, 2.878973700000245 ], [ 117.68132571700005, 2.873277085000098 ], [ 117.66431725400014, 2.86408112200013 ], [ 117.62712649800017, 2.836981512000193 ], [ 117.61963951900032, 2.825506903000132 ], [ 117.63331139400032, 2.812241929000209 ], [ 117.67351321700005, 2.799261786000159 ], [ 117.71436608200008, 2.794094143000223 ], [ 117.75220787900014, 2.784613348000107 ], [ 117.78402754000001, 2.758246161000102 ], [ 117.7920028000002, 2.742336330000114 ], [ 117.79623457100013, 2.723211981000247 ], [ 117.80079186300009, 2.657171942000218 ], [ 117.80738366000026, 2.638006903000132 ], [ 117.81625410200002, 2.621527411000159 ], [ 117.8261824880002, 2.607407945000205 ], [ 117.86703535200024, 2.572699286000159 ], [ 117.88168379000001, 2.551418361000174 ], [ 117.9790145190002, 2.466538804000152 ], [ 117.9878035820002, 2.456366278000246 ], [ 117.99968509200016, 2.434271552000212 ], [ 118.00684655000009, 2.425523179000152 ], [ 118.02409915500016, 2.382025458000101 ], [ 118.03711998800009, 2.363959052000098 ], [ 118.04468834700003, 2.381537177000098 ], [ 118.06348717500009, 2.366929429000095 ], [ 118.08220462300017, 2.337469794000185 ], [ 118.09587649800028, 2.304144598000107 ], [ 118.09937584700015, 2.277818101000264 ], [ 118.09148196700016, 2.262030341000184 ], [ 118.05779056100016, 2.219956773000263 ], [ 118.04468834700003, 2.208929755000213 ], [ 117.97559655000032, 2.192084052000212 ], [ 117.95541425900001, 2.182277736000117 ], [ 117.94125410200002, 2.16315338700025 ], [ 117.93921959700015, 2.143377997000187 ], [ 117.93523196700016, 2.124172268000166 ], [ 117.9150496750002, 2.10651276200025 ], [ 117.91472415500004, 2.093491929000152 ], [ 117.88282311300009, 2.095445054000209 ], [ 117.8261824880002, 2.10651276200025 ], [ 117.84424889400032, 2.088202216000298 ], [ 117.88209069100026, 2.06806061400016 ], [ 117.90040123800031, 2.049994208000157 ], [ 117.8598738940002, 2.038275458000214 ], [ 117.82545006600026, 2.036281643000223 ], [ 117.7915145190002, 2.038275458000214 ], [ 117.75464928500014, 2.046332098000164 ], [ 117.74073326900009, 2.044989325000188 ], [ 117.7500106130002, 2.03143952000022 ], [ 117.76465905000032, 2.024969794000128 ], [ 117.80290774800028, 2.021307684000192 ], [ 117.81885826900009, 2.017157294000128 ], [ 117.83179772200015, 2.005682684000192 ], [ 117.84400475400014, 1.991441148000263 ], [ 117.85564212300017, 1.98338450700021 ], [ 117.8671981130002, 1.990464585000211 ], [ 117.87338300900001, 1.990464585000211 ], [ 117.87476647200026, 1.947495835000154 ], [ 117.87224368600005, 1.924709377000227 ], [ 117.86353600400025, 1.914740302000212 ], [ 117.85670006600014, 1.909369208000101 ], [ 117.85726972700002, 1.897650458000157 ], [ 117.86255944100014, 1.885931708000101 ], [ 117.87037194100014, 1.880601304000152 ], [ 117.88103274800017, 1.882066148000206 ], [ 117.88396243600005, 1.884100653000189 ], [ 117.88599694100014, 1.882554429000152 ], [ 117.89389082100013, 1.873765367000203 ], [ 117.90333092500009, 1.857407945000205 ], [ 117.91187584700015, 1.836859442000218 ], [ 117.92408287900014, 1.819159247000243 ], [ 117.9448348320002, 1.811712958000101 ], [ 117.96534264400009, 1.808417059000135 ], [ 117.98096764400009, 1.800767320000205 ], [ 117.99488366000026, 1.791693427000212 ], [ 118.01059004000012, 1.784369208000214 ], [ 118.03484134200016, 1.784898179000152 ], [ 118.04615319100003, 1.783107815000165 ], [ 118.05095462300017, 1.77448151200025 ], [ 118.04932701900009, 1.762030341000241 ], [ 118.04712975400014, 1.752264716000241 ], [ 118.04786217500009, 1.743557033000172 ], [ 118.05469811300031, 1.73346588700025 ], [ 118.12671959700015, 1.654689846000224 ], [ 118.18531334700003, 1.631781317000218 ], [ 118.27125084700015, 1.562730210000098 ], [ 118.31128991000014, 1.54197825700021 ], [ 118.35279381600003, 1.533596096000224 ], [ 118.36980228000004, 1.522772528000132 ], [ 118.39421634200005, 1.497015692000105 ], [ 118.41684004000001, 1.491848049000168 ], [ 118.42505944100014, 1.485744533000229 ], [ 118.4184676440002, 1.472845770000106 ], [ 118.40365644600001, 1.461737372000243 ], [ 118.39966881600014, 1.454413153000246 ], [ 118.40479576900009, 1.445217190000108 ], [ 118.41472415500016, 1.440863348000107 ], [ 118.43824303500014, 1.440578518000166 ], [ 118.44890384200016, 1.435532945000205 ], [ 118.45101972700002, 1.42845286700026 ], [ 118.45394941500012, 1.403225002000227 ], [ 118.45630944100014, 1.394598700000188 ], [ 118.46314537900014, 1.394598700000188 ], [ 118.47624759200016, 1.40204498900016 ], [ 118.4921981130002, 1.395697333000214 ], [ 118.5239363940002, 1.374172268000109 ], [ 118.53598066500012, 1.370672919000242 ], [ 118.58228600400014, 1.367336330000114 ], [ 118.6132918630002, 1.351223049000168 ], [ 118.67514082100013, 1.280422268000223 ], [ 118.71290123800009, 1.264308986000174 ], [ 118.72925866000003, 1.253851630000156 ], [ 118.75416100400014, 1.229559637000307 ], [ 118.77637780000032, 1.201971747000243 ], [ 118.78467858200008, 1.181708075000188 ], [ 118.78052819100014, 1.177313544000299 ], [ 118.77361087300005, 1.17572663000027 ], [ 118.7671004570002, 1.172674872000187 ], [ 118.76417076900032, 1.164007880000156 ], [ 118.79786217500032, 1.149969794000185 ], [ 118.80892988400001, 1.13971588700025 ], [ 118.82618248800009, 1.119696356000191 ], [ 118.8569442070002, 1.058172919000185 ], [ 118.87086022200026, 1.056301174000112 ], [ 118.87818444100014, 1.055975653000246 ], [ 118.88770592500032, 1.058172919000185 ], [ 118.89437910200002, 1.062811591000298 ], [ 118.90650475400003, 1.075384833000157 ], [ 118.9155379570002, 1.078599351000207 ], [ 118.93392988400012, 1.076076565000221 ], [ 118.98519941500012, 1.057562567000105 ], [ 119.00098717500032, 1.04791901200025 ], [ 119.00554446700016, 1.037583726000207 ], [ 119.00318444100003, 1.026312567000161 ], [ 118.9990340500002, 1.01463450700021 ], [ 118.99756920700031, 1.00360748900016 ], [ 119.00066165500016, 0.99909088700025 ], [ 119.00635826900009, 0.994859117000203 ], [ 119.0112410820002, 0.988226630000213 ], [ 119.0117293630002, 0.976263739000103 ], [ 119.00294030000009, 0.962469794000185 ], [ 118.97055097700013, 0.935736395000106 ], [ 118.9565535820002, 0.912665106000134 ], [ 118.9399520190002, 0.902085679000095 ], [ 118.86500084700015, 0.868841864000103 ], [ 118.85132897200026, 0.856919664000202 ], [ 118.84099368600005, 0.829901434000249 ], [ 118.82837975400014, 0.818101304000209 ], [ 118.81275475400014, 0.80914948100019 ], [ 118.79818769600013, 0.804917710000097 ], [ 118.78630618600005, 0.804592190000164 ], [ 118.77426191500001, 0.80573151200025 ], [ 118.76319420700008, 0.809027411000216 ], [ 118.7417098320002, 0.822170315000164 ], [ 118.71753991000003, 0.828273830000228 ], [ 118.70582116000026, 0.835923570000261 ], [ 118.6860457690002, 0.846136786000159 ], [ 118.66277103000004, 0.846380927000155 ], [ 118.63941491000003, 0.840521552000212 ], [ 118.58318118600005, 0.813666083000157 ], [ 118.57545006600003, 0.808335679000152 ], [ 118.56527754000001, 0.804022528000246 ], [ 118.5546981130002, 0.807928778000189 ], [ 118.54395592500009, 0.814520575000131 ], [ 118.5341903000002, 0.818019924000225 ], [ 118.51417076900009, 0.822007554000095 ], [ 118.47348066500001, 0.838283596000167 ], [ 118.42839603000004, 0.839992580000171 ], [ 118.41871178500003, 0.837225653000303 ], [ 118.41098066500001, 0.821844794000128 ], [ 118.4023543630002, 0.813950914000202 ], [ 118.39193769600013, 0.807603257000153 ], [ 118.38396243600016, 0.804917710000097 ], [ 118.36719811300031, 0.810370184000192 ], [ 118.35645592500009, 0.823228257000153 ], [ 118.34685306100005, 0.839016018000166 ], [ 118.33277428500014, 0.852728583000101 ], [ 118.31690514400032, 0.858832098000164 ], [ 118.18783613400001, 0.875230210000211 ], [ 118.12907962300005, 0.893011786000102 ], [ 118.09669030000009, 0.908636786000102 ], [ 118.06918379000001, 0.928778387000136 ], [ 118.04468834700003, 0.955145575000188 ], [ 118.02849368600027, 0.984523830000114 ], [ 118.00554446700028, 1.051011460000098 ], [ 117.98951256600003, 1.078599351000207 ], [ 117.97584069100014, 1.088120835000211 ], [ 117.93677819100014, 1.108140367000203 ], [ 117.92872155000009, 1.116603908000116 ], [ 117.92400149800017, 1.124986070000205 ], [ 117.91334069100003, 1.124945380000213 ], [ 117.90162194100014, 1.11985911700026 ], [ 117.89389082100013, 1.113470770000276 ], [ 117.89096113400024, 1.104193427000098 ], [ 117.89283287900014, 1.09487539300028 ], [ 117.90137780000009, 1.078599351000207 ], [ 117.93360436300009, 1.038763739000217 ], [ 117.9379988940002, 1.031480210000211 ], [ 117.97527103000016, 0.983099677000155 ], [ 117.97974694100026, 0.966213283000229 ], [ 117.98462975400014, 0.926214911000102 ], [ 117.99293053500003, 0.910793361000231 ], [ 117.99586022200003, 0.906724351000207 ], [ 118.00318444100014, 0.893744208000101 ], [ 118.00562584700026, 0.891913153000246 ], [ 118.01417076900009, 0.888128973000107 ], [ 118.01685631600014, 0.886216539000145 ], [ 118.02475019600013, 0.872788804000152 ], [ 118.03044681100005, 0.858954169000242 ], [ 118.03402754000001, 0.843329169000242 ], [ 118.03630618600027, 0.82070547100011 ], [ 118.03296959700015, 0.800238348000164 ], [ 118.0205184250002, 0.791327216000184 ], [ 118.00521894600001, 0.788763739000103 ], [ 117.99390709700015, 0.788478908000286 ], [ 117.98267662900014, 0.791327216000184 ], [ 117.97331790500027, 0.798488674000168 ], [ 117.96241295700008, 0.817084052000268 ], [ 117.95541425900001, 0.825425523000206 ], [ 117.94743899800005, 0.831122137000136 ], [ 117.93816165500027, 0.835638739000274 ], [ 117.9272567070002, 0.83869049700013 ], [ 117.9140731130002, 0.839667059000135 ], [ 117.90251712300005, 0.837469794000128 ], [ 117.89478600400003, 0.83258698100019 ], [ 117.88933353000027, 0.827704169000128 ], [ 117.88428795700008, 0.825425523000206 ], [ 117.85035241000003, 0.824286200000188 ], [ 117.82935631600014, 0.820257880000099 ], [ 117.81128991000014, 0.811753648000263 ], [ 117.78834069100014, 0.792303778000189 ], [ 117.7431746750002, 0.740545966000184 ], [ 117.7295028000002, 0.715562242000146 ], [ 117.72486412900025, 0.652655341000184 ], [ 117.71908613400001, 0.636786200000188 ], [ 117.6958113940002, 0.617092190000164 ], [ 117.6884871750002, 0.606350002000227 ], [ 117.68441816500001, 0.596380927000212 ], [ 117.67904707100024, 0.574693101000264 ], [ 117.67481530000032, 0.564764716000241 ], [ 117.62037194100003, 0.502020575000245 ], [ 117.61280358200008, 0.479071356000247 ], [ 117.61548912900014, 0.469183661000102 ], [ 117.62623131600014, 0.444037177000098 ], [ 117.62712649800017, 0.434393622000187 ], [ 117.61931399800017, 0.423895575000131 ], [ 117.60767662900014, 0.417181708000214 ], [ 117.59538821700016, 0.41229889500022 ], [ 117.5854598320002, 0.407131252000113 ], [ 117.56950931100016, 0.38906484600011 ], [ 117.55372155000009, 0.349514065000164 ], [ 117.51726321700028, 0.290961005000099 ], [ 117.51441491000026, 0.280340887000193 ], [ 117.51596113400001, 0.275295315000164 ], [ 117.51954186300009, 0.271063544000185 ], [ 117.5234481130002, 0.263088283000172 ], [ 117.52654056100016, 0.242173570000261 ], [ 117.52312259200005, 0.225775458000101 ], [ 117.51392662900025, 0.211859442000105 ], [ 117.49097741000003, 0.189886786000216 ], [ 117.48365319100026, 0.178859768000166 ], [ 117.48015384200016, 0.166489976000207 ], [ 117.4824324880002, 0.153794664000145 ], [ 117.48829186300031, 0.15110911700026 ], [ 117.49822024800017, 0.150824286000216 ], [ 117.50912519600001, 0.148586330000171 ], [ 117.51726321700028, 0.140204169000185 ], [ 117.50684655000032, 0.133042710000154 ], [ 117.48365319100026, 0.124823309000135 ], [ 117.4755965500002, 0.119086005000099 ], [ 117.46998131600026, 0.108791408000172 ], [ 117.47055097700002, 0.102199611000174 ], [ 117.47364342500009, 0.095526434000249 ], [ 117.4755965500002, 0.085598049000225 ], [ 117.47486412900003, 0.074774481000134 ], [ 117.47364342500009, 0.069240627000227 ], [ 117.47339928500014, 0.064886786000159 ], [ 117.4755965500002, 0.057603257000096 ], [ 117.4824324880002, 0.054592190000108 ], [ 117.49219811300009, 0.054632880000099 ], [ 117.49708092500009, 0.051011460000154 ], [ 117.48910566500001, 0.037176825000245 ], [ 117.50001061300009, 0.033026434000135 ], [ 117.50904381600003, 0.026027736000117 ], [ 117.51685631600003, 0.015936591000184 ], [ 117.5234481130002, 0.003078518000223 ], [ 117.52906334700015, -0.019463799999869 ], [ 117.53028405000009, -0.032321872999887 ], [ 117.52686608200008, -0.037896416999899 ], [ 117.52523847700024, -0.042046808 ], [ 117.51286868600016, -0.059136651999836 ], [ 117.50733483200008, -0.069634697999902 ], [ 117.49488366000014, -0.080336195999848 ], [ 117.48910566500001, -0.085707289999903 ], [ 117.48487389400009, -0.092217705999815 ], [ 117.46949303500014, -0.128838799999812 ], [ 117.4653426440002, -0.144463799999812 ], [ 117.46192467500009, -0.185723565999979 ], [ 117.45639082100013, -0.205498955999985 ], [ 117.43506920700031, -0.239678643999866 ], [ 117.43392988400001, -0.263848565999865 ], [ 117.44206790500004, -0.281914971999925 ], [ 117.45777428500026, -0.30820077899989 ], [ 117.4746199880002, -0.330254815999922 ], [ 117.48585045700008, -0.335870049999812 ], [ 117.49537194100014, -0.333754165000016 ], [ 117.49708092500009, -0.350274346999981 ], [ 117.49398847700002, -0.37265390399989 ], [ 117.48910566500001, -0.387383721999868 ], [ 117.46753991000003, -0.411553643999923 ], [ 117.4575301440002, -0.427015882999854 ], [ 117.45850670700008, -0.438897393999866 ], [ 117.46648196700005, -0.457289320999905 ], [ 117.4624129570002, -0.47991301899998 ], [ 117.4521590500002, -0.501722914999903 ], [ 117.4414168630002, -0.517754815999808 ], [ 117.4414168630002, -0.525160414999903 ], [ 117.47494550900001, -0.509047132999854 ], [ 117.59595787900003, -0.422621351999851 ], [ 117.61557050900012, -0.415215752999927 ], [ 117.63013756600026, -0.418715101999851 ], [ 117.63884524800005, -0.436455987999864 ], [ 117.63160241000026, -0.447523695999962 ], [ 117.61931399800017, -0.45623137799987 ], [ 117.61280358200008, -0.466892185 ], [ 117.60547936300009, -0.476169528999833 ], [ 117.57048587300017, -0.485039971999868 ], [ 117.55811608200008, -0.490411065999865 ], [ 117.55453535200013, -0.502699476999794 ], [ 117.58952884200016, -0.51100025799991 ], [ 117.59896894600001, -0.521416924999869 ], [ 117.59750410200013, -0.559502862999977 ], [ 117.59351647200015, -0.574639580999872 ], [ 117.58073978000004, -0.592950127999927 ], [ 117.57846113400024, -0.596937757999797 ], [ 117.57390384200028, -0.59905364399981 ], [ 117.54297936300009, -0.60068124799983 ], [ 117.53614342500032, -0.60295989399981 ], [ 117.53028405000009, -0.607110283999873 ], [ 117.53028405000009, -0.613946221999868 ], [ 117.54712975400003, -0.619724216999828 ], [ 117.56519616000003, -0.622816664999903 ], [ 117.57593834700003, -0.62997812299983 ], [ 117.57178795700008, -0.648125908999873 ], [ 117.55990644600013, -0.658298434999892 ], [ 117.54615319100014, -0.66562265399989 ], [ 117.53988691500001, -0.674493096999925 ], [ 117.55128014400032, -0.689629815999922 ], [ 117.53931725400003, -0.694512627999814 ], [ 117.52751712300005, -0.693942966999828 ], [ 117.49976647200015, -0.689629815999922 ], [ 117.48585045700008, -0.69280364399981 ], [ 117.4829207690002, -0.699639580999815 ], [ 117.48853600400014, -0.706475518999923 ], [ 117.49976647200015, -0.709567966999828 ], [ 117.52068118600016, -0.712823174999869 ], [ 117.57504316500012, -0.727308851999851 ], [ 117.60238691500001, -0.730645440999865 ], [ 117.61361738400001, -0.734063408999873 ], [ 117.6220809250002, -0.743096612999864 ], [ 117.62680097700013, -0.755954684999892 ], [ 117.62712649800017, -0.770928643999923 ], [ 117.62273196700028, -0.781508070999905 ], [ 117.61500084700026, -0.786065362999921 ], [ 117.58570397200015, -0.792413018999866 ], [ 117.57154381600003, -0.790785414999846 ], [ 117.5649520190002, -0.791436455999985 ], [ 117.55795332100001, -0.795668226999794 ], [ 117.54460696700016, -0.808851820999848 ], [ 117.53760826900009, -0.812595309999892 ], [ 117.48910566500001, -0.798923434999836 ], [ 117.49350019600001, -0.827813408999873 ], [ 117.45818118600016, -0.820489190999979 ], [ 117.44825280000009, -0.84295012799987 ], [ 117.45191491000003, -0.866469007999854 ], [ 117.44654381600014, -0.877048434999892 ], [ 117.4277449880002, -0.880791924999812 ], [ 117.41285241000014, -0.874932549999869 ], [ 117.39087975400014, -0.848565362999864 ], [ 117.37924238400012, -0.83928801899981 ], [ 117.37468509200016, -0.855889580999985 ], [ 117.3637801440002, -0.878513278999833 ], [ 117.35035241000003, -0.896905205999872 ], [ 117.33904056100005, -0.901299737999977 ], [ 117.33277428500014, -0.89177825299987 ], [ 117.33082116000014, -0.877699476999851 ], [ 117.33220462300005, -0.850192966999884 ], [ 117.32789147200003, -0.841485283999816 ], [ 117.30111738400012, -0.81601327899989 ], [ 117.28150475400014, -0.809177341999884 ], [ 117.26742597700013, -0.828301690999865 ], [ 117.25928795700031, -0.858330987999807 ], [ 117.25652103000004, -0.884209893999923 ], [ 117.25033613400012, -0.909274997999887 ], [ 117.23511803500014, -0.924493096999868 ], [ 117.19507897200015, -0.949151299999869 ], [ 117.16391035200013, -0.981703382999854 ], [ 117.06519616000003, -1.121840101999851 ], [ 117.03923587300005, -1.13779062299983 ], [ 117.03288821700016, -1.15935637799987 ], [ 117.02963300900012, -1.184177341999884 ], [ 117.02369225400003, -1.202894789999846 ], [ 117.0078231130002, -1.216403903999833 ], [ 116.98340905000032, -1.229668877999984 ], [ 116.95769290500016, -1.239922783999873 ], [ 116.85181725400014, -1.264418226999851 ], [ 116.82984459700015, -1.265801690999808 ], [ 116.81983483200031, -1.26140715899993 ], [ 116.8173934250002, -1.247491143999866 ], [ 116.81763756600003, -1.220391533999816 ], [ 116.82935631600014, -1.204034112999807 ], [ 116.83073978000027, -1.195000908999873 ], [ 116.81763756600003, -1.189385674999869 ], [ 116.81137129000012, -1.192640882999854 ], [ 116.80518639400009, -1.201348565999808 ], [ 116.79712975400025, -1.217217705999872 ], [ 116.79322350400014, -1.203301690999865 ], [ 116.79249108200031, -1.171156507999797 ], [ 116.78744550900001, -1.158868096999868 ], [ 116.74634850400014, -1.11052825299987 ], [ 116.74333743600005, -1.085381768999866 ], [ 116.75684655000009, -1.023695570999905 ], [ 116.7431746750002, -1.024834893999866 ], [ 116.72885175900012, -1.04404062299983 ], [ 116.72038821700005, -1.070977471999868 ], [ 116.71534264400009, -1.124769789999846 ], [ 116.71949303500003, -1.13632577899989 ], [ 116.74935957100001, -1.168877862999864 ], [ 116.75709069100003, -1.182224216999828 ], [ 116.75757897200015, -1.188409112999807 ], [ 116.75391686300009, -1.193454684999836 ], [ 116.74935957100001, -1.202894789999846 ], [ 116.73796634200005, -1.215020440999865 ], [ 116.73609459700026, -1.220961195999905 ], [ 116.77735436300031, -1.23398202899989 ], [ 116.77906334700015, -1.236423434999892 ], [ 116.7832137380002, -1.237562757999854 ], [ 116.78777103000016, -1.239434502999814 ], [ 116.79086347700002, -1.243910414999959 ], [ 116.79086347700002, -1.249118747999887 ], [ 116.78891035200013, -1.254489841999828 ], [ 116.77906334700015, -1.273858330999872 ], [ 116.7666121750002, -1.287692966999828 ], [ 116.76303144600013, -1.298516533999816 ], [ 116.76742597700013, -1.344333591999828 ], [ 116.76238040500016, -1.365329684999892 ], [ 116.7397567070002, -1.37428150799991 ], [ 116.71900475400025, -1.377211196000019 ], [ 116.60971113400012, -1.420586846999868 ], [ 116.56763756600014, -1.446547132999854 ], [ 116.53923587300017, -1.481215101999851 ], [ 116.5371199880002, -1.525648695999848 ], [ 116.54460696700016, -1.540459893999866 ], [ 116.55355879000012, -1.551364841999941 ], [ 116.56120853000004, -1.563734632999854 ], [ 116.56446373800009, -1.583428643999923 ], [ 116.55746504000024, -1.606215101999851 ], [ 116.54021243600005, -1.622735283999816 ], [ 116.51783287900014, -1.63437265399989 ], [ 116.42994225400003, -1.659356377999814 ], [ 116.39079837300017, -1.684502862999807 ], [ 116.34571373800031, -1.695977471999868 ], [ 116.32488040500004, -1.703871351999851 ], [ 116.27198326900009, -1.74928150799991 ], [ 116.26335696700028, -1.761895440999922 ], [ 116.23194420700008, -1.777113539999903 ], [ 116.22242272200015, -1.789646091999884 ], [ 116.24293053500014, -1.80575937299983 ], [ 116.26099694100003, -1.808526299999812 ], [ 116.28589928500026, -1.807061455999872 ], [ 116.30787194100014, -1.800876559999949 ], [ 116.31739342500009, -1.789239190999865 ], [ 116.32105553500014, -1.782810153999947 ], [ 116.33008873800031, -1.778090101999851 ], [ 116.35141035200002, -1.772149346999811 ], [ 116.3574324880002, -1.772230726999794 ], [ 116.3667098320002, -1.778090101999851 ], [ 116.3725692070002, -1.778985283999873 ], [ 116.37281334700015, -1.77695077899989 ], [ 116.37916100400014, -1.767347914999846 ], [ 116.37956790500016, -1.76531340899993 ], [ 116.40259850400014, -1.763929945999905 ], [ 116.4248153000002, -1.766371351999965 ], [ 116.44166100400003, -1.776055596999811 ], [ 116.44825280000009, -1.79607512799987 ], [ 116.43287194100014, -1.82187265399989 ], [ 116.4135848320002, -1.847263278999947 ], [ 116.45183353000016, -1.88396575299987 ], [ 116.46656334700015, -1.907484632999797 ], [ 116.45045006600003, -1.957452080999872 ], [ 116.46314537900014, -2.019952080999872 ], [ 116.45785566500001, -2.04241301899998 ], [ 116.43848717500009, -2.066989841999884 ], [ 116.42693118600005, -2.076348565999808 ], [ 116.3588973320002, -2.093682549999812 ], [ 116.33668053500003, -2.108168226999965 ], [ 116.31218509200028, -2.129001559999836 ], [ 116.29200280000009, -2.150974216999884 ], [ 116.28321373800009, -2.169366143999923 ], [ 116.28939863400012, -2.169366143999923 ], [ 116.33716881600003, -2.14609140399989 ], [ 116.37086022200003, -2.13787200299987 ], [ 116.38624108200008, -2.152276299999869 ], [ 116.39283287900003, -2.191094658999987 ], [ 116.41065514400009, -2.203789971999925 ], [ 116.4370223320002, -2.198337497999887 ], [ 116.50066165500016, -2.169691664999903 ], [ 116.51783287900014, -2.166436455999872 ], [ 116.53093509200005, -2.169366143999923 ], [ 116.53158613400012, -2.177829684999836 ], [ 116.53541100400003, -2.195245049999812 ], [ 116.54273522200003, -2.209242445999848 ], [ 116.55445397200015, -2.207207940999865 ], [ 116.56625410200002, -2.197686455999872 ], [ 116.58326256600014, -2.187676690999979 ], [ 116.59864342500009, -2.183851820999848 ], [ 116.6054793630002, -2.193617445999905 ], [ 116.60328209700015, -2.224216404 ], [ 116.57292728000004, -2.36280689899985 ], [ 116.5400496750002, -2.512872002999927 ], [ 116.51791425900012, -2.553887627999814 ], [ 116.48243248800009, -2.560316664999903 ], [ 116.4731551440002, -2.547458592 ], [ 116.46810957100001, -2.526462497999887 ], [ 116.46094811300009, -2.50701262799987 ], [ 116.44459069100026, -2.498304945999962 ], [ 116.4189559250002, -2.496514580999872 ], [ 116.4067488940002, -2.498304945999962 ], [ 116.40162194100003, -2.500746351999794 ], [ 116.39185631600014, -2.509209893999866 ], [ 116.38624108200008, -2.511976820999905 ], [ 116.37973066500012, -2.511895440999922 ], [ 116.37427819100014, -2.50937265399989 ], [ 116.36963951900009, -2.506442966999884 ], [ 116.36573326900009, -2.505140882999797 ], [ 116.33326256600014, -2.511163018999923 ], [ 116.32105553500014, -2.511976820999905 ], [ 116.3100692070002, -2.516289971999811 ], [ 116.30420983200031, -2.525648695999848 ], [ 116.30307050900001, -2.535088799999869 ], [ 116.30713951900009, -2.539320570999905 ], [ 116.3237410820002, -2.547539971999981 ], [ 116.32081139400009, -2.566989841999884 ], [ 116.29688561300031, -2.608168226999851 ], [ 116.3105574880002, -2.615004164999846 ], [ 116.34156334700015, -2.566582940999865 ], [ 116.36622155000009, -2.556735934999836 ], [ 116.38200931100016, -2.55771249799983 ], [ 116.3930770190002, -2.573988539999846 ], [ 116.39039147200015, -2.58904387799987 ], [ 116.37061608200008, -2.632907809999836 ], [ 116.36573326900009, -2.652601820999848 ], [ 116.36996504000012, -2.82390715899993 ], [ 116.3647567070002, -2.861423434999836 ], [ 116.35141035200002, -2.896172783999873 ], [ 116.33423912900003, -2.925551039999903 ], [ 116.2876082690002, -2.987074476999965 ], [ 116.26335696700028, -3.005466404 ], [ 116.24382571700016, -3.009047132999854 ], [ 116.22877037900003, -3.001641533999873 ], [ 116.21900475400014, -2.985039971999925 ], [ 116.21461022200026, -2.938653252999984 ], [ 116.2124129570002, -2.930352471999868 ], [ 116.20818118600016, -2.922946873 ], [ 116.19996178500014, -2.91521575299987 ], [ 116.18360436300031, -2.90935637799987 ], [ 116.17408287900014, -2.903008721999925 ], [ 116.16570071700028, -2.889092705999929 ], [ 116.15919030000009, -2.867445570999848 ], [ 116.15503991000014, -2.843926690999865 ], [ 116.15357506600014, -2.82390715899993 ], [ 116.15064537900014, -2.816338799999869 ], [ 116.14454186300009, -2.816827080999872 ], [ 116.13770592500009, -2.823418877999927 ], [ 116.13306725400025, -2.834161065999865 ], [ 116.13396243600005, -2.840020440999808 ], [ 116.13965905000032, -2.857842705999985 ], [ 116.13982181100016, -2.868910414999903 ], [ 116.13062584700015, -2.889906507999967 ], [ 116.11744225400014, -2.909763278999833 ], [ 116.11133873800009, -2.930271091999884 ], [ 116.12281334700015, -2.953871351999965 ], [ 116.12671959700003, -2.966078382999854 ], [ 116.11963951900032, -2.976495049999812 ], [ 116.10987389400009, -2.986586195999962 ], [ 116.10572350400025, -2.997979424999869 ], [ 116.11019941500012, -3.006280205999815 ], [ 116.11833743600005, -3.005303643999866 ], [ 116.13306725400025, -2.997979424999869 ], [ 116.16138756600014, -3.003513278999947 ], [ 116.16749108200008, -3.01482512799987 ], [ 116.16732832100001, -3.030694268999866 ], [ 116.17750084700015, -3.049899997999944 ], [ 116.19206790500016, -3.063571872999887 ], [ 116.2548934250002, -3.108656507999854 ], [ 116.26726321700016, -3.124200127999814 ], [ 116.26490319100003, -3.136895440999865 ], [ 116.21924889400009, -3.146661065999922 ], [ 116.1801863940002, -3.16130950299987 ], [ 116.16724694100003, -3.156345309999892 ], [ 116.16334069100003, -3.17294687299983 ], [ 116.18327884200005, -3.208265882999854 ], [ 116.18767337300017, -3.232028903999947 ], [ 116.18132571700016, -3.255954684999836 ], [ 116.16846764400032, -3.265801690999865 ], [ 116.14966881600003, -3.270684502999814 ], [ 116.12623131600003, -3.279880467 ], [ 116.12769616000014, -3.264825127999984 ], [ 116.13428795700008, -3.254327080999815 ], [ 116.14356530000009, -3.251560153999833 ], [ 116.15357506600014, -3.259372653999833 ], [ 116.16065514400009, -3.253024997999887 ], [ 116.16724694100003, -3.24570077899989 ], [ 116.17212975400003, -3.226169528999833 ], [ 116.15601647200003, -3.22568124799983 ], [ 116.12281334700015, -3.238213799999869 ], [ 116.11052493600016, -3.246189059999892 ], [ 116.10027103000004, -3.264906507999967 ], [ 116.08521569100003, -3.307061455999815 ], [ 116.02344811300031, -3.411797783999987 ], [ 116.00953209700003, -3.451104424999869 ], [ 115.99976647200015, -3.540134372999944 ], [ 115.98951256600014, -3.582696221999811 ], [ 115.96794681100005, -3.608819268999866 ], [ 115.94890384200016, -3.614190362999864 ], [ 115.88257897200003, -3.614922783999873 ], [ 115.85816491000014, -3.620212497999944 ], [ 115.83619225400014, -3.633233330999815 ], [ 115.79664147200015, -3.66961028399993 ], [ 115.7587996750002, -3.696954033999873 ], [ 115.58334394600013, -3.780531507999854 ], [ 115.31364993600016, -3.883070570999792 ], [ 115.06031334700003, -3.985772393999866 ], [ 114.87598717500009, -4.070977471999811 ], [ 114.7129012380002, -4.170830987999921 ], [ 114.66431725400014, -4.184177341999828 ], [ 114.62476647200015, -4.170505466999884 ], [ 114.60661868600016, -4.132256768999866 ], [ 114.61060631600026, -4.088799737999921 ], [ 114.63160241000014, -4.012872002999984 ], [ 114.61133873800009, -3.926364841999884 ], [ 114.60425866000026, -3.855157158999873 ], [ 114.61109459700015, -3.683851820999905 ], [ 114.59644616000014, -3.637872002999927 ], [ 114.53687584700003, -3.563409112999864 ], [ 114.52230879000001, -3.519301039999903 ], [ 114.52393639400032, -3.475844007999967 ], [ 114.5503035820002, -3.348077080999815 ], [ 114.52906334700003, -3.357354424999869 ], [ 114.5117293630002, -3.367608330999872 ], [ 114.50001061300009, -3.382745049999869 ], [ 114.4882918630002, -3.488376559999836 ], [ 114.47681725400003, -3.500664971999811 ], [ 114.45150800900012, -3.498711846999868 ], [ 114.41244550900012, -3.485284112999864 ], [ 114.36793053500014, -3.458591403999947 ], [ 114.28882897200015, -3.424493096999925 ], [ 114.27222741000014, -3.413262627999814 ], [ 114.26351972700002, -3.397556247999887 ], [ 114.2651473320002, -3.37835051899981 ], [ 114.2754012380002, -3.362399998 ], [ 114.2929793630002, -3.355564059999892 ], [ 114.30193118600005, -3.345798434999949 ], [ 114.3237410820002, -3.279880467 ], [ 114.35084069100003, -3.248955987999864 ], [ 114.35962975400014, -3.23447031 ], [ 114.3647567070002, -3.211521091999941 ], [ 114.32406660200013, -3.247979424999983 ], [ 114.28956139400009, -3.306410414999846 ], [ 114.24805748800009, -3.360284112999807 ], [ 114.18653405000032, -3.38225676899981 ], [ 114.15316816500012, -3.37835051899981 ], [ 114.12582441500012, -3.367852471999868 ], [ 114.10824629000012, -3.347344658999987 ], [ 114.10401451900032, -3.31389739399981 ], [ 114.1225692070002, -3.216078382999967 ], [ 114.11768639400032, -3.190362237999807 ], [ 114.11231530000009, -3.19890715899993 ], [ 114.10889733200008, -3.208428643999866 ], [ 114.09929446700028, -3.253350518999866 ], [ 114.09717858200008, -3.276055596999868 ], [ 114.09400475400003, -3.281182549999812 ], [ 114.08033287900003, -3.291273695999848 ], [ 114.0420028000002, -3.355564059999892 ], [ 113.98064212300017, -3.385023695999848 ], [ 113.94800866000014, -3.394789321000019 ], [ 113.88550866000026, -3.430596612999807 ], [ 113.81470787900014, -3.455254815999922 ], [ 113.71314537900025, -3.472588799999926 ], [ 113.63249759200016, -3.456801039999959 ], [ 113.62476647200015, -3.38225676899981 ], [ 113.63754316500012, -3.341729424999869 ], [ 113.64380944100003, -3.298435154 ], [ 113.6421004570002, -3.255954684999836 ], [ 113.62037194100014, -3.185316664999903 ], [ 113.61150149800028, -3.174248955999872 ], [ 113.59351647200015, -3.170017184999836 ], [ 113.50806725400003, -3.170017184999836 ], [ 113.48617597700013, -3.174737237999864 ], [ 113.46631920700008, -3.184258721999811 ], [ 113.45215905000009, -3.199395440999808 ], [ 113.44662519600024, -3.221123955999872 ], [ 113.43970787900014, -3.238457940999865 ], [ 113.42302493600005, -3.247247002999927 ], [ 113.3657332690002, -3.252862237999864 ], [ 113.35279381600014, -3.249281507999797 ], [ 113.34587649800017, -3.23788827899989 ], [ 113.34359785200002, -3.214613540000016 ], [ 113.33961022200015, -3.20029062299983 ], [ 113.32935631600014, -3.182793877999984 ], [ 113.31592858200008, -3.168064059999949 ], [ 113.30274498800031, -3.162530205999872 ], [ 113.3452254570002, -3.246514580999929 ], [ 113.35108483200008, -3.272393487999864 ], [ 113.2993270190002, -3.214613540000016 ], [ 113.28500410200024, -3.204196872999887 ], [ 113.25464928500014, -3.18694426899981 ], [ 113.24122155000009, -3.17685312299983 ], [ 113.23047936300009, -3.164320570999962 ], [ 113.22169030000009, -3.149997653999947 ], [ 113.21558678500014, -3.13420989399981 ], [ 113.20997155000032, -3.103773695999848 ], [ 113.2016707690002, -3.093031507999854 ], [ 113.18262780000032, -3.077080987999864 ], [ 113.15919030000009, -3.064629815999922 ], [ 113.12826582100001, -3.054945570999848 ], [ 113.10132897200015, -3.04257577899989 ], [ 113.03516686300009, -2.922946873 ], [ 113.0371199880002, -2.993096612999864 ], [ 113.03150475400003, -3.008884372999887 ], [ 113.02523847700024, -3.017347914999959 ], [ 113.01734459700003, -3.03679778399993 ], [ 113.00782311300009, -3.04648202899989 ], [ 113.0034285820002, -3.047458591999884 ], [ 112.99195397200026, -3.045668226999794 ], [ 112.98731530000032, -3.04648202899989 ], [ 112.98316491000003, -3.049737237999977 ], [ 112.97632897200026, -3.057549737999864 ], [ 112.96338951900009, -3.069024346999811 ], [ 112.94906660200013, -3.086032809999949 ], [ 112.94109134200016, -3.106377862999864 ], [ 112.94947350400003, -3.125176690999808 ], [ 112.9619246750002, -3.138360283999873 ], [ 112.96843509200005, -3.143975518999866 ], [ 112.97982832100013, -3.149509372999944 ], [ 112.99048912900003, -3.151788018999866 ], [ 113.01140384200028, -3.153252862999807 ], [ 113.0214949880002, -3.156345309999892 ], [ 113.0214949880002, -3.162530205999872 ], [ 112.66976972700024, -3.388604424999869 ], [ 112.63803144600013, -3.416761976999851 ], [ 112.61801191500001, -3.423760674999926 ], [ 112.5815535820002, -3.415948174999812 ], [ 112.57593834700003, -3.420098565999865 ], [ 112.57309004000001, -3.430352471999868 ], [ 112.56576582100013, -3.437920830999815 ], [ 112.55591881600014, -3.44264088299991 ], [ 112.54509524800017, -3.444268487999864 ], [ 112.52466881600014, -3.437758070999848 ], [ 112.39047285200024, -3.339939059999892 ], [ 112.34896894600001, -3.322849216999884 ], [ 112.30274498800009, -3.31389739399981 ], [ 112.20289147200026, -3.32952239399981 ], [ 112.11687259200016, -3.38225676899981 ], [ 111.9731551440002, -3.525567315999865 ], [ 111.93100019600013, -3.559014580999815 ], [ 111.90528405000009, -3.572035414999959 ], [ 111.88721764400009, -3.570245049999926 ], [ 111.86947675900007, -3.560153903999833 ], [ 111.82203209700009, -3.545098565999808 ], [ 111.80876712300011, -3.532972914999903 ], [ 111.80836022200015, -3.511814059999836 ], [ 111.82976321700005, -3.46819426899981 ], [ 111.83529707100018, -3.447686455999872 ], [ 111.84294681100022, -3.384454033999873 ], [ 111.84278405000015, -3.361748955999929 ], [ 111.81495201900009, -3.190362237999807 ], [ 111.81755618599999, -3.144463799999869 ], [ 111.83253014400015, -3.061618747999887 ], [ 111.82243899800005, -3.018487237999807 ], [ 111.76026451900015, -2.907647393999866 ], [ 111.75407962300017, -2.868910414999903 ], [ 111.75407962300017, -2.82390715899993 ], [ 111.75098717500009, -2.820407809999836 ], [ 111.74382571700016, -2.817478122999887 ], [ 111.73682701900015, -2.812676690999808 ], [ 111.7335718110001, -2.803399346999868 ], [ 111.73747806100022, -2.783379815999808 ], [ 111.75277754000018, -2.756280205999872 ], [ 111.75407962300017, -2.738539320999905 ], [ 111.7394311860001, -2.74618906 ], [ 111.72348066500024, -2.75904713299991 ], [ 111.71078535200013, -2.774590752999927 ], [ 111.7057397800001, -2.789727471999925 ], [ 111.71265709699998, -2.83505624799983 ], [ 111.71314537900008, -2.848402601999851 ], [ 111.70801842500003, -2.859633070999848 ], [ 111.69874108200008, -2.868096612999921 ], [ 111.68978925900024, -2.874200127999984 ], [ 111.6858016290002, -2.878838799999812 ], [ 111.68311608200008, -2.882989190999865 ], [ 111.67750084700009, -2.88795338299991 ], [ 111.67253665500004, -2.894626559999836 ], [ 111.67156009200016, -2.903008721999925 ], [ 111.67546634200011, -2.911065362999864 ], [ 111.6809188160002, -2.914483330999872 ], [ 111.68677819100014, -2.916924737999921 ], [ 111.69556725400003, -2.926202080999872 ], [ 111.70004316500007, -2.928155205999872 ], [ 111.70394941500018, -2.931817315999865 ], [ 111.7057397800001, -2.940036716999828 ], [ 111.70346113400018, -2.943617445999905 ], [ 111.69418379000012, -2.943047783999873 ], [ 111.69206790500016, -2.94687265399989 ], [ 111.6489363940002, -2.962009372999887 ], [ 111.58432050900007, -3.008884372999887 ], [ 111.56983483200014, -3.015720309999836 ], [ 111.5517684250002, -3.018487237999807 ], [ 111.53435306100022, -3.012139580999872 ], [ 111.52572675900024, -2.996840101999794 ], [ 111.52084394600024, -2.978936455999872 ], [ 111.51441491000014, -2.963799737999864 ], [ 111.48568769600018, -2.94150156 ], [ 111.44752037900014, -2.929782809999892 ], [ 111.36304772199998, -2.922946873 ], [ 111.32422936300009, -2.925957940999808 ], [ 111.29615319100014, -2.936455987999977 ], [ 111.06080162900003, -3.061130466999828 ], [ 110.98617597700007, -3.087497653999833 ], [ 110.9423934250002, -3.091485283999873 ], [ 110.90650475400003, -3.08326588299991 ], [ 110.8237410820002, -3.037204684999949 ], [ 110.80665123800014, -3.032972914999959 ], [ 110.77027428500008, -3.032159112999921 ], [ 110.75424238400007, -3.026055596999868 ], [ 110.75554446700005, -3.011814059999836 ], [ 110.76498457100007, -2.995782158999873 ], [ 110.77409915500016, -2.984307549999926 ], [ 110.80437259200005, -2.959079684999836 ], [ 110.83790123800009, -2.945000908999873 ], [ 110.87208092500009, -2.935235283999873 ], [ 110.95606530000015, -2.900079033999873 ], [ 110.9658309250002, -2.899590752999814 ], [ 110.95606530000015, -2.879001559999892 ], [ 110.93409264400003, -2.88388437299983 ], [ 110.89698326900015, -2.909844658999816 ], [ 110.87940514400009, -2.918145440999922 ], [ 110.83008873800014, -2.933770440999922 ], [ 110.8115340500002, -2.936618747999944 ], [ 110.79395592500015, -2.943536065999865 ], [ 110.77686608200003, -2.959730726999794 ], [ 110.69792728000027, -3.062676690999865 ], [ 110.66244550900018, -3.080743096999868 ], [ 110.63062584699998, -3.053317966999828 ], [ 110.62818444100014, -3.042657158999873 ], [ 110.63314863400012, -3.039483330999815 ], [ 110.64014733200008, -3.037204684999949 ], [ 110.64356530000009, -3.028985283999873 ], [ 110.64258873800009, -3.018731377999927 ], [ 110.63672936300014, -2.994886976999851 ], [ 110.63502037899997, -2.974216403999833 ], [ 110.63038170700003, -2.951348565999922 ], [ 110.61695397200003, -2.909844658999816 ], [ 110.58855228000021, -2.876560153999833 ], [ 110.54948978000004, -2.867608330999815 ], [ 110.50806725400003, -2.874607029 ], [ 110.4040633470002, -2.920505466999941 ], [ 110.30103600400014, -2.997979424999869 ], [ 110.2631942070002, -3.002862237999807 ], [ 110.2402449880002, -2.973077080999815 ], [ 110.22364342500015, -2.930352471999868 ], [ 110.20484459700009, -2.896172783999873 ], [ 110.22169030000009, -2.87607187299983 ], [ 110.23755944100014, -2.846937757999797 ], [ 110.24708092500015, -2.815118096999868 ], [ 110.24586022200015, -2.786309502999814 ], [ 110.22754967500009, -2.741957289999959 ], [ 110.22315514400015, -2.701918226999851 ], [ 110.21387780000015, -2.669040622999887 ], [ 110.21168053500014, -2.652601820999848 ], [ 110.20378665500016, -2.640069268999866 ], [ 110.16749108200008, -2.632419528999833 ], [ 110.1569930350002, -2.621270440999808 ], [ 110.16041100400008, -2.612399997999944 ], [ 110.17969811300014, -2.590020440999865 ], [ 110.18433678500008, -2.577243747999887 ], [ 110.1992293630002, -2.55234140399989 ], [ 110.23194420700003, -2.556735934999836 ], [ 110.2649031910002, -2.556573174999869 ], [ 110.2805281910002, -2.518243096999868 ], [ 110.2468367850002, -2.539808851999851 ], [ 110.22103925900018, -2.532810154 ], [ 110.20118248800009, -2.508233330999872 ], [ 110.1599227220002, -2.436455987999864 ], [ 110.1569930350002, -2.419528904 ], [ 110.15479576900009, -2.376234632999854 ], [ 110.1408797540002, -2.289727471999868 ], [ 110.13209069100014, -2.268161716999941 ], [ 110.11947675900007, -2.258721612999807 ], [ 110.1046655610001, -2.252048434999892 ], [ 110.09717858200014, -2.235772393999923 ], [ 110.09498131600003, -2.215508721999811 ], [ 110.09555097700019, -2.197360934999892 ], [ 110.10531660200024, -2.154392184999892 ], [ 110.11988366000008, -2.112074476999851 ], [ 110.12916100400014, -2.069512627999814 ], [ 110.12354576900015, -2.025485934999892 ], [ 110.0954695970002, -1.960137627999927 ], [ 110.0925399100002, -1.949639580999872 ], [ 110.07504316500012, -1.922458591999828 ], [ 110.06576582100013, -1.91757577899989 ], [ 110.03419030000009, -1.90935637799987 ], [ 109.9875594410002, -1.884698174999869 ], [ 109.96859785200007, -1.881442966999828 ], [ 109.95362389400015, -1.874281507999797 ], [ 109.9038192070002, -1.826104424999869 ], [ 109.90894616000008, -1.823337497999887 ], [ 109.91895592500009, -1.81585051899981 ], [ 109.92432701900003, -1.813164971999925 ], [ 109.91627037900008, -1.80779387799987 ], [ 109.91081790500016, -1.799899998 ], [ 109.90870201900003, -1.790134372999887 ], [ 109.91065514400009, -1.778985283999873 ], [ 109.92164147200015, -1.76962656 ], [ 109.96802819100014, -1.743422132999854 ], [ 109.98267662900014, -1.737969658999816 ], [ 109.99390709700015, -1.730238539999903 ], [ 110.00464928500003, -1.712172132999797 ], [ 110.03394616, -1.646172783999873 ], [ 110.03858483200008, -1.627618096999868 ], [ 110.04175866000014, -1.559828382999854 ], [ 110.06853274800017, -1.432549737999807 ], [ 110.07105553500008, -1.38990650799991 ], [ 110.06137129000018, -1.346368096999868 ], [ 110.04411868600022, -1.304782809999892 ], [ 110.02955162900025, -1.285902601999851 ], [ 110.0100203790002, -1.278008721999981 ], [ 109.98829186300003, -1.27499765399989 ], [ 109.96420332100018, -1.265720309999836 ], [ 109.94849694100003, -1.250746351999794 ], [ 109.95150800900012, -1.230889580999985 ], [ 109.92986087300017, -1.223239841999884 ], [ 109.92204837300017, -1.201592705999872 ], [ 109.92367597700019, -1.174004815999865 ], [ 109.93685957100013, -1.127618096999868 ], [ 109.93458092500009, -1.112562757999854 ], [ 109.92269941500018, -1.103610934999836 ], [ 109.9001570970002, -1.100518487999864 ], [ 109.89405358200014, -1.098565362999807 ], [ 109.86963951900009, -1.086195570999848 ], [ 109.85906009200022, -1.08505624799983 ], [ 109.83545983200008, -1.086195570999848 ], [ 109.82300866, -1.075290622999887 ], [ 109.80990644600018, -1.045179945999848 ], [ 109.7856551440002, -1.032972914999959 ], [ 109.77515709700015, -1.018731377999984 ], [ 109.7597762380002, -0.990655205999872 ], [ 109.74048912899997, -0.967543226999908 ], [ 109.73414147200015, -0.954034112999864 ], [ 109.73178144600007, -0.932305596999868 ], [ 109.73487389400015, -0.917657158999873 ], [ 109.7421981130002, -0.908135674999869 ], [ 109.75131269600018, -0.89959075299987 ], [ 109.7597762380002, -0.887627862999807 ], [ 109.76514733200014, -0.874281507999797 ], [ 109.76351972700024, -0.870863540000016 ], [ 109.73487389400015, -0.879001559999892 ], [ 109.72437584700009, -0.888767184999949 ], [ 109.71949303500003, -0.904066665000016 ], [ 109.71810957100013, -0.925876559999892 ], [ 109.71412194100009, -0.947360934999892 ], [ 109.70386803500008, -0.960625908999816 ], [ 109.6772567070002, -0.98381926899998 ], [ 109.64795983200008, -0.967461846999925 ], [ 109.62989342500015, -0.951918226999965 ], [ 109.62322024800022, -0.951592705999929 ], [ 109.61622155000003, -0.954685154 ], [ 109.60523522199998, -0.956638278999833 ], [ 109.5986434250002, -0.947849216999884 ], [ 109.58171634200022, -0.894463799999869 ], [ 109.55982506600026, -0.877373955999872 ], [ 109.52564537900008, -0.862399997999887 ], [ 109.48878014400015, -0.851657809999836 ], [ 109.43824303500014, -0.845635674999869 ], [ 109.42798912900008, -0.846612237999807 ], [ 109.42066491000008, -0.850192966999884 ], [ 109.41382897200009, -0.860121351999794 ], [ 109.41586347700013, -0.866957289999903 ], [ 109.4210718110001, -0.873793226999851 ], [ 109.4240828790002, -0.884209893999923 ], [ 109.4189559250002, -0.90357838299991 ], [ 109.40650475399997, -0.911390882999854 ], [ 109.39079837300011, -0.911879164999903 ], [ 109.37623131599997, -0.908786716999828 ], [ 109.33521569099997, -0.889092705999985 ], [ 109.32837975400008, -0.884209893999923 ], [ 109.32048587300017, -0.883396091999884 ], [ 109.28386478000016, -0.863213799999869 ], [ 109.2732039720002, -0.853610934999892 ], [ 109.24529056100016, -0.695896091999884 ], [ 109.25098717500009, -0.677666924999812 ], [ 109.26254316500018, -0.667413018999866 ], [ 109.27857506599997, -0.669040622999887 ], [ 109.2973738940002, -0.685642184999892 ], [ 109.31381269600018, -0.695000908999816 ], [ 109.3830672540002, -0.695896091999884 ], [ 109.39820397200026, -0.703057549999869 ], [ 109.42920983200014, -0.725762627999984 ], [ 109.45582116000014, -0.732110283999816 ], [ 109.46192467500003, -0.734795830999872 ], [ 109.46859785200019, -0.737074476999851 ], [ 109.47868899800005, -0.736911716999884 ], [ 109.50171959700003, -0.731052341999884 ], [ 109.50961347700019, -0.725030205999929 ], [ 109.50652103000021, -0.716403903999833 ], [ 109.49732506600014, -0.713636976999794 ], [ 109.47152754000012, -0.716566664999903 ], [ 109.4615991550001, -0.712985934999836 ], [ 109.44361412900025, -0.687432549999869 ], [ 109.43458092500015, -0.67880624799983 ], [ 109.41293379000007, -0.663995049999869 ], [ 109.38990319100009, -0.654880466999884 ], [ 109.37916100400008, -0.652927341999828 ], [ 109.36255944100003, -0.65195077899989 ], [ 109.35515384200005, -0.648125908999873 ], [ 109.35515384200005, -0.641289971999925 ], [ 109.3596297540002, -0.639743747999887 ], [ 109.36882571699999, -0.63388437299983 ], [ 109.36475670700014, -0.630140882999797 ], [ 109.3596297540002, -0.623630466999941 ], [ 109.35515384200005, -0.620212497999887 ], [ 109.35515384200005, -0.613946221999868 ], [ 109.37322024800005, -0.614190362999807 ], [ 109.40626061300014, -0.620212497999887 ], [ 109.4240828790002, -0.620212497999887 ], [ 109.4240828790002, -0.613946221999868 ], [ 109.40064537900003, -0.597344658999816 ], [ 109.37452233200014, -0.58733489399981 ], [ 109.34400475400003, -0.583754164999846 ], [ 109.2775985040002, -0.586195570999905 ], [ 109.26238040500021, -0.592461846999925 ], [ 109.25660241000008, -0.588474216999884 ], [ 109.25033613400012, -0.582289320999905 ], [ 109.23536217500009, -0.576348565999979 ], [ 109.23113040500004, -0.570000908999816 ], [ 109.22803795700014, -0.563083591999828 ], [ 109.22478274800022, -0.558689059999836 ], [ 109.21509850400008, -0.553399346999868 ], [ 109.21176191500012, -0.552178643999866 ], [ 109.20777428500008, -0.552422783999873 ], [ 109.19752037900003, -0.55185312299983 ], [ 109.18734785200007, -0.552992445999848 ], [ 109.17969811300014, -0.556084893999866 ], [ 109.1713973320002, -0.556329033999873 ], [ 109.15992272200003, -0.548760674999869 ], [ 109.13941491, -0.52857838299991 ], [ 109.13013756600014, -0.51572031 ], [ 109.1233016290002, -0.499688408999816 ], [ 109.10279381600009, -0.409926039999903 ], [ 109.10059655000015, -0.369724216999884 ], [ 109.1025496750002, -0.361097914999903 ], [ 109.1124780610001, -0.359795830999872 ], [ 109.13599694100009, -0.360039971999811 ], [ 109.10320071700005, -0.314141533999873 ], [ 109.09083092500015, -0.287204684999949 ], [ 109.1013289720002, -0.263848565999865 ], [ 109.1013289720002, -0.257582289999903 ], [ 109.08936608200014, -0.253024998 ], [ 109.07642662900008, -0.250583591999941 ], [ 109.06739342500015, -0.255140882999797 ], [ 109.06706790500021, -0.271254164999846 ], [ 109.0503035820002, -0.261895440999865 ], [ 109.04623457100024, -0.245863539999846 ], [ 109.05095462300017, -0.229099216999828 ], [ 109.06031334699998, -0.216729424999869 ], [ 109.07032311300009, -0.211846612999807 ], [ 109.08611087300022, -0.207452080999815 ], [ 109.11866295700008, -0.203057549999926 ], [ 109.14665774800011, -0.205254815999865 ], [ 109.17603600400008, -0.212009372999887 ], [ 109.20167076900009, -0.22275156 ], [ 109.21851647200009, -0.237237237999864 ], [ 109.22478274800022, -0.237237237999864 ], [ 109.21876061300014, -0.221612237999864 ], [ 109.19857832100018, -0.200860283999873 ], [ 109.19060306100022, -0.188734632999967 ], [ 109.18848717500015, -0.17734140399989 ], [ 109.19060306100022, -0.137302341999941 ], [ 109.18685957100013, -0.082207940999808 ], [ 109.17969811300014, -0.055474541999899 ], [ 109.16041100400014, -0.023695570999962 ], [ 109.15739993600022, -0.009291273999793 ], [ 109.15650475400003, 0.02008698100019 ], [ 109.16098066500007, 0.033921617000203 ], [ 109.1721297540002, 0.034165757000153 ], [ 109.19752037900003, 0.023504950000131 ], [ 109.30046634200028, 0.010484117000203 ], [ 109.2805281910002, 0.027492580000171 ], [ 109.23666425900018, 0.057277736000117 ], [ 109.1769311860001, 0.107611395000163 ], [ 109.16675866000008, 0.112290757000096 ], [ 109.10230553500008, 0.243109442000105 ], [ 109.04664147200003, 0.287054755000213 ], [ 109.03321373800014, 0.293361721000167 ], [ 109.01612389400009, 0.29682038000027 ], [ 108.9531356130002, 0.301743882000096 ], [ 108.92872155000015, 0.315090236000231 ], [ 108.92090905000015, 0.340277411000102 ], [ 108.93116295700008, 0.379787502000227 ], [ 108.94239342500009, 0.408270575000188 ], [ 108.94434655000015, 0.422512111000231 ], [ 108.9448348320002, 0.445298570000261 ], [ 108.93848717500015, 0.465155341000184 ], [ 108.91309655000015, 0.504339911000159 ], [ 108.91000410200024, 0.530585028000132 ], [ 108.91431725400008, 0.541408596000224 ], [ 108.92823326900015, 0.563666083000214 ], [ 108.93116295700008, 0.575018622000243 ], [ 108.93116295700008, 0.61619700700021 ], [ 108.9272567070002, 0.640773830000228 ], [ 108.91724694100009, 0.661078192000161 ], [ 108.87598717500003, 0.714667059000249 ], [ 108.87745201900009, 0.723822333000157 ], [ 108.88502037900014, 0.733221747000187 ], [ 108.88965905000015, 0.753729559000192 ], [ 108.8825789720002, 0.77753327000022 ], [ 108.85596764400015, 0.811590887000193 ], [ 108.8554793630002, 0.832220770000163 ], [ 108.86264082100013, 0.841742255000213 ], [ 108.87696373800014, 0.855536200000131 ], [ 108.89332116000014, 0.86790599200026 ], [ 108.90658613400024, 0.873236395000163 ], [ 108.92603600399997, 0.87596263200021 ], [ 108.94141686300009, 0.884019273000263 ], [ 108.95394941500018, 0.896877346000167 ], [ 108.96534264400009, 0.914211330000171 ], [ 108.98080488400007, 0.95604075700021 ], [ 108.98031660200019, 0.995550848000164 ], [ 108.92701256600014, 1.140448309000135 ], [ 108.92432701900009, 1.164007880000156 ], [ 108.93262780000003, 1.178045966000127 ], [ 108.95232181100016, 1.184068101000207 ], [ 108.99268639400015, 1.187892971000167 ], [ 109.03272545700014, 1.199042059000135 ], [ 109.1081649100002, 1.228705145000106 ], [ 109.14283287900008, 1.250637111000231 ], [ 109.15845787900008, 1.264634507000153 ], [ 109.21566816500024, 1.335435289000202 ], [ 109.22803795700014, 1.358628648000149 ], [ 109.24341881600009, 1.37986888200021 ], [ 109.26636803500008, 1.394598700000188 ], [ 109.26636803500008, 1.401434637000136 ], [ 109.24048912900008, 1.404201565000108 ], [ 109.22730553500014, 1.38886139500022 ], [ 109.21729576900009, 1.369452216000241 ], [ 109.20118248800009, 1.35984935100015 ], [ 109.18824303499997, 1.349188544000128 ], [ 109.16504967500015, 1.302232164000202 ], [ 109.15308678500014, 1.291571356000247 ], [ 109.14926191500018, 1.28620026200025 ], [ 109.14470462300005, 1.27415599200026 ], [ 109.13738040500016, 1.262274481000134 ], [ 109.12574303500003, 1.25682200700021 ], [ 109.11402428500014, 1.254461981000134 ], [ 109.10450280000009, 1.248846747000243 ], [ 109.08822675900012, 1.236314195000148 ], [ 109.06617272200015, 1.229559637000307 ], [ 109.0122176440002, 1.224310614000217 ], [ 108.9858504570002, 1.215806382000153 ], [ 108.99040774800005, 1.247463283000172 ], [ 109.00603274800022, 1.27415599200026 ], [ 109.04037519600013, 1.318915106000134 ], [ 109.05437259200005, 1.352240302000212 ], [ 109.06080162900008, 1.38385651200025 ], [ 109.06080162900008, 1.499009507000153 ], [ 109.07300866000014, 1.53392161700026 ], [ 109.09595787900014, 1.560614325000245 ], [ 109.25269616, 1.668361721000167 ], [ 109.27222741000003, 1.693793036000159 ], [ 109.30339603000021, 1.752630927000212 ], [ 109.32105553500003, 1.778225002000227 ], [ 109.33912194100009, 1.797756252000113 ], [ 109.3420516290002, 1.801825262000136 ], [ 109.34310957100013, 1.804388739000103 ], [ 109.3454695970002, 1.806463934000249 ], [ 109.34782962300022, 1.809556382000153 ], [ 109.34888756600009, 1.815415757000096 ], [ 109.3466903000002, 1.818793036000216 ], [ 109.34180748800014, 1.819973049000225 ], [ 109.33692467500015, 1.818793036000216 ], [ 109.33464603, 1.815415757000096 ], [ 109.28679446700016, 1.778225002000227 ], [ 109.289235873, 1.795965887000193 ], [ 109.2999780610001, 1.806952216000184 ], [ 109.31446373800009, 1.817206122000187 ], [ 109.32837975400008, 1.832831122000187 ], [ 109.33513431099999, 1.850165106000191 ], [ 109.3364363940002, 1.86790599200026 ], [ 109.33464603, 1.90110911700026 ], [ 109.3409936860001, 1.935532945000148 ], [ 109.3588973320002, 1.948309637000136 ], [ 109.4240828790002, 1.955715236000174 ], [ 109.56120853000016, 1.990464585000211 ], [ 109.57886803499997, 1.997626044000242 ], [ 109.59278405000009, 2.007513739000274 ], [ 109.60466556100022, 2.020941473000164 ], [ 109.6350203790002, 2.074042059000249 ], [ 109.6452742850002, 2.083238023000149 ], [ 109.64543704500016, 2.082586981000247 ], [ 109.64991295700014, 2.065578518000109 ], [ 109.65219160200013, 2.04344310100015 ], [ 109.6621199880002, 2.002752997000187 ], [ 109.66358483200008, 1.983058986000231 ], [ 109.66000410200013, 1.967027085000211 ], [ 109.6552840500002, 1.953111070000148 ], [ 109.65463300900024, 1.936997789000202 ], [ 109.66358483200008, 1.914740302000212 ], [ 109.69304446700016, 1.873114325000188 ], [ 109.7114363940002, 1.854478257000096 ], [ 109.73178144600007, 1.839585679000152 ], [ 109.7934676440002, 1.813462632000096 ], [ 109.82894941500012, 1.79010651200025 ], [ 109.86963951900009, 1.772894598000221 ], [ 109.88672936300014, 1.760199286000216 ], [ 109.89877363400024, 1.743109442000161 ], [ 109.91553795700008, 1.708400783000116 ], [ 109.92774498800014, 1.692287502000113 ], [ 109.94174238400012, 1.689195054000209 ], [ 109.99122155000003, 1.69017161700026 ], [ 110.00318444099997, 1.692287502000113 ], [ 110.01840254000018, 1.700181382000096 ], [ 110.04004967500003, 1.702785549000168 ], [ 110.16765384200022, 1.701849677000212 ], [ 110.18091881600014, 1.698716539000145 ], [ 110.20045006600003, 1.685207424000168 ], [ 110.21168053500014, 1.68203359600011 ], [ 110.21631920700008, 1.684759833000157 ], [ 110.2317000660002, 1.697699286000272 ], [ 110.2390242850002, 1.701849677000212 ], [ 110.24838300900024, 1.705226955000228 ], [ 110.2541610040002, 1.706203518000109 ], [ 110.26002037900014, 1.702622789000202 ], [ 110.28394616000008, 1.676092841000184 ], [ 110.2907820970002, 1.673976955000228 ], [ 110.2956649100002, 1.691555080000114 ], [ 110.30534915500004, 1.703314520000163 ], [ 110.30787194100009, 1.709295966000184 ], [ 110.30713951900003, 1.715521552000155 ], [ 110.30225670700014, 1.72565338700025 ], [ 110.30103600400014, 1.729722398000263 ], [ 110.29957116000008, 1.761419989000217 ], [ 110.30103600400014, 1.770738023000263 ], [ 110.31332441500018, 1.792629299000168 ], [ 110.3293563160002, 1.802557684000192 ], [ 110.34302819100014, 1.797512111000231 ], [ 110.35075931100016, 1.768500067000161 ], [ 110.35987389400015, 1.756293036000102 ], [ 110.3630477220002, 1.750230210000098 ], [ 110.36378014400003, 1.743597723000164 ], [ 110.36215254000018, 1.729437567000218 ], [ 110.3630477220002, 1.722967841000127 ], [ 110.36646569100009, 1.71588776200025 ], [ 110.37094160200019, 1.710191148000149 ], [ 110.37631269600013, 1.705715236000174 ], [ 110.38298587300011, 1.701849677000212 ], [ 110.39014733200014, 1.699042059000249 ], [ 110.39893639400009, 1.697088934000192 ], [ 110.42115319100009, 1.695705471000224 ], [ 110.43132571700011, 1.699896552000155 ], [ 110.44361412900008, 1.718695380000213 ], [ 110.47364342500009, 1.728949286000216 ], [ 110.49187259199999, 1.738959052000098 ], [ 110.50798587300017, 1.740912177000155 ], [ 110.52076256600009, 1.722967841000127 ], [ 110.50847415500004, 1.707586981000247 ], [ 110.49968509200016, 1.693589585000098 ], [ 110.49463951900003, 1.678127346000167 ], [ 110.49284915500004, 1.658107815000108 ], [ 110.48910566500012, 1.650295315000108 ], [ 110.47136478000016, 1.63198476800028 ], [ 110.46558678499997, 1.620550848000107 ], [ 110.49244225400008, 1.631659247000243 ], [ 110.50635826900015, 1.63300202000022 ], [ 110.52076256600009, 1.627346096000167 ], [ 110.53028405000009, 1.616156317000218 ], [ 110.53296959699998, 1.605373440000221 ], [ 110.53630618600027, 1.596869208000214 ], [ 110.54753665500021, 1.592596747000243 ], [ 110.5566512380002, 1.594671942000105 ], [ 110.57740319100009, 1.605210679000152 ], [ 110.58904056099999, 1.606268622000187 ], [ 110.60254967500009, 1.601507880000099 ], [ 110.64356530000009, 1.579006252000113 ], [ 110.70118248800014, 1.561712958000157 ], [ 110.72673587300011, 1.547430731000134 ], [ 110.73926842500003, 1.523667710000154 ], [ 110.73340905000009, 1.498683986000117 ], [ 110.71558678500014, 1.480617580000114 ], [ 110.67790774800011, 1.456040757000096 ], [ 110.67790774800011, 1.448635158000116 ], [ 110.7043563160002, 1.449367580000114 ], [ 110.72510826900009, 1.453111070000261 ], [ 110.74350019600013, 1.462388414000145 ], [ 110.76343834700003, 1.479681708000101 ], [ 110.77344811300014, 1.498602606000134 ], [ 110.77222741000008, 1.518011786000216 ], [ 110.76726321700016, 1.53620026200025 ], [ 110.76661217500009, 1.551662502000227 ], [ 110.79330488400024, 1.572414455000171 ], [ 110.83961022200009, 1.565985419000242 ], [ 110.9248153000002, 1.531195380000213 ], [ 110.9679468110001, 1.503241278000246 ], [ 111.04395592500015, 1.426947333000214 ], [ 111.08236738400012, 1.401434637000136 ], [ 111.14193769600013, 1.371527411000216 ], [ 111.15455162900014, 1.367336330000114 ], [ 111.17855879000007, 1.370794989000217 ], [ 111.21176191500007, 1.388088283000229 ], [ 111.23267662900008, 1.394598700000188 ], [ 111.26514733200003, 1.381781317000105 ], [ 111.30128014400009, 1.351996161000159 ], [ 111.34058678500008, 1.333319403000246 ], [ 111.38355553500014, 1.353664455000171 ], [ 111.36695397200009, 1.354396877000227 ], [ 111.3391219410002, 1.364691473000221 ], [ 111.32553144600024, 1.367336330000114 ], [ 111.3210555350002, 1.373602606000247 ], [ 111.31177819100014, 1.401353257000153 ], [ 111.3046981130002, 1.407619533000116 ], [ 111.28882897200015, 1.410060940000221 ], [ 111.26099694100009, 1.419907945000261 ], [ 111.2463485040002, 1.421332098000221 ], [ 111.23462975400008, 1.417954820000205 ], [ 111.19849694100014, 1.401434637000136 ], [ 111.1767684250002, 1.400580145000106 ], [ 111.15796959700015, 1.406154690000108 ], [ 111.14161217500015, 1.416937567000161 ], [ 111.12720787900008, 1.431830145000106 ], [ 111.10922285200013, 1.445013739000217 ], [ 111.06495201900009, 1.462713934000249 ], [ 111.04835045700008, 1.476548570000205 ], [ 111.0302840500002, 1.52431875200017 ], [ 111.01107832100013, 1.542954820000261 ], [ 111.0068465500002, 1.555080471000167 ], [ 111.0056258470002, 1.584458726000264 ], [ 111.0068465500002, 1.592596747000243 ], [ 111.02035566500018, 1.627346096000167 ], [ 111.02857506599997, 1.66400788000027 ], [ 111.03785241000003, 1.676947333000157 ], [ 111.0954695970002, 1.687974351000207 ], [ 111.11752363400018, 1.688869533000172 ], [ 111.13705488400007, 1.68203359600011 ], [ 111.15023847700013, 1.664129950000245 ], [ 111.16334069100009, 1.640855210000211 ], [ 111.17945397200009, 1.627020575000131 ], [ 111.2023218110001, 1.637274481000134 ], [ 111.2150985040002, 1.639837958000214 ], [ 111.22901451900009, 1.630031643000223 ], [ 111.24577884200011, 1.621323960000154 ], [ 111.26742597700019, 1.627346096000167 ], [ 111.24732506600014, 1.633368231000247 ], [ 111.23780358200014, 1.637762762000136 ], [ 111.21998131600026, 1.65143463700025 ], [ 111.21119225400014, 1.652492580000114 ], [ 111.20240319100009, 1.651922919000128 ], [ 111.18262780000015, 1.657294012000193 ], [ 111.17611738400024, 1.656805731000191 ], [ 111.17286217500009, 1.659369208000157 ], [ 111.17188561300014, 1.671454169000242 ], [ 111.16041100400008, 1.687811591000241 ], [ 111.1582137380002, 1.692287502000113 ], [ 111.15455162900014, 1.695990302000269 ], [ 111.1364852220002, 1.69961172100011 ], [ 111.13021894600024, 1.701849677000212 ], [ 111.12614993599999, 1.706610419000128 ], [ 111.10303795700008, 1.746079820000261 ], [ 111.09799238400012, 1.759588934000135 ], [ 111.09603925900007, 1.77448151200025 ], [ 111.10084069100014, 1.780259507000267 ], [ 111.12322024800011, 1.785793361000174 ], [ 111.13021894600024, 1.79189687700017 ], [ 111.12859134200022, 1.797593492000146 ], [ 111.11353600400014, 1.807196356000134 ], [ 111.10987389400015, 1.815415757000096 ], [ 111.11312910200019, 1.835516669000242 ], [ 111.12159264400009, 1.85390859600011 ], [ 111.14389082100018, 1.888088283000116 ], [ 111.17530358200003, 1.953192450000131 ], [ 111.20394941500012, 2.045640367000203 ], [ 111.20590254000012, 2.068996486000117 ], [ 111.21127363400012, 2.073919989000103 ], [ 111.2233992850002, 2.072088934000192 ], [ 111.2433374360001, 2.065578518000109 ], [ 111.26783287900014, 2.067531643000166 ], [ 111.24187259200022, 2.089422919000128 ], [ 111.24008222700013, 2.113348700000245 ], [ 111.25391686300014, 2.126125393000223 ], [ 111.2717391290002, 2.12470123900016 ], [ 111.29151451900003, 2.117621161000159 ], [ 111.32797285200007, 2.110419012000136 ], [ 111.33643639400015, 2.112127997000243 ], [ 111.34994550900012, 2.120794989000217 ], [ 111.3564559250002, 2.128078518000223 ], [ 111.37501061300009, 2.153998114000274 ], [ 111.37794030000015, 2.161810614000217 ], [ 111.3686629570002, 2.169989325000245 ], [ 111.35678144600024, 2.166205145000163 ], [ 111.34685306100022, 2.155747789000145 ], [ 111.33863366000003, 2.130804755000156 ], [ 111.32911217500015, 2.128729559000192 ], [ 111.31861412899997, 2.132798570000148 ], [ 111.29127037900008, 2.150376695000205 ], [ 111.27051842500009, 2.153794664000316 ], [ 111.19890384200016, 2.143255927000212 ], [ 111.18474368600022, 2.145086981000191 ], [ 111.17945397200009, 2.155910549000112 ], [ 111.17872155000003, 2.178859768000109 ], [ 111.1848250660002, 2.194769598000221 ], [ 111.20004316500018, 2.210882880000099 ], [ 111.21998131600026, 2.220404364000103 ], [ 111.24008222700013, 2.216376044000242 ], [ 111.22950280000009, 2.235256252000227 ], [ 111.21070397200003, 2.242173570000261 ], [ 111.19288170700008, 2.245591539000145 ], [ 111.1848250660002, 2.253648179000095 ], [ 111.1865340500002, 2.271714585000098 ], [ 111.19849694100014, 2.318793036000102 ], [ 111.20850670700003, 2.38886139500022 ], [ 111.22095787899997, 2.416083075000131 ], [ 111.2463485040002, 2.436102606000191 ], [ 111.25473066500012, 2.419256903000189 ], [ 111.26783287900014, 2.411200262000136 ], [ 111.30152428500014, 2.400702216000184 ], [ 111.31299889400015, 2.39081452000022 ], [ 111.33806399800017, 2.360093492000146 ], [ 111.34636478000021, 2.353583075000188 ], [ 111.35206139400015, 2.350572007000096 ], [ 111.35840905000003, 2.344794012000136 ], [ 111.36548912900014, 2.340765692000218 ], [ 111.37387129000007, 2.343003648000149 ], [ 111.4052840500002, 2.364325262000193 ], [ 111.41456139400009, 2.367254950000131 ], [ 111.44825280000009, 2.372381903000189 ], [ 111.45557701900009, 2.370672919000185 ], [ 111.47364342500009, 2.357326565000108 ], [ 111.4934188160002, 2.346136786000216 ], [ 111.48511803500003, 2.364162502000227 ], [ 111.46509850399997, 2.384833075000131 ], [ 111.43246504000012, 2.414984442000275 ], [ 111.42416425900012, 2.427232164000202 ], [ 111.41228274800017, 2.469224351000207 ], [ 111.40455162900008, 2.483954169000185 ], [ 111.4355574880002, 2.482123114000103 ], [ 111.46338951900009, 2.474920966000184 ], [ 111.4873153000002, 2.473944403000132 ], [ 111.50709069100014, 2.49070872600015 ], [ 111.51254316500007, 2.488267320000261 ], [ 111.51400800900012, 2.486965236000174 ], [ 111.51563561300014, 2.487494208000101 ], [ 111.52125084700009, 2.49070872600015 ], [ 111.4995223320002, 2.49884674700013 ], [ 111.46168053500008, 2.508002020000163 ], [ 111.44556725400025, 2.518011786000216 ], [ 111.43295332100013, 2.528753973000221 ], [ 111.42286217500003, 2.539618231000134 ], [ 111.41724694100014, 2.555121161000159 ], [ 111.41765384200016, 2.579535223000107 ], [ 111.43531334700015, 2.640936591000241 ], [ 111.44027754000012, 2.680121161000216 ], [ 111.44703209700003, 2.694647528000132 ], [ 111.45785566500012, 2.705633856000191 ], [ 111.52979576900009, 2.760687567000161 ], [ 111.63892662900003, 2.828192450000245 ], [ 111.66960696700011, 2.843085028000189 ], [ 111.86060631600003, 2.880601304000095 ], [ 112.01351972700013, 2.885931708000101 ], [ 112.29786217500009, 2.961004950000131 ], [ 112.5747176440002, 3.033921617000146 ], [ 112.72730553500014, 3.066107489000103 ], [ 112.78882897200026, 3.090277411000102 ], [ 112.80054772200015, 3.09003327000022 ], [ 112.97437584700003, 3.144232489000217 ], [ 113.00782311300009, 3.161688544000242 ], [ 113.06120853000004, 3.218654690000108 ], [ 113.08228600400014, 3.256781317000161 ], [ 113.06934655000009, 3.278998114000103 ], [ 113.07691491000014, 3.287787177000155 ], [ 113.10336347700013, 3.305650132000153 ], [ 113.15137780000009, 3.347723700000188 ], [ 113.16211998800009, 3.353461005000156 ], [ 113.16618899800005, 3.362941799000168 ], [ 113.19955488400012, 3.415513414000145 ], [ 113.27759850400014, 3.484198309000135 ], [ 113.2959090500002, 3.511786200000245 ], [ 113.29908287900003, 3.519598700000245 ], [ 113.30111738400024, 3.527736721000224 ], [ 113.30274498800031, 3.549261786000159 ], [ 113.30811608200008, 3.559312242000203 ], [ 113.3315535820002, 3.577541408000229 ], [ 113.33676191500012, 3.583807684000192 ], [ 113.34359785200002, 3.59446849200026 ], [ 113.39144941500012, 3.648342190000221 ], [ 113.41488691500001, 3.688706773000206 ], [ 113.42302493600005, 3.711249091000184 ], [ 113.42611738400012, 3.734605210000098 ], [ 113.43425540500016, 3.753159898000149 ], [ 113.4531356130002, 3.768744208000157 ], [ 113.49447675900001, 3.792303778000132 ], [ 113.73682701900009, 4.001288153000246 ], [ 113.9467879570002, 4.273830471000167 ], [ 113.9677840500002, 4.322170315000165 ], [ 113.96062259200028, 4.361517645000106 ], [ 113.9819442070002, 4.394720770000106 ], [ 113.99219811300009, 4.437079169000185 ], [ 113.99187259200005, 4.484442450000131 ], [ 113.96941165500027, 4.578517971000281 ], [ 113.97584069100026, 4.59471263200021 ], [ 113.99878991000026, 4.601141669000242 ], [ 114.06417932200009, 4.570032247000142 ], [ 114.11895634000018, 4.561634827000262 ], [ 114.1400403240001, 4.550653585000305 ], [ 114.17269983000006, 4.525228780000248 ], [ 114.19729781100023, 4.515823670000145 ], [ 114.20908003800025, 4.50814971900013 ], [ 114.21672814900023, 4.487660014000255 ], [ 114.22292932200003, 4.484636943000169 ], [ 114.23832889800008, 4.484223532000158 ], [ 114.24556359900032, 4.481433004000166 ], [ 114.24783736200015, 4.474766744000192 ], [ 114.24876753800004, 4.466886088000251 ], [ 114.2520748300002, 4.460349020000251 ], [ 114.26261682100017, 4.448721823000199 ], [ 114.26850793500012, 4.437740581000185 ], [ 114.2762594000003, 4.409731954000108 ], [ 114.2762594000003, 4.381852519000233 ], [ 114.28990197800022, 4.361311137000257 ], [ 114.29672326700017, 4.316662700000222 ], [ 114.29341597500013, 4.307050883000102 ], [ 114.27946333800026, 4.29488108400011 ], [ 114.2762594000003, 4.289015808000102 ], [ 114.2780163980002, 4.274055481000119 ], [ 114.2826672770002, 4.26490875300027 ], [ 114.31677372200011, 4.262505799000223 ], [ 114.36049198500018, 4.253875834000155 ], [ 114.40141971900027, 4.261213887000224 ], [ 114.41991988200016, 4.260128683000175 ], [ 114.43252893100032, 4.246925354000268 ], [ 114.45330285700015, 4.183699239000191 ], [ 114.4631213790002, 4.164139709000096 ], [ 114.47738407500015, 4.144967753000231 ], [ 114.54022261600028, 4.086935120000192 ], [ 114.56140995300007, 4.072026469000264 ], [ 114.56936812400033, 4.064404195000179 ], [ 114.57422570800031, 4.054146423000191 ], [ 114.58166711500007, 4.029341736000163 ], [ 114.58662805200004, 4.021435242000223 ], [ 114.62776249200022, 4.016681010000127 ], [ 114.67489139800011, 4.044069519000232 ], [ 114.76687544800018, 4.131816101000254 ], [ 114.77452356000015, 4.146466370000155 ], [ 114.78010461500014, 4.187755839000261 ], [ 114.78713260900008, 4.207212016000256 ], [ 114.80997359200001, 4.24129262300022 ], [ 114.81720829300025, 4.259663595000234 ], [ 114.81379764900032, 4.277104391000194 ], [ 114.78258508400006, 4.264417826000226 ], [ 114.78196496600015, 4.284933370000204 ], [ 114.78785607900022, 4.294157613000209 ], [ 114.79416325000011, 4.300239528000247 ], [ 114.81824182100013, 4.323458151000182 ], [ 114.82899051900006, 4.340485535000198 ], [ 114.83643192500028, 4.357228699000132 ], [ 114.84563033100017, 4.395107524000139 ], [ 114.84790409400023, 4.423736268000312 ], [ 114.840462688, 4.428619691000165 ], [ 114.82568322700013, 4.426190898000186 ], [ 114.80604618300003, 4.433322246000103 ], [ 114.78816613800007, 4.461201680000102 ], [ 114.78217167200023, 4.497788595000145 ], [ 114.77731408700004, 4.614654847000281 ], [ 114.77390344200001, 4.636824036000178 ], [ 114.76811568300025, 4.657494609000139 ], [ 114.74878869700001, 4.694391581000161 ], [ 114.74134729000014, 4.712943420000102 ], [ 114.74196740800005, 4.729454040000178 ], [ 114.743192034, 4.73058520800015 ], [ 114.7517859300001, 4.738523255000132 ], [ 114.78847619700025, 4.753896993000126 ], [ 114.80542606700021, 4.764568177000228 ], [ 114.83767216000012, 4.795315654000262 ], [ 114.85575891100007, 4.806658630000129 ], [ 114.87818648300004, 4.812808126000221 ], [ 114.89647994000029, 4.811826274000168 ], [ 114.91487675000019, 4.808725688000095 ], [ 114.93244673700008, 4.809139099000106 ], [ 114.94836307800017, 4.81893178300021 ], [ 114.95487430900016, 4.83420216900015 ], [ 114.95570113100018, 4.850919495000255 ], [ 114.95890507000024, 4.866293234000182 ], [ 114.98170006600014, 4.88906484600011 ], [ 114.99244225400003, 4.894232489000217 ], [ 115.00196373800009, 4.900051174000168 ], [ 115.00993899800005, 4.907171942000105 ], [ 115.01579837300017, 4.916408596000167 ], [ 115.02263431100016, 4.895900783000229 ], [ 115.02361087300017, 4.857082424000112 ], [ 115.02955162900003, 4.820868231000191 ], [ 115.02977835200022, 4.820641508000165 ], [ 115.02277714100012, 4.741365458000189 ], [ 115.0268079020002, 4.660026754000114 ], [ 115.03548954300015, 4.621243592000155 ], [ 115.06814904800012, 4.543367208000234 ], [ 115.07982792200005, 4.503963928000303 ], [ 115.09181685400017, 4.405416972000126 ], [ 115.09977502500021, 4.391231791000166 ], [ 115.11300419200006, 4.382369284000276 ], [ 115.16995162000001, 4.361259460000156 ], [ 115.19082889800018, 4.35676361100019 ], [ 115.22069787600014, 4.359760844000107 ], [ 115.22906945800025, 4.35676361100019 ], [ 115.24467574100015, 4.343663635000269 ], [ 115.25511438100023, 4.33924530000013 ], [ 115.27433801300026, 4.340020447000256 ], [ 115.2831230070002, 4.336764832000256 ], [ 115.30120975800025, 4.324698385000261 ], [ 115.32436080000014, 4.314595642000256 ], [ 115.34627160700018, 4.313768820000234 ], [ 115.36074100800022, 4.329555970000115 ], [ 115.35826053900007, 4.350278219000245 ], [ 115.34379113800014, 4.371672261000242 ], [ 115.30865116400003, 4.404693502000157 ], [ 115.28560347500013, 4.435363465000194 ], [ 115.27247766200026, 4.474663391000263 ], [ 115.26689660600016, 4.516857198000196 ], [ 115.26741337100009, 4.556208802000299 ], [ 115.27547489400001, 4.595741272000225 ], [ 115.27702518800027, 4.613052877000257 ], [ 115.27268436700012, 4.636772359000304 ], [ 115.20736535700007, 4.825598043000184 ], [ 115.1822506110002, 4.861228943000242 ], [ 115.1693315020002, 4.869988098000135 ], [ 115.15599898300013, 4.876292623000154 ], [ 115.14680057800024, 4.885620219000316 ], [ 115.14616946700016, 4.908514716000184 ], [ 115.16285241000026, 4.908026434000135 ], [ 115.17823326900032, 4.910060940000221 ], [ 115.1894637380002, 4.917466539000202 ], [ 115.19890384200005, 4.950751044000242 ], [ 115.21062259200016, 4.95970286700026 ], [ 115.22437584700003, 4.958319403000189 ], [ 115.23552493600005, 4.94432200700021 ], [ 115.23861738400012, 4.937323309000249 ], [ 115.24390709700015, 4.935451565000278 ], [ 115.26563561300009, 4.936916408000229 ], [ 115.27523847700013, 4.935248114000217 ], [ 115.28532962300017, 4.931219794000128 ], [ 115.29322350400003, 4.925726630000213 ], [ 115.30396569100003, 4.906154690000165 ], [ 115.32162519600024, 4.900132554000152 ], [ 115.3422957690002, 4.899807033000116 ], [ 115.35840905000032, 4.902777411000216 ], [ 115.37029056100027, 4.91087474200026 ], [ 115.40349368600016, 4.94432200700021 ], [ 115.40788821700005, 4.950344143000223 ], [ 115.4477645190002, 4.985296942000218 ], [ 115.47974694100003, 5.026027736000174 ], [ 115.49219811300009, 5.032456773000206 ], [ 115.51246178500026, 5.035874742000146 ], [ 115.53174889400009, 5.044623114000103 ], [ 115.54761803500003, 5.055812893000223 ], [ 115.55697675900012, 5.067206122000243 ], [ 115.5629988940002, 5.083156643000109 ], [ 115.56983483200008, 5.123724677000098 ], [ 115.5712996750002, 5.160060940000165 ], [ 115.57349694100014, 5.169663804000152 ], [ 115.58423912900014, 5.190130927000155 ], [ 115.59253991000003, 5.198675848000221 ], [ 115.60132897200015, 5.204575914000259 ], [ 115.60523522200003, 5.212103583000214 ], [ 115.5986434250002, 5.22549062700017 ], [ 115.56080162900025, 5.20783112200013 ], [ 115.52377363400012, 5.208807684000135 ], [ 115.4897567070002, 5.222967841000127 ], [ 115.40064537900025, 5.299994208000214 ], [ 115.39812259200016, 5.30931224200026 ], [ 115.40040123800009, 5.317857164000259 ], [ 115.39975019600024, 5.324204820000205 ], [ 115.38917076900009, 5.326646226000207 ], [ 115.3847762380002, 5.324408270000163 ], [ 115.3652449880002, 5.307440497000187 ], [ 115.35962975400014, 5.319647528000246 ], [ 115.36264082100013, 5.333889065000221 ], [ 115.36866295700031, 5.34931061400016 ], [ 115.37525475400003, 5.381984768000223 ], [ 115.3823348320002, 5.395249742000146 ], [ 115.38941491000003, 5.405666408000172 ], [ 115.39258873800009, 5.413275458000157 ], [ 115.40430748800009, 5.423895575000245 ], [ 115.45639082100013, 5.454331773000206 ], [ 115.46827233200008, 5.474676825000245 ], [ 115.47950280000009, 5.489691473000221 ], [ 115.55014082100013, 5.540187893000109 ], [ 115.58521569100003, 5.616156317000161 ], [ 115.60482832100001, 5.635809637000193 ], [ 115.61882571700005, 5.612860419000128 ], [ 115.58432050900012, 5.548488674000112 ], [ 115.60482832100001, 5.519720770000163 ], [ 115.61003665500027, 5.530096747000243 ], [ 115.61443118600027, 5.557277736000231 ], [ 115.6191512380002, 5.56806061400016 ], [ 115.6533309250002, 5.538641669000242 ], [ 115.67408287900025, 5.529364325000188 ], [ 115.76238040500016, 5.523138739000274 ], [ 115.79127037900025, 5.524888414000145 ], [ 115.81771894600013, 5.533351955000114 ], [ 115.8486434250002, 5.560003973000107 ], [ 115.87435957100001, 5.599351304000152 ], [ 115.89421634200016, 5.643255927000098 ], [ 115.90650475400014, 5.683579820000205 ], [ 115.9140731130002, 5.727443752000113 ], [ 115.9199324880002, 5.746771552000212 ], [ 115.9306746750002, 5.763006903000132 ], [ 115.94532311300009, 5.774847723000221 ], [ 116.03516686300009, 5.824937242000146 ], [ 116.0507918630002, 5.842271226000264 ], [ 116.05738366000014, 5.865139065000108 ], [ 116.06031334700026, 5.911281643000223 ], [ 116.0664168630002, 5.930650132000267 ], [ 116.12769616000014, 6.029771226000321 ], [ 116.14185631600003, 6.073065497000187 ], [ 116.12623131600003, 6.102525132000096 ], [ 116.10377037900003, 6.094712632000096 ], [ 116.09595787900003, 6.107733466000241 ], [ 116.10596764400032, 6.126450914000145 ], [ 116.13640384200028, 6.136053778000132 ], [ 116.15406334700015, 6.147284247000187 ], [ 116.20134524800005, 6.217962958000157 ], [ 116.22266686300009, 6.237209377000227 ], [ 116.23536217500009, 6.243475653000132 ], [ 116.25220787900025, 6.245917059000192 ], [ 116.26400800900012, 6.241888739000103 ], [ 116.27898196700016, 6.234930731000134 ], [ 116.29151451900009, 6.232611395000106 ], [ 116.29688561300031, 6.242499091000184 ], [ 116.29273522200015, 6.275783596000167 ], [ 116.28052819100003, 6.278550523000206 ], [ 116.26140384200016, 6.269354559000192 ], [ 116.23609459700015, 6.266343492000146 ], [ 116.23609459700015, 6.272609768000109 ], [ 116.26335696700028, 6.286851304000209 ], [ 116.27906334700015, 6.303941148000263 ], [ 116.28321373800009, 6.307359117000146 ], [ 116.2905379570002, 6.308579820000205 ], [ 116.3105574880002, 6.307359117000146 ], [ 116.31999759200016, 6.313381252000113 ], [ 116.32203209700003, 6.316717841000184 ], [ 116.32195071700005, 6.322333075000131 ], [ 116.33057701900032, 6.354234117000146 ], [ 116.33326256600014, 6.360581773000263 ], [ 116.3383895190002, 6.368841864000217 ], [ 116.34766686300009, 6.379584052000155 ], [ 116.43637129000012, 6.446844794000185 ], [ 116.45142662900014, 6.461900132000096 ], [ 116.46949303500014, 6.475775458000101 ], [ 116.4882918630002, 6.484279690000108 ], [ 116.50318444100014, 6.495184637000136 ], [ 116.50912519600001, 6.516546942000275 ], [ 116.50977623800009, 6.534613348000107 ], [ 116.5131942070002, 6.553697007000153 ], [ 116.52068118600016, 6.568752346000167 ], [ 116.53394616000014, 6.574855861000231 ], [ 116.55152428500014, 6.588364976000207 ], [ 116.61353600400014, 6.671087958000101 ], [ 116.62859134200005, 6.685370184000192 ], [ 116.63900800900012, 6.699286200000188 ], [ 116.6450301440002, 6.716945705000171 ], [ 116.64698326900009, 6.742417710000211 ], [ 116.64535566500001, 6.776312567000218 ], [ 116.64698326900009, 6.786525783000116 ], [ 116.65113366000014, 6.794419664000145 ], [ 116.66334069100003, 6.811021226000321 ], [ 116.6674910820002, 6.821275132000153 ], [ 116.66578209700015, 6.859605210000098 ], [ 116.66920006600026, 6.876410223000107 ], [ 116.69752037900014, 6.889715887000193 ], [ 116.70582116000014, 6.905340887000193 ], [ 116.71534264400009, 6.944769598000164 ], [ 116.71656334700015, 6.966742255000156 ], [ 116.71892337300005, 6.975409247000187 ], [ 116.72608483200008, 6.978949286000216 ], [ 116.73023522200015, 6.982407945000148 ], [ 116.74097741000014, 6.998439846000167 ], [ 116.74642988400012, 7.010443427000098 ], [ 116.75505618600016, 7.018744208000214 ], [ 116.76587975400003, 7.02509186400016 ], [ 116.77735436300031, 7.026760158000172 ], [ 116.78052819100014, 7.022772528000132 ], [ 116.79086347700002, 7.000067450000188 ], [ 116.8320418630002, 6.973334052000155 ], [ 116.83814537900025, 6.962144273000206 ] ] ], [ [ [ 118.52458743600027, 7.043646552000098 ], [ 118.53248131600014, 7.03510163000027 ], [ 118.54444420700008, 7.013088283000229 ], [ 118.53760826900009, 7.006293036000102 ], [ 118.5205184250002, 7.013373114000103 ], [ 118.52027428500014, 7.003159898000263 ], [ 118.5307723320002, 6.978949286000216 ], [ 118.51872806100005, 6.970933335000211 ], [ 118.50310306100016, 6.97142161700026 ], [ 118.47673587300005, 6.978949286000216 ], [ 118.44516035200024, 6.982326565000165 ], [ 118.43555748800009, 6.989243882000096 ], [ 118.42839603000004, 7.006293036000102 ], [ 118.4272567070002, 7.018215236000174 ], [ 118.43140709700026, 7.027085679000209 ], [ 118.44109134200016, 7.034328518000223 ], [ 118.45630944100014, 7.041001695000205 ], [ 118.47478274800017, 7.037014065000108 ], [ 118.48698978000016, 7.039780992000146 ], [ 118.49732506600014, 7.044663804000209 ], [ 118.51026451900009, 7.047186591000184 ], [ 118.52458743600027, 7.043646552000098 ] ] ], [ [ [ 125.78394616000003, 6.917425848000107 ], [ 125.77686608200031, 6.894029039000202 ], [ 125.76775149800017, 6.898871161000102 ], [ 125.75367272200003, 6.917466539000202 ], [ 125.74537194100003, 6.936957098000164 ], [ 125.73829186300009, 6.979193427000098 ], [ 125.72535241000014, 7.004787502000283 ], [ 125.72193444100026, 7.015570380000156 ], [ 125.71762129000024, 7.052232164000259 ], [ 125.71216881600003, 7.056301174000168 ], [ 125.70378665500004, 7.056708075000131 ], [ 125.68384850400025, 7.065252997000187 ], [ 125.67790774800017, 7.066392320000205 ], [ 125.67408287900003, 7.070217190000108 ], [ 125.67172285200024, 7.081976630000213 ], [ 125.67269941500012, 7.09275950700021 ], [ 125.67693118600016, 7.10390859600011 ], [ 125.68287194100014, 7.112616278000132 ], [ 125.68913821700005, 7.116115627000227 ], [ 125.69654381600003, 7.126939195000261 ], [ 125.7021590500002, 7.177150783000116 ], [ 125.70655358200031, 7.191839911000102 ], [ 125.71583092500009, 7.195949611000117 ], [ 125.72364342500032, 7.193101304000095 ], [ 125.72934004000012, 7.186102606000134 ], [ 125.73316491000014, 7.177557684000249 ], [ 125.7495223320002, 7.162054755000156 ], [ 125.76734459700003, 7.149725653000246 ], [ 125.78191165500016, 7.135199286000102 ], [ 125.78785241000014, 7.11298248900016 ], [ 125.7812606130002, 6.984849351000207 ], [ 125.7841903000002, 6.963120835000211 ], [ 125.79127037900003, 6.948187567000105 ], [ 125.79371178500014, 6.939520575000245 ], [ 125.78972415500016, 6.928778387000136 ], [ 125.78394616000003, 6.917425848000107 ] ] ], [ [ [ 117.02271569100014, 7.318833726000207 ], [ 117.02035566500001, 7.294582424000225 ], [ 117.01002037900003, 7.279974677000098 ], [ 116.99154707100013, 7.297186591000127 ], [ 116.97673587300017, 7.290228583000101 ], [ 116.97144616000003, 7.271389065000108 ], [ 116.98218834700003, 7.253322658000172 ], [ 116.88648522200015, 7.22939687700017 ], [ 116.89112389400009, 7.219916083000157 ], [ 116.89975019600001, 7.214585679000209 ], [ 116.90512129000001, 7.208929755000156 ], [ 116.90015709700003, 7.198065497000243 ], [ 116.89096113400012, 7.193670966000184 ], [ 116.87680097700013, 7.192531643000109 ], [ 116.86231530000009, 7.19415924700013 ], [ 116.85181725400014, 7.198065497000243 ], [ 116.90015709700003, 7.287420966000241 ], [ 116.91439863400024, 7.293931382000153 ], [ 116.94800866000026, 7.301906643000223 ], [ 116.96168053500026, 7.307928778000132 ], [ 117.00261478000004, 7.355698960000098 ], [ 117.01685631600014, 7.342596747000187 ], [ 117.02271569100014, 7.318833726000207 ] ] ], [ [ [ 117.26238040500027, 7.20197174700013 ], [ 117.2470809250002, 7.183172919000299 ], [ 117.22974694100003, 7.191839911000102 ], [ 117.21094811300009, 7.18439362200013 ], [ 117.15284264400032, 7.173081773000206 ], [ 117.14039147200015, 7.167629299000112 ], [ 117.1347762380002, 7.161932684000135 ], [ 117.10808353000027, 7.14956289300028 ], [ 117.09888756600003, 7.143459377000113 ], [ 117.09205162900003, 7.131984768000223 ], [ 117.08790123800009, 7.120754299000112 ], [ 117.08236738400024, 7.110663153000246 ], [ 117.07154381600014, 7.102484442000275 ], [ 117.06413821700028, 7.126654364000103 ], [ 117.05640709700015, 7.202866929000152 ], [ 117.06128991000003, 7.219142971000167 ], [ 117.06519616000003, 7.226385809000249 ], [ 117.06413821700028, 7.270738023000206 ], [ 117.06771894600013, 7.28001536700026 ], [ 117.07325280000009, 7.284979559000135 ], [ 117.08904056100016, 7.290350653000246 ], [ 117.09888756600003, 7.295843817000218 ], [ 117.12289472700013, 7.320013739000217 ], [ 117.14527428500014, 7.335516669000242 ], [ 117.1577254570002, 7.340725002000113 ], [ 117.17115319100014, 7.34267812700017 ], [ 117.24626712300017, 7.355780341000127 ], [ 117.2700301440002, 7.348863023000149 ], [ 117.28191165500016, 7.332342841000184 ], [ 117.28321373800009, 7.308783270000106 ], [ 117.27344811300031, 7.231919664000316 ], [ 117.26238040500027, 7.20197174700013 ] ] ], [ [ [ 122.96176191500012, 7.39891185100015 ], [ 122.9716903000002, 7.383612372000187 ], [ 122.9516707690002, 7.386419989000217 ], [ 122.94450931100005, 7.389837958000157 ], [ 122.95053144600001, 7.373480536000159 ], [ 122.95232181100027, 7.363511460000268 ], [ 122.9506942070002, 7.355698960000098 ], [ 122.94353274800017, 7.349269924000168 ], [ 122.93677819100003, 7.348578192000105 ], [ 122.93034915500016, 7.349676825000131 ], [ 122.92457116000003, 7.348863023000149 ], [ 122.89478600400003, 7.326808986000174 ], [ 122.88298587300005, 7.320949611000174 ], [ 122.87452233200031, 7.318670966000241 ], [ 122.86158287900003, 7.316961981000134 ], [ 122.85499108200031, 7.314764716000127 ], [ 122.85075931100016, 7.310288803999981 ], [ 122.84555097700002, 7.297796942000275 ], [ 122.84205162900003, 7.294256903000189 ], [ 122.82699629000001, 7.291327216000184 ], [ 122.81666100400014, 7.294907945000034 ], [ 122.80860436300009, 7.30487702000022 ], [ 122.80054772200003, 7.320949611000174 ], [ 122.79468834700015, 7.346340236000231 ], [ 122.79420006600014, 7.383937893000223 ], [ 122.80372155000009, 7.417466539000259 ], [ 122.82837975400003, 7.430812893000166 ], [ 122.84310957100013, 7.422796942000161 ], [ 122.85499108200031, 7.407863674 ], [ 122.8671981130002, 7.395982164000145 ], [ 122.88298587300005, 7.39728424700013 ], [ 122.88982181100027, 7.407212632000153 ], [ 122.89128665500016, 7.419989325000245 ], [ 122.89429772200003, 7.431586005000213 ], [ 122.90503991000026, 7.437730210000098 ], [ 122.92351321700028, 7.430853583000157 ], [ 122.94410241000003, 7.416245835000154 ], [ 122.96176191500012, 7.39891185100015 ] ] ], [ [ [ 117.08025149800005, 8.02948639500022 ], [ 117.0820418630002, 8.024155992000146 ], [ 117.09156334700015, 8.011542059000192 ], [ 117.08692467500009, 8.004217841000241 ], [ 117.0771590500002, 7.999172268000166 ], [ 117.07154381600014, 7.993150132000153 ], [ 117.07276451900009, 7.977525132000153 ], [ 117.08326256600003, 7.941473700000131 ], [ 117.08578535200024, 7.921128648000206 ], [ 117.08472741000003, 7.915920315000108 ], [ 117.07943769600024, 7.907171942000218 ], [ 117.07837975400014, 7.903753973000107 ], [ 117.07764733200031, 7.884466864000103 ], [ 117.07837975400014, 7.883286851000094 ], [ 117.0849715500002, 7.876288153000246 ], [ 117.08676191500012, 7.872137762000136 ], [ 117.0820418630002, 7.870266018000166 ], [ 117.08008873800009, 7.868719794000128 ], [ 117.07300866000014, 7.861517645000106 ], [ 117.07154381600014, 7.859361070000261 ], [ 117.06714928500026, 7.848700262000193 ], [ 117.0556746750002, 7.835638739000103 ], [ 117.04029381600014, 7.82493724200026 ], [ 117.02369225400003, 7.821844794000185 ], [ 117.03419030000009, 7.804632880000156 ], [ 117.02621504000024, 7.798407294000015 ], [ 117.00993899800017, 7.800279039000259 ], [ 116.99586022200026, 7.807562567000161 ], [ 117.00163821700016, 7.823675848000164 ], [ 116.99634850400014, 7.839260158000172 ], [ 116.97592207100013, 7.870266018000166 ], [ 116.95582116000014, 7.921087958000214 ], [ 116.95492597700013, 7.926011460000098 ], [ 116.96168053500026, 8.061997789000316 ], [ 116.97266686300031, 8.054836330000228 ], [ 116.97494550900001, 8.044745184000192 ], [ 116.97592207100013, 8.034572658000172 ], [ 116.98218834700003, 8.027289130000042 ], [ 116.99675540500027, 8.027329820000034 ], [ 117.0019637380002, 8.039943752000113 ], [ 117.00513756600003, 8.054836330000228 ], [ 117.01319420700008, 8.061997789000316 ], [ 117.05844160200013, 8.069810289000259 ], [ 117.07585696700005, 8.069566148000263 ], [ 117.0849715500002, 8.057847398000149 ], [ 117.08090254000012, 8.038275458000101 ], [ 117.08025149800005, 8.02948639500022 ] ] ], [ [ [ 117.03980553500014, 8.077215887000193 ], [ 117.03052819100026, 8.068264065000221 ], [ 117.0205184250002, 8.077866929000209 ], [ 117.01539147200026, 8.088120835000098 ], [ 117.00904381600014, 8.097154039000145 ], [ 116.99586022200026, 8.103013414000145 ], [ 117.02711022200003, 8.128729559000249 ], [ 117.04542076900009, 8.135809637000193 ], [ 117.05787194100014, 8.123480536000159 ], [ 117.06836998800009, 8.09275950700021 ], [ 117.06812584700003, 8.086249091000127 ], [ 117.05941816500024, 8.081244208000157 ], [ 117.04965254000001, 8.079820054000095 ], [ 117.03980553500014, 8.077215887000193 ] ] ], [ [ [ 117.20573978000027, 8.155503648000149 ], [ 117.18482506600014, 8.150132554000209 ], [ 117.16179446700028, 8.156724351000207 ], [ 117.15235436300009, 8.170070705000114 ], [ 117.15479576900009, 8.180405992000203 ], [ 117.16773522200003, 8.17812734600011 ], [ 117.18970787900003, 8.176743882000267 ], [ 117.20484459700015, 8.166815497000243 ], [ 117.20573978000027, 8.155503648000149 ] ] ], [ [ [ 117.31812584700015, 8.324530341000127 ], [ 117.31959069100014, 8.323553778000076 ], [ 117.32227623800031, 8.323635158000059 ], [ 117.32545006600014, 8.322739976000094 ], [ 117.35531660200002, 8.302720445000205 ], [ 117.35531660200002, 8.274644273000092 ], [ 117.34888756600014, 8.244696356000134 ], [ 117.35954837300017, 8.219061591000184 ], [ 117.35132897200015, 8.20722077000022 ], [ 117.34253991000003, 8.197211005000213 ], [ 117.33187910200002, 8.193182684000249 ], [ 117.31861412900025, 8.199204820000261 ], [ 117.28972415500027, 8.18431224200026 ], [ 117.27881920700008, 8.207098700000245 ], [ 117.27564537900003, 8.24298737200013 ], [ 117.2700301440002, 8.267523505000156 ], [ 117.27654056100016, 8.281398830000228 ], [ 117.27963300900001, 8.311102606000134 ], [ 117.28443444100014, 8.322739976000094 ], [ 117.29281660200013, 8.317857164000202 ], [ 117.30152428500003, 8.318019924000168 ], [ 117.3100692070002, 8.322007554000209 ], [ 117.31861412900025, 8.328924872000243 ], [ 117.31812584700015, 8.324530341000127 ] ] ], [ [ [ 117.23601321700016, 8.322739976000094 ], [ 117.24284915500016, 8.31525299700013 ], [ 117.2534285820002, 8.321966864000217 ], [ 117.26075280000009, 8.321112372000243 ], [ 117.26449629000001, 8.313788153000246 ], [ 117.26392662900014, 8.301011460000098 ], [ 117.24333743600016, 8.282904364000103 ], [ 117.21461022200003, 8.265122789000259 ], [ 117.19011478000004, 8.262030341000184 ], [ 117.18140709700003, 8.287990627000227 ], [ 117.1894637380002, 8.299546617000146 ], [ 117.24284915500016, 8.343207098000107 ], [ 117.24089603000027, 8.330511786000102 ], [ 117.23959394600024, 8.327215887000136 ], [ 117.23601321700016, 8.322739976000094 ] ] ], [ [ [ 119.95972741000014, 8.880601304000152 ], [ 119.96062259200005, 8.877101955000285 ], [ 119.95834394600001, 8.877183335000268 ], [ 119.95972741000014, 8.880601304000152 ] ] ], [ [ [ 119.97144616000014, 8.880926825000188 ], [ 119.96924889400009, 8.880926825000188 ], [ 119.96827233200008, 8.884100653000246 ], [ 119.97193444100003, 8.882391669000242 ], [ 119.97144616000014, 8.880926825000188 ] ] ], [ [ [ 119.96517988400001, 8.887925523000149 ], [ 119.9653426440002, 8.88719310100015 ], [ 119.96566816500001, 8.887396552000212 ], [ 119.96607506600003, 8.885687567000105 ], [ 119.9648543630002, 8.884995835000211 ], [ 119.96436608200008, 8.885646877000113 ], [ 119.96420332100001, 8.88556549700013 ], [ 119.96322675900024, 8.887030341000184 ], [ 119.96517988400001, 8.887925523000149 ] ] ], [ [ [ 119.96762129000012, 8.892279364000274 ], [ 119.96778405000009, 8.891546942000218 ], [ 119.96827233200008, 8.891791083000101 ], [ 119.96851647200003, 8.890041408000172 ], [ 119.96729576900009, 8.889349677000212 ], [ 119.9668074880002, 8.889960028000189 ], [ 119.9668074880002, 8.889878648000206 ], [ 119.96566816500001, 8.891424872000243 ], [ 119.96762129000012, 8.892279364000274 ] ] ], [ [ [ 124.77947024800005, 9.079494533000229 ], [ 124.77019290500016, 9.077378648000206 ], [ 124.76295006600014, 9.079006252000227 ], [ 124.75709069100003, 9.092718817000161 ], [ 124.7500106130002, 9.094305731000191 ], [ 124.74089603000027, 9.09446849200026 ], [ 124.73267662900003, 9.096136786000102 ], [ 124.67212975400014, 9.125392971000224 ], [ 124.64673912900014, 9.148871161000159 ], [ 124.63648522200015, 9.182359117000203 ], [ 124.64673912900014, 9.218898830000285 ], [ 124.67310631600014, 9.24237702000022 ], [ 124.7085067070002, 9.25018952000022 ], [ 124.74634850400003, 9.239488023000206 ], [ 124.76303144600013, 9.214422919000015 ], [ 124.77247155000009, 9.204046942000105 ], [ 124.7841903000002, 9.199774481000191 ], [ 124.7934676440002, 9.192694403000246 ], [ 124.80323326900009, 9.176092841000241 ], [ 124.80836022200026, 9.156805731000134 ], [ 124.80095462300017, 9.128729559000249 ], [ 124.80258222700002, 9.112494208000101 ], [ 124.8012801440002, 9.096258856000247 ], [ 124.78785241000014, 9.083075262000136 ], [ 124.77947024800005, 9.079494533000229 ] ] ], [ [ [ 123.70053144600024, 9.219631252000113 ], [ 123.68995201900009, 9.20595937700017 ], [ 123.68376712300017, 9.199693101000207 ], [ 123.68344160200013, 9.18829987200013 ], [ 123.6865340500002, 9.180609442000161 ], [ 123.69800866000003, 9.165025132000153 ], [ 123.70248457100001, 9.16453685100015 ], [ 123.71452884200016, 9.157416083000214 ], [ 123.72242272200015, 9.149115302000212 ], [ 123.7153426440002, 9.145168361000231 ], [ 123.70329837300028, 9.128363348000221 ], [ 123.69800866000003, 9.124009507000153 ], [ 123.68970787900014, 9.122544664000145 ], [ 123.66041100400014, 9.124009507000153 ], [ 123.65300540500004, 9.122951565000165 ], [ 123.64763431100016, 9.119696356000247 ], [ 123.6445418630002, 9.11432526200025 ], [ 123.64332116000003, 9.106919664000202 ], [ 123.63998457100013, 9.098578192000105 ], [ 123.6323348320002, 9.098334051999984 ], [ 123.61548912900003, 9.103583075000245 ], [ 123.59636478000016, 9.103989976000094 ], [ 123.57846113400001, 9.107001044000185 ], [ 123.56120853000027, 9.114243882000096 ], [ 123.47950280000009, 9.171820380000156 ], [ 123.4712020190002, 9.185451565000108 ], [ 123.47461998800031, 9.197088934000135 ], [ 123.50001061300009, 9.220282294000128 ], [ 123.51758873800009, 9.209865627000227 ], [ 123.54086347700002, 9.213446356000134 ], [ 123.5649520190002, 9.226141669000128 ], [ 123.5947371750002, 9.251288153000076 ], [ 123.6025496750002, 9.255438544000185 ], [ 123.60743248800009, 9.262152411000159 ], [ 123.60922285200013, 9.278265692000161 ], [ 123.61443118600016, 9.289252020000163 ], [ 123.6269637380002, 9.293931382000096 ], [ 123.6421004570002, 9.293646551999984 ], [ 123.65544681100016, 9.289129950000188 ], [ 123.66480553500014, 9.275458075000245 ], [ 123.67920983200008, 9.245306708000157 ], [ 123.68751061300009, 9.239488023000206 ], [ 123.70386803500014, 9.233303127000227 ], [ 123.70053144600024, 9.219631252000113 ] ] ], [ [ [ 123.78516686300009, 9.552313544000128 ], [ 123.76514733200008, 9.549953518000223 ], [ 123.74984785200013, 9.554144598000107 ], [ 123.73764082100013, 9.579087632000096 ], [ 123.72632897200026, 9.58698151200025 ], [ 123.72722415500016, 9.591213283000229 ], [ 123.73926842500009, 9.594061591000127 ], [ 123.74789472700013, 9.599107164000259 ], [ 123.75456790500004, 9.605414130000213 ], [ 123.76587975400003, 9.614081122000187 ], [ 123.78191165500004, 9.623521226000037 ], [ 123.82064863400024, 9.639593817000218 ], [ 123.84131920700008, 9.642401434000249 ], [ 123.86052493600016, 9.630072333000214 ], [ 123.86833743600016, 9.620510158000116 ], [ 123.8623153000002, 9.608547268000109 ], [ 123.84424889400009, 9.588853257000153 ], [ 123.80453535200013, 9.560288804000095 ], [ 123.78516686300009, 9.552313544000128 ] ] ], [ [ [ 121.22364342500009, 9.583319403000246 ], [ 121.21094811300009, 9.575873114000274 ], [ 121.21355228000016, 9.58437734600011 ], [ 121.22364342500009, 9.605698960000154 ], [ 121.22803795700031, 9.610052802000155 ], [ 121.23910566500012, 9.614325262000136 ], [ 121.24488366000026, 9.624416408000229 ], [ 121.2500106130002, 9.635931708000157 ], [ 121.25863691500024, 9.644842841000184 ], [ 121.2578231130002, 9.638373114000217 ], [ 121.25660241000003, 9.63556549700013 ], [ 121.25473066500012, 9.63385651200025 ], [ 121.25245201900009, 9.631170966000241 ], [ 121.25684655000009, 9.627346096000167 ], [ 121.25717207100013, 9.624457098000221 ], [ 121.23462975400003, 9.594305731000304 ], [ 121.22364342500009, 9.583319403000246 ] ] ], [ [ [ 125.96021569100014, 9.755804755000099 ], [ 125.95972741000014, 9.747219143000109 ], [ 125.96908613400024, 9.751939195000205 ], [ 125.97282962300017, 9.75462474200009 ], [ 125.97461998800009, 9.738348700000245 ], [ 125.97291100400014, 9.715277411000102 ], [ 125.97543379000012, 9.694647528000189 ], [ 125.99024498800009, 9.685736395000163 ], [ 126.0014754570002, 9.676743882000096 ], [ 125.99756920700008, 9.656073309000192 ], [ 125.98023522200026, 9.617499091000127 ], [ 125.98511803500014, 9.605658270000163 ], [ 125.98414147200015, 9.589504299000225 ], [ 125.9785262380002, 9.57518138200021 ], [ 125.96941165500016, 9.569077867000146 ], [ 125.95394941500024, 9.565659898000206 ], [ 125.94695071700016, 9.566229559000192 ], [ 125.95289147200015, 9.581976630000213 ], [ 125.9462996750002, 9.58759186400016 ], [ 125.93523196700016, 9.589911200000017 ], [ 125.92505944100014, 9.589544989000217 ], [ 125.92505944100014, 9.596380927000212 ], [ 125.93531334700015, 9.596014716000184 ], [ 125.93873131600026, 9.596380927000212 ], [ 125.93873131600026, 9.603827216000184 ], [ 125.91814212300005, 9.617499091000127 ], [ 125.91814212300005, 9.610052802000155 ], [ 125.91553795700031, 9.618963934000249 ], [ 125.9165145190002, 9.629136460000154 ], [ 125.92505944100014, 9.651027736000231 ], [ 125.9296981130002, 9.657945054000095 ], [ 125.93360436300009, 9.660386460000098 ], [ 125.93669681100005, 9.663560289000259 ], [ 125.93873131600026, 9.672756252000227 ], [ 125.9389754570002, 9.681341864000217 ], [ 125.9375106130002, 9.692531643000166 ], [ 125.93873131600026, 9.699408270000106 ], [ 125.92888431100005, 9.715073960000211 ], [ 125.9272567070002, 9.738714911000102 ], [ 125.93482506600014, 9.759914455000171 ], [ 125.95240319100014, 9.768296617000203 ], [ 125.9580184250002, 9.761379299000225 ], [ 125.96021569100014, 9.755804755000099 ] ] ], [ [ [ 125.64356530000009, 9.611273505000156 ], [ 125.6709090500002, 9.600083726000094 ], [ 125.6928817070002, 9.603827216000184 ], [ 125.69109134200016, 9.600165106000247 ], [ 125.69011478000016, 9.596909898000206 ], [ 125.68864993600005, 9.593491929000095 ], [ 125.68531334700015, 9.589544989000217 ], [ 125.69849694100014, 9.58999258 ], [ 125.70590254000012, 9.585150458000101 ], [ 125.71273847700002, 9.575873114000274 ], [ 125.72266686300009, 9.575506903000246 ], [ 125.74398847700013, 9.57737864800032 ], [ 125.75367272200003, 9.575873114000274 ], [ 125.77247155000032, 9.554836330000114 ], [ 125.78101647200015, 9.548570054000152 ], [ 125.79086347700013, 9.54531484600011 ], [ 125.84896894600024, 9.537176825000131 ], [ 125.86801191500012, 9.526922919000299 ], [ 125.90113366000014, 9.497056382000096 ], [ 125.91065514400009, 9.494208075000245 ], [ 125.92318769600001, 9.494289455000228 ], [ 125.93409264400032, 9.49233633 ], [ 125.93873131600026, 9.483710028000189 ], [ 125.9404403000002, 9.475002346000224 ], [ 125.94898522200003, 9.463080145000276 ], [ 125.95240319100014, 9.453029690000108 ], [ 125.9633895190002, 9.472479559000249 ], [ 125.96599368600027, 9.480292059000078 ], [ 125.97282962300017, 9.480292059000078 ], [ 125.9726668630002, 9.464016018000166 ], [ 125.9712020190002, 9.45408763200021 ], [ 125.96745853000016, 9.447170315000165 ], [ 125.95972741000014, 9.439357815000165 ], [ 125.94857832100001, 9.434230861000117 ], [ 125.92025800900024, 9.426906643000223 ], [ 125.91187584700015, 9.418198960000154 ], [ 125.91098066500012, 9.404933986000231 ], [ 125.91675866000014, 9.395412502000227 ], [ 125.92693118600016, 9.388902085000211 ], [ 125.93873131600026, 9.384711005000213 ], [ 125.95582116000003, 9.381781317000105 ], [ 125.96664472700002, 9.384263414000202 ], [ 125.99390709700015, 9.397772528000076 ], [ 125.99195397200015, 9.357855536000102 ], [ 125.9965926440002, 9.324652411000102 ], [ 126.0117293630002, 9.293850002000113 ], [ 126.05795332100013, 9.245998440000221 ], [ 126.06544030000032, 9.241766669000242 ], [ 126.07585696700016, 9.239488023000206 ], [ 126.08912194100014, 9.240871486000174 ], [ 126.1098738940002, 9.251206773000092 ], [ 126.14340254000001, 9.26141998900016 ], [ 126.17937259200016, 9.297186591000241 ], [ 126.19996178500003, 9.308417059000249 ], [ 126.21989993600016, 9.30565013200021 ], [ 126.2246199880002, 9.290961005000099 ], [ 126.21941165500016, 9.272202867000203 ], [ 126.20036868600005, 9.240627346000224 ], [ 126.19336998800031, 9.216376044000242 ], [ 126.18572024800005, 9.171820380000156 ], [ 126.18572024800005, 9.138332424000112 ], [ 126.17896569100014, 9.093003648000206 ], [ 126.1836043630002, 9.081488348000107 ], [ 126.19450931100016, 9.077460028000189 ], [ 126.2070418630002, 9.076117255000213 ], [ 126.21705162900014, 9.072495835000268 ], [ 126.22299238400001, 9.063910223000221 ], [ 126.23365319100003, 9.039374091000127 ], [ 126.24024498800009, 9.028469143000223 ], [ 126.31275475400003, 8.956244208000271 ], [ 126.3222762380002, 8.935370184000249 ], [ 126.32357832100001, 8.922349351000207 ], [ 126.3359481130002, 8.884466864000103 ], [ 126.33187910200002, 8.870021877000113 ], [ 126.33236738400012, 8.861070054000095 ], [ 126.34546959700015, 8.853257554000095 ], [ 126.34310957100013, 8.845119533000286 ], [ 126.33822675900024, 8.837632554000095 ], [ 126.3359481130002, 8.836086330000228 ], [ 126.32878665500004, 8.812730210000098 ], [ 126.31690514400009, 8.787990627000113 ], [ 126.30005944100014, 8.76829661700026 ], [ 126.27816816500012, 8.760321356000191 ], [ 126.24024498800009, 8.735052802000212 ], [ 126.23414147200003, 8.733628648000149 ], [ 126.23414147200003, 8.719183661000216 ], [ 126.24187259200005, 8.710598049000225 ], [ 126.26148522200015, 8.698879299000112 ], [ 126.26148522200015, 8.692694403000132 ], [ 126.25757897200026, 8.69049713700025 ], [ 126.25700931100005, 8.689683335000211 ], [ 126.2568465500002, 8.688544012000193 ], [ 126.25456790500027, 8.685207424000168 ], [ 126.24219811300031, 8.690008856000247 ], [ 126.23161868600027, 8.692206122000187 ], [ 126.20997155000009, 8.692694403000132 ], [ 126.1977645190002, 8.688299872000243 ], [ 126.17367597700013, 8.669094143000223 ], [ 126.13843834700015, 8.654038804000209 ], [ 126.11890709700026, 8.630560614000217 ], [ 126.11052493600005, 8.607123114000217 ], [ 126.1303817070002, 8.586493231000134 ], [ 126.14820397200015, 8.540676174000225 ], [ 126.15845787900003, 8.527573960000098 ], [ 126.16724694100003, 8.526597398000263 ], [ 126.19996178500003, 8.527573960000098 ], [ 126.21957441500012, 8.521714585000098 ], [ 126.22877037900014, 8.521470445000148 ], [ 126.24024498800009, 8.527573960000098 ], [ 126.2207137380002, 8.540432033000172 ], [ 126.21420332100013, 8.548244533000172 ], [ 126.22046959700015, 8.555487372000187 ], [ 126.23178144600024, 8.554836330000171 ], [ 126.24480228000004, 8.549302476000037 ], [ 126.25749759200028, 8.546861070000205 ], [ 126.26832116000014, 8.555487372000187 ], [ 126.29151451900032, 8.544623114000103 ], [ 126.35694420700008, 8.534369208000101 ], [ 126.35621178500014, 8.536281643000166 ], [ 126.35914147200015, 8.539374091000241 ], [ 126.36443118600016, 8.541815497000243 ], [ 126.3701278000002, 8.541815497000243 ], [ 126.36980228000004, 8.538885809000135 ], [ 126.37322024800005, 8.530829169000015 ], [ 126.38062584700003, 8.517645575000245 ], [ 126.40105228000027, 8.502183335000211 ], [ 126.40528405000009, 8.492621161000216 ], [ 126.3979598320002, 8.479152736000231 ], [ 126.40202884200005, 8.476304429000209 ], [ 126.40691165500016, 8.470404364000103 ], [ 126.41163170700031, 8.466131903000189 ], [ 126.38502037900003, 8.467352606000191 ], [ 126.37435957100013, 8.46454498900016 ], [ 126.3701278000002, 8.45555247600015 ], [ 126.36687259200016, 8.432074286000159 ], [ 126.3701278000002, 8.427639065000108 ], [ 126.38379967500009, 8.431952216000184 ], [ 126.3877059250002, 8.415350653000132 ], [ 126.38005618600005, 8.395575262000193 ], [ 126.35694420700008, 8.363714911000102 ], [ 126.35230553500026, 8.362372137000193 ], [ 126.34050540500016, 8.355169989000274 ], [ 126.33253014400032, 8.347072658000229 ], [ 126.33961022200003, 8.343207098000107 ], [ 126.3432723320002, 8.338120835000211 ], [ 126.35694420700008, 8.311916408000172 ], [ 126.36500084700003, 8.30499909100007 ], [ 126.3798934250002, 8.302069403000132 ], [ 126.38843834700003, 8.292914130000156 ], [ 126.37761478000004, 8.267523505000156 ], [ 126.34587649800005, 8.231390692000218 ], [ 126.33863366000003, 8.214585679000209 ], [ 126.34644616000003, 8.195502020000106 ], [ 126.36158287900003, 8.187160549000168 ], [ 126.37761478000004, 8.19159577000022 ], [ 126.39332116000026, 8.200506903000246 ], [ 126.4233504570002, 8.211004950000131 ], [ 126.45932050900001, 8.240179755000099 ], [ 126.46306399800005, 8.229925848000164 ], [ 126.45728600400025, 8.144720770000276 ], [ 126.45394941500012, 8.129339911000102 ], [ 126.45533287900003, 8.115057684000135 ], [ 126.46615644600001, 8.095526434000249 ], [ 126.4428817070002, 8.081447658000116 ], [ 126.43148847700013, 8.045599677000098 ], [ 126.43425540500027, 8.005926825000245 ], [ 126.45313561300031, 7.980129299000225 ], [ 126.43482506600026, 7.961818752 ], [ 126.3955184250002, 7.933335679000095 ], [ 126.38379967500009, 7.911200262000136 ], [ 126.38347415500004, 7.899562893000109 ], [ 126.38306725400014, 7.885687567000105 ], [ 126.39136803500003, 7.858303127000227 ], [ 126.40609785200002, 7.833238023000263 ], [ 126.4253035820002, 7.815008856000191 ], [ 126.45492597700002, 7.797308661000159 ], [ 126.45932050900001, 7.791693427000098 ], [ 126.46338951900009, 7.781073309000135 ], [ 126.48747806100016, 7.746730861000231 ], [ 126.51099694100014, 7.732733466000184 ], [ 126.56226647200015, 7.72752513200021 ], [ 126.58285566500001, 7.719427802000098 ], [ 126.57569420700008, 7.697088934000249 ], [ 126.5717879570002, 7.674953518000166 ], [ 126.56918379000012, 7.626369533000116 ], [ 126.57357832100024, 7.603501695000205 ], [ 126.5927840500002, 7.553900458000214 ], [ 126.60092207100024, 7.506415106000191 ], [ 126.60726972700024, 7.48517487200013 ], [ 126.60865319100014, 7.465318101000207 ], [ 126.59734134200005, 7.445054429000095 ], [ 126.58570397200026, 7.437323309000249 ], [ 126.57471764400009, 7.433010158000172 ], [ 126.5664168630002, 7.426011460000211 ], [ 126.5629988940002, 7.41034577000022 ], [ 126.56674238400012, 7.406683661000159 ], [ 126.58969160200013, 7.389837958000157 ], [ 126.58204186300009, 7.367377020000163 ], [ 126.58073978000027, 7.320013739000217 ], [ 126.56918379000012, 7.301092841000184 ], [ 126.57740319100014, 7.295314846000224 ], [ 126.61036217500032, 7.27704498900016 ], [ 126.61768639400032, 7.276841539000202 ], [ 126.61231530000009, 7.257879950000131 ], [ 126.5883895190002, 7.226792710000098 ], [ 126.58285566500001, 7.208644924000112 ], [ 126.57976321700016, 7.201076565000165 ], [ 126.57195071700016, 7.198187567000218 ], [ 126.5629988940002, 7.196356512000136 ], [ 126.55567467500009, 7.191839911000102 ], [ 126.55030358200031, 7.183050848000221 ], [ 126.52963300900012, 7.129136460000098 ], [ 126.52320397200015, 7.118841864000103 ], [ 126.49105879000024, 7.088812567000105 ], [ 126.47641035200013, 7.066229559000135 ], [ 126.46851647200026, 7.038763739000103 ], [ 126.46615644600001, 7.003119208000271 ], [ 126.45150800900001, 6.983547268000166 ], [ 126.4174910820002, 6.980047919000128 ], [ 126.37859134200016, 6.987372137000193 ], [ 126.34945722700013, 7.000067450000188 ], [ 126.32398522200003, 6.978094794000242 ], [ 126.30958092500032, 6.948919989000103 ], [ 126.3032332690002, 6.918646552000212 ], [ 126.30176842500009, 6.893255927000155 ], [ 126.30746504000012, 6.881415106000191 ], [ 126.33448326900009, 6.858587958000101 ], [ 126.3432723320002, 6.849188544000242 ], [ 126.34750410200002, 6.833889065000108 ], [ 126.34929446700016, 6.812933661000159 ], [ 126.34701582100001, 6.794501044000128 ], [ 126.33961022200003, 6.786525783000116 ], [ 126.30884850400003, 6.798041083000214 ], [ 126.29127037900014, 6.825832424000112 ], [ 126.26832116000014, 6.890204169000299 ], [ 126.24268639400032, 6.919256903000189 ], [ 126.2129012380002, 6.934027411000159 ], [ 126.1919051440002, 6.925116278000132 ], [ 126.19255618600005, 6.883368231000247 ], [ 126.18572024800005, 6.883368231000247 ], [ 126.1831160820002, 6.889471747000243 ], [ 126.17212975400025, 6.903876044000242 ], [ 126.1679793630002, 6.882554429000095 ], [ 126.17855879000012, 6.861395575000131 ], [ 126.19288170700008, 6.841701565000108 ], [ 126.20785566500001, 6.805894273000206 ], [ 126.22575931100005, 6.789740302000212 ], [ 126.24431399800005, 6.776516018000109 ], [ 126.25456790500027, 6.766669012000193 ], [ 126.25717207100001, 6.744818427000155 ], [ 126.24415123800009, 6.70392487200013 ], [ 126.22877037900014, 6.616197007000096 ], [ 126.22689863400012, 6.468939520000106 ], [ 126.21021569100026, 6.390204169000185 ], [ 126.2060653000002, 6.29930247600015 ], [ 126.2002059250002, 6.283189195000148 ], [ 126.18572024800005, 6.286851304000209 ], [ 126.1821395190002, 6.300726630000213 ], [ 126.17774498800009, 6.351467190000278 ], [ 126.17554772200026, 6.362616278000246 ], [ 126.14128665500027, 6.386175848000221 ], [ 126.13721764400032, 6.39557526200025 ], [ 126.13697350400014, 6.407416083000214 ], [ 126.1381942070002, 6.419867255000156 ], [ 126.13786868600016, 6.430853583000214 ], [ 126.11296634200005, 6.47736237200013 ], [ 126.1001082690002, 6.493719794000128 ], [ 126.09506269600001, 6.514105536000216 ], [ 126.08269290500016, 6.63971588700025 ], [ 126.08432050900001, 6.663072007000267 ], [ 126.09636478000016, 6.725043036000216 ], [ 126.09595787900014, 6.747219143000166 ], [ 126.08529707100024, 6.782619533000172 ], [ 126.08269290500016, 6.804510809000135 ], [ 126.08269290500016, 6.830877997000187 ], [ 126.0791121750002, 6.842515367000146 ], [ 126.06714928500014, 6.847886460000154 ], [ 126.04175866000003, 6.855414130000213 ], [ 126.02214603000016, 6.866766669000128 ], [ 125.98340905000032, 6.92088450700021 ], [ 125.97681725400025, 6.939601955000228 ], [ 125.98568769600001, 6.986070054000209 ], [ 125.98650149800017, 7.006293036000102 ], [ 125.97478274800005, 7.027736721000224 ], [ 125.9150496750002, 7.085028387000193 ], [ 125.90259850400014, 7.101141669000242 ], [ 125.8979598320002, 7.116034247000243 ], [ 125.89087975400014, 7.157049872000243 ], [ 125.8505965500002, 7.253892320000205 ], [ 125.84986412900025, 7.294256903000189 ], [ 125.85320071700028, 7.316229559000306 ], [ 125.85320071700028, 7.336004950000188 ], [ 125.84538821700016, 7.350246486000117 ], [ 125.83073978000016, 7.354274807000252 ], [ 125.82545006600003, 7.355698960000098 ], [ 125.80689537900003, 7.351141669000185 ], [ 125.74683678500014, 7.307928778000132 ], [ 125.68783613400012, 7.274644273000149 ], [ 125.67676842500009, 7.26463450700021 ], [ 125.67660566500012, 7.264471747000243 ], [ 125.66830488400024, 7.257025458000101 ], [ 125.65691165500016, 7.237046617000203 ], [ 125.65398196700016, 7.215073960000211 ], [ 125.65935306100016, 7.149847723000221 ], [ 125.65805097700024, 7.129136460000098 ], [ 125.65455162900025, 7.119574286000102 ], [ 125.64616946700016, 7.107855536000216 ], [ 125.64437910200013, 7.099066473000164 ], [ 125.63900800900012, 7.088771877000113 ], [ 125.6035262380002, 7.054632880000156 ], [ 125.57545006600026, 7.038723049000112 ], [ 125.54175866000026, 7.030585028000132 ], [ 125.50993899800028, 7.015570380000156 ], [ 125.48747806100016, 6.978949286000216 ], [ 125.48462975400014, 6.935126044000185 ], [ 125.48064212300017, 6.913234768000223 ], [ 125.4697371750002, 6.903876044000242 ], [ 125.42465254000024, 6.849188544000242 ], [ 125.40357506600003, 6.811835028000132 ], [ 125.38892662900014, 6.76829661700026 ], [ 125.38038170700008, 6.72150299700013 ], [ 125.37761478000004, 6.674221096000167 ], [ 125.38062584700003, 6.657212632000096 ], [ 125.39429772200026, 6.618231512000136 ], [ 125.39747155000032, 6.59845612200013 ], [ 125.40552819100014, 6.58885325700021 ], [ 125.42188561300009, 6.582342841000127 ], [ 125.4345809250002, 6.588202216000241 ], [ 125.43213951900032, 6.615790106000304 ], [ 125.46509850400003, 6.594671942000161 ], [ 125.50806725400025, 6.539496161000216 ], [ 125.53451582100013, 6.512844143000223 ], [ 125.55323326900009, 6.524847723000221 ], [ 125.57357832100001, 6.516913153000246 ], [ 125.5898543630002, 6.499172268000109 ], [ 125.5966903000002, 6.481756903000189 ], [ 125.5976668630002, 6.442694403000246 ], [ 125.60141035200013, 6.427883205000114 ], [ 125.63013756600003, 6.366197007000153 ], [ 125.64096113400012, 6.352362372000243 ], [ 125.64478600400003, 6.344142971000224 ], [ 125.6455184250002, 6.332586981000134 ], [ 125.64437910200013, 6.310492255000213 ], [ 125.64584394600024, 6.299627997000187 ], [ 125.64926191500012, 6.292425848000107 ], [ 125.65805097700024, 6.28001536700026 ], [ 125.70655358200031, 6.149725653000246 ], [ 125.71013431100016, 6.132066148000206 ], [ 125.71062259200016, 6.111029364000103 ], [ 125.70655358200031, 6.08954498900016 ], [ 125.69605553500014, 6.071193752000113 ], [ 125.69239342500009, 6.060980536000102 ], [ 125.6992293630002, 6.040472723000164 ], [ 125.69605553500014, 6.029933986000287 ], [ 125.69214928500014, 6.021877346000167 ], [ 125.68531334700015, 5.992661851000207 ], [ 125.66732832100013, 5.950140692000161 ], [ 125.59457441500012, 5.862127997000187 ], [ 125.4990340500002, 5.726141669000242 ], [ 125.43637129000012, 5.617661851000207 ], [ 125.42164147200015, 5.598211981000247 ], [ 125.40300540500016, 5.58087799700013 ], [ 125.38754316500012, 5.573797919000128 ], [ 125.37126712300028, 5.572943427000155 ], [ 125.3227645190002, 5.575506903000132 ], [ 125.30836022200015, 5.579575914000259 ], [ 125.30241946700016, 5.592189846000167 ], [ 125.30014082100013, 5.671332098000278 ], [ 125.29509524800017, 5.691066799000168 ], [ 125.28825931100005, 5.706040757000153 ], [ 125.27865644600013, 5.716498114000217 ], [ 125.26433353000004, 5.722560940000221 ], [ 125.24317467500032, 5.724554755000213 ], [ 125.23780358200008, 5.727972723000221 ], [ 125.23194420700031, 5.736273505000156 ], [ 125.22730553500014, 5.74656810100015 ], [ 125.22543379000012, 5.756170966000241 ], [ 125.22095787900003, 5.766424872000243 ], [ 125.2104598320002, 5.772121486000117 ], [ 125.19898522200026, 5.77558014500022 ], [ 125.1914168630002, 5.779201565000221 ], [ 125.18116295700008, 5.798325914000259 ], [ 125.18506920700008, 5.814520575000245 ], [ 125.19402103000016, 5.829494533000172 ], [ 125.19874108200031, 5.844916083000214 ], [ 125.20183353000016, 5.860541083000157 ], [ 125.20899498800009, 5.876857815000221 ], [ 125.22543379000012, 5.903265692000161 ], [ 125.26400800900024, 5.949937242000203 ], [ 125.27800540500027, 5.979234117000317 ], [ 125.28077233200031, 6.019354559000192 ], [ 125.27670332100013, 6.036037502000227 ], [ 125.2631942070002, 6.072211005000213 ], [ 125.26026451900009, 6.084540106000247 ], [ 125.25074303500014, 6.093085028000246 ], [ 125.24008222700024, 6.094224351000264 ], [ 125.22925866000026, 6.095404364000103 ], [ 125.1914168630002, 6.095119533000116 ], [ 125.17945397200015, 6.106756903000189 ], [ 125.1689559250002, 6.111965236000117 ], [ 125.15788821700016, 6.108791408000229 ], [ 125.15528405000009, 6.100165106000191 ], [ 125.1577254570002, 6.074286200000188 ], [ 125.15447024800028, 6.064357815000221 ], [ 125.14527428500014, 6.050034898000206 ], [ 125.11223392000022, 5.953355210000211 ], [ 125.08871504000012, 5.884711005000156 ], [ 125.06910241000003, 5.861721096000224 ], [ 125.04981530000009, 5.861395575000188 ], [ 125.00220787900003, 5.871975002000227 ], [ 124.96363366000014, 5.858587958000157 ], [ 124.93873131600003, 5.863959052000098 ], [ 124.8374129570002, 5.912258205000228 ], [ 124.81088300900012, 5.918605861000117 ], [ 124.76791425900012, 5.938055731000247 ], [ 124.75611412900025, 5.938177802000098 ], [ 124.74366295700031, 5.936957098000164 ], [ 124.73267662900003, 5.937445380000099 ], [ 124.70801842500009, 5.946600653000246 ], [ 124.64332116000026, 5.985256252000227 ], [ 124.63648522200015, 5.978420315000108 ], [ 124.60580488400012, 5.992336330000171 ], [ 124.5962020190002, 5.99892812700017 ], [ 124.59245853000016, 6.005519924000112 ], [ 124.58969160200002, 6.014634507000096 ], [ 124.5859481130002, 6.022691148000149 ], [ 124.5791121750002, 6.026190497000243 ], [ 124.56137129000012, 6.030015367000146 ], [ 124.42188561300031, 6.110296942000105 ], [ 124.3701278000002, 6.132717190000108 ], [ 124.24577884200016, 6.186509507000153 ], [ 124.22877037900003, 6.197007554000209 ], [ 124.20167076900009, 6.221747137000193 ], [ 124.18946373800009, 6.240545966000127 ], [ 124.17660566500012, 6.277818101000207 ], [ 124.16480553500003, 6.294338283000172 ], [ 124.09791100400003, 6.364650783000116 ], [ 124.07195071700016, 6.401516018000109 ], [ 124.05494225400003, 6.437689520000106 ], [ 124.0424910820002, 6.488470770000163 ], [ 124.04127037900003, 6.509711005000156 ], [ 124.03484134200016, 6.530585028000189 ], [ 124.03296959700015, 6.542425848000107 ], [ 124.03744550900012, 6.547552802000098 ], [ 124.0517684250002, 6.548895575000245 ], [ 124.05583743600016, 6.552720445000205 ], [ 124.05494225400003, 6.559027411000159 ], [ 124.05494225400003, 6.646551825000245 ], [ 124.05225670700008, 6.669378973000164 ], [ 124.03386478000004, 6.731919664000202 ], [ 124.03720136800007, 6.758408921000182 ], [ 124.03980553500003, 6.779120184000306 ], [ 124.03663170700008, 6.799709377000227 ], [ 124.01710045700008, 6.808294989000217 ], [ 124.01433353000016, 6.806097723000164 ], [ 124.00326582100001, 6.790228583000214 ], [ 123.99732506600014, 6.786078192000105 ], [ 123.99447675900024, 6.787909247000187 ], [ 123.9926863940002, 6.791815497000243 ], [ 123.98943118600016, 6.793931382000096 ], [ 123.98218834700015, 6.796820380000213 ], [ 123.97494550900024, 6.803900458000157 ], [ 123.96892337300017, 6.812730210000098 ], [ 123.96550540500016, 6.821275132000153 ], [ 123.96517988400001, 6.832342841000241 ], [ 123.9712020190002, 6.850775458000101 ], [ 123.97291100400014, 6.859116929000095 ], [ 123.97486412900025, 6.965318101000264 ], [ 123.98853600400014, 7.015611070000148 ], [ 124.02947024800005, 7.115139065000221 ], [ 124.05111738400012, 7.136623440000165 ], [ 124.0683699880002, 7.14134349200026 ], [ 124.0913192070002, 7.152777411000102 ], [ 124.12940514400009, 7.177557684000249 ], [ 124.16675866000014, 7.208400783000229 ], [ 124.18376712300005, 7.226385809000249 ], [ 124.19459069100014, 7.253648179000152 ], [ 124.21273847700002, 7.270575262000136 ], [ 124.2192488940002, 7.279974677000098 ], [ 124.22087649800017, 7.289292710000211 ], [ 124.2192488940002, 7.320949611000174 ], [ 124.22087649800017, 7.346584377000283 ], [ 124.22584069100014, 7.365790106000134 ], [ 124.24675540500004, 7.404120184000249 ], [ 124.23226972700002, 7.414740302000212 ], [ 124.21900475400025, 7.415757554000152 ], [ 124.18775475400003, 7.41034577000022 ], [ 124.17603600400014, 7.41571686400016 ], [ 124.16732832100013, 7.431911526000192 ], [ 124.16309655000009, 7.439642645000163 ], [ 124.15357506600014, 7.445054429000095 ], [ 124.14242597700002, 7.461249091000127 ], [ 124.09522545700031, 7.561183986000117 ], [ 124.06519616000014, 7.602728583000214 ], [ 124.02076256600014, 7.633490302000155 ], [ 124.01335696700005, 7.634344794000185 ], [ 123.95923912900025, 7.673895575000131 ], [ 123.91089928500026, 7.69891998900016 ], [ 123.90349368600016, 7.691473700000131 ], [ 123.88607832100001, 7.699408270000106 ], [ 123.86296634200005, 7.703436591000298 ], [ 123.86166425900024, 7.703477281000289 ], [ 123.81812584700003, 7.705145575000302 ], [ 123.79420006600014, 7.710516669000242 ], [ 123.77784264400009, 7.723944403000132 ], [ 123.72380618600016, 7.795599677000155 ], [ 123.70394941500012, 7.809393622000243 ], [ 123.68067467500032, 7.815008856000191 ], [ 123.65796959700015, 7.817206122000243 ], [ 123.61459394600013, 7.83352285400025 ], [ 123.60922285200013, 7.835516669000128 ], [ 123.5869246750002, 7.839341539000202 ], [ 123.52295983200031, 7.835516669000128 ], [ 123.5048934250002, 7.831732489000217 ], [ 123.47999108200008, 7.822658596000167 ], [ 123.45687910200013, 7.811468817000105 ], [ 123.44467207100013, 7.801336981000247 ], [ 123.4482528000002, 7.766424872000187 ], [ 123.47559655000009, 7.73932526200025 ], [ 123.49781334700015, 7.708807684000135 ], [ 123.48568769600013, 7.663560289000145 ], [ 123.47706139400009, 7.65330638200021 ], [ 123.46656334700003, 7.643866278000189 ], [ 123.45541425900001, 7.635931708000214 ], [ 123.44467207100013, 7.630072333000101 ], [ 123.4091903000002, 7.623480536000102 ], [ 123.40007571700016, 7.619452216000241 ], [ 123.39625084700015, 7.611761786000216 ], [ 123.39527428500014, 7.60040924700013 ], [ 123.39625084700015, 7.578558661000159 ], [ 123.39234459700026, 7.575628973000278 ], [ 123.37159264400009, 7.588039455 ], [ 123.36215254000012, 7.589056708000271 ], [ 123.35352623800009, 7.572088934000192 ], [ 123.36687259200016, 7.552191473000107 ], [ 123.38640384200005, 7.532619533000229 ], [ 123.39625084700015, 7.516791083000101 ], [ 123.40259850400014, 7.492092190000108 ], [ 123.41765384200005, 7.478664455000114 ], [ 123.43572024800005, 7.468207098000221 ], [ 123.45167076900032, 7.452541408000229 ], [ 123.45866946700005, 7.431301174000168 ], [ 123.45777428500003, 7.408636786000216 ], [ 123.45142662900014, 7.387925523000263 ], [ 123.44125410200024, 7.372748114000103 ], [ 123.43100019600013, 7.368719794000242 ], [ 123.4194442070002, 7.372259833000157 ], [ 123.38803144600013, 7.395412502000283 ], [ 123.35596764400009, 7.41034577000022 ], [ 123.34213300900001, 7.420477606000247 ], [ 123.31316165500016, 7.451320705000228 ], [ 123.30437259200005, 7.467433986000174 ], [ 123.28980553500014, 7.47760651200025 ], [ 123.28638756600003, 7.482611395000163 ], [ 123.28638756600003, 7.504584052000212 ], [ 123.28443444100014, 7.513251044000185 ], [ 123.28028405000009, 7.520209052000212 ], [ 123.26441491000014, 7.526353257000096 ], [ 123.24382571700016, 7.524074611 ], [ 123.22584069100014, 7.515611070000261 ], [ 123.21810957100013, 7.503404039000202 ], [ 123.21257571700016, 7.489325262000136 ], [ 123.19947350400014, 7.482001044000242 ], [ 123.18360436300009, 7.48094310100015 ], [ 123.1704207690002, 7.486029364000103 ], [ 123.1406356130002, 7.513128973000107 ], [ 123.12745201900009, 7.531480210000154 ], [ 123.12208092500032, 7.550604559000249 ], [ 123.12761478000016, 7.57257721600007 ], [ 123.14177493600016, 7.579820054000209 ], [ 123.1596785820002, 7.582098700000245 ], [ 123.1772567070002, 7.589056708000271 ], [ 123.1875106130002, 7.605861721000281 ], [ 123.18677819100014, 7.626206773000149 ], [ 123.1753035820002, 7.643296617000203 ], [ 123.15333092500009, 7.650539455000114 ], [ 123.14039147200026, 7.661363023000206 ], [ 123.13542728000016, 7.686468817000218 ], [ 123.13347415500016, 7.714178778000132 ], [ 123.1294051440002, 7.733099677000212 ], [ 123.11793053500014, 7.741359768000223 ], [ 123.10726972700013, 7.731919664000202 ], [ 123.09644616000014, 7.714300848000107 ], [ 123.08472741000014, 7.695217190000108 ], [ 123.0571395190002, 7.667303778000132 ], [ 123.05030358200031, 7.655096747000073 ], [ 123.05152428500026, 7.644964911000216 ], [ 123.05469811300031, 7.634833075000188 ], [ 123.05372155000032, 7.622544664000316 ], [ 123.04957116000003, 7.617987372000187 ], [ 123.03614342500009, 7.609320380000156 ], [ 123.0332137380002, 7.605861721000281 ], [ 123.03451582100001, 7.59861888200021 ], [ 123.03777103000016, 7.594671942000161 ], [ 123.04021243600016, 7.590155341000127 ], [ 123.04004967500009, 7.581610419000242 ], [ 123.03451582100001, 7.563869533000172 ], [ 123.01905358200008, 7.541978257000267 ], [ 123.01221764400032, 7.527655341000184 ], [ 123.01059004000012, 7.512844143000166 ], [ 123.01221764400032, 7.482611395000163 ], [ 123.00660241000014, 7.47235748900016 ], [ 122.99561608200008, 7.467271226000207 ], [ 122.99000084700015, 7.470363674000112 ], [ 122.98462975400003, 7.476060289000316 ], [ 122.97486412900003, 7.479193427000155 ], [ 122.97364342500009, 7.480373440000221 ], [ 122.9506942070002, 7.486029364000103 ], [ 122.94239342500009, 7.499701239000217 ], [ 122.9272567070002, 7.538153387000136 ], [ 122.91724694100014, 7.547512111000174 ], [ 122.9052840500002, 7.543402411000102 ], [ 122.89234459700015, 7.531439520000163 ], [ 122.88168379000012, 7.517401434000249 ], [ 122.87614993600016, 7.507147528000189 ], [ 122.87525475400014, 7.492824611000231 ], [ 122.87794030000032, 7.483710028000246 ], [ 122.8764754570002, 7.475978908000229 ], [ 122.86255944100026, 7.465562242000203 ], [ 122.85141035200013, 7.461004950000302 ], [ 122.83725019600013, 7.458441473000164 ], [ 122.82203209700015, 7.459418036000272 ], [ 122.80738366000026, 7.465562242000203 ], [ 122.8134871750002, 7.47776927300032 ], [ 122.81031334700015, 7.486070054000095 ], [ 122.80396569100003, 7.490179755000042 ], [ 122.80054772200003, 7.489732164000259 ], [ 122.79859459700026, 7.48712799700013 ], [ 122.7944442070002, 7.485256252000113 ], [ 122.78988691500001, 7.484686591000127 ], [ 122.78687584700015, 7.486029364000103 ], [ 122.78565514400009, 7.491766669000242 ], [ 122.7880965500002, 7.496812242000203 ], [ 122.79167728000016, 7.499945380000099 ], [ 122.79371178500014, 7.499701239000217 ], [ 122.79249108200008, 7.522691148000206 ], [ 122.79712975400003, 7.535589911000159 ], [ 122.80892988400012, 7.537543035999988 ], [ 122.82837975400003, 7.527655341000184 ], [ 122.83073978000004, 7.54979075700021 ], [ 122.8227645190002, 7.564439195000261 ], [ 122.81234785200013, 7.576890367000146 ], [ 122.80738366000026, 7.592474677000155 ], [ 122.79997806100016, 7.654201565000108 ], [ 122.79371178500014, 7.671047268000109 ], [ 122.80152428500014, 7.684393622000187 ], [ 122.80836022200003, 7.704250393000109 ], [ 122.8129988940002, 7.725531317000161 ], [ 122.81470787900014, 7.743353583000214 ], [ 122.80437259200016, 7.758612372000187 ], [ 122.78044681100016, 7.759833075000245 ], [ 122.73902428500026, 7.754136460000268 ], [ 122.7304793630002, 7.76072825700021 ], [ 122.7148543630002, 7.78095123900016 ], [ 122.70427493600016, 7.788316148000149 ], [ 122.65984134200028, 7.788316148000149 ], [ 122.65105228000004, 7.786078192000275 ], [ 122.63070722700024, 7.776312567000218 ], [ 122.6186629570002, 7.774074611000117 ], [ 122.59669030000009, 7.761419989000103 ], [ 122.51148522200015, 7.69570547100011 ], [ 122.48560631600014, 7.66689687700017 ], [ 122.44385826900009, 7.608587958000157 ], [ 122.43384850400014, 7.5906436220003 ], [ 122.43360436300031, 7.578558661000159 ], [ 122.45167076900009, 7.57440827000022 ], [ 122.47185306100027, 7.579901434000192 ], [ 122.48560631600014, 7.578517971000167 ], [ 122.48511803500003, 7.553697007000153 ], [ 122.47877037900003, 7.539862372000243 ], [ 122.46753991000014, 7.522853908000172 ], [ 122.45443769600013, 7.507757880000099 ], [ 122.44361412900003, 7.499701239000217 ], [ 122.45142662900003, 7.534165757000096 ], [ 122.45101972700002, 7.540676174000225 ], [ 122.4399520190002, 7.541937567000275 ], [ 122.42847741000003, 7.532904364000217 ], [ 122.41968834700015, 7.520168361000117 ], [ 122.41627037900014, 7.510239976000264 ], [ 122.40593509200005, 7.499945380000099 ], [ 122.3598738940002, 7.472845770000163 ], [ 122.34799238400024, 7.452541408000229 ], [ 122.35425866000014, 7.430405992000146 ], [ 122.36882571700005, 7.410467841000298 ], [ 122.37907962300017, 7.391587632000153 ], [ 122.3725692070002, 7.372748114000103 ], [ 122.3637801440002, 7.362209377000056 ], [ 122.34498131600014, 7.331773179000095 ], [ 122.3335067070002, 7.323879299000112 ], [ 122.32292728000016, 7.323146877000113 ], [ 122.31226647200003, 7.323960679000095 ], [ 122.30014082100013, 7.320949611000174 ], [ 122.28044681100016, 7.294501044000242 ], [ 122.26587975400025, 7.24909088700025 ], [ 122.25171959700003, 7.164496161000216 ], [ 122.24935957100013, 7.118109442000218 ], [ 122.24350019600013, 7.099269924000225 ], [ 122.20240319100014, 7.042629299000225 ], [ 122.16732832100013, 6.952704169000242 ], [ 122.15447024800017, 6.928127346000224 ], [ 122.1342879570002, 6.914211330000228 ], [ 122.12370853000027, 6.899644273000263 ], [ 122.1186629570002, 6.896429755000213 ], [ 122.0957137380002, 6.897406317000218 ], [ 122.08676191500001, 6.899644273000263 ], [ 122.03793379000001, 6.917385158000116 ], [ 121.96119225400014, 6.958197333000157 ], [ 121.93702233200008, 6.978949286000216 ], [ 121.89893639400009, 7.057196356000134 ], [ 121.89779707100013, 7.140285549000225 ], [ 121.93344160200013, 7.217922268000166 ], [ 122.0053817070002, 7.279974677000098 ], [ 122.03891035200013, 7.295599677000098 ], [ 122.0468856130002, 7.301092841000184 ], [ 122.05103600400014, 7.307806708000157 ], [ 122.05347741000014, 7.31688060100015 ], [ 122.05176842500009, 7.324896552000212 ], [ 122.04322350400014, 7.328355210000211 ], [ 122.03256269600024, 7.339829820000148 ], [ 122.03467858200008, 7.365790106000134 ], [ 122.0468856130002, 7.41034577000022 ], [ 122.04558353000004, 7.44253164300028 ], [ 122.0468856130002, 7.452541408000229 ], [ 122.05209394600013, 7.463283596000167 ], [ 122.0649520190002, 7.481105861000117 ], [ 122.06739342500009, 7.489732164000259 ], [ 122.06999759200016, 7.513657945000205 ], [ 122.0776473320002, 7.528021552000155 ], [ 122.09017988400024, 7.537543035999988 ], [ 122.10775800900012, 7.547512111000174 ], [ 122.1196395190002, 7.556545315000108 ], [ 122.1372176440002, 7.57298411700026 ], [ 122.14600670700008, 7.588812567000218 ], [ 122.11353600400003, 7.603257553999981 ], [ 122.11158287900025, 7.620672919000242 ], [ 122.1220809250002, 7.657375393000166 ], [ 122.12273196700028, 7.700384833000214 ], [ 122.11752363400012, 7.723211981000134 ], [ 122.10474694100014, 7.733099677000212 ], [ 122.09652754000024, 7.744696356000247 ], [ 122.10499108200008, 7.770819403000303 ], [ 122.1289168630002, 7.815008856000191 ], [ 122.21452884200005, 7.921128648000206 ], [ 122.23959394600013, 7.965725002000113 ], [ 122.25171959700003, 7.980129299000225 ], [ 122.26303144600013, 7.989813544000128 ], [ 122.29224694100014, 8.009914455000171 ], [ 122.32276451900009, 8.018215236000117 ], [ 122.36003665500016, 8.040472723000107 ], [ 122.4379988940002, 8.066555080000171 ], [ 122.46257571700016, 8.070990302000155 ], [ 122.47828209700015, 8.061997789000316 ], [ 122.48243248800031, 8.070542710000211 ], [ 122.48959394600001, 8.07510000200017 ], [ 122.49781334700026, 8.074652411000159 ], [ 122.50505618600005, 8.068264065000221 ], [ 122.52271569100003, 8.07636139499999 ], [ 122.59994550900024, 8.092922268000223 ], [ 122.63843834700015, 8.108547268000223 ], [ 122.64966881600014, 8.116034247000187 ], [ 122.66773522200015, 8.149969794000242 ], [ 122.67920983200031, 8.164211330000171 ], [ 122.68441816500001, 8.153957424000112 ], [ 122.6919051440002, 8.131659247000187 ], [ 122.71094811300009, 8.119777736000231 ], [ 122.73519941500012, 8.115464585000154 ], [ 122.7587996750002, 8.116034247000187 ], [ 122.85523522200026, 8.132473049000168 ], [ 122.86850019600013, 8.141831773000206 ], [ 122.87956790500004, 8.143988348000221 ], [ 122.90308678500003, 8.144680080000285 ], [ 122.91391035200002, 8.146551825000131 ], [ 122.92457116000003, 8.150132554000209 ], [ 122.9453231130002, 8.161851304000095 ], [ 123.00261478000027, 8.209133205000228 ], [ 123.0136824880002, 8.232407945000261 ], [ 123.00074303500003, 8.25039297100011 ], [ 122.9643660820002, 8.274359442000275 ], [ 122.96208743600005, 8.280829169000242 ], [ 122.95818118600005, 8.302394924000168 ], [ 122.95818118600005, 8.308498440000165 ], [ 122.96338951900032, 8.313950914000259 ], [ 122.98161868600016, 8.324693101000094 ], [ 122.9853621750002, 8.32587311400016 ], [ 122.98747806100027, 8.330633856000247 ], [ 122.99195397200003, 8.335760809000135 ], [ 122.99642988400012, 8.342718817000161 ], [ 122.99838300900024, 8.353176174000225 ], [ 122.99724368600016, 8.364650783000229 ], [ 122.99203535200002, 8.38548411700026 ], [ 122.9921981130002, 8.397202867000146 ], [ 122.99927819100003, 8.414943752000113 ], [ 123.02173912900014, 8.444403387000193 ], [ 123.0263778000002, 8.462713934000249 ], [ 123.03101647200015, 8.474554755000213 ], [ 123.0420028000002, 8.490139065000221 ], [ 123.05543053500014, 8.504950262000307 ], [ 123.0673934250002, 8.51455312700017 ], [ 123.0820418630002, 8.519232489000103 ], [ 123.16049238400012, 8.530666408000172 ], [ 123.19507897200015, 8.542222398000263 ], [ 123.21127363400001, 8.541815497000243 ], [ 123.21550540500016, 8.538316148000149 ], [ 123.22559655000009, 8.525091864000217 ], [ 123.23194420700008, 8.520697333000157 ], [ 123.24203535200013, 8.519110419000128 ], [ 123.30095462300017, 8.524237372000243 ], [ 123.31820722700013, 8.533514716000298 ], [ 123.33106530000032, 8.546616929000152 ], [ 123.34644616000014, 8.569769598000107 ], [ 123.3496199880002, 8.576605536000102 ], [ 123.36353600400014, 8.623277085000211 ], [ 123.37159264400009, 8.633449611000231 ], [ 123.38672936300009, 8.637437242000203 ], [ 123.39234459700026, 8.635728257000153 ], [ 123.39763431100005, 8.632391669000128 ], [ 123.4033309250002, 8.629828192000218 ], [ 123.41065514400032, 8.630560614000217 ], [ 123.4155379570002, 8.633693752000113 ], [ 123.42758222700002, 8.64423248900016 ], [ 123.43637129000012, 8.64948151200025 ], [ 123.43197675900001, 8.661078192000161 ], [ 123.40007571700016, 8.69765859600011 ], [ 123.39185631600026, 8.709418036000159 ], [ 123.3901473320002, 8.719387111000174 ], [ 123.39714603000016, 8.723211981000247 ], [ 123.4111434250002, 8.726385809000135 ], [ 123.4248153000002, 8.726955471000224 ], [ 123.43100019600013, 8.722805080000114 ], [ 123.43669681100016, 8.721828518000109 ], [ 123.46192467500009, 8.707261460000098 ], [ 123.47779381600014, 8.695298570000261 ], [ 123.48845462300017, 8.692124742000203 ], [ 123.50025475400014, 8.693101304000152 ], [ 123.51295006600014, 8.698879299000112 ], [ 123.5141707690002, 8.647284247000243 ], [ 123.52182050900001, 8.622544664000259 ], [ 123.53972415500027, 8.62376536700026 ], [ 123.5459090500002, 8.620062567000161 ], [ 123.54900149800005, 8.61884186400016 ], [ 123.56137129000024, 8.613836981000191 ], [ 123.56763756600014, 8.610093492000146 ], [ 123.57178795700031, 8.604681708000214 ], [ 123.58130944100014, 8.582831122000073 ], [ 123.59099368600016, 8.592759507000096 ], [ 123.59253991000014, 8.602280992000146 ], [ 123.59213300900012, 8.612372137000136 ], [ 123.59498131600026, 8.62376536700026 ], [ 123.60035241000003, 8.632554429000095 ], [ 123.61548912900003, 8.651068427000155 ], [ 123.60328209700015, 8.66307200700021 ], [ 123.6167098320002, 8.670721747000243 ], [ 123.63306725400025, 8.66844310100015 ], [ 123.62907962300017, 8.651068427000155 ], [ 123.71029707100001, 8.633246161000102 ], [ 123.72250410200013, 8.628078518000223 ], [ 123.7309676440002, 8.618882554000152 ], [ 123.73894290500016, 8.602687893000166 ], [ 123.74577884200016, 8.602687893000166 ], [ 123.75407962300005, 8.610296942000105 ], [ 123.7587996750002, 8.607489325000245 ], [ 123.76685631600003, 8.589016018000223 ], [ 123.76490319100014, 8.589097398000206 ], [ 123.77702884200005, 8.55735911700026 ], [ 123.78052819100003, 8.551743882000096 ], [ 123.78638756600014, 8.537665106000134 ], [ 123.82837975400025, 8.486558335000268 ], [ 123.84473717500009, 8.452215887000193 ], [ 123.85759524800028, 8.409409898000206 ], [ 123.86605879000012, 8.36432526200025 ], [ 123.86931399800017, 8.243312893000166 ], [ 123.88477623800031, 8.185451565000165 ], [ 123.88298587300005, 8.164496161000159 ], [ 123.87330162900014, 8.153265692000105 ], [ 123.76775149800028, 8.059027411000216 ], [ 123.74577884200016, 8.048407294000128 ], [ 123.70240319100003, 8.045803127000056 ], [ 123.68474368600027, 8.036810614000217 ], [ 123.67766360800022, 8.010728257000153 ], [ 123.67758222700024, 8.010606187000178 ], [ 123.67750084700026, 8.010199286000216 ], [ 123.67644290500004, 8.000067450000131 ], [ 123.67172285200002, 7.98065827000022 ], [ 123.67066491000014, 7.96922435100015 ], [ 123.67074629000012, 7.969183661000159 ], [ 123.67212975400003, 7.967759507000096 ], [ 123.67644290500004, 7.963364976000037 ], [ 123.67644290500004, 7.963405666000028 ], [ 123.67668704500022, 7.963487046000012 ], [ 123.6889754570002, 7.968329169000185 ], [ 123.70085696700016, 7.976467190000221 ], [ 123.70484459700026, 7.980129299000225 ], [ 123.74097741000003, 8.000433661000159 ], [ 123.87370853000016, 8.105169989000103 ], [ 123.88640384200016, 8.109198309000192 ], [ 123.90748131600014, 8.113226630000156 ], [ 123.92204837300017, 8.123236395000163 ], [ 123.94507897200015, 8.150132554000209 ], [ 123.96892337300017, 8.167792059000192 ], [ 124.00025475400003, 8.18134186400016 ], [ 124.03630618600005, 8.189846096000224 ], [ 124.15577233200008, 8.190252997000243 ], [ 124.19849694100003, 8.196478583000157 ], [ 124.23226972700002, 8.212876695000205 ], [ 124.24244225400014, 8.225327867000317 ], [ 124.25806725400003, 8.255926825000245 ], [ 124.27027428500003, 8.270941473000164 ], [ 124.27466881600014, 8.281073309000192 ], [ 124.27076256600026, 8.291449286000102 ], [ 124.26392662900014, 8.301825262000136 ], [ 124.26042728000016, 8.311916408000172 ], [ 124.2617293630002, 8.324530341000127 ], [ 124.26539147200003, 8.333970445000148 ], [ 124.27393639400032, 8.350043036000159 ], [ 124.27458743600016, 8.354559637000193 ], [ 124.27320397200003, 8.364813544000128 ], [ 124.27393639400032, 8.369289455 ], [ 124.27702884200016, 8.373521226000094 ], [ 124.28394616000003, 8.378607489000217 ], [ 124.28695722700013, 8.383530992000203 ], [ 124.29623457100001, 8.404730536000102 ], [ 124.29948978000016, 8.415472723000107 ], [ 124.30201256600014, 8.452460028000246 ], [ 124.30591881600026, 8.473700262000136 ], [ 124.32178795700008, 8.51455312700017 ], [ 124.34253991000026, 8.548651434000192 ], [ 124.37110436300009, 8.581366278000189 ], [ 124.4057723320002, 8.607896226000094 ], [ 124.44459069100014, 8.62376536700026 ], [ 124.46998131600014, 8.624823309000249 ], [ 124.47608483200008, 8.614569403000246 ], [ 124.47535241000014, 8.598700262000193 ], [ 124.48015384200016, 8.582831122000073 ], [ 124.48519941500012, 8.582464911000272 ], [ 124.50855553500014, 8.577337958000157 ], [ 124.51050866000014, 8.575995184000249 ], [ 124.51742597700002, 8.574652411000102 ], [ 124.52588951900032, 8.571112372000187 ], [ 124.54078209700003, 8.561712958000157 ], [ 124.57154381600026, 8.52814362200013 ], [ 124.58253014400032, 8.520697333000157 ], [ 124.59994550900001, 8.516180731000191 ], [ 124.65748131600014, 8.51455312700017 ], [ 124.64844811300009, 8.496323960000098 ], [ 124.64096113400001, 8.476019598000164 ], [ 124.63648522200015, 8.454291083000101 ], [ 124.63648522200015, 8.431952216000184 ], [ 124.64332116000026, 8.431952216000184 ], [ 124.65064537900025, 8.458197333000214 ], [ 124.6630965500002, 8.475816148000206 ], [ 124.68295332100013, 8.481838283000172 ], [ 124.71216881600003, 8.472967841000184 ], [ 124.71648196700016, 8.479803778000132 ], [ 124.73267662900003, 8.493394273000263 ], [ 124.73633873800031, 8.495021877000113 ], [ 124.74976647200003, 8.498724677000212 ], [ 124.75318444100014, 8.500230210000211 ], [ 124.75367272200003, 8.506577867000203 ], [ 124.7509871750002, 8.51251862200013 ], [ 124.74773196700016, 8.517401434000192 ], [ 124.74634850400003, 8.520697333000157 ], [ 124.7504988940002, 8.551499742000146 ], [ 124.75318444100014, 8.561712958000157 ], [ 124.7573348320002, 8.569077867000146 ], [ 124.76978600400014, 8.586330471000167 ], [ 124.77361087300017, 8.596421617000203 ], [ 124.7714949880002, 8.615871486000231 ], [ 124.75147545700031, 8.650458075000131 ], [ 124.74634850400003, 8.670965887000193 ], [ 124.75123131600003, 8.692775783000116 ], [ 124.7631942070002, 8.706000067000105 ], [ 124.77711022200003, 8.717352606000134 ], [ 124.78785241000014, 8.733628648000149 ], [ 124.78003991000003, 8.752875067000218 ], [ 124.7807723320002, 8.774603583000214 ], [ 124.78785241000014, 8.818996486000231 ], [ 124.78785241000014, 8.904282945000205 ], [ 124.7807723320002, 8.949123440000108 ], [ 124.7817488940002, 8.971136786000216 ], [ 124.7910262380002, 8.99062734600011 ], [ 124.79908287900003, 8.999986070000148 ], [ 124.80941816500024, 9.00946686400016 ], [ 124.82081139400009, 9.014553127000227 ], [ 124.83204186300009, 9.010728257000153 ], [ 124.84359785200002, 9.003729559000192 ], [ 124.85377037900025, 9.003973700000017 ], [ 124.86402428500003, 9.006740627000283 ], [ 124.87671959700026, 9.007391669000128 ], [ 124.89519290500016, 9.002752997000187 ], [ 124.91529381600003, 8.994126695000205 ], [ 124.93140709700003, 8.982733466000127 ], [ 124.93816165500004, 8.969794012000136 ], [ 124.9472762380002, 8.962469794000185 ], [ 125.02637780000032, 8.918524481000247 ], [ 125.03443444100014, 8.911769924000168 ], [ 125.05738366000014, 8.882269598000164 ], [ 125.07276451900009, 8.872788803999981 ], [ 125.09302819100003, 8.839789130000213 ], [ 125.10596764400009, 8.829779364000103 ], [ 125.1157332690002, 8.83055247600015 ], [ 125.13746178500014, 8.843491929000265 ], [ 125.15935306100005, 8.851141669000242 ], [ 125.17644290500016, 8.860581773000092 ], [ 125.18734785200013, 8.875921942000048 ], [ 125.1953231130002, 8.960882880000156 ], [ 125.1914168630002, 8.980047919000242 ], [ 125.18775475400025, 8.985907294000185 ], [ 125.18311608200031, 8.991400458000101 ], [ 125.1792098320002, 8.997992255000099 ], [ 125.17774498800009, 9.007391669000128 ], [ 125.17994225400025, 9.019476630000213 ], [ 125.18921959700003, 9.039374091000127 ], [ 125.1914168630002, 9.052069403000189 ], [ 125.1919051440002, 9.064927476000094 ], [ 125.19410241000014, 9.072414455000285 ], [ 125.19947350400014, 9.078273830000228 ], [ 125.20875084700003, 9.08649323100002 ], [ 125.21851647200026, 9.088120835000211 ], [ 125.22722415500016, 9.07884349200026 ], [ 125.23975670700031, 9.055161851000094 ], [ 125.26929772200015, 9.015570380000156 ], [ 125.28874759200028, 9.000433661000159 ], [ 125.31177819100026, 8.994330145000163 ], [ 125.37671959700003, 8.991359768000109 ], [ 125.41993248800031, 8.981594143000109 ], [ 125.44117272200015, 8.980414130000099 ], [ 125.46216881600014, 8.985174872000187 ], [ 125.5166121750002, 9.015936591000127 ], [ 125.52654056100027, 9.026190497000187 ], [ 125.53451582100013, 9.048976955000114 ], [ 125.54070071700028, 9.084051825000188 ], [ 125.5420028000002, 9.189195054000152 ], [ 125.53931725400003, 9.206691799000168 ], [ 125.5332137380002, 9.217596747000073 ], [ 125.52605228000016, 9.22695547100011 ], [ 125.5210067070002, 9.239488023000206 ], [ 125.52027428500014, 9.24823639499999 ], [ 125.5214949880002, 9.266180731000247 ], [ 125.5210067070002, 9.274847723000221 ], [ 125.51783287900014, 9.284491278000303 ], [ 125.50904381600003, 9.303697007000153 ], [ 125.5029403000002, 9.329169012000136 ], [ 125.48373457100001, 9.361273505000213 ], [ 125.47730553500014, 9.390611070000148 ], [ 125.47291100400025, 9.398342190000165 ], [ 125.46827233200008, 9.404242255000099 ], [ 125.4663192070002, 9.408351955000114 ], [ 125.4663192070002, 9.439357815000165 ], [ 125.46526126400022, 9.444688218000238 ], [ 125.46241295700031, 9.459295966000241 ], [ 125.44068444100003, 9.515936591000241 ], [ 125.43816165500016, 9.525824286000045 ], [ 125.4355574880002, 9.546047268000166 ], [ 125.39869225400014, 9.681057033000229 ], [ 125.39747155000032, 9.699408270000106 ], [ 125.4004012380002, 9.717433986000117 ], [ 125.40707441500001, 9.733710028000132 ], [ 125.45573978000004, 9.812811591000127 ], [ 125.4594832690002, 9.822943427000155 ], [ 125.47136478000016, 9.808905341000241 ], [ 125.48845462300017, 9.792914130000213 ], [ 125.50709069100026, 9.779933986000231 ], [ 125.54037519600024, 9.771063544000299 ], [ 125.56902103000016, 9.75665924700013 ], [ 125.58920332100024, 9.75462474200009 ], [ 125.58464603000016, 9.730780341000127 ], [ 125.59262129000012, 9.702337958000214 ], [ 125.6045028000002, 9.673325914000316 ], [ 125.61036217500009, 9.647894598000164 ], [ 125.6201278000002, 9.62978750200017 ], [ 125.64356530000009, 9.611273505000156 ] ] ], [ [ [ 126.14283287900025, 9.850043036000216 ], [ 126.15349368600016, 9.841986395000163 ], [ 126.16586347700002, 9.82916901200025 ], [ 126.17408287900003, 9.817206122000187 ], [ 126.18018639400009, 9.80149974200026 ], [ 126.17823326900032, 9.787827867000317 ], [ 126.15544681100016, 9.779201565000108 ], [ 126.13884524800017, 9.765611070000148 ], [ 126.1303817070002, 9.760891018000223 ], [ 126.12012780000009, 9.758937893000166 ], [ 126.0932723320002, 9.760891018000223 ], [ 126.05445397200003, 9.77509186400016 ], [ 126.04167728000004, 9.775132554000152 ], [ 126.04859459700026, 9.75462474200009 ], [ 126.03394616000014, 9.766343492000203 ], [ 126.01921634200005, 9.781683661000159 ], [ 125.99390709700015, 9.81610748900016 ], [ 125.99341881600014, 9.820298570000261 ], [ 125.99537194100026, 9.824652411000159 ], [ 125.9965926440002, 9.829779364000103 ], [ 125.99390709700015, 9.836615302000098 ], [ 125.98796634200016, 9.839992580000114 ], [ 125.98031660200024, 9.839789130000156 ], [ 125.9726668630002, 9.84149811400016 ], [ 125.96599368600027, 9.850246486000174 ], [ 125.97982832100024, 9.849188544000015 ], [ 125.99293053500003, 9.850246486000174 ], [ 126.00473066500001, 9.854885158000116 ], [ 126.01441491000014, 9.864488023000149 ], [ 126.00326582100013, 9.869289455000228 ], [ 125.98910566500012, 9.87714264500022 ], [ 125.97982832100024, 9.888006903000132 ], [ 125.98340905000032, 9.901800848000221 ], [ 126.04468834700015, 9.998724677000098 ], [ 126.04859459700026, 10.007961330000228 ], [ 126.04851321700028, 10.017482815000164 ], [ 126.04566491000003, 10.02619049700013 ], [ 126.04525800900024, 10.035142320000148 ], [ 126.0522567070002, 10.04547760600019 ], [ 126.07146243600016, 10.05906810100015 ], [ 126.08073978000016, 10.05565013200021 ], [ 126.12671959700026, 9.956040757000153 ], [ 126.13795006600014, 9.901922919000128 ], [ 126.13786868600016, 9.891180731000191 ], [ 126.13314863400001, 9.880682684000135 ], [ 126.11784915500004, 9.866888739000217 ], [ 126.11060631600003, 9.857082424000168 ], [ 126.12989342500032, 9.85455963700025 ], [ 126.14283287900025, 9.850043036000216 ] ] ], [ [ [ 124.60694420700008, 10.14032623900016 ], [ 124.5957137380002, 10.12352122600015 ], [ 124.59538821700005, 10.108547268 ], [ 124.59766686300031, 10.094183661000216 ], [ 124.5888778000002, 10.086249091000241 ], [ 124.5756942070002, 10.09023672100011 ], [ 124.5610457690002, 10.085842190000221 ], [ 124.55005944100026, 10.069037177000212 ], [ 124.54037519600001, 10.060858466000241 ], [ 124.52955162900003, 10.068548895000163 ], [ 124.52540123800009, 10.078802802000098 ], [ 124.52540123800009, 10.087225653000189 ], [ 124.52279707100024, 10.09845612200013 ], [ 124.52182050900001, 10.11204661700026 ], [ 124.52759850400014, 10.117336330000171 ], [ 124.53565514400009, 10.114691473000278 ], [ 124.54224694100014, 10.115952867000146 ], [ 124.5468856130002, 10.122056382000096 ], [ 124.55176842500032, 10.126776434000192 ], [ 124.55762780000009, 10.126044012000136 ], [ 124.56723066500012, 10.12767161700026 ], [ 124.58008873800009, 10.136704820000261 ], [ 124.58627363400001, 10.142238674 ], [ 124.59278405000009, 10.145168361000231 ], [ 124.60621178500014, 10.147609768000166 ], [ 124.60694420700008, 10.14032623900016 ] ] ], [ [ [ 124.3496199880002, 10.151027736000174 ], [ 124.35596764400009, 10.110296942000161 ], [ 124.36695397200015, 10.119289455000171 ], [ 124.38249759200016, 10.143784898000206 ], [ 124.39682050900001, 10.151922919000242 ], [ 124.40023847700002, 10.138373114000103 ], [ 124.4082137380002, 10.11969635600019 ], [ 124.41911868600005, 10.106756903000132 ], [ 124.43083743600016, 10.110174872000186 ], [ 124.47632897200003, 10.070013739000217 ], [ 124.4897567070002, 10.062567450000245 ], [ 124.52003014400009, 10.064195054000265 ], [ 124.5302840500002, 10.060532945000205 ], [ 124.54835045700031, 10.048895575000302 ], [ 124.5776473320002, 10.033921617000146 ], [ 124.58863366000003, 10.023871161000102 ], [ 124.58399498800009, 9.999009507000039 ], [ 124.58423912900014, 9.980943101000207 ], [ 124.58090254000001, 9.972154039000259 ], [ 124.56869550900012, 9.987453518000223 ], [ 124.56617272200003, 9.968329169000128 ], [ 124.56617272200003, 9.952785549000112 ], [ 124.5644637380002, 9.943996486000231 ], [ 124.55616295700031, 9.925685940000108 ], [ 124.57146243600027, 9.912298895000106 ], [ 124.58375084700026, 9.893947658000229 ], [ 124.58464603000004, 9.877671617000146 ], [ 124.56527754000024, 9.870754299000112 ], [ 124.54981530000009, 9.861558335000211 ], [ 124.57016035200013, 9.840521552000212 ], [ 124.6240340500002, 9.801825262000193 ], [ 124.59896894600024, 9.74970123900016 ], [ 124.5962020190002, 9.73729075700021 ], [ 124.58521569100014, 9.732082424000112 ], [ 124.5605574880002, 9.732611395000106 ], [ 124.53484134200028, 9.736273505000042 ], [ 124.52035566500012, 9.740383205000114 ], [ 124.51685631600003, 9.748765367000146 ], [ 124.51742597700002, 9.759100653000132 ], [ 124.51441491000003, 9.767035223000107 ], [ 124.49984785200024, 9.768296617000203 ], [ 124.49293053500014, 9.762762762000193 ], [ 124.4624129570002, 9.730780341000127 ], [ 124.45281009200005, 9.725775458000157 ], [ 124.44027754000024, 9.721584377000227 ], [ 124.42945397200015, 9.71503327000022 ], [ 124.4248153000002, 9.70282623899999 ], [ 124.42416425900001, 9.689601955000228 ], [ 124.42204837300028, 9.678697007000153 ], [ 124.41749108200031, 9.668890692000161 ], [ 124.41049238400012, 9.658433335000268 ], [ 124.38184655000009, 9.636704820000205 ], [ 124.33871504000012, 9.618597723000107 ], [ 124.29420006600014, 9.606756903000189 ], [ 124.26042728000016, 9.603827216000184 ], [ 124.22144616000003, 9.605780341000241 ], [ 124.06519616000014, 9.59540436400016 ], [ 123.9375106130002, 9.617499091000127 ], [ 123.89234459700015, 9.632147528000246 ], [ 123.87175540500004, 9.64500560100015 ], [ 123.86304772200003, 9.661851304000152 ], [ 123.86670983200008, 9.683539130000156 ], [ 123.87273196700028, 9.703802802000269 ], [ 123.87387129000012, 9.721136786000045 ], [ 123.86304772200003, 9.734198309000135 ], [ 123.84489993600016, 9.737250067000218 ], [ 123.82447350400014, 9.736151434000192 ], [ 123.80787194100003, 9.739976304000095 ], [ 123.80103600400014, 9.757757880000156 ], [ 123.80323326900009, 9.781195380000156 ], [ 123.8090926440002, 9.802679755000099 ], [ 123.82837975400025, 9.842840887000193 ], [ 123.84131920700008, 9.857367255000213 ], [ 123.87582441500012, 9.886948960000098 ], [ 123.88298587300005, 9.901800848000221 ], [ 123.88607832100001, 9.914862372000187 ], [ 123.89340254000001, 9.916937567000218 ], [ 123.9072371750002, 9.911688544000128 ], [ 123.91667728000016, 9.915106512000136 ], [ 123.92212975400014, 9.923000393000223 ], [ 123.92603600400025, 9.932074286000216 ], [ 123.93140709700003, 9.939032294000185 ], [ 123.96387780000009, 9.950751044000128 ], [ 124.0097762380002, 9.961615302000212 ], [ 124.05079186300009, 9.979315497000187 ], [ 124.06853274800017, 10.011664130000213 ], [ 124.06999759200005, 10.032212632000267 ], [ 124.0752059250002, 10.048325914000145 ], [ 124.08659915500016, 10.058783270000106 ], [ 124.11589603000004, 10.06525299700013 ], [ 124.11597741000003, 10.072088934000192 ], [ 124.11361738400024, 10.080959377000283 ], [ 124.1162215500002, 10.089829820000148 ], [ 124.12387129000001, 10.096665757000039 ], [ 124.13697350400014, 10.104885158000229 ], [ 124.14307701900032, 10.110296942000161 ], [ 124.1587020190002, 10.131170966000127 ], [ 124.16716556100016, 10.13743724200026 ], [ 124.1845809250002, 10.144476630000099 ], [ 124.2226668630002, 10.151922919000242 ], [ 124.26343834700026, 10.151922919000242 ], [ 124.33130944100014, 10.161525783000229 ], [ 124.3496199880002, 10.151027736000174 ] ] ], [ [ [ 125.29135175900012, 9.922186591000184 ], [ 125.2851668630002, 9.916937567000218 ], [ 125.2739363940002, 9.919134833000101 ], [ 125.26742597700024, 9.924505927000098 ], [ 125.26514733200008, 9.930894273000206 ], [ 125.26384524800005, 9.938218492000203 ], [ 125.26026451900009, 9.946478583000214 ], [ 125.2363387380002, 9.974351304000209 ], [ 125.19874108200031, 10.035834052000212 ], [ 125.16480553500026, 10.055975653000246 ], [ 125.14576256600014, 10.070705471000224 ], [ 125.13746178500014, 10.086737372000243 ], [ 125.12582441500001, 10.129828192000275 ], [ 125.1245223320002, 10.151800848000164 ], [ 125.13746178500014, 10.165513414000202 ], [ 125.14909915500004, 10.165961005000213 ], [ 125.15845787900014, 10.160589911000045 ], [ 125.17546634200005, 10.145493882000039 ], [ 125.21648196700005, 10.129624742000317 ], [ 125.22925866000026, 10.121161200000245 ], [ 125.2392684250002, 10.103908596000224 ], [ 125.2534285820002, 10.035834052000212 ], [ 125.26303144600024, 10.023138739000217 ], [ 125.27711022200015, 10.00885651200025 ], [ 125.2895613940002, 9.991685289000145 ], [ 125.29509524800017, 9.970648505000213 ], [ 125.30616295700008, 9.937445380000156 ], [ 125.30494225400014, 9.932806708000271 ], [ 125.29639733200031, 9.929266669000185 ], [ 125.29135175900012, 9.922186591000184 ] ] ], [ [ [ 125.68482506600003, 10.399888414000145 ], [ 125.68384850400025, 10.364406643000109 ], [ 125.66488691500012, 10.295884507000153 ], [ 125.66138756600014, 10.27057526200025 ], [ 125.65805097700024, 10.261704820000148 ], [ 125.65463300900024, 10.264227606000134 ], [ 125.64625084700015, 10.265366929000209 ], [ 125.6386824880002, 10.261379299000112 ], [ 125.6377059250002, 10.248114325000188 ], [ 125.64584394600024, 10.239691473000164 ], [ 125.6601668630002, 10.228257554000095 ], [ 125.66814212300017, 10.214667059000135 ], [ 125.65805097700024, 10.199693101000207 ], [ 125.66488691500012, 10.192857164000259 ], [ 125.6538192070002, 10.186590887000193 ], [ 125.65650475400014, 10.17633698100019 ], [ 125.6684676440002, 10.169256903000246 ], [ 125.68531334700015, 10.17234935100015 ], [ 125.67758222700002, 10.144842841000298 ], [ 125.67676842500009, 10.12767161700026 ], [ 125.68197675900012, 10.113999742000146 ], [ 125.69849694100014, 10.093939520000163 ], [ 125.70476321700005, 10.081773179000095 ], [ 125.70655358200031, 10.069322007000153 ], [ 125.70313561300009, 10.056708075000245 ], [ 125.69646243600005, 10.040920315000164 ], [ 125.68864993600005, 10.027289130000213 ], [ 125.68197675900012, 10.021551825000188 ], [ 125.6850692070002, 10.01463450700021 ], [ 125.6928817070002, 9.974351304000209 ], [ 125.68148847700002, 9.958075262000193 ], [ 125.69060306100016, 9.941839911000102 ], [ 125.70728600400014, 9.926214911000102 ], [ 125.71957441500001, 9.911688544000128 ], [ 125.72169030000009, 9.894354559000249 ], [ 125.71452884200016, 9.880845445000205 ], [ 125.69947350400014, 9.874253648000206 ], [ 125.67855879000001, 9.877590236000231 ], [ 125.66358483200008, 9.88914622600015 ], [ 125.66081790500027, 9.903998114000103 ], [ 125.66187584700015, 9.920965887000307 ], [ 125.65805097700024, 9.939032294000185 ], [ 125.64861087300005, 9.94696686399999 ], [ 125.62061608200008, 9.955226955000171 ], [ 125.61036217500009, 9.966945705000228 ], [ 125.62029056100016, 9.966538804000265 ], [ 125.62330162900014, 9.966945705000228 ], [ 125.61500084700003, 9.972479559000192 ], [ 125.6113387380002, 9.977280992000146 ], [ 125.61231530000032, 9.982001044000242 ], [ 125.61719811300009, 9.987453518000223 ], [ 125.61719811300009, 9.993597723000107 ], [ 125.59302819100014, 9.99298737200013 ], [ 125.58318118600016, 10.009711005000156 ], [ 125.58521569100014, 10.033880927000155 ], [ 125.5966903000002, 10.05565013200021 ], [ 125.60141035200013, 10.047430731000247 ], [ 125.6084090500002, 10.043605861000117 ], [ 125.61451256600003, 10.046616929000209 ], [ 125.61719811300009, 10.05906810100015 ], [ 125.61451256600003, 10.064154364000274 ], [ 125.60132897200015, 10.08026764500022 ], [ 125.5966903000002, 10.089829820000148 ], [ 125.58920332100024, 10.089829820000148 ], [ 125.58448326900009, 10.077541408000172 ], [ 125.57789147200015, 10.07664622600015 ], [ 125.56934655000009, 10.080796617000317 ], [ 125.55884850400014, 10.083644924000168 ], [ 125.55250084700015, 10.07868073100019 ], [ 125.54525800900012, 10.068752346000167 ], [ 125.53541100400014, 10.060858466000241 ], [ 125.5210067070002, 10.062567450000245 ], [ 125.51343834700015, 10.072984117000146 ], [ 125.5131942070002, 10.086615302000098 ], [ 125.5107528000002, 10.09845612200013 ], [ 125.49708092500009, 10.103461005000099 ], [ 125.49529056100016, 10.108710028000132 ], [ 125.49594160200013, 10.134588934000135 ], [ 125.49366295700008, 10.144476630000099 ], [ 125.50896243600005, 10.151312567000161 ], [ 125.51758873800031, 10.169378973000221 ], [ 125.51937910200013, 10.190619208000214 ], [ 125.5141707690002, 10.207098700000188 ], [ 125.5219832690002, 10.210394598000221 ], [ 125.52898196700016, 10.209784247000243 ], [ 125.53549238400012, 10.206000067000161 ], [ 125.5420028000002, 10.199693101000207 ], [ 125.53882897200015, 10.215155341000184 ], [ 125.53199303500003, 10.228989976000094 ], [ 125.53028405000009, 10.241888739000217 ], [ 125.5420028000002, 10.254339911000159 ], [ 125.53695722700013, 10.257147528000189 ], [ 125.53484134200005, 10.260077216000127 ], [ 125.53288821700028, 10.263657945000205 ], [ 125.52784264400009, 10.26862213700025 ], [ 125.5322371750002, 10.28392161700026 ], [ 125.5239363940002, 10.301906643000166 ], [ 125.52214603000027, 10.316961981000247 ], [ 125.54542076900009, 10.323187567000218 ], [ 125.55779056100005, 10.325100002000283 ], [ 125.5625106130002, 10.33079661700026 ], [ 125.5625106130002, 10.353949286000216 ], [ 125.56039472700024, 10.361314195000205 ], [ 125.55689537900025, 10.36603424700013 ], [ 125.5561629570002, 10.370754299000225 ], [ 125.5625106130002, 10.378485419000185 ], [ 125.5678817070002, 10.380926825000245 ], [ 125.5747176440002, 10.381170966000127 ], [ 125.58041425900001, 10.379136460000154 ], [ 125.5864363940002, 10.367417710000097 ], [ 125.59441165500016, 10.365179755000099 ], [ 125.60336347700013, 10.366766669000128 ], [ 125.61036217500009, 10.370998440000051 ], [ 125.61475670700008, 10.38104889500022 ], [ 125.61719811300009, 10.419419664000259 ], [ 125.62419681100027, 10.443670966000241 ], [ 125.62964928500003, 10.454046942000218 ], [ 125.6377059250002, 10.460394598000164 ], [ 125.64966881600014, 10.46190013200021 ], [ 125.65739993600016, 10.456447658000286 ], [ 125.67172285200024, 10.433050848000107 ], [ 125.68482506600003, 10.399888414000145 ] ] ], [ [ [ 119.99057050900024, 10.555975653000132 ], [ 119.99057050900024, 10.549139716000241 ], [ 119.9931746750002, 10.539984442000161 ], [ 119.98414147200003, 10.531317450000131 ], [ 119.96827233200008, 10.528143622000243 ], [ 119.9502059250002, 10.535467841000298 ], [ 119.94947350400014, 10.528794664000145 ], [ 119.9472762380002, 10.524155992000203 ], [ 119.94467207100013, 10.520086981000247 ], [ 119.94271894600001, 10.515041408000116 ], [ 119.91879316500012, 10.548041082999987 ], [ 119.9087020190002, 10.555975653000132 ], [ 119.91187584700003, 10.536281643000109 ], [ 119.91765384200028, 10.516180731000134 ], [ 119.92025800900012, 10.497259833000157 ], [ 119.91488691500012, 10.48086172100011 ], [ 119.9067488940002, 10.478745835000211 ], [ 119.89527428500014, 10.480658270000106 ], [ 119.88526451900009, 10.479966539000145 ], [ 119.88070722700013, 10.470363674000225 ], [ 119.87712649800017, 10.464667059000249 ], [ 119.86841881600003, 10.461737372000243 ], [ 119.85035241000026, 10.460394598000164 ], [ 119.83562259200016, 10.456040757000096 ], [ 119.82162519600013, 10.448553778000132 ], [ 119.80648847700013, 10.446112372000243 ], [ 119.78858483200008, 10.456976630000156 ], [ 119.78093509200005, 10.472235419000128 ], [ 119.77808678500003, 10.493597723000164 ], [ 119.7783309250002, 10.535467841000298 ], [ 119.76612389400009, 10.530747789000202 ], [ 119.75709069100014, 10.534002997000243 ], [ 119.75261478000027, 10.539780992000203 ], [ 119.75416100400014, 10.542954820000261 ], [ 119.7954207690002, 10.573391018000223 ], [ 119.80543053500014, 10.585150458000101 ], [ 119.82894941500024, 10.626410223000221 ], [ 119.83790123800009, 10.637518622000186 ], [ 119.84351647200015, 10.642238674000112 ], [ 119.84986412900003, 10.644761460000097 ], [ 119.85962975400003, 10.643296617000146 ], [ 119.89087975400003, 10.62518952000022 ], [ 119.92009524800005, 10.612738348000107 ], [ 119.9502059250002, 10.603745835000097 ], [ 119.97413170700031, 10.595363674000112 ], [ 120.00001061300031, 10.580471096000167 ], [ 120.0112410820002, 10.565252997000186 ], [ 119.99057050900024, 10.555975653000132 ] ] ], [ [ [ 124.37842858200008, 10.628322658000116 ], [ 124.30062910200013, 10.590073960000154 ], [ 124.28435306100016, 10.603827216000184 ], [ 124.28882897200003, 10.616929429000209 ], [ 124.30111738400024, 10.631170966000241 ], [ 124.3081160820002, 10.648423570000261 ], [ 124.30958092500009, 10.662339585000154 ], [ 124.31373131600014, 10.677801825000131 ], [ 124.31983483200031, 10.692368882000096 ], [ 124.3276473320002, 10.70400625200017 ], [ 124.34099368600016, 10.71181875200017 ], [ 124.35547936300009, 10.71063873900016 ], [ 124.3691512380002, 10.703070380000213 ], [ 124.37973066500012, 10.691310940000108 ], [ 124.3852645190002, 10.679754950000188 ], [ 124.38835696700028, 10.667141018000109 ], [ 124.38998457100013, 10.641302802000098 ], [ 124.37842858200008, 10.628322658000116 ] ] ], [ [ [ 124.50879967500009, 10.641546942000218 ], [ 124.4624129570002, 10.631048895000163 ], [ 124.4091903000002, 10.648260809000192 ], [ 124.40845787900003, 10.683823960000268 ], [ 124.43555748800031, 10.71360911700026 ], [ 124.4658309250002, 10.71360911700026 ], [ 124.5039168630002, 10.693304755000156 ], [ 124.52068118600005, 10.665757554000209 ], [ 124.50879967500009, 10.641546942000218 ] ] ], [ [ [ 122.72152754000001, 10.585191148000263 ], [ 122.68685957100013, 10.506008205000114 ], [ 122.66431725400014, 10.470851955000228 ], [ 122.63445071700016, 10.44424062700017 ], [ 122.59498131600003, 10.433050848000107 ], [ 122.60523522200003, 10.460516669000242 ], [ 122.59449303500003, 10.459702867000203 ], [ 122.57797285200013, 10.447088934000249 ], [ 122.57081139400009, 10.439276434000249 ], [ 122.56519616000014, 10.436183986000174 ], [ 122.54761803500014, 10.422512111000231 ], [ 122.5366317070002, 10.419419664000259 ], [ 122.53052819100003, 10.423244533000059 ], [ 122.52637780000009, 10.432359117000146 ], [ 122.51929772200015, 10.453558661000045 ], [ 122.51872806100005, 10.458197333000157 ], [ 122.52027428500003, 10.469875393000279 ], [ 122.51929772200015, 10.474066473000107 ], [ 122.51433353000027, 10.477036851000207 ], [ 122.5019637380002, 10.479681708000101 ], [ 122.49878991000014, 10.48086172100011 ], [ 122.49480228000027, 10.483465887000136 ], [ 122.4858504570002, 10.49306875200017 ], [ 122.48243248800031, 10.503363348000221 ], [ 122.4951278000002, 10.508205471000167 ], [ 122.50700931100016, 10.508002020000163 ], [ 122.51685631600014, 10.509100653000189 ], [ 122.52361087300005, 10.514105536000159 ], [ 122.52613366000003, 10.525580145000163 ], [ 122.52930748800009, 10.533270575000188 ], [ 122.5459090500002, 10.54071686400016 ], [ 122.55347741000003, 10.549139716000241 ], [ 122.53500410200013, 10.553290106000247 ], [ 122.5273543630002, 10.570135809000249 ], [ 122.52857506600026, 10.591213283000172 ], [ 122.5366317070002, 10.607489325000188 ], [ 122.54786217500009, 10.622015692000161 ], [ 122.56413821700005, 10.652573960000097 ], [ 122.57455488400012, 10.665838934000192 ], [ 122.59058678500014, 10.673773505000099 ], [ 122.60857181100005, 10.677394924000168 ], [ 122.62322024800017, 10.684475002000113 ], [ 122.63379967500032, 10.722601630000099 ], [ 122.64486738400012, 10.736273505000213 ], [ 122.65845787900003, 10.748032945000261 ], [ 122.67017662900014, 10.762030341000241 ], [ 122.6997176440002, 10.740383205000228 ], [ 122.71111087300005, 10.734686591000184 ], [ 122.73796634200016, 10.694159247000186 ], [ 122.73707116000014, 10.640041408000172 ], [ 122.72152754000001, 10.585191148000263 ] ] ], [ [ [ 125.76050866000003, 10.740952867000146 ], [ 125.77621504000001, 10.738918361000174 ], [ 125.80836022200015, 10.74042389500022 ], [ 125.82203209700015, 10.734686591000184 ], [ 125.83179772200015, 10.720119533000172 ], [ 125.82691491000014, 10.708929755000156 ], [ 125.81364993600016, 10.701849677000155 ], [ 125.7983504570002, 10.699367580000228 ], [ 125.77979576900009, 10.699164130000099 ], [ 125.76937910200024, 10.700384833000101 ], [ 125.76140384200005, 10.705552476000207 ], [ 125.75025475400003, 10.717352606000304 ], [ 125.74000084700015, 10.724432684000249 ], [ 125.70289147200015, 10.740952867000146 ], [ 125.6840926440002, 10.752752997000186 ], [ 125.67896569100003, 10.778876044000242 ], [ 125.68726647200026, 10.805161851000094 ], [ 125.70915774800017, 10.817694403000189 ], [ 125.73145592500032, 10.808050848000107 ], [ 125.7441512380002, 10.758368231000134 ], [ 125.76050866000003, 10.740952867000146 ] ] ], [ [ [ 121.08716881600003, 10.823472398000149 ], [ 121.06226647200015, 10.817572333000214 ], [ 121.03467858200008, 10.819810289000259 ], [ 121.01758873800031, 10.834133205000171 ], [ 121.02515709700003, 10.864447333000157 ], [ 121.03207441500001, 10.870510158000229 ], [ 121.06666100400014, 10.891099351000207 ], [ 121.08578535200013, 10.908880927000098 ], [ 121.0932723320002, 10.910386460000211 ], [ 121.09449303500014, 10.895819403000303 ], [ 121.09449303500014, 10.873480536000159 ], [ 121.08073978000004, 10.841742255000213 ], [ 121.08716881600003, 10.823472398000149 ] ] ], [ [ [ 123.26978600400014, 10.97736237200013 ], [ 123.27686608200008, 10.974310614000217 ], [ 123.29566491000026, 10.97532786700009 ], [ 123.3007918630002, 10.974310614000217 ], [ 123.31185957100001, 10.96698639500022 ], [ 123.32960045700008, 10.951402085000211 ], [ 123.3418074880002, 10.946356512000307 ], [ 123.35377037900014, 10.947577216000184 ], [ 123.37924238400001, 10.958807684000192 ], [ 123.3901473320002, 10.96002838700025 ], [ 123.40357506600014, 10.953192450000131 ], [ 123.4013778000002, 10.945298570000148 ], [ 123.39503014400032, 10.936224677000155 ], [ 123.39625084700015, 10.925930080000228 ], [ 123.40544681100016, 10.919826565000164 ], [ 123.41293379000001, 10.924058335000154 ], [ 123.42066491000014, 10.932684637000136 ], [ 123.43100019600013, 10.939601955000171 ], [ 123.44564863400012, 10.942287502000227 ], [ 123.45687910200013, 10.940497137000136 ], [ 123.46705162900014, 10.936509507000096 ], [ 123.50261478000004, 10.927720445000318 ], [ 123.52182050900001, 10.919907945000148 ], [ 123.53500410200013, 10.904852606000134 ], [ 123.54175866000014, 10.865464585000097 ], [ 123.54664147200015, 10.856105861000117 ], [ 123.56080162900003, 10.837144273000263 ], [ 123.56364993600005, 10.835353908000172 ], [ 123.56739342500009, 10.835394598000164 ], [ 123.57105553500003, 10.834784247000186 ], [ 123.57447350400003, 10.830959377000113 ], [ 123.57553144600013, 10.825588283000172 ], [ 123.5708113940002, 10.779242255000099 ], [ 123.56153405000032, 10.760077216000184 ], [ 123.53345787900014, 10.721096096000224 ], [ 123.51685631600014, 10.680975653000189 ], [ 123.48568769600013, 10.549139716000241 ], [ 123.4736434250002, 10.526760158000172 ], [ 123.38965905000009, 10.437160549000225 ], [ 123.37940514400009, 10.421535549000225 ], [ 123.3657332690002, 10.392523505000156 ], [ 123.3447371750002, 10.347967841000241 ], [ 123.3418074880002, 10.326605536000102 ], [ 123.3403426440002, 10.260687567000105 ], [ 123.33545983200031, 10.240668036000216 ], [ 123.30469811300009, 10.1785342470003 ], [ 123.3007918630002, 10.15534088700025 ], [ 123.29981530000009, 10.131415106000304 ], [ 123.29664147200003, 10.111476955000228 ], [ 123.29037519600013, 10.093573309000135 ], [ 123.2441512380002, 10.026353257000096 ], [ 123.23552493600016, 10.001898505000156 ], [ 123.2285262380002, 9.994696356000134 ], [ 123.22136478000004, 9.989081122000243 ], [ 123.21810957100013, 9.984035549000112 ], [ 123.20443769600024, 9.939032294000185 ], [ 123.17595462300005, 9.908107815000108 ], [ 123.16236412900003, 9.890204169000185 ], [ 123.15674889400009, 9.867621161000045 ], [ 123.1704207690002, 9.695990302000098 ], [ 123.1645613940002, 9.67218659100007 ], [ 123.1635848320002, 9.661851304000152 ], [ 123.16041100400014, 9.647406317000218 ], [ 123.15308678500014, 9.646633205000171 ], [ 123.1440535820002, 9.649237372000243 ], [ 123.1362410820002, 9.644842841000184 ], [ 123.13542728000016, 9.618353583000157 ], [ 123.17741946700016, 9.589911200000017 ], [ 123.1704207690002, 9.562892971000167 ], [ 123.16114342500009, 9.583807684000192 ], [ 123.14380944100014, 9.573675848000164 ], [ 123.13550866000014, 9.552679755000156 ], [ 123.15333092500009, 9.541164455 ], [ 123.18091881600003, 9.537420966000184 ], [ 123.1899520190002, 9.526800848000221 ], [ 123.19166100400014, 9.509833075000245 ], [ 123.19760175900012, 9.48712799700013 ], [ 123.21168053500026, 9.472723700000131 ], [ 123.23259524800005, 9.459662177000269 ], [ 123.2514754570002, 9.443996486000174 ], [ 123.26726321700016, 9.398342190000165 ], [ 123.28484134200005, 9.379706122000243 ], [ 123.30518639400032, 9.362494208000214 ], [ 123.32113691500012, 9.343166408000116 ], [ 123.32829837300028, 9.302557684000135 ], [ 123.31763756600014, 9.256903387000193 ], [ 123.29859459700015, 9.215033270000163 ], [ 123.24341881600003, 9.136460679000265 ], [ 123.2387801440002, 9.120306708000101 ], [ 123.23015384200028, 9.107611395000106 ], [ 123.16098066500001, 9.065659898000149 ], [ 123.14771569100026, 9.061835028000189 ], [ 123.11207116000003, 9.061957098000164 ], [ 123.09994550900012, 9.059963283000172 ], [ 123.07992597700013, 9.050970770000163 ], [ 123.05787194100026, 9.046820380000099 ], [ 123.04265384200028, 9.037339585000211 ], [ 123.0332137380002, 9.035305080000171 ], [ 122.99048912900025, 9.048773505000156 ], [ 122.95769290500016, 9.081244208000157 ], [ 122.9336043630002, 9.12148672100011 ], [ 122.8925887380002, 9.221014716000184 ], [ 122.8867293630002, 9.28799062700017 ], [ 122.88054446700005, 9.305853583000214 ], [ 122.86939537900003, 9.322658596000224 ], [ 122.84489993600016, 9.347072658000229 ], [ 122.82789147200015, 9.358710028000132 ], [ 122.81104576900009, 9.363592841000298 ], [ 122.74512780000032, 9.366603908000116 ], [ 122.72478274800005, 9.371079820000261 ], [ 122.68067467500009, 9.394354559000192 ], [ 122.66675866000003, 9.397772528000076 ], [ 122.65723717500009, 9.401434637000136 ], [ 122.64926191500012, 9.409898178999981 ], [ 122.64242597700002, 9.419256903000189 ], [ 122.63599694100003, 9.425726630000213 ], [ 122.62354576900009, 9.428900458000101 ], [ 122.61011803500003, 9.429632880000099 ], [ 122.59945722700013, 9.432684637000307 ], [ 122.59709720100022, 9.437648830000228 ], [ 122.59066816500012, 9.450995184000135 ], [ 122.57016035200013, 9.475246486000174 ], [ 122.55176842500009, 9.490952867000203 ], [ 122.5297957690002, 9.53790924700013 ], [ 122.51587975400014, 9.548570054000152 ], [ 122.50521894600001, 9.552394924000112 ], [ 122.4965926440002, 9.561712958000157 ], [ 122.46680748800009, 9.623846747000243 ], [ 122.45728600400014, 9.637925523000206 ], [ 122.46436608200031, 9.646958726000207 ], [ 122.4614363940002, 9.65525950700021 ], [ 122.44361412900003, 9.672756252000227 ], [ 122.43824303500026, 9.668402411000159 ], [ 122.42823326900009, 9.662787177000212 ], [ 122.42310631600026, 9.658433335000268 ], [ 122.4248153000002, 9.672796942000218 ], [ 122.43083743600027, 9.698797919000128 ], [ 122.43043053500026, 9.713690497000243 ], [ 122.42457116000014, 9.710150458000157 ], [ 122.4087020190002, 9.703070380000213 ], [ 122.40259850400003, 9.699408270000106 ], [ 122.40357506600014, 9.738959052000098 ], [ 122.40935306100016, 9.775702216000184 ], [ 122.40984134200005, 9.808539130000213 ], [ 122.39519290500016, 9.836615302000098 ], [ 122.39519290500016, 9.842840887000193 ], [ 122.40593509200005, 9.853461005000099 ], [ 122.44410241000014, 9.921535549000168 ], [ 122.46159915500016, 9.96580638200021 ], [ 122.47461998800009, 9.974351304000209 ], [ 122.49537194100014, 9.976996161000159 ], [ 122.53777103000004, 9.987046617000203 ], [ 122.56031334700015, 9.987453518000223 ], [ 122.6259871750002, 9.974676825000245 ], [ 122.64283287900003, 9.966945705000228 ], [ 122.65699303500014, 9.975816148000263 ], [ 122.70777428500003, 9.986395575000131 ], [ 122.72852623800009, 9.997381903000189 ], [ 122.7822371750002, 10.052964585000154 ], [ 122.80738366000026, 10.069322007000153 ], [ 122.82691491000003, 10.058091539000145 ], [ 122.84489993600016, 10.067287502000113 ], [ 122.87281334700003, 10.100409247000186 ], [ 122.87891686300009, 10.11806875200017 ], [ 122.87582441500001, 10.143011786000216 ], [ 122.86255944100026, 10.185451565000108 ], [ 122.85531660200024, 10.228013414000145 ], [ 122.86939537900003, 10.350531317000105 ], [ 122.85938561300031, 10.394476630000213 ], [ 122.8217879570002, 10.472479559000249 ], [ 122.81470787900014, 10.515041408000116 ], [ 122.82390384200005, 10.532863674 ], [ 122.84253991000014, 10.541408596000224 ], [ 122.86101321700016, 10.546210028000132 ], [ 122.86939537900003, 10.552557684000249 ], [ 122.87484785200024, 10.561835028000246 ], [ 122.91041100400003, 10.597560940000221 ], [ 122.93384850400025, 10.648830471000053 ], [ 122.9345809250002, 10.65839264500022 ], [ 122.9716903000002, 10.721096096000224 ], [ 122.97584069100014, 10.742417710000097 ], [ 122.9716903000002, 10.806097723000221 ], [ 122.96851647200015, 10.81110260600019 ], [ 122.95394941500024, 10.822007554000095 ], [ 122.9506942070002, 10.827215887000193 ], [ 122.9521590500002, 10.847723700000131 ], [ 122.95435631600003, 10.855780341000184 ], [ 122.95818118600005, 10.864447333000157 ], [ 122.9663192070002, 10.876369533000172 ], [ 122.99382571700028, 10.90672435100015 ], [ 123.00261478000027, 10.912827867000146 ], [ 123.04802493600005, 10.914862372000186 ], [ 123.06771894600001, 10.918850002000227 ], [ 123.08773847700013, 10.925930080000228 ], [ 123.17009524800017, 10.977199611000231 ], [ 123.21355228000004, 10.996405341000184 ], [ 123.2597762380002, 10.994818427000155 ], [ 123.2622176440002, 10.991156317000218 ], [ 123.26514733200031, 10.984116929000095 ], [ 123.26978600400014, 10.97736237200013 ] ] ], [ [ [ 119.64869225400025, 11.029608466000241 ], [ 119.6479598320002, 11.015285549000225 ], [ 119.64128665500016, 11.015285549000225 ], [ 119.63575280000032, 11.019517320000148 ], [ 119.62907962300017, 11.018866278000132 ], [ 119.62142988400024, 11.01463450700021 ], [ 119.61312910200013, 11.008449611000231 ], [ 119.60857181100005, 11.024562893000109 ], [ 119.59693444100014, 11.034735419000128 ], [ 119.58521569100003, 11.04120514500022 ], [ 119.57976321700016, 11.045965887000136 ], [ 119.57667076900009, 11.084051825000131 ], [ 119.57976321700016, 11.09784577000022 ], [ 119.62037194100014, 11.081244208000101 ], [ 119.63209069100026, 11.069891669000015 ], [ 119.63982181100027, 11.057766018000109 ], [ 119.64551842500009, 11.044094143000166 ], [ 119.64869225400025, 11.029608466000241 ] ] ], [ [ [ 119.63233483200031, 11.181626695000148 ], [ 119.62769616000014, 11.173041083000157 ], [ 119.6098738940002, 11.156724351000094 ], [ 119.58952884200016, 11.141791083000157 ], [ 119.58334394600024, 11.138820705000228 ], [ 119.57007897200003, 11.144354559000192 ], [ 119.56714928500003, 11.15704987200013 ], [ 119.56959069100026, 11.170721747000073 ], [ 119.57292728000016, 11.179144598000221 ], [ 119.57553144600001, 11.178371486000174 ], [ 119.59343509200005, 11.186590887000193 ], [ 119.5976668630002, 11.190822658000116 ], [ 119.60035241000003, 11.195135809000192 ], [ 119.60434004000001, 11.198635158000116 ], [ 119.61312910200013, 11.200262762000136 ], [ 119.6284285820002, 11.190171617000146 ], [ 119.63233483200031, 11.181626695000148 ] ] ], [ [ [ 123.9995223320002, 11.077337958000157 ], [ 124.00912519600013, 11.073391018000109 ], [ 124.01254316500012, 11.066229559000249 ], [ 124.01392662900003, 11.059312242000146 ], [ 124.01710045700008, 11.056219794000242 ], [ 124.03728274800005, 11.057521877000283 ], [ 124.04615319100014, 11.059759833000157 ], [ 124.05494225400003, 11.063666083000214 ], [ 124.05193118600005, 11.043158270000106 ], [ 124.06177819100026, 10.984279690000108 ], [ 124.05974368600005, 10.962307033000116 ], [ 124.05347741000014, 10.93056875200017 ], [ 124.05494225400003, 10.912827867000146 ], [ 124.0669051440002, 10.889064846000167 ], [ 124.06853274800017, 10.878119208000101 ], [ 124.06495201900032, 10.86790599200026 ], [ 124.05062910200013, 10.845038153000246 ], [ 124.04737389400009, 10.834051825000188 ], [ 124.04379316500001, 10.80947500200017 ], [ 124.02662194100026, 10.769598700000188 ], [ 124.02076256600014, 10.747748114000274 ], [ 124.0239363940002, 10.708441473000221 ], [ 124.05079186300009, 10.627386786000102 ], [ 124.05494225400003, 10.590073960000154 ], [ 124.0517684250002, 10.589504299000168 ], [ 124.04468834700003, 10.586004950000302 ], [ 124.03736412900014, 10.581122137000136 ], [ 124.03386478000004, 10.576483466000127 ], [ 124.03443444100026, 10.571437893000166 ], [ 124.04037519600013, 10.56854889500022 ], [ 124.04127037900003, 10.562811591000184 ], [ 124.04004967500009, 10.484361070000205 ], [ 124.03589928500014, 10.466782945000205 ], [ 124.0097762380002, 10.404038804000209 ], [ 124.01010175900001, 10.394924221000224 ], [ 124.01872806100005, 10.380804755000099 ], [ 124.01490319100014, 10.372463283000229 ], [ 123.99284915500027, 10.357367255000099 ], [ 123.99048912900014, 10.36884186400016 ], [ 123.9858504570002, 10.375962632000096 ], [ 123.97966556100005, 10.377183335000097 ], [ 123.97291100400014, 10.370998440000051 ], [ 123.97087649800017, 10.36220937700017 ], [ 123.97291100400014, 10.326605536000102 ], [ 123.96111087300017, 10.323309637000193 ], [ 123.90626061300031, 10.294501044000128 ], [ 123.8896590500002, 10.28221263200021 ], [ 123.8686629570002, 10.248195705000171 ], [ 123.85710696700005, 10.242132880000099 ], [ 123.83179772200026, 10.240668036000216 ], [ 123.80811608200008, 10.236639716000127 ], [ 123.79363040500016, 10.226467190000108 ], [ 123.77369225400003, 10.199693101000207 ], [ 123.71949303500014, 10.156805731000134 ], [ 123.71168053500014, 10.141343492000203 ], [ 123.7099715500002, 10.120591539000259 ], [ 123.70484459700026, 10.105454820000261 ], [ 123.69613691500012, 10.093898830000171 ], [ 123.68376712300017, 10.083644924000168 ], [ 123.67554772200003, 10.079006252000227 ], [ 123.66342207100013, 10.074652411000159 ], [ 123.65699303500003, 10.069322007000153 ], [ 123.65259850400025, 10.063625393000109 ], [ 123.64820397200015, 10.05565013200021 ], [ 123.64478600400014, 10.047023830000228 ], [ 123.64332116000003, 10.038967190000108 ], [ 123.64332116000003, 9.960109768000166 ], [ 123.63086998800009, 9.907619533000172 ], [ 123.62907962300017, 9.88751862200013 ], [ 123.62476647200015, 9.879339911000159 ], [ 123.61548912900003, 9.874457098000164 ], [ 123.60596764400032, 9.871161200000131 ], [ 123.60181725400003, 9.867621161000045 ], [ 123.50945071700028, 9.653509833000214 ], [ 123.5034285820002, 9.615301825000245 ], [ 123.4882918630002, 9.566473700000245 ], [ 123.47950280000009, 9.548570054000152 ], [ 123.47103925900024, 9.538967190000221 ], [ 123.45329837300017, 9.528062242000146 ], [ 123.44467207100013, 9.521307684000249 ], [ 123.43588300900012, 9.50995514500022 ], [ 123.42269941500024, 9.487697658000229 ], [ 123.3696395190002, 9.425726630000213 ], [ 123.35857181100027, 9.415757554000095 ], [ 123.34245853000004, 9.406805731000247 ], [ 123.32764733200031, 9.408148505000156 ], [ 123.32113691500012, 9.429144598000221 ], [ 123.31421959700026, 9.485541083000101 ], [ 123.31430097700024, 9.507635809000135 ], [ 123.3652449880002, 9.78534577 ], [ 123.40495853000004, 9.878404039000145 ], [ 123.4091903000002, 9.897691148000206 ], [ 123.41065514400032, 9.922552802000212 ], [ 123.40642337300017, 9.927557684000249 ], [ 123.38754316500012, 9.937079169000185 ], [ 123.3833113940002, 9.942694403000246 ], [ 123.38705488400012, 9.973781643000109 ], [ 123.3901473320002, 9.98061758 ], [ 123.3984481130002, 9.984808661000102 ], [ 123.40406334700015, 9.981268622000243 ], [ 123.4077254570002, 9.975816148000263 ], [ 123.41065514400032, 9.974351304000209 ], [ 123.41521243600016, 9.981350002000227 ], [ 123.41716556100005, 9.989650783000172 ], [ 123.41732832100001, 10.011664130000213 ], [ 123.42253665500027, 10.037502346000224 ], [ 123.43539472700002, 10.055080471000224 ], [ 123.47201582100013, 10.083644924000168 ], [ 123.50798587300028, 10.122219143000109 ], [ 123.52133222700002, 10.14524974200009 ], [ 123.53345787900014, 10.190375067000161 ], [ 123.58130944100014, 10.254339911000159 ], [ 123.59685306100005, 10.317775783000229 ], [ 123.60547936300031, 10.333156643000109 ], [ 123.62273196700005, 10.350531317000105 ], [ 123.70679772200015, 10.461981512000193 ], [ 123.71168053500014, 10.477443752000227 ], [ 123.71387780000009, 10.482326565000164 ], [ 123.71851647200026, 10.487290757000039 ], [ 123.72315514400032, 10.494208075000245 ], [ 123.72535241000003, 10.504787502000113 ], [ 123.71802819100003, 10.537054755000099 ], [ 123.71908613400012, 10.549139716000241 ], [ 123.72925866000014, 10.569240627000283 ], [ 123.75440514400009, 10.599432684000192 ], [ 123.76498457100013, 10.640041408000172 ], [ 123.77784264400009, 10.66258372600015 ], [ 123.79273522200003, 10.683254299000112 ], [ 123.83155358200031, 10.725083726000094 ], [ 123.84929446700005, 10.752630927000212 ], [ 123.91578209700003, 10.939764716000241 ], [ 123.93458092500009, 10.970445054000152 ], [ 123.93002363400012, 10.993597723000278 ], [ 123.91773522200015, 11.028957424000168 ], [ 123.92408287900014, 11.046332098000164 ], [ 123.93523196700016, 11.059230861000287 ], [ 123.9443465500002, 11.074164130000099 ], [ 123.94507897200015, 11.09784577000022 ], [ 123.95191491000026, 11.09784577000022 ], [ 123.95541425900012, 11.09023672100011 ], [ 123.95964603000027, 11.085516669000185 ], [ 123.97291100400014, 11.077337958000157 ], [ 123.96070397200003, 11.130764065000108 ], [ 123.95525149800028, 11.142238674000168 ], [ 123.95191491000026, 11.156724351000094 ], [ 123.95875084700015, 11.175930080000171 ], [ 123.9697371750002, 11.194525458000101 ], [ 124.01832116000003, 11.258490302000098 ], [ 124.04566491000014, 11.277167059000249 ], [ 124.0747176440002, 11.269110419000128 ], [ 124.0727645190002, 11.262030341000127 ], [ 124.06812584700026, 11.233343817000161 ], [ 124.05567467500009, 11.205023505000156 ], [ 124.0512801440002, 11.18549225500027 ], [ 124.04737389400009, 11.148749091000184 ], [ 124.04127037900003, 11.130113023000263 ], [ 124.0107528000002, 11.094549872000186 ], [ 123.9995223320002, 11.077337958000157 ] ] ], [ [ [ 123.74968509200016, 11.141343492000146 ], [ 123.74577884200016, 11.138820705000228 ], [ 123.73365319100026, 11.154282945000261 ], [ 123.70866946700016, 11.217840887000193 ], [ 123.70484459700026, 11.241197007000153 ], [ 123.7085067070002, 11.252427476000094 ], [ 123.7158309250002, 11.26414622600015 ], [ 123.73275800900001, 11.28375885600002 ], [ 123.74577884200016, 11.292466539000259 ], [ 123.75464928500003, 11.28953685100015 ], [ 123.76091556100016, 11.278876044000128 ], [ 123.78931725400003, 11.19891998900016 ], [ 123.80103600400014, 11.179144598000221 ], [ 123.81153405000009, 11.165269273000149 ], [ 123.81804446700005, 11.154730536000102 ], [ 123.8149520190002, 11.148016669000128 ], [ 123.74968509200016, 11.141343492000146 ] ] ], [ [ [ 119.5229598320002, 11.339911200000188 ], [ 119.52955162900014, 11.330552476000207 ], [ 119.53882897200015, 11.323716539000259 ], [ 119.5415145190002, 11.328070380000156 ], [ 119.54769941500001, 11.332668361 ], [ 119.55241946700005, 11.337388414000202 ], [ 119.56706790500004, 11.301418361000231 ], [ 119.56902103000016, 11.261664130000156 ], [ 119.5610457690002, 11.220282294000128 ], [ 119.54566491000014, 11.179144598000221 ], [ 119.52051842500009, 11.138413804000265 ], [ 119.51636803500026, 11.117499091000184 ], [ 119.52857506600014, 11.094142971000167 ], [ 119.55339603000016, 11.072211005000099 ], [ 119.56177819100014, 11.059027411000102 ], [ 119.57243899800017, 11.015326239000217 ], [ 119.57056725400003, 11.007513739000217 ], [ 119.55925540500004, 11.000962632000096 ], [ 119.53834069100014, 11.012762762000136 ], [ 119.52418053500014, 11.017320054000095 ], [ 119.5175887380002, 11.011867580000114 ], [ 119.50660241000003, 10.983587958000101 ], [ 119.50456790500016, 10.970892645000106 ], [ 119.50570722700024, 10.958644924000225 ], [ 119.51042728000004, 10.937323309000249 ], [ 119.51140384200005, 10.925930080000228 ], [ 119.51010175900012, 10.916327216000241 ], [ 119.50505618600016, 10.896470445000148 ], [ 119.50456790500016, 10.88495514500022 ], [ 119.5073348320002, 10.874945380000213 ], [ 119.51587975400025, 10.859279690000051 ], [ 119.51929772200026, 10.837713934000249 ], [ 119.52393639400032, 10.827622789000259 ], [ 119.53158613400024, 10.819810289000259 ], [ 119.54224694100026, 10.816636460000097 ], [ 119.55494225400003, 10.818670966000241 ], [ 119.56275475400003, 10.823187567000105 ], [ 119.56804446700028, 10.828070380000099 ], [ 119.57292728000016, 10.830959377000113 ], [ 119.58521569100003, 10.833441473000107 ], [ 119.58912194100003, 10.834702867000203 ], [ 119.59343509200005, 10.837144273000263 ], [ 119.60271243600016, 10.824408270000106 ], [ 119.60157311300031, 10.810858466000241 ], [ 119.59644616000003, 10.797552802000155 ], [ 119.59343509200005, 10.785589911000216 ], [ 119.6001082690002, 10.754584052000098 ], [ 119.6001082690002, 10.717352606000304 ], [ 119.59636478000004, 10.697088934000192 ], [ 119.59050540500004, 10.682440497000073 ], [ 119.5908309250002, 10.67243073100019 ], [ 119.60629316500024, 10.665838934000192 ], [ 119.62720787900014, 10.668117580000114 ], [ 119.64136803500014, 10.675848700000131 ], [ 119.65357506600014, 10.675116278000246 ], [ 119.66846764400009, 10.652167059000078 ], [ 119.65919030000009, 10.655096747000186 ], [ 119.65064537900014, 10.656195380000213 ], [ 119.64242597700002, 10.655259507000153 ], [ 119.63445071700005, 10.652167059000078 ], [ 119.63990319100026, 10.643947658000116 ], [ 119.64258873800009, 10.637884833000157 ], [ 119.64275149800005, 10.632066148000206 ], [ 119.64128665500016, 10.624904690000108 ], [ 119.65512129000024, 10.612290757000096 ], [ 119.66277103000027, 10.570990302000155 ], [ 119.6718856130002, 10.552557684000249 ], [ 119.71412194100003, 10.532660223000164 ], [ 119.72535241000014, 10.518622137000193 ], [ 119.70997155000009, 10.494533596000224 ], [ 119.70199629000001, 10.490871486000117 ], [ 119.67847741000014, 10.485663153000189 ], [ 119.66846764400009, 10.48086172100011 ], [ 119.6479598320002, 10.449855861000117 ], [ 119.6396590500002, 10.444728908000172 ], [ 119.59343509200005, 10.405178127000227 ], [ 119.57585696700028, 10.380519924000225 ], [ 119.56324303500014, 10.373480536000102 ], [ 119.54224694100026, 10.370998440000051 ], [ 119.50082441500024, 10.370998440000051 ], [ 119.48902428500014, 10.372463283000229 ], [ 119.47266686300009, 10.378119208000214 ], [ 119.46306399800028, 10.378485419000185 ], [ 119.4492293630002, 10.373032945000261 ], [ 119.41871178500026, 10.354559637000136 ], [ 119.39812259200005, 10.350531317000105 ], [ 119.37826582100001, 10.344142971000167 ], [ 119.3559676440002, 10.328843492000203 ], [ 119.28598066500012, 10.261379299000112 ], [ 119.2573348320002, 10.221991278000132 ], [ 119.23715254000012, 10.179348049000112 ], [ 119.22071373800009, 10.084173895000106 ], [ 119.19629967500032, 10.056341864000103 ], [ 119.15943444100026, 10.041245835000097 ], [ 119.11353600400014, 10.028998114000217 ], [ 119.1025496750002, 10.024400132000096 ], [ 119.08253014400009, 10.012518622000186 ], [ 119.07203209700003, 10.007961330000228 ], [ 119.0605574880002, 10.006659247000243 ], [ 119.03614342500009, 10.009019273000149 ], [ 119.02475019600013, 10.007961330000228 ], [ 119.01498457100001, 10.003729559000135 ], [ 118.99496504000012, 9.992010809000249 ], [ 118.98389733200008, 9.987453518000223 ], [ 118.97291100400014, 9.984523830000114 ], [ 118.95142662900014, 9.981024481000191 ], [ 118.90300540500016, 9.978664455000171 ], [ 118.87476647200003, 9.971869208000214 ], [ 118.84880618600005, 9.959133205000228 ], [ 118.8193465500002, 9.939032294000185 ], [ 118.79656009200005, 9.945217190000165 ], [ 118.77418053500003, 9.934149481000247 ], [ 118.75717207100013, 9.912665106000134 ], [ 118.7504988940002, 9.88751862200013 ], [ 118.75456790500027, 9.85594310100015 ], [ 118.77564537900003, 9.814032294000128 ], [ 118.78467858200008, 9.788234768000109 ], [ 118.7778426440002, 9.734198309000135 ], [ 118.76490319100014, 9.728745835000154 ], [ 118.74903405000032, 9.732814846000167 ], [ 118.73560631600014, 9.743475653000189 ], [ 118.72999108200008, 9.757757880000156 ], [ 118.7338973320002, 9.775702216000184 ], [ 118.72966556100005, 9.780422268000109 ], [ 118.71290123800009, 9.781968492000146 ], [ 118.70093834700015, 9.775539455000171 ], [ 118.70191491000014, 9.760239976000207 ], [ 118.70557701900009, 9.742173570000148 ], [ 118.70199629000012, 9.727362372000187 ], [ 118.71314537900014, 9.721625067000218 ], [ 118.7197371750002, 9.713812567000218 ], [ 118.72095787900025, 9.704046942000218 ], [ 118.7163192070002, 9.692572333000157 ], [ 118.74293053500014, 9.696844794000242 ], [ 118.75831139400009, 9.683335679000095 ], [ 118.75635826900032, 9.667669989000103 ], [ 118.72999108200008, 9.665269273000263 ], [ 118.73161868600016, 9.650376695000148 ], [ 118.72535241000003, 9.631293036000216 ], [ 118.71550540500016, 9.612779039000202 ], [ 118.70582116000026, 9.600083726000094 ], [ 118.70053144600013, 9.591498114000217 ], [ 118.69890384200005, 9.583726304000209 ], [ 118.6953231130002, 9.578070380000156 ], [ 118.6748153000002, 9.574367580000228 ], [ 118.66920006600014, 9.569973049000112 ], [ 118.59213300900012, 9.446193752000283 ], [ 118.55730228000004, 9.411688544000242 ], [ 118.55193118600016, 9.401190497000187 ], [ 118.54737389400032, 9.383002020000106 ], [ 118.53646894600013, 9.364325262000023 ], [ 118.49789472700013, 9.313666083000214 ], [ 118.4921981130002, 9.308823960000098 ], [ 118.45508873800009, 9.284369208000101 ], [ 118.44564863400012, 9.281683661000045 ], [ 118.43083743600016, 9.273179429000209 ], [ 118.38054446700005, 9.220282294000128 ], [ 118.36500084700003, 9.193060614000217 ], [ 118.35377037900003, 9.183172919000242 ], [ 118.33578535200013, 9.179266669000128 ], [ 118.2949324880002, 9.179266669000128 ], [ 118.28435306100016, 9.176418361000174 ], [ 118.26140384200016, 9.162787177000155 ], [ 118.25017337300028, 9.158148505000213 ], [ 118.18913821700016, 9.155991929000152 ], [ 118.17123457100013, 9.148260809000135 ], [ 118.16342207100013, 9.142808335000154 ], [ 118.13697350400014, 9.130845445000148 ], [ 118.13209069100014, 9.126654364000217 ], [ 118.12671959700015, 9.096136786000102 ], [ 118.11304772200003, 9.069403387000193 ], [ 118.11207116000014, 9.064927476000094 ], [ 118.11345462300005, 9.053778387000193 ], [ 118.11304772200003, 9.048976955000114 ], [ 118.10914147200003, 9.047593492000146 ], [ 118.10222415500004, 9.047796942000105 ], [ 118.09546959700003, 9.045965887000193 ], [ 118.09253991000026, 9.038397528000246 ], [ 118.08912194100014, 9.019761460000154 ], [ 118.08041425900012, 8.996283270000163 ], [ 118.05836022200015, 8.952093817000105 ], [ 118.0136824880002, 8.88760000200017 ], [ 118.00066165500016, 8.877386786000102 ], [ 117.91041100400003, 8.829738674000112 ], [ 117.84009850400003, 8.774481512000136 ], [ 117.77369225400025, 8.703070380000213 ], [ 117.7553817070002, 8.690171617000146 ], [ 117.73292076900009, 8.685207424000168 ], [ 117.71127363400001, 8.682928778000132 ], [ 117.69800866000014, 8.67743561399999 ], [ 117.68580162900003, 8.67064036700026 ], [ 117.66732832100013, 8.664740302000098 ], [ 117.64673912900025, 8.663275458000271 ], [ 117.5888778000002, 8.670965887000193 ], [ 117.56560306100005, 8.661078192000161 ], [ 117.55738366000003, 8.638413804000209 ], [ 117.55811608200008, 8.596421617000203 ], [ 117.55014082100001, 8.575628973000221 ], [ 117.52312259200005, 8.539699611000174 ], [ 117.51726321700028, 8.517645575000245 ], [ 117.51286868600016, 8.506781317000161 ], [ 117.50318444100014, 8.50071849200026 ], [ 117.49350019600001, 8.499660549000225 ], [ 117.48910566500001, 8.503648179000095 ], [ 117.48414147200026, 8.513006903000132 ], [ 117.4721785820002, 8.513820705000171 ], [ 117.3789168630002, 8.486314195000318 ], [ 117.34498131600026, 8.471258856000304 ], [ 117.31861412900025, 8.451849677000098 ], [ 117.31519616000014, 8.44611237200013 ], [ 117.3076278000002, 8.429388739000103 ], [ 117.30437259200016, 8.424505927000212 ], [ 117.2700301440002, 8.414292710000098 ], [ 117.26384524800005, 8.397609768000166 ], [ 117.24927819100003, 8.383530992000203 ], [ 117.22234134200005, 8.363714911000102 ], [ 117.19800866000003, 8.334784247000187 ], [ 117.19076582100024, 8.338324286000272 ], [ 117.18824303500014, 8.366522528000132 ], [ 117.1904403000002, 8.378159898000206 ], [ 117.19971764400009, 8.398016669000128 ], [ 117.20476321700016, 8.418646552000098 ], [ 117.21143639400009, 8.427069403000189 ], [ 117.21843509200016, 8.433417059000135 ], [ 117.22234134200005, 8.438177802000155 ], [ 117.22339928500003, 8.448065497000187 ], [ 117.22193444100014, 8.469061591000127 ], [ 117.22250410200002, 8.484320380000099 ], [ 117.22193444100014, 8.495062567000105 ], [ 117.22234134200005, 8.500230210000211 ], [ 117.22535241000014, 8.505316473000107 ], [ 117.23414147200003, 8.511297919000128 ], [ 117.23959394600024, 8.535793361000231 ], [ 117.24854576900009, 8.555080471000167 ], [ 117.2700301440002, 8.589016018000223 ], [ 117.26775149800005, 8.590318101000207 ], [ 117.26392662900014, 8.610093492000146 ], [ 117.27995853000004, 8.604966539000259 ], [ 117.28679446700016, 8.620347398000206 ], [ 117.29151451900032, 8.64081452000022 ], [ 117.30111738400012, 8.651068427000155 ], [ 117.31218509200005, 8.656195380000099 ], [ 117.32715905000009, 8.668646552000212 ], [ 117.34205162900014, 8.684271552000212 ], [ 117.35271243600027, 8.698879299000112 ], [ 117.33904056100005, 8.698879299000112 ], [ 117.35962975400003, 8.73126862200013 ], [ 117.37598717500009, 8.746812242000146 ], [ 117.41773522200003, 8.759100653000189 ], [ 117.4355574880002, 8.77313873900016 ], [ 117.45036868600027, 8.791164455000171 ], [ 117.51978600400003, 8.899725653000246 ], [ 117.54379316500012, 8.925441799000112 ], [ 117.62273196700028, 8.991848049000112 ], [ 117.64014733200008, 9.020982164000259 ], [ 117.64771569100003, 9.042914130000213 ], [ 117.65552819100003, 9.057928778000132 ], [ 117.66863040500016, 9.066636460000098 ], [ 117.69190514400009, 9.069403387000193 ], [ 117.70443769600001, 9.079494533000229 ], [ 117.71225019600001, 9.081610419000128 ], [ 117.71566816500012, 9.072495835000268 ], [ 117.7197371750002, 9.065822658000116 ], [ 117.7295028000002, 9.064154364000103 ], [ 117.74073326900009, 9.065904039000202 ], [ 117.7500106130002, 9.069403387000193 ], [ 117.76189212300028, 9.077948309000192 ], [ 117.7680770190002, 9.086411851000037 ], [ 117.78052819100014, 9.120266018000109 ], [ 117.78239993600005, 9.122544664000145 ], [ 117.78785241000014, 9.127427476000207 ], [ 117.79127037900003, 9.134833075000245 ], [ 117.78931725400014, 9.142320054000209 ], [ 117.78402754000001, 9.15135325700021 ], [ 117.79656009200028, 9.163275458000157 ], [ 117.83668053500014, 9.188218492000146 ], [ 117.84986412900014, 9.192938544000242 ], [ 117.86646569100003, 9.203599351000094 ], [ 117.88998457100024, 9.250555731000247 ], [ 117.90447024800017, 9.261216539000202 ], [ 117.94499759200016, 9.256089585000154 ], [ 117.96631920700008, 9.257269598000164 ], [ 117.98951256600003, 9.267401434000249 ], [ 117.98804772200015, 9.255926825000188 ], [ 117.98959394600001, 9.246242580000171 ], [ 117.99447675900001, 9.238592841000184 ], [ 118.00318444100014, 9.233303127000227 ], [ 118.01636803500014, 9.24323151200025 ], [ 118.02588951900009, 9.253810940000165 ], [ 118.04468834700003, 9.281683661000045 ], [ 118.05437259200028, 9.291449286000102 ], [ 118.12696373800009, 9.337836005000213 ], [ 118.13355553500026, 9.343166408000116 ], [ 118.1352645190002, 9.351874091000184 ], [ 118.13103274800017, 9.373195705000228 ], [ 118.13355553500026, 9.384711005000213 ], [ 118.14820397200015, 9.396714585000211 ], [ 118.17156009200016, 9.407863674000168 ], [ 118.19288170700008, 9.421820380000099 ], [ 118.21631920700031, 9.477972723000221 ], [ 118.27719160200013, 9.51972077000022 ], [ 118.29769941500001, 9.554877020000106 ], [ 118.3261824880002, 9.579046942000105 ], [ 118.33277428500014, 9.58641185100015 ], [ 118.33497155000009, 9.591620184000192 ], [ 118.33961022200003, 9.59658437700017 ], [ 118.3442488940002, 9.60321686400016 ], [ 118.34644616000003, 9.613755601000207 ], [ 118.34546959700003, 9.636175848000107 ], [ 118.34913170700008, 9.645738023000206 ], [ 118.36011803500014, 9.658433335000268 ], [ 118.37175540500016, 9.654364325000188 ], [ 118.38233483200031, 9.657782294000128 ], [ 118.40113366000014, 9.672756252000227 ], [ 118.40845787900025, 9.676336981000134 ], [ 118.41529381600014, 9.677720445000205 ], [ 118.42025800900012, 9.680731512000193 ], [ 118.42432701900009, 9.697902736000231 ], [ 118.42945397200003, 9.700628973000107 ], [ 118.43620853000004, 9.701890367000203 ], [ 118.44263756600014, 9.706244208000101 ], [ 118.45085696700005, 9.715765692000105 ], [ 118.53052819100014, 9.77423737200013 ], [ 118.53760826900009, 9.785101630000042 ], [ 118.54835045700008, 9.812404690000108 ], [ 118.5957137380002, 9.857367255000213 ], [ 118.6064559250002, 9.874172268000223 ], [ 118.60824629000024, 9.885321356000247 ], [ 118.61312910200013, 9.900946356000247 ], [ 118.6206160820002, 9.916896877000227 ], [ 118.6572371750002, 9.965236721000053 ], [ 118.6679793630002, 9.974351304000209 ], [ 118.65650475400014, 9.996161200000188 ], [ 118.67359459700003, 10.011786200000188 ], [ 118.72250410200002, 10.035834052000212 ], [ 118.72885175900012, 10.045803127000227 ], [ 118.76368248800009, 10.120754299000225 ], [ 118.77165774800028, 10.130804755000156 ], [ 118.77662194100014, 10.099066473000107 ], [ 118.77662194100014, 10.08307526200025 ], [ 118.76783287900003, 10.076157945000205 ], [ 118.76295006600003, 10.06924062700017 ], [ 118.77947024800028, 10.056301174000112 ], [ 118.80111738400001, 10.049017645000276 ], [ 118.81185957100001, 10.05906810100015 ], [ 118.81478925900012, 10.067287502000113 ], [ 118.8212996750002, 10.073879299000112 ], [ 118.82829837300028, 10.079250393000279 ], [ 118.83236738400024, 10.083644924000168 ], [ 118.83765709700003, 10.095689195000261 ], [ 118.83863366000014, 10.099920966000184 ], [ 118.8364363940002, 10.102728583000214 ], [ 118.81771894600024, 10.136704820000261 ], [ 118.81234785200002, 10.152085679000209 ], [ 118.81185957100001, 10.17234935100015 ], [ 118.81576582100013, 10.188910223000107 ], [ 118.82227623800009, 10.194525458000101 ], [ 118.84294681100005, 10.192857164000259 ], [ 118.85515384200016, 10.196030992000146 ], [ 118.87533613400012, 10.210150458000101 ], [ 118.8911238940002, 10.213324286000159 ], [ 118.91846764400032, 10.208319403000189 ], [ 118.93360436300031, 10.209662177000098 ], [ 118.94971764400009, 10.220160223000221 ], [ 118.95834394600001, 10.235256252000227 ], [ 118.96013431100016, 10.252508856000247 ], [ 118.95671634200016, 10.269191799000112 ], [ 118.94971764400009, 10.28221263200021 ], [ 118.9565535820002, 10.284816799000112 ], [ 118.95948326900032, 10.28681061400016 ], [ 118.96265709700015, 10.286444403000132 ], [ 118.9702254570002, 10.28221263200021 ], [ 118.97925866000026, 10.292303778000246 ], [ 118.99341881600014, 10.300279039000145 ], [ 119.00945071700016, 10.306097723000164 ], [ 119.02475019600013, 10.309556382000096 ], [ 119.02173912900014, 10.325181382000267 ], [ 119.03003991000003, 10.338568427000268 ], [ 119.03394616000014, 10.349351304000095 ], [ 119.01791425900001, 10.357367255000099 ], [ 119.00814863400012, 10.353705145000163 ], [ 118.99594160200013, 10.346096096000224 ], [ 118.98438561300009, 10.344061591000184 ], [ 118.97641035200013, 10.357367255000099 ], [ 118.97974694100014, 10.368109442000105 ], [ 118.98975670700031, 10.383286851000094 ], [ 119.00196373800031, 10.397528387000193 ], [ 119.0117293630002, 10.405178127000227 ], [ 119.02751712300017, 10.407171942000105 ], [ 119.04395592500009, 10.404201565000278 ], [ 119.05933678500003, 10.398260809000249 ], [ 119.07203209700003, 10.391506252000113 ], [ 119.0791121750002, 10.404689846000053 ], [ 119.0791121750002, 10.415472723000221 ], [ 119.08432050900024, 10.422796942000275 ], [ 119.10670006600014, 10.425604559000135 ], [ 119.09961998800031, 10.438706773000263 ], [ 119.09058678500014, 10.445624091000241 ], [ 119.08448326900032, 10.452785549000225 ], [ 119.08570397200003, 10.466620184000135 ], [ 119.0913192070002, 10.473089911000102 ], [ 119.11109459700015, 10.480658270000106 ], [ 119.12037194100003, 10.487738348000221 ], [ 119.11850019600013, 10.476792710000154 ], [ 119.11703535200013, 10.472398179000095 ], [ 119.11353600400014, 10.466620184000135 ], [ 119.11882571700005, 10.454291083000101 ], [ 119.12720787900003, 10.394924221000224 ], [ 119.1352645190002, 10.388128973000164 ], [ 119.15284264400009, 10.398504950000245 ], [ 119.18181399800017, 10.425604559000135 ], [ 119.19206790500004, 10.447984117000146 ], [ 119.19556725400014, 10.453558661000045 ], [ 119.20264733200008, 10.457180080000114 ], [ 119.2119246750002, 10.459702867000203 ], [ 119.21998131600014, 10.463364976000094 ], [ 119.2299910820002, 10.485419012000193 ], [ 119.26392662900003, 10.494126695000261 ], [ 119.27808678500014, 10.508205471000167 ], [ 119.26840254000012, 10.519517320000261 ], [ 119.25562584700015, 10.53095123900016 ], [ 119.24724368600005, 10.542954820000261 ], [ 119.25074303500014, 10.555975653000132 ], [ 119.26954186300009, 10.54852936400016 ], [ 119.29078209700026, 10.557684637000136 ], [ 119.30909264400032, 10.574530341000241 ], [ 119.31910241000014, 10.590073960000154 ], [ 119.34498131600003, 10.723578192000218 ], [ 119.34205162900014, 10.736151434000135 ], [ 119.32960045700008, 10.751166083000157 ], [ 119.32545006600026, 10.757513739000103 ], [ 119.32178795700008, 10.765611070000148 ], [ 119.3169051440002, 10.772691148000263 ], [ 119.30909264400032, 10.775702216000184 ], [ 119.30201256600014, 10.772853908000229 ], [ 119.29167728000027, 10.762111721000224 ], [ 119.28484134200005, 10.762030341000241 ], [ 119.2739363940002, 10.77167389500022 ], [ 119.27027428500014, 10.784898179000152 ], [ 119.27125084700015, 10.812933661000102 ], [ 119.2661238940002, 10.826605536000216 ], [ 119.25359134200016, 10.837469794000128 ], [ 119.2378035820002, 10.845404364000274 ], [ 119.22339928500026, 10.850816148000206 ], [ 119.25261478000016, 10.887274481000247 ], [ 119.25757897200015, 10.891099351000207 ], [ 119.24927819100026, 10.902329820000261 ], [ 119.23633873800009, 10.908433334999984 ], [ 119.22877037900003, 10.916245835000154 ], [ 119.23707116000014, 10.932684637000136 ], [ 119.22250410200013, 10.94171784100007 ], [ 119.23194420700008, 10.951157945000261 ], [ 119.24724368600005, 10.94977448100019 ], [ 119.25074303500014, 10.925930080000228 ], [ 119.25757897200015, 10.925930080000228 ], [ 119.25896243600005, 10.930080471000167 ], [ 119.26441491000026, 10.939601955000171 ], [ 119.26832116000014, 10.931789455000171 ], [ 119.27312259200005, 10.927476304000095 ], [ 119.27857506600014, 10.927557684000249 ], [ 119.28484134200005, 10.932684637000136 ], [ 119.29167728000027, 10.932684637000136 ], [ 119.28785241000014, 10.920558986000231 ], [ 119.28516686300009, 10.917466539000259 ], [ 119.27808678500014, 10.912827867000146 ], [ 119.29167728000027, 10.88495514500022 ], [ 119.27125084700015, 10.88495514500022 ], [ 119.27808678500014, 10.874945380000213 ], [ 119.2885848320002, 10.871527411000102 ], [ 119.30079186300009, 10.873114325000131 ], [ 119.31283613400001, 10.878119208000101 ], [ 119.30583743600027, 10.85712311400016 ], [ 119.30982506600014, 10.847316799000112 ], [ 119.3203231130002, 10.839260158000116 ], [ 119.33326256600014, 10.823472398000149 ], [ 119.33952884200028, 10.823472398000149 ], [ 119.33952884200028, 10.830959377000113 ], [ 119.34693444100026, 10.830959377000113 ], [ 119.3515731130002, 10.81073639499999 ], [ 119.36817467500009, 10.801336981000134 ], [ 119.38640384200016, 10.793687242000203 ], [ 119.39470462300017, 10.778794664000259 ], [ 119.39795983200008, 10.768215236000117 ], [ 119.40495853000004, 10.762355861000174 ], [ 119.41211998800009, 10.761379299000225 ], [ 119.41871178500026, 10.769924221000224 ], [ 119.42611738400024, 10.762640692000218 ], [ 119.43327884200016, 10.752346096000167 ], [ 119.43946373800009, 10.74042389500022 ], [ 119.44109134200016, 10.732733466000127 ], [ 119.44507897200015, 10.727484442000161 ], [ 119.45679772200026, 10.727280992000203 ], [ 119.46753991000026, 10.732652085000268 ], [ 119.46949303500003, 10.74103424700013 ], [ 119.46566816500012, 10.750230210000097 ], [ 119.45997155000032, 10.75828685100015 ], [ 119.44597415500016, 10.789374091000127 ], [ 119.43970787900014, 10.796047268000109 ], [ 119.44418379000001, 10.810614325000017 ], [ 119.45240319100026, 10.824937242000203 ], [ 119.45679772200026, 10.830959377000113 ], [ 119.44988040500004, 10.841294664000202 ], [ 119.4350692070002, 10.852240302000098 ], [ 119.41822350400025, 10.860907294000242 ], [ 119.40495853000004, 10.864447333000157 ], [ 119.38795006600026, 10.864691473000107 ], [ 119.3701278000002, 10.86774323100019 ], [ 119.35523522200015, 10.877752997000073 ], [ 119.34693444100026, 10.898586330000171 ], [ 119.3486434250002, 10.908026434000192 ], [ 119.35906009200028, 10.927679755000099 ], [ 119.36060631600014, 10.932684637000136 ], [ 119.35173587300017, 10.934759833000101 ], [ 119.33773847700013, 10.932928778000189 ], [ 119.3247176440002, 10.933498440000108 ], [ 119.31910241000014, 10.943019924000282 ], [ 119.31999759200016, 11.000881252000113 ], [ 119.32593834700003, 11.015285549000225 ], [ 119.32593834700003, 11.022772528000189 ], [ 119.33326256600014, 11.022772528000189 ], [ 119.33521569100014, 11.011542059000135 ], [ 119.34058678500026, 11.004055080000171 ], [ 119.34888756600003, 11.000433661000102 ], [ 119.36060631600014, 11.000962632000096 ], [ 119.35279381600014, 11.023586330000228 ], [ 119.32740319100014, 11.064439195000261 ], [ 119.32593834700003, 11.090399481000247 ], [ 119.33497155000032, 11.102932033000172 ], [ 119.34791100400014, 11.089178778000246 ], [ 119.36264082100013, 11.067572333000157 ], [ 119.37728925900024, 11.056219794000242 ], [ 119.38754316500001, 11.054022528000189 ], [ 119.39714603000016, 11.050279039000145 ], [ 119.40609785200002, 11.049546617000146 ], [ 119.41529381600014, 11.056219794000242 ], [ 119.41879316500024, 11.067857164000202 ], [ 119.41871178500026, 11.095607815000221 ], [ 119.43213951900009, 11.122219143000109 ], [ 119.42611738400024, 11.133937893 ], [ 119.41716556100016, 11.140326239000103 ], [ 119.41529381600014, 11.138820705000228 ], [ 119.39877363400012, 11.159247137000136 ], [ 119.3921004570002, 11.171372789000145 ], [ 119.38795006600026, 11.186590887000193 ], [ 119.40072675900012, 11.185370184000192 ], [ 119.41334069100003, 11.196682033000229 ], [ 119.42359459700003, 11.213202216000127 ], [ 119.42896569100003, 11.22752513200021 ], [ 119.42839603000004, 11.249823309000192 ], [ 119.42058353000004, 11.297552802000212 ], [ 119.42554772200015, 11.313544012000136 ], [ 119.43018639400009, 11.318426825000302 ], [ 119.43344160200013, 11.322658596000224 ], [ 119.4350692070002, 11.327378648000149 ], [ 119.43580162900003, 11.333970445000261 ], [ 119.43873131600003, 11.337958075000188 ], [ 119.4448348320002, 11.337836005000213 ], [ 119.44988040500004, 11.334906317000105 ], [ 119.44939212300017, 11.33063385600019 ], [ 119.46550540500016, 11.346828518000223 ], [ 119.47380618600016, 11.357855536000102 ], [ 119.47730553500003, 11.368475653000132 ], [ 119.47999108200008, 11.396185614000217 ], [ 119.4843856130002, 11.410549221000167 ], [ 119.49105879000001, 11.420884507000153 ], [ 119.50196373800009, 11.423325914000145 ], [ 119.50904381600014, 11.41307200700021 ], [ 119.51295006600014, 11.397772528000246 ], [ 119.51441491000014, 11.385443427000155 ], [ 119.51449629000012, 11.367661851000094 ], [ 119.51539147200015, 11.361761786000159 ], [ 119.5185653000002, 11.350775458000101 ], [ 119.5229598320002, 11.339911200000188 ] ] ], [ [ [ 119.87614993600027, 11.479641018000109 ], [ 119.86980228000016, 11.440619208000101 ], [ 119.85352623800031, 11.404730536000216 ], [ 119.83285566500001, 11.378363348000107 ], [ 119.82203209700003, 11.387396552000212 ], [ 119.82056725400014, 11.399603583000101 ], [ 119.82545006600003, 11.413153387000193 ], [ 119.83285566500001, 11.426174221000167 ], [ 119.82064863400012, 11.426418361000117 ], [ 119.80396569100003, 11.431626695000261 ], [ 119.7954207690002, 11.433010158000286 ], [ 119.78907311300009, 11.420355536000216 ], [ 119.78207441500012, 11.411322333000214 ], [ 119.77084394600001, 11.406317450000245 ], [ 119.7700301440002, 11.41063060100015 ], [ 119.76368248800031, 11.419826565000221 ], [ 119.75513756600003, 11.428900458000214 ], [ 119.74732506600003, 11.433010158000286 ], [ 119.73609459700015, 11.437404690000221 ], [ 119.73023522200026, 11.456447658000229 ], [ 119.71615644600024, 11.460353908000172 ], [ 119.72868899800017, 11.478013414000259 ], [ 119.74138431100016, 11.469061591000241 ], [ 119.75513756600003, 11.450832424000168 ], [ 119.77084394600001, 11.440415757000096 ], [ 119.78101647200003, 11.447699286000102 ], [ 119.78419030000009, 11.464789130000099 ], [ 119.7851668630002, 11.494452216000241 ], [ 119.79273522200015, 11.484808661000159 ], [ 119.80298912900014, 11.468003648000149 ], [ 119.81251061300031, 11.460353908000172 ], [ 119.81788170700008, 11.470038153000189 ], [ 119.82357832100013, 11.472560940000108 ], [ 119.82886803500026, 11.468898830000171 ], [ 119.83285566500001, 11.460353908000172 ], [ 119.84009850400014, 11.475653387000136 ], [ 119.84449303500003, 11.490668036000159 ], [ 119.84148196700016, 11.502590236000174 ], [ 119.82601972700013, 11.508734442000161 ], [ 119.83725019600001, 11.515611070000148 ], [ 119.84839928500003, 11.520656643000109 ], [ 119.8584090500002, 11.521429755000099 ], [ 119.8671981130002, 11.515570380000156 ], [ 119.87614993600027, 11.479641018000109 ] ] ], [ [ [ 124.44312584700003, 11.446926174000225 ], [ 124.48015384200016, 11.385199286000159 ], [ 124.48365319100003, 11.427679755000213 ], [ 124.48959394600013, 11.446682033000229 ], [ 124.50326582100013, 11.44383372600015 ], [ 124.53370201900032, 11.421698309000192 ], [ 124.54525800900024, 11.40900299700013 ], [ 124.56967207100001, 11.346828518000223 ], [ 124.5942488940002, 11.319525458000157 ], [ 124.6298934250002, 11.304429429000152 ], [ 124.67798912900025, 11.302679755000156 ], [ 124.71338951900032, 11.31159088700025 ], [ 124.74439537900014, 11.328558661000159 ], [ 124.79411868600027, 11.371527411000216 ], [ 124.83277428500003, 11.424505927000155 ], [ 124.8457137380002, 11.433010158000286 ], [ 124.85466556100005, 11.430975653000246 ], [ 124.87484785200002, 11.422023830000228 ], [ 124.88689212300017, 11.419989325000188 ], [ 124.89063561300031, 11.422023830000228 ], [ 124.89014733200031, 11.430975653000246 ], [ 124.89372806100016, 11.433010158000286 ], [ 124.90015709700003, 11.430975653000246 ], [ 124.90333092500009, 11.426459052000212 ], [ 124.9043074880002, 11.422023830000228 ], [ 124.90398196700016, 11.419989325000188 ], [ 124.92969811300009, 11.421291408000172 ], [ 124.93816165500004, 11.419989325000188 ], [ 124.94800866000014, 11.413967190000108 ], [ 124.9697371750002, 11.395819403000189 ], [ 124.97632897200015, 11.392035223000221 ], [ 124.98414147200015, 11.381333726000037 ], [ 124.98218834700015, 11.357896226000094 ], [ 124.97559655000009, 11.334418036000102 ], [ 124.9663192070002, 11.318304755000099 ], [ 124.96517988400012, 11.306382554000152 ], [ 124.9663192070002, 11.294419664000145 ], [ 124.96949303500026, 11.289007880000213 ], [ 124.97217858200008, 11.287095445000148 ], [ 124.97396894600013, 11.277085679000095 ], [ 124.97632897200015, 11.272609768000166 ], [ 124.9814559250002, 11.267971096000281 ], [ 124.98454837300017, 11.26618073100019 ], [ 124.98780358200031, 11.264878648000206 ], [ 124.99333743600016, 11.261664130000156 ], [ 125.00521894600001, 11.257147528000189 ], [ 125.01392662900014, 11.256659247000186 ], [ 125.01937910200013, 11.252590236000231 ], [ 125.02344811300009, 11.227932033000229 ], [ 125.02808678500003, 11.228501695000261 ], [ 125.03256269600013, 11.236273505000099 ], [ 125.03443444100014, 11.248032945000205 ], [ 125.04175866000014, 11.248032945000205 ], [ 125.04273522200003, 11.217027085000154 ], [ 125.04175866000014, 11.207098700000131 ], [ 125.03874759200005, 11.197943426999984 ], [ 125.02947024800028, 11.182074286000159 ], [ 125.02759850400014, 11.176011460000154 ], [ 125.02963300900012, 11.16445547100011 ], [ 125.03956139400009, 11.144761460000154 ], [ 125.04175866000014, 11.135402736000174 ], [ 125.03980553500014, 11.103461005000042 ], [ 125.05445397200003, 11.010646877000113 ], [ 125.05307050900012, 10.968207098000221 ], [ 125.01286868600005, 10.844671942000218 ], [ 125.00611412900014, 10.797349351000094 ], [ 125.01384524800005, 10.754584052000098 ], [ 125.02719160200013, 10.742905992000203 ], [ 125.08725019600024, 10.714789130000099 ], [ 125.11198978000016, 10.707464911000102 ], [ 125.12029056100016, 10.703070380000213 ], [ 125.12403405000032, 10.695135809000135 ], [ 125.13054446700016, 10.665838934000192 ], [ 125.16993248800009, 10.619614976000094 ], [ 125.17457116000003, 10.611232815000164 ], [ 125.19410241000014, 10.602972723000278 ], [ 125.1958113940002, 10.58258698100019 ], [ 125.18523196700005, 10.532375393000223 ], [ 125.18726647200015, 10.519680080000228 ], [ 125.19662519600001, 10.497544664000145 ], [ 125.19874108200031, 10.484279690000221 ], [ 125.19654381600003, 10.446844794000128 ], [ 125.19874108200031, 10.433050848000107 ], [ 125.20573978000004, 10.418605861000117 ], [ 125.21892337300005, 10.398382880000099 ], [ 125.23218834700026, 10.386867580000171 ], [ 125.23975670700031, 10.398342190000108 ], [ 125.2465926440002, 10.398342190000108 ], [ 125.25912519600013, 10.38320547100011 ], [ 125.2666121750002, 10.368394273000149 ], [ 125.2710067070002, 10.349839585000211 ], [ 125.2739363940002, 10.323187567000218 ], [ 125.27588951900009, 10.300360419000128 ], [ 125.27328535200002, 10.277980861000287 ], [ 125.26002037900014, 10.261053778000303 ], [ 125.22925866000026, 10.254339911000159 ], [ 125.15935306100005, 10.28180573100019 ], [ 125.14087975400003, 10.278794664000202 ], [ 125.13404381600003, 10.257961330000228 ], [ 125.13672936300009, 10.228583075000131 ], [ 125.14405358200008, 10.200995184000192 ], [ 125.15105228000027, 10.185451565000108 ], [ 125.11703535200013, 10.197495835000097 ], [ 125.08855228000016, 10.228989976000094 ], [ 125.0688582690002, 10.267238674000225 ], [ 125.06169681100005, 10.299302476000207 ], [ 125.04664147200003, 10.319322007000096 ], [ 125.0449324880002, 10.323187567000218 ], [ 125.04151451900032, 10.32859935100015 ], [ 125.04175866000014, 10.364203192000218 ], [ 125.03003991000014, 10.37539297100011 ], [ 125.01042728000004, 10.383042710000097 ], [ 124.99097741000014, 10.381333726000094 ], [ 124.97974694100003, 10.364203192000218 ], [ 124.99301191500012, 10.334906317000105 ], [ 125.00017337300017, 10.199693101000207 ], [ 125.02426191500001, 10.136053778000189 ], [ 125.03060957100013, 10.093939520000163 ], [ 125.04224694100014, 10.049017645000276 ], [ 125.04175866000014, 10.028998114000217 ], [ 125.03174889400009, 10.020249742000203 ], [ 125.01531009200016, 10.026109117000146 ], [ 124.96216881600026, 10.067328192000105 ], [ 124.95923912900014, 10.072739976000094 ], [ 124.9541121750002, 10.086127020000163 ], [ 124.94206790500016, 10.091701565000164 ], [ 124.9282332690002, 10.093898830000171 ], [ 124.91773522200015, 10.097316799000112 ], [ 124.90211022200015, 10.113023179000265 ], [ 124.89389082100013, 10.126044012000136 ], [ 124.88282311300031, 10.134955145000163 ], [ 124.85962975400014, 10.138251044000128 ], [ 124.81519616000003, 10.139390367000146 ], [ 124.79517662900003, 10.143377997000243 ], [ 124.78044681100016, 10.151922919000242 ], [ 124.76579837300017, 10.18593984600011 ], [ 124.77198326900009, 10.22516510600019 ], [ 124.7856551440002, 10.265529690000221 ], [ 124.79411868600027, 10.302720445000148 ], [ 124.79224694100003, 10.325669664000145 ], [ 124.78484134200005, 10.352728582999987 ], [ 124.7710067070002, 10.375311591000127 ], [ 124.74976647200003, 10.384670315000164 ], [ 124.73894290500016, 10.395453192000161 ], [ 124.73560631600003, 10.420314846000224 ], [ 124.7368270190002, 10.447739976000094 ], [ 124.74398847700024, 10.493719794000242 ], [ 124.74634850400003, 10.501369533000172 ], [ 124.75147545700031, 10.509955145000163 ], [ 124.76482181100005, 10.525864976000207 ], [ 124.76734459700015, 10.532375393000223 ], [ 124.7685653000002, 10.577337958000101 ], [ 124.77230879000001, 10.59735748900016 ], [ 124.79810631600014, 10.659125067000105 ], [ 124.80095462300017, 10.678290106000134 ], [ 124.80054772200026, 10.724514065000164 ], [ 124.77881920700031, 10.821437893000109 ], [ 124.77361087300017, 10.830959377000113 ], [ 124.73812910200013, 10.86151764500022 ], [ 124.73267662900003, 10.86815013200021 ], [ 124.72836347700002, 10.886419989000103 ], [ 124.71802819100026, 10.905585028000132 ], [ 124.69174238400024, 10.939601955000171 ], [ 124.65015709700015, 10.970892645000106 ], [ 124.64332116000026, 10.977443752000113 ], [ 124.6372176440002, 10.994208075000131 ], [ 124.62232506600003, 11.002020575000131 ], [ 124.60238691500012, 11.003485419000185 ], [ 124.58253014400032, 11.000962632000096 ], [ 124.56267337300017, 10.994330145000106 ], [ 124.54957116000014, 10.983303127000227 ], [ 124.5468856130002, 10.968329169000128 ], [ 124.55827884200005, 10.950140692000218 ], [ 124.56275475400003, 10.931463934000135 ], [ 124.55355879000012, 10.908596096000224 ], [ 124.53923587300005, 10.888373114000103 ], [ 124.52784264400009, 10.878119208000101 ], [ 124.51449629000001, 10.873683986000117 ], [ 124.50733483200031, 10.874416408000172 ], [ 124.47071373800031, 10.902411200000245 ], [ 124.46924889400032, 10.905462958000157 ], [ 124.45264733200008, 10.900783596000224 ], [ 124.44695071700016, 10.90314362200013 ], [ 124.4423934250002, 10.931219794000185 ], [ 124.43685957100013, 10.935207424000112 ], [ 124.4248153000002, 10.932684637000136 ], [ 124.41260826900009, 10.932318427000212 ], [ 124.40211022200026, 10.929836330000114 ], [ 124.3960067070002, 10.934068101000207 ], [ 124.39682050900001, 10.953802801999984 ], [ 124.40162194100003, 10.966538804000209 ], [ 124.41488691500012, 10.984849351000094 ], [ 124.4179793630002, 11.000962632000096 ], [ 124.41537519600001, 11.019964911000159 ], [ 124.4082137380002, 11.028876044000185 ], [ 124.39877363400024, 11.036078192000161 ], [ 124.38998457100013, 11.049465236000231 ], [ 124.38843834700026, 11.065863348000221 ], [ 124.39380944100003, 11.080511786000216 ], [ 124.40072675900001, 11.09259674700013 ], [ 124.40650475400025, 11.108303127000113 ], [ 124.41578209700015, 11.12181224200009 ], [ 124.4179793630002, 11.128566799000225 ], [ 124.41675866000003, 11.136175848000164 ], [ 124.41163170700008, 11.148016669000128 ], [ 124.40430748800009, 11.210760809000192 ], [ 124.40430748800009, 11.302679755000156 ], [ 124.38705488400012, 11.300726630000099 ], [ 124.3691512380002, 11.311224677000155 ], [ 124.35474694100026, 11.328680731000134 ], [ 124.3491317070002, 11.347357489000217 ], [ 124.35230553500003, 11.355902411000216 ], [ 124.36695397200015, 11.365871486000231 ], [ 124.37029056100005, 11.374945380000099 ], [ 124.35425866000014, 11.379828192000161 ], [ 124.3422957690002, 11.384955145000106 ], [ 124.33472741000026, 11.392035223000221 ], [ 124.34848066500012, 11.399115302000098 ], [ 124.34498131600003, 11.407375393000109 ], [ 124.3349715500002, 11.417385158000116 ], [ 124.3291121750002, 11.429592190000278 ], [ 124.32593834700015, 11.444403387000136 ], [ 124.31137129000001, 11.466782945000148 ], [ 124.29753665500016, 11.526800848000164 ], [ 124.30062910200013, 11.542873440000051 ], [ 124.3051863940002, 11.544256903000246 ], [ 124.32601972700013, 11.554388739000103 ], [ 124.3291121750002, 11.55711497600015 ], [ 124.34009850400014, 11.551011460000154 ], [ 124.36589603000016, 11.515936591000184 ], [ 124.4248153000002, 11.467759507000153 ], [ 124.44312584700003, 11.446926174000225 ] ] ], [ [ [ 124.43091881600014, 11.695054429000152 ], [ 124.46908613400012, 11.69281647300005 ], [ 124.49586022200015, 11.694769598000107 ], [ 124.50538170700008, 11.693060614000103 ], [ 124.52320397200015, 11.686265367000146 ], [ 124.54167728000016, 11.675197658000229 ], [ 124.55600019600001, 11.660223700000302 ], [ 124.56714928500014, 11.625230210000211 ], [ 124.59164472700013, 11.574123440000221 ], [ 124.59961998800009, 11.563381252000113 ], [ 124.62142988400012, 11.553900458000101 ], [ 124.6250106130002, 11.532700914000202 ], [ 124.61597741000014, 11.498195705000114 ], [ 124.60914147200015, 11.486558335000154 ], [ 124.59245853000016, 11.481634833000101 ], [ 124.53239993600005, 11.482570705000114 ], [ 124.50709069100003, 11.488836981000247 ], [ 124.48633873800009, 11.488226630000099 ], [ 124.48357181100005, 11.479681708000101 ], [ 124.47974694100014, 11.474676825000131 ], [ 124.4726668630002, 11.473944403000132 ], [ 124.46713300900012, 11.477728583000214 ], [ 124.46371504000012, 11.483872789000202 ], [ 124.46143639400009, 11.490179755000156 ], [ 124.45883222700024, 11.494452216000241 ], [ 124.4248153000002, 11.529242255000099 ], [ 124.41325931100016, 11.546454169000128 ], [ 124.38648522200003, 11.614488023000149 ], [ 124.38062584700015, 11.636704820000148 ], [ 124.3764754570002, 11.645900783000116 ], [ 124.35499108200008, 11.671210028000132 ], [ 124.3491317070002, 11.680080471000167 ], [ 124.36866295700031, 11.678941148000149 ], [ 124.4179793630002, 11.693670966000127 ], [ 124.43091881600014, 11.695054429000152 ] ] ], [ [ [ 124.85621178500003, 11.604925848000107 ], [ 124.85222415500016, 11.594427802000098 ], [ 124.8501082690002, 11.583726304000209 ], [ 124.84937584700026, 11.560248114000217 ], [ 124.84603925900024, 11.548773505000156 ], [ 124.8388778000002, 11.540025132000096 ], [ 124.8315535820002, 11.536322333000101 ], [ 124.80787194100026, 11.563381252000113 ], [ 124.80990644600001, 11.566839911000216 ], [ 124.80876712300017, 11.577337958000101 ], [ 124.80201256600014, 11.582464911000159 ], [ 124.78785241000014, 11.570217190000108 ], [ 124.77361087300017, 11.604925848000107 ], [ 124.7807723320002, 11.602240302000098 ], [ 124.78785241000014, 11.598089911000159 ], [ 124.78541100400014, 11.614325262000136 ], [ 124.77605228000004, 11.629828192000105 ], [ 124.76295006600014, 11.64134349200026 ], [ 124.74976647200003, 11.645900783000116 ], [ 124.74057050900024, 11.650620835000211 ], [ 124.73617597700002, 11.661688544000128 ], [ 124.73340905000032, 11.674302476000037 ], [ 124.72925866000014, 11.683417059000192 ], [ 124.72242272200015, 11.693264065000164 ], [ 124.7226668630002, 11.70156484600011 ], [ 124.73267662900003, 11.721625067000161 ], [ 124.73951256600014, 11.721625067000161 ], [ 124.74089603000027, 11.719712632000153 ], [ 124.75123131600003, 11.708889065000108 ], [ 124.78484134200005, 11.688706773000206 ], [ 124.78939863400024, 11.684881903000246 ], [ 124.79297936300031, 11.680365302000212 ], [ 124.79476972700002, 11.674709377000227 ], [ 124.79623457100013, 11.667792059000249 ], [ 124.79908287900003, 11.662014065000164 ], [ 124.81373131600003, 11.655340887000136 ], [ 124.81657962300017, 11.646063544000185 ], [ 124.81519616000003, 11.632269598000164 ], [ 124.8217879570002, 11.621486721000167 ], [ 124.82862389400009, 11.613430080000114 ], [ 124.8388778000002, 11.607855536000216 ], [ 124.85621178500003, 11.604925848000107 ] ] ], [ [ [ 121.52605228000016, 11.846584377000227 ], [ 121.51742597700013, 11.837713934000192 ], [ 121.49537194100026, 11.827826239000217 ], [ 121.47291100400014, 11.827378648000206 ], [ 121.45582116000003, 11.831732489000103 ], [ 121.44548587300017, 11.83612702 ], [ 121.43995201900009, 11.836737372000243 ], [ 121.4350692070002, 11.839056708000101 ], [ 121.43091881600003, 11.84345123900016 ], [ 121.42628014400009, 11.842433986000117 ], [ 121.41797936300009, 11.837795315000108 ], [ 121.4126082690002, 11.840277411000102 ], [ 121.41570071700005, 11.849514065000164 ], [ 121.42562910200002, 11.861232815000108 ], [ 121.4428817070002, 11.867987372000186 ], [ 121.45297285200013, 11.868312893000223 ], [ 121.47413170700008, 11.866848049000168 ], [ 121.51050866000026, 11.855943101000094 ], [ 121.52605228000016, 11.846584377000227 ] ] ], [ [ [ 122.30014082100013, 11.761948960000154 ], [ 122.32211347700013, 11.742254950000131 ], [ 122.33611087300028, 11.736639716000184 ], [ 122.37720787900014, 11.73322174700013 ], [ 122.38795006600014, 11.727443752000113 ], [ 122.42798912900014, 11.66876862200013 ], [ 122.44076582100001, 11.657456773000206 ], [ 122.45411217500009, 11.65273672100011 ], [ 122.46534264400009, 11.645249742000146 ], [ 122.51246178500003, 11.598089911000159 ], [ 122.57227623800009, 11.574937242000203 ], [ 122.58814537900014, 11.563381252000113 ], [ 122.59221438900022, 11.554266669000128 ], [ 122.5947371750002, 11.548570054000152 ], [ 122.59750410200002, 11.531805731000134 ], [ 122.60417728000016, 11.517075914000202 ], [ 122.62232506600014, 11.508734442000161 ], [ 122.62842858200008, 11.510402736000174 ], [ 122.64128665500027, 11.52008698100019 ], [ 122.65447024800005, 11.526068427000212 ], [ 122.65430748800009, 11.534409898000206 ], [ 122.6508895190002, 11.543605861000174 ], [ 122.64966881600014, 11.54970937700017 ], [ 122.65414472700002, 11.565985419000185 ], [ 122.66041100400014, 11.568752346000224 ], [ 122.67359459700015, 11.560248114000217 ], [ 122.6860457690002, 11.545843817000275 ], [ 122.69263756600003, 11.542466539000259 ], [ 122.70427493600016, 11.542873440000051 ], [ 122.69410241000014, 11.555324611000231 ], [ 122.69564863400001, 11.561346747000073 ], [ 122.70313561300009, 11.565008856000134 ], [ 122.71111087300005, 11.570217190000108 ], [ 122.73080488400001, 11.592230536000216 ], [ 122.7334090500002, 11.601304429000209 ], [ 122.73031660200013, 11.604437567000105 ], [ 122.72803795700031, 11.607855536000216 ], [ 122.72478274800005, 11.611761786000102 ], [ 122.7553817070002, 11.613836981000134 ], [ 122.79395592500032, 11.612290757000096 ], [ 122.83033287900014, 11.605292059000135 ], [ 122.85499108200031, 11.591253973000164 ], [ 122.86345462300017, 11.576157945000261 ], [ 122.8686629570002, 11.560451565000108 ], [ 122.87484785200024, 11.54791901200025 ], [ 122.88640384200005, 11.542873440000051 ], [ 122.90015709700015, 11.540676174000168 ], [ 122.94450931100005, 11.522406317000105 ], [ 122.89429772200003, 11.487209377000227 ], [ 122.87582441500001, 11.46564362200013 ], [ 122.87614993600016, 11.447251695000261 ], [ 122.90072675900024, 11.437933661000216 ], [ 122.92774498800009, 11.451117255000156 ], [ 122.95541425900012, 11.470689195000261 ], [ 122.98170006600014, 11.480780341000127 ], [ 123.00806725400003, 11.48729075700021 ], [ 123.04420006600014, 11.515855210000097 ], [ 123.08961022200003, 11.52968984600011 ], [ 123.11784915500016, 11.548163153000132 ], [ 123.14234459700003, 11.572699286000159 ], [ 123.15674889400009, 11.598089911000159 ], [ 123.1635848320002, 11.598089911000159 ], [ 123.16439863400024, 11.537990627000113 ], [ 123.15674889400009, 11.522406317000105 ], [ 123.14909915500027, 11.519354559000192 ], [ 123.13786868600016, 11.518011786000216 ], [ 123.12728925900001, 11.515448309000305 ], [ 123.12208092500032, 11.508734442000161 ], [ 123.12322024800005, 11.498724677000155 ], [ 123.12924238400024, 11.493801174000225 ], [ 123.13884524800017, 11.492743231000134 ], [ 123.14991295700008, 11.494452216000241 ], [ 123.14039147200026, 11.479315497000243 ], [ 123.14812259200028, 11.476955471000224 ], [ 123.1704207690002, 11.480780341000127 ], [ 123.1748153000002, 11.467474677000212 ], [ 123.16928144600013, 11.453599351000207 ], [ 123.16114342500009, 11.438950914000259 ], [ 123.15674889400009, 11.423081773000263 ], [ 123.16089928500003, 11.394354559000135 ], [ 123.16041100400014, 11.380438544000242 ], [ 123.1494246750002, 11.361883856000134 ], [ 123.14926191500024, 11.356350002000227 ], [ 123.14771569100026, 11.352484442000105 ], [ 123.12916100400025, 11.349351304000209 ], [ 123.12566165500016, 11.344875393000166 ], [ 123.12476647200003, 11.338324286000159 ], [ 123.12208092500032, 11.33063385600019 ], [ 123.12387129000001, 11.329291082999987 ], [ 123.12208092500032, 11.302679755000156 ], [ 123.12134850400003, 11.3015811220003 ], [ 123.11589603000004, 11.282171942000161 ], [ 123.11353600400003, 11.266669012000193 ], [ 123.11589603000004, 11.230658270000106 ], [ 123.11890709700026, 11.22150299700013 ], [ 123.1259871750002, 11.216782945000205 ], [ 123.13306725400014, 11.210435289000259 ], [ 123.1362410820002, 11.196519273000263 ], [ 123.1313582690002, 11.182684637000136 ], [ 123.1113387380002, 11.168036200000188 ], [ 123.10824629000012, 11.151800848000164 ], [ 123.08562259200005, 11.162543036000102 ], [ 123.06088300900012, 11.169419664000259 ], [ 123.04127037900003, 11.163397528000246 ], [ 123.0283309250002, 11.10984935100015 ], [ 123.01490319100014, 11.091620184000078 ], [ 122.99537194100014, 11.078802802000212 ], [ 122.9716903000002, 11.069891669000015 ], [ 122.9770613940002, 11.05703359600011 ], [ 122.97242272200026, 11.04901764500022 ], [ 122.9506942070002, 11.035793361000117 ], [ 122.95240319100026, 11.046087958000214 ], [ 122.9516707690002, 11.055731512000193 ], [ 122.94727623800009, 11.062323309000135 ], [ 122.93824303500014, 11.063666083000214 ], [ 122.93336022200015, 11.058417059000249 ], [ 122.93034915500016, 11.036851304000152 ], [ 122.92457116000003, 11.028957424000168 ], [ 122.91407311300009, 11.026271877000113 ], [ 122.90739993600016, 11.029730536000216 ], [ 122.9004012380002, 11.034491278000132 ], [ 122.88990319100026, 11.035793361000117 ], [ 122.88502037900025, 11.033189195000261 ], [ 122.86255944100026, 11.015285549000225 ], [ 122.86255944100026, 11.028957424000168 ], [ 122.83912194100003, 11.018052476000094 ], [ 122.8120223320002, 10.998480536000216 ], [ 122.78931725400003, 10.976060289000145 ], [ 122.78003991000026, 10.956935940000051 ], [ 122.78516686300009, 10.925685940000108 ], [ 122.79428144600013, 10.900539455000171 ], [ 122.79802493600005, 10.875433661000216 ], [ 122.78687584700015, 10.844549872000243 ], [ 122.76148522200015, 10.81073639499999 ], [ 122.74480228000016, 10.79564036700026 ], [ 122.72852623800009, 10.789374091000127 ], [ 122.71900475400014, 10.79148997600015 ], [ 122.70240319100014, 10.800848700000188 ], [ 122.69410241000014, 10.802964585000154 ], [ 122.6865340500002, 10.800848700000188 ], [ 122.66675866000003, 10.789374091000127 ], [ 122.65552819100014, 10.787014065000108 ], [ 122.64275149800017, 10.781236070000318 ], [ 122.63062584700026, 10.774359442000105 ], [ 122.6147567070002, 10.761460679000209 ], [ 122.61003665500004, 10.756089585000211 ], [ 122.60124759200005, 10.740952867000146 ], [ 122.60303795700031, 10.738755601000207 ], [ 122.60596764400009, 10.734035549000112 ], [ 122.60499108200008, 10.727728583000214 ], [ 122.59498131600003, 10.721096096000224 ], [ 122.58985436300009, 10.698716539000316 ], [ 122.54468834700003, 10.689846096000224 ], [ 122.45101972700002, 10.686346747000186 ], [ 122.36540774800017, 10.672674872000243 ], [ 122.35718834700003, 10.67039622600015 ], [ 122.34359785200002, 10.66063060100015 ], [ 122.33838951900009, 10.65839264500022 ], [ 122.30404707100024, 10.659735419000128 ], [ 122.29330488400012, 10.65839264500022 ], [ 122.28239993600016, 10.654038804000152 ], [ 122.2685653000002, 10.642726955000228 ], [ 122.25928795700008, 10.637884833000157 ], [ 122.24854576900009, 10.637925523000149 ], [ 122.23755944100003, 10.641424872000243 ], [ 122.2265731130002, 10.642238674000112 ], [ 122.21452884200005, 10.634466864000103 ], [ 122.17359459700003, 10.600653387000193 ], [ 122.16195722700002, 10.593736070000261 ], [ 122.15202884200016, 10.59235260600019 ], [ 122.1416121750002, 10.592433986000174 ], [ 122.1289168630002, 10.590073960000154 ], [ 122.10181725400003, 10.569322007000267 ], [ 122.0395613940002, 10.466620184000135 ], [ 122.03321373800009, 10.460923570000205 ], [ 122.01579837300017, 10.445461330000228 ], [ 121.98210696700016, 10.430243231000247 ], [ 121.9497176440002, 10.433172919000185 ], [ 121.92969811300009, 10.466620184000135 ], [ 121.93246504000001, 10.50869375200017 ], [ 121.9721785820002, 10.582098700000188 ], [ 121.98487389400009, 10.624904690000108 ], [ 121.98487389400009, 10.647284247000186 ], [ 121.97803795700008, 10.710191148000149 ], [ 121.97185306100016, 10.72500234600011 ], [ 121.94410241000003, 10.753566799000225 ], [ 121.93702233200008, 10.775702216000184 ], [ 121.93970787900014, 10.793605861000174 ], [ 121.95411217500009, 10.823228257000096 ], [ 121.9599715500002, 10.85390859600011 ], [ 121.97803795700008, 10.905462958000157 ], [ 122.04509524800005, 11.017401434000249 ], [ 122.05307050900001, 11.063666083000214 ], [ 122.05307050900001, 11.233791408000172 ], [ 122.05062910200002, 11.25470612200013 ], [ 122.04428144600013, 11.277777411000102 ], [ 122.04175866000003, 11.300441799000225 ], [ 122.05005944100003, 11.320298570000148 ], [ 122.06137129000012, 11.339056708000214 ], [ 122.06609134200028, 11.36017487200013 ], [ 122.07357832100024, 11.477362372000186 ], [ 122.07593834700003, 11.482570705000114 ], [ 122.08082116000003, 11.487616278000246 ], [ 122.08570397200015, 11.494574286000216 ], [ 122.10718834700026, 11.657945054000209 ], [ 122.10157311300009, 11.693670966000127 ], [ 122.08448326900032, 11.724676825000245 ], [ 122.06023196700005, 11.733710028000246 ], [ 122.02906334700015, 11.734686591000184 ], [ 121.9917098320002, 11.741441148000092 ], [ 121.95785566500024, 11.755357164000259 ], [ 121.94117272200015, 11.760077216000184 ], [ 121.91968834700026, 11.761948960000154 ], [ 121.88217207100013, 11.760728257000153 ], [ 121.86475670700008, 11.762640692000161 ], [ 121.85385175900012, 11.769435940000221 ], [ 121.85442142000022, 11.771836656000062 ], [ 121.85613040500016, 11.779771226000207 ], [ 121.86622155000032, 11.79344310100015 ], [ 121.87810306100027, 11.805324611000231 ], [ 121.8852645190002, 11.810370184000135 ], [ 121.88900800900012, 11.819281317000161 ], [ 121.89144941500001, 11.839260158000059 ], [ 121.89177493600016, 11.85993073100019 ], [ 121.88868248800009, 11.871242580000228 ], [ 121.89185631600014, 11.885239976000207 ], [ 121.89682050900012, 11.893784898000206 ], [ 121.90552819100014, 11.898016669000185 ], [ 121.91968834700026, 11.899115302000212 ], [ 121.92652428500003, 11.903387762000023 ], [ 121.93970787900014, 11.922186591000184 ], [ 121.94662519600013, 11.926459052000098 ], [ 121.95337975400014, 11.927801825000245 ], [ 121.9589949880002, 11.933172919000242 ], [ 121.96371504000012, 11.933905341000241 ], [ 121.9721785820002, 11.930365301999984 ], [ 121.97730553500026, 11.924017645000163 ], [ 121.98096764400009, 11.917466539000259 ], [ 121.98487389400009, 11.913397528000132 ], [ 122.02003014400009, 11.903143622000073 ], [ 122.03028405000009, 11.896307684000249 ], [ 122.05323326900009, 11.866685289000202 ], [ 122.07260175900001, 11.84931061400016 ], [ 122.09441165500004, 11.834662177000212 ], [ 122.11793053500014, 11.823553778000303 ], [ 122.22868899800005, 11.799750067000105 ], [ 122.26539147200015, 11.785549221000167 ], [ 122.30014082100013, 11.761948960000154 ] ] ], [ [ [ 120.2783309250002, 11.824042059000078 ], [ 120.26791425900012, 11.816229559000249 ], [ 120.25554446700016, 11.836249091000241 ], [ 120.23747806100016, 11.885443427000098 ], [ 120.20329837300028, 11.947577216000184 ], [ 120.21314537900014, 11.949530341000241 ], [ 120.2587996750002, 11.967596747000243 ], [ 120.26791425900012, 11.968085028000246 ], [ 120.2763778000002, 11.964911200000188 ], [ 120.28199303500026, 11.957993882000153 ], [ 120.28451582100001, 11.949042059000135 ], [ 120.28516686300031, 11.93016185100015 ], [ 120.28321373800009, 11.926988023000263 ], [ 120.27279707100001, 11.925360419000242 ], [ 120.26783287900014, 11.923325914000202 ], [ 120.26343834700015, 11.916164455000171 ], [ 120.26547285200013, 11.909735419000242 ], [ 120.26978600400014, 11.904201565000108 ], [ 120.27149498800031, 11.899115302000212 ], [ 120.26465905000009, 11.872015692000105 ], [ 120.2641707690002, 11.861558335000211 ], [ 120.26677493600027, 11.851548570000205 ], [ 120.27719160200002, 11.831773179000095 ], [ 120.2783309250002, 11.824042059000078 ] ] ], [ [ [ 119.96387780000009, 11.940130927000212 ], [ 119.95932050900012, 11.929999091000184 ], [ 119.97706139400032, 11.926174221000224 ], [ 120.02165774800017, 11.926459052000098 ], [ 120.03142337300005, 11.924465236000117 ], [ 120.03199303500014, 11.919907945000261 ], [ 120.02588951900032, 11.915472723000107 ], [ 120.00310306100016, 11.910060940000108 ], [ 120.00806725400014, 11.902736721000281 ], [ 120.01921634200016, 11.895575262000193 ], [ 120.02475019600001, 11.892971096000224 ], [ 120.05258222700013, 11.871242580000228 ], [ 120.0732528000002, 11.865301825000131 ], [ 120.08326256600014, 11.860419012000136 ], [ 120.07650800900012, 11.858140367000203 ], [ 120.05005944100014, 11.854315497000073 ], [ 120.04859459700003, 11.844427802000098 ], [ 120.05176842500009, 11.831000067000105 ], [ 120.03907311300009, 11.816595770000106 ], [ 120.03907311300009, 11.810370184000135 ], [ 120.04297936300009, 11.808986721000167 ], [ 120.05258222700013, 11.803615627000227 ], [ 120.05258222700013, 11.810370184000135 ], [ 120.06218509200005, 11.806301174000112 ], [ 120.06999759200016, 11.801092841000184 ], [ 120.07593834700015, 11.795233466000241 ], [ 120.07992597700013, 11.78925202000022 ], [ 120.0600692070002, 11.767482815000164 ], [ 120.05258222700013, 11.761948960000154 ], [ 120.06706790500016, 11.741766669000128 ], [ 120.04704837300005, 11.708929755000099 ], [ 120.0141707690002, 11.682114976000207 ], [ 119.98438561300009, 11.680080471000167 ], [ 119.96697024800017, 11.664374091000241 ], [ 119.9546004570002, 11.680121161000159 ], [ 119.9502059250002, 11.70937734600011 ], [ 119.95639082100013, 11.734686591000184 ], [ 119.96989993600016, 11.725531317000105 ], [ 119.97396894600024, 11.720770575000188 ], [ 119.97706139400032, 11.714178778000189 ], [ 119.98438561300009, 11.714178778000189 ], [ 119.98259524800005, 11.728583075000188 ], [ 119.9809676440002, 11.734198309000249 ], [ 119.97706139400032, 11.741441148000092 ], [ 119.99048912900025, 11.754787502000227 ], [ 120.00114993600016, 11.768622137000136 ], [ 120.0048934250002, 11.782538153000246 ], [ 119.99805748800009, 11.796087958000214 ], [ 119.99024498800009, 11.790269273000092 ], [ 119.98511803500014, 11.789740302000098 ], [ 119.97706139400032, 11.796087958000214 ], [ 119.97169030000009, 11.774807033000286 ], [ 119.95923912900014, 11.765855210000211 ], [ 119.94369550900012, 11.767035223000107 ], [ 119.9292098320002, 11.775580145000106 ], [ 119.92115319100014, 11.788316148000263 ], [ 119.91187584700003, 11.816392320000148 ], [ 119.90186608200008, 11.824042059000078 ], [ 119.90748131600014, 11.827948309000192 ], [ 119.91618899800017, 11.835191148000206 ], [ 119.9223738940002, 11.837713934000192 ], [ 119.91187584700003, 11.853949286000272 ], [ 119.88607832100001, 11.878648179000209 ], [ 119.8745223320002, 11.892971096000224 ], [ 119.86801191500001, 11.906561591000184 ], [ 119.8540145190002, 11.954413153000132 ], [ 119.86231530000009, 11.952704169000128 ], [ 119.8671981130002, 11.949693101000207 ], [ 119.87240644600013, 11.947333075000131 ], [ 119.88070722700013, 11.947577216000184 ], [ 119.87916100400014, 11.945868231000247 ], [ 119.8823348320002, 11.943345445000261 ], [ 119.88746178500014, 11.94110748900016 ], [ 119.8916121750002, 11.940130927000212 ], [ 119.89478600400014, 11.942328192000218 ], [ 119.89576256600014, 11.947251695000148 ], [ 119.89478600400014, 11.952134507000039 ], [ 119.8916121750002, 11.954413153000132 ], [ 119.89283287900025, 11.962591864000103 ], [ 119.90479576900009, 11.976874091000127 ], [ 119.91968834700003, 11.981512762000136 ], [ 119.9292098320002, 11.961167710000211 ], [ 119.96387780000009, 11.940130927000212 ] ] ], [ [ [ 124.17847741000014, 12.03961823100019 ], [ 124.16431725400003, 12.037746486000117 ], [ 124.15023847700002, 12.043850002000113 ], [ 124.14625084700015, 12.053045966000184 ], [ 124.15333092500009, 12.065130927000098 ], [ 124.16537519600001, 12.075425523000263 ], [ 124.18197675900012, 12.080145575000017 ], [ 124.20622806100005, 12.081244208000271 ], [ 124.2280379570002, 12.073675848000221 ], [ 124.22925866000003, 12.063625393000223 ], [ 124.20932050900001, 12.060939846000167 ], [ 124.19857832100001, 12.052639065000164 ], [ 124.17847741000014, 12.03961823100019 ] ] ], [ [ [ 121.4018660820002, 12.002834377000113 ], [ 121.38428795700008, 12.000921942000048 ], [ 121.37183678500026, 12.011135158000116 ], [ 121.36426842500032, 12.027329820000148 ], [ 121.36085045700031, 12.043158270000106 ], [ 121.36158287900003, 12.050604559000249 ], [ 121.3676863940002, 12.071030992000203 ], [ 121.36459394600013, 12.081447658000229 ], [ 121.35865319100003, 12.087836005000213 ], [ 121.35564212300017, 12.094183661000159 ], [ 121.36085045700031, 12.104559637000136 ], [ 121.35857181100005, 12.112005927000212 ], [ 121.35865319100003, 12.114691473000221 ], [ 121.3676863940002, 12.110419012000136 ], [ 121.40642337300005, 12.062445380000213 ], [ 121.41285241000026, 12.047105210000154 ], [ 121.41667728000016, 12.030218817000161 ], [ 121.41382897200003, 12.01455312700017 ], [ 121.4018660820002, 12.002834377000113 ] ] ], [ [ [ 121.12769616000026, 12.15985748900016 ], [ 121.11890709700015, 12.158107815000164 ], [ 121.10865319100014, 12.162502346000053 ], [ 121.09937584700003, 12.169419664000259 ], [ 121.09009850400014, 12.174261786000159 ], [ 121.08366946700005, 12.183498440000164 ], [ 121.07960045700008, 12.197699286000102 ], [ 121.06959069100014, 12.211371161000045 ], [ 121.05160566500012, 12.220933335000211 ], [ 121.0395613940002, 12.251532294000242 ], [ 121.05990644600013, 12.27838776200025 ], [ 121.08814537900003, 12.267075914000259 ], [ 121.09791100400014, 12.244696356000247 ], [ 121.10523522200015, 12.211167710000211 ], [ 121.11011803500003, 12.203111070000261 ], [ 121.11410566500001, 12.199164130000156 ], [ 121.11597741000014, 12.196763414000145 ], [ 121.12826582100013, 12.174994208000157 ], [ 121.13103274800028, 12.164374091000127 ], [ 121.12769616000026, 12.15985748900016 ] ] ], [ [ [ 119.9345809250002, 12.285142320000261 ], [ 119.93588300900012, 12.276516018000279 ], [ 119.9502059250002, 12.271551825000131 ], [ 119.98902428500026, 12.267157294000242 ], [ 120.0048934250002, 12.262884833000101 ], [ 120.0214949880002, 12.253119208000101 ], [ 120.04883873800031, 12.231146552000155 ], [ 120.07276451900009, 12.206040757000096 ], [ 120.07992597700013, 12.200832424000168 ], [ 120.08814537900025, 12.198228257000096 ], [ 120.10531660200024, 12.19765859600011 ], [ 120.11410566500012, 12.193996486000174 ], [ 120.10368899800017, 12.191473700000131 ], [ 120.09685306100005, 12.186021226000207 ], [ 120.09351647200015, 12.177720445000034 ], [ 120.0942488940002, 12.166652736000117 ], [ 120.11695397200015, 12.166449286000159 ], [ 120.17017662900014, 12.125433661000159 ], [ 120.19605553500014, 12.112005927000212 ], [ 120.19841556100016, 12.122788804000209 ], [ 120.20435631600026, 12.128363348000164 ], [ 120.21314537900014, 12.12909577 ], [ 120.22396894600001, 12.125677801999984 ], [ 120.2241317070002, 12.219183661000216 ], [ 120.22974694100014, 12.218654690000221 ], [ 120.24390709700003, 12.200832424000168 ], [ 120.25074303500003, 12.185492255000213 ], [ 120.25277754000012, 12.169623114000217 ], [ 120.25196373800031, 12.142482815000164 ], [ 120.2583113940002, 12.131781317000275 ], [ 120.27247155000009, 12.134711005000156 ], [ 120.28638756600014, 12.135443427000212 ], [ 120.29224694100003, 12.118231512000307 ], [ 120.29590905000009, 12.120184637000136 ], [ 120.29704837300017, 12.120103257000153 ], [ 120.29753665500027, 12.120998440000221 ], [ 120.29908287900003, 12.125677801999984 ], [ 120.32911217500009, 12.097479559000192 ], [ 120.34213300900012, 12.080755927000098 ], [ 120.34750410200002, 12.067328192000105 ], [ 120.34489993600016, 12.053290106000134 ], [ 120.3379012380002, 12.048488674000225 ], [ 120.32886803500003, 12.045355536000159 ], [ 120.31959069100014, 12.036322333000157 ], [ 120.31519616000003, 12.023179429000209 ], [ 120.31959069100014, 12.017889716000127 ], [ 120.32740319100014, 12.020086981000134 ], [ 120.33383222700002, 12.029486395000163 ], [ 120.3383895190002, 12.029282945000205 ], [ 120.33936608200008, 12.02814362200013 ], [ 120.33920332100013, 12.025824286000102 ], [ 120.34009850400014, 12.022040106000134 ], [ 120.34750410200002, 12.029486395000163 ], [ 120.35287519600013, 12.01618073100002 ], [ 120.34913170700031, 12.007025458000214 ], [ 120.33952884200005, 12.000555731000247 ], [ 120.32642662900014, 11.995306708000157 ], [ 120.31275475400025, 11.992010809000192 ], [ 120.30616295700008, 11.993963934000249 ], [ 120.3012801440002, 11.998480536000216 ], [ 120.29224694100003, 12.002834377000113 ], [ 120.2749129570002, 12.003404039000145 ], [ 120.26286868600016, 11.99774811399999 ], [ 120.25180097700024, 11.990871486000174 ], [ 120.23764082100013, 11.987941799000168 ], [ 120.22437584700015, 11.993068752000227 ], [ 120.21338951900009, 12.002264716000127 ], [ 120.20240319100003, 12.00800202000022 ], [ 120.18921959700026, 12.002834377000113 ], [ 120.18702233200008, 12.018255927000155 ], [ 120.17457116000003, 12.022691148000206 ], [ 120.15748131600014, 12.023911851000207 ], [ 120.1421004570002, 12.029486395000163 ], [ 120.13461347700013, 12.022040106000134 ], [ 120.14136803500003, 12.009670315000108 ], [ 120.14063561300009, 11.999253648000206 ], [ 120.13689212300005, 11.988470770000106 ], [ 120.13461347700013, 11.974839585000154 ], [ 120.12598717500009, 11.979396877000113 ], [ 120.12134850400014, 11.979396877000113 ], [ 120.11833743600005, 11.975287177000098 ], [ 120.11410566500012, 11.967433986 ], [ 120.10792076900009, 11.967433986 ], [ 120.09351647200015, 11.994370835000097 ], [ 120.08228600400014, 12.001532294000128 ], [ 120.03907311300009, 11.995306708000157 ], [ 120.0214949880002, 11.999823309000192 ], [ 120.00114993600016, 12.011175848000107 ], [ 119.98406009200005, 12.025702216000127 ], [ 119.97055097700013, 12.054754950000188 ], [ 119.9423934250002, 12.087144273000206 ], [ 119.93588300900012, 12.108303127000113 ], [ 119.93580162900014, 12.123032945000261 ], [ 119.93409264400009, 12.134833075000131 ], [ 119.92896569100014, 12.145331122000243 ], [ 119.91863040500016, 12.156073309000249 ], [ 119.91236412900003, 12.166896877000113 ], [ 119.91041100400014, 12.180568752000283 ], [ 119.90650475400025, 12.194891669000242 ], [ 119.89503014400032, 12.207668361000117 ], [ 119.88347415500004, 12.198919989000103 ], [ 119.8730574880002, 12.187404690000108 ], [ 119.86500084700015, 12.173814195000148 ], [ 119.8603621750002, 12.159165757000153 ], [ 119.84766686300009, 12.166734117000146 ], [ 119.85035241000026, 12.174465236000117 ], [ 119.85962975400003, 12.183254299000168 ], [ 119.8671981130002, 12.193996486000174 ], [ 119.86963951900009, 12.206610419000128 ], [ 119.86931399800017, 12.216701565000221 ], [ 119.8671981130002, 12.231838283000116 ], [ 119.87232506600014, 12.251695054000209 ], [ 119.88550866000014, 12.259507554000209 ], [ 119.90349368600016, 12.264593817000105 ], [ 119.9223738940002, 12.276516018000279 ], [ 119.89763431100016, 12.277044989000217 ], [ 119.88754316500012, 12.275051174000225 ], [ 119.88070722700013, 12.269029039000259 ], [ 119.8779403000002, 12.308091539000259 ], [ 119.88502037900014, 12.322699286000159 ], [ 119.9087020190002, 12.323675848000164 ], [ 119.92693118600005, 12.316473700000188 ], [ 119.93344160200013, 12.301092841000241 ], [ 119.9345809250002, 12.285142320000261 ] ] ], [ [ [ 124.18197675900012, 12.406927802000098 ], [ 124.16863040500016, 12.398138739000217 ], [ 124.14909915500004, 12.414699611000174 ], [ 124.13746178500003, 12.437567450000188 ], [ 124.1337996750002, 12.459418036000159 ], [ 124.13355553500014, 12.470770575000017 ], [ 124.14258873800031, 12.468695380000213 ], [ 124.16049238400001, 12.45604075700021 ], [ 124.17660566500012, 12.432684637000193 ], [ 124.18197675900012, 12.406927802000098 ] ] ], [ [ [ 122.62533613400001, 12.280991929000152 ], [ 122.61182701900009, 12.276516018000279 ], [ 122.60718834700015, 12.279445705000114 ], [ 122.59156334700015, 12.300116278000189 ], [ 122.58301842500009, 12.305650132000153 ], [ 122.5625106130002, 12.311102606000247 ], [ 122.55347741000003, 12.317531643000109 ], [ 122.5288192070002, 12.358465887000193 ], [ 122.51197350400003, 12.377630927000155 ], [ 122.48829186300009, 12.385728257000096 ], [ 122.46509850400014, 12.388576565000221 ], [ 122.44605553500026, 12.396673895000163 ], [ 122.43189537900025, 12.409735419000128 ], [ 122.42310631600026, 12.427394924000168 ], [ 122.42302493600027, 12.462876695000205 ], [ 122.44459069100014, 12.483710028000132 ], [ 122.48113040500004, 12.493353583000157 ], [ 122.5942488940002, 12.492621161000159 ], [ 122.63209069100014, 12.484523830000114 ], [ 122.64372806100005, 12.47947825700021 ], [ 122.64918053500014, 12.473211981000247 ], [ 122.65544681100016, 12.452460028000132 ], [ 122.66138756600003, 12.439357815000108 ], [ 122.66920006600003, 12.426214911000102 ], [ 122.68751061300009, 12.40281810100015 ], [ 122.68677819100014, 12.388983466000241 ], [ 122.67017662900014, 12.317531643000109 ], [ 122.6591903000002, 12.305405992000203 ], [ 122.64283287900003, 12.291937567000218 ], [ 122.62533613400001, 12.280991929000152 ] ] ], [ [ [ 124.91895592500009, 12.562241929000209 ], [ 124.9282332690002, 12.557074286000159 ], [ 124.94141686300009, 12.562974351000094 ], [ 124.9585067070002, 12.573228257000096 ], [ 124.97339928500014, 12.576320705000171 ], [ 124.97974694100003, 12.560777085000154 ], [ 124.98951256600026, 12.561997789000259 ], [ 125.01042728000004, 12.553412177000098 ], [ 125.02857506600003, 12.542547919000185 ], [ 125.03101647200015, 12.537258205000228 ], [ 125.03687584700026, 12.535549221000224 ], [ 125.04224694100014, 12.532131252000113 ], [ 125.04957116000014, 12.529364325000245 ], [ 125.06169681100005, 12.529730536000102 ], [ 125.06983483200008, 12.533026434000135 ], [ 125.08139082100013, 12.539699611000231 ], [ 125.0918074880002, 12.547349351000094 ], [ 125.09644616000014, 12.553656317000218 ], [ 125.09978274800017, 12.574652411000159 ], [ 125.10914147200015, 12.579291083000101 ], [ 125.13746178500014, 12.570746161000102 ], [ 125.14722741000014, 12.571966864000103 ], [ 125.15699303500003, 12.575995184000135 ], [ 125.16627037900025, 12.578111070000261 ], [ 125.17457116000003, 12.574164130000156 ], [ 125.19874108200031, 12.550238348000107 ], [ 125.24838300900012, 12.519476630000042 ], [ 125.27214603000004, 12.499009507000096 ], [ 125.2739363940002, 12.482001044000128 ], [ 125.28484134200016, 12.470445054000209 ], [ 125.30616295700008, 12.458319403000303 ], [ 125.31478925900012, 12.447211005000099 ], [ 125.32634524800017, 12.421332098000164 ], [ 125.33366946700016, 12.412665106000134 ], [ 125.34961998800031, 12.39940013200021 ], [ 125.33090254000012, 12.388902085000154 ], [ 125.31283613400024, 12.366685289000259 ], [ 125.30787194100014, 12.341864325000245 ], [ 125.3291121750002, 12.323675848000164 ], [ 125.32227623800031, 12.319322007000096 ], [ 125.31853274800017, 12.313666083000157 ], [ 125.31600996200029, 12.302069403000246 ], [ 125.31478925900012, 12.296372789000145 ], [ 125.34555097700024, 12.313706773000149 ], [ 125.3564559250002, 12.317531643000109 ], [ 125.35466556100005, 12.307928778000189 ], [ 125.35482832100001, 12.30133698100019 ], [ 125.35417728000016, 12.295884507000096 ], [ 125.34961998800031, 12.28953685100015 ], [ 125.36068769600024, 12.285142320000261 ], [ 125.37045332100001, 12.288967190000164 ], [ 125.3906356130002, 12.303859768000166 ], [ 125.38445071700005, 12.284979559000192 ], [ 125.39421634200028, 12.280503648000149 ], [ 125.43213951900032, 12.282700914000202 ], [ 125.4506942070002, 12.273627020000163 ], [ 125.48601321700005, 12.247381903000132 ], [ 125.50049889400009, 12.248602606000134 ], [ 125.50603274800017, 12.237738348000221 ], [ 125.52784264400009, 12.211004950000245 ], [ 125.53825931100005, 12.183498440000164 ], [ 125.5376082690002, 12.172430731000247 ], [ 125.5210067070002, 12.180324611000231 ], [ 125.51295006600014, 12.174465236000117 ], [ 125.48926842500009, 12.170233466000241 ], [ 125.47934004000012, 12.166652736000117 ], [ 125.48845462300017, 12.163031317000218 ], [ 125.49545332100013, 12.158840236000117 ], [ 125.50147545700008, 12.153387762000136 ], [ 125.5073348320002, 12.146185614000217 ], [ 125.47974694100014, 12.139837958000101 ], [ 125.46713300900012, 12.134914455000114 ], [ 125.4594832690002, 12.125677801999984 ], [ 125.45736738400001, 12.107082424000112 ], [ 125.46794681100005, 12.101996161000159 ], [ 125.50049889400009, 12.104559637000136 ], [ 125.49830162900003, 12.101304429000095 ], [ 125.4956160820002, 12.09422435100015 ], [ 125.49366295700008, 12.090969143000109 ], [ 125.50269616000014, 12.083685614000103 ], [ 125.51563561300009, 12.070868231000134 ], [ 125.52515709700026, 12.056952216000241 ], [ 125.5244246750002, 12.046210028000189 ], [ 125.49048912900003, 12.018947658000286 ], [ 125.48226972700002, 12.00853099200026 ], [ 125.46998131600014, 11.986761786000102 ], [ 125.45199629000012, 11.964056707999987 ], [ 125.44581139400032, 11.947333075000131 ], [ 125.44385826900009, 11.927883205000228 ], [ 125.44516035200002, 11.905951239000103 ], [ 125.44703209700015, 11.90009186399999 ], [ 125.4594832690002, 11.871242580000228 ], [ 125.45728600400003, 11.840521552000155 ], [ 125.4594832690002, 11.83026764500022 ], [ 125.46509850400003, 11.823228257000096 ], [ 125.49048912900003, 11.799790757000096 ], [ 125.49366295700008, 11.790228583000101 ], [ 125.49048912900003, 11.781073309000192 ], [ 125.48373457100001, 11.77619049700013 ], [ 125.45720462300017, 11.785711981000134 ], [ 125.44727623800031, 11.767767645000106 ], [ 125.4502059250002, 11.750433661000102 ], [ 125.4697371750002, 11.758530992000146 ], [ 125.48161868600016, 11.757310289000145 ], [ 125.4912215500002, 11.737982489000217 ], [ 125.50049889400009, 11.701117255000156 ], [ 125.4990340500002, 11.675848700000245 ], [ 125.48926842500009, 11.67080312700017 ], [ 125.47681725400014, 11.66876862200013 ], [ 125.4663192070002, 11.65273672100011 ], [ 125.47901451900009, 11.647528387000136 ], [ 125.47632897200026, 11.638006903000132 ], [ 125.46859785200002, 11.625474351000037 ], [ 125.4663192070002, 11.611761786000102 ], [ 125.47087649800005, 11.602606512000193 ], [ 125.47657311300031, 11.60016510600019 ], [ 125.48316491000003, 11.59931061400016 ], [ 125.49048912900003, 11.594671942000275 ], [ 125.49366295700008, 11.587795315000164 ], [ 125.49366295700008, 11.563381252000113 ], [ 125.49789472700013, 11.548325914000202 ], [ 125.50196373800009, 11.539129950000131 ], [ 125.52418053500003, 11.507310289000202 ], [ 125.53093509200005, 11.491603908000116 ], [ 125.53101647200003, 11.475653387000136 ], [ 125.5210067070002, 11.460353908000172 ], [ 125.52906334700015, 11.45945872600015 ], [ 125.53451582100013, 11.458156643000166 ], [ 125.54037519600024, 11.457912502000113 ], [ 125.5488387380002, 11.460353908000172 ], [ 125.5542098320002, 11.436265367000203 ], [ 125.55860436300031, 11.424790757000096 ], [ 125.56592858200008, 11.419989325000188 ], [ 125.57618248800009, 11.416693427000155 ], [ 125.59424889400009, 11.402167059000135 ], [ 125.60694420700008, 11.398871161000102 ], [ 125.60906009200028, 11.393133856000134 ], [ 125.61988366000026, 11.381089585000211 ], [ 125.63184655000009, 11.370306708000157 ], [ 125.6377059250002, 11.368475653000132 ], [ 125.63795006600026, 11.342352606000247 ], [ 125.63502037900025, 11.326483466000127 ], [ 125.62712649800017, 11.313544012000136 ], [ 125.56617272200003, 11.268133856000247 ], [ 125.55502363400001, 11.248032945000205 ], [ 125.55502363400001, 11.211859442000218 ], [ 125.57178795700008, 11.192572333000214 ], [ 125.59913170700008, 11.189113674000112 ], [ 125.6308699880002, 11.200262762000136 ], [ 125.61605879000012, 11.21893952000022 ], [ 125.6157332690002, 11.233872789000259 ], [ 125.6289168630002, 11.236314195000261 ], [ 125.67497806100016, 11.203070380000099 ], [ 125.69361412900003, 11.192572333000214 ], [ 125.70736738400012, 11.177435614000217 ], [ 125.71273847700002, 11.148749091000184 ], [ 125.7290145190002, 11.117377020000106 ], [ 125.7602645190002, 11.084621486000117 ], [ 125.77963300900012, 11.052394924000168 ], [ 125.76050866000003, 11.022772528000189 ], [ 125.75220787900025, 11.030422268000223 ], [ 125.72877037900014, 11.042792059000078 ], [ 125.71957441500001, 11.049465236000231 ], [ 125.71070397200015, 11.08283112200013 ], [ 125.70875084700015, 11.085760809000135 ], [ 125.70720462300005, 11.088568427000098 ], [ 125.70655358200031, 11.094142971000167 ], [ 125.70704186300009, 11.112005927000098 ], [ 125.7060653000002, 11.116766669000185 ], [ 125.70004316500001, 11.117865302000212 ], [ 125.68531334700015, 11.125148830000114 ], [ 125.68100019600013, 11.12986888200021 ], [ 125.66667728000016, 11.141669012000307 ], [ 125.65154056100016, 11.149400132000096 ], [ 125.64437910200013, 11.142238674000168 ], [ 125.61036217500009, 11.122015692000048 ], [ 125.60010826900032, 11.118312893000223 ], [ 125.58806399800017, 11.122259833000101 ], [ 125.58383222700002, 11.131740627000113 ], [ 125.58155358200031, 11.142767645000163 ], [ 125.57545006600026, 11.151800848000164 ], [ 125.56381269600013, 11.156805731000304 ], [ 125.5571395190002, 11.154038804000209 ], [ 125.55014082100001, 11.148627020000106 ], [ 125.53834069100003, 11.145656643000109 ], [ 125.53598066500012, 11.138128973000221 ], [ 125.53109785200002, 11.102280992000203 ], [ 125.52784264400009, 11.090399481000247 ], [ 125.50082441500012, 11.115057684000249 ], [ 125.4824324880002, 11.127630927000212 ], [ 125.4697371750002, 11.128566799000225 ], [ 125.45093834700015, 11.106675523000092 ], [ 125.44019616000014, 11.097560940000108 ], [ 125.42465254000024, 11.090399481000247 ], [ 125.42400149800017, 11.10651276200025 ], [ 125.4165145190002, 11.116603908000116 ], [ 125.4062606130002, 11.117132880000156 ], [ 125.39747155000032, 11.104681708000271 ], [ 125.37378991000014, 11.125962632000153 ], [ 125.36329186300031, 11.131984768000166 ], [ 125.3271590500002, 11.137518622000243 ], [ 125.32162519600001, 11.142238674000168 ], [ 125.31706790500004, 11.149562893000166 ], [ 125.30600019600001, 11.147447007000096 ], [ 125.27572675900001, 11.13564687700017 ], [ 125.27051842500032, 11.128078518000223 ], [ 125.26612389400032, 11.118882553999981 ], [ 125.25456790500004, 11.101996161000159 ], [ 125.25196373800031, 11.094671942000161 ], [ 125.24683678500003, 11.092189846000167 ], [ 125.24138431100016, 11.094387111000117 ], [ 125.2329207690002, 11.09784577000022 ], [ 125.22543379000012, 11.105536200000245 ], [ 125.21892337300005, 11.11806875200017 ], [ 125.21412194100026, 11.131537177000155 ], [ 125.20866946700005, 11.185044664000259 ], [ 125.19874108200031, 11.22752513200021 ], [ 125.1723738940002, 11.265204169000015 ], [ 125.1328231130002, 11.28213125200017 ], [ 125.08708743600027, 11.28534577000022 ], [ 125.04175866000014, 11.282171942000161 ], [ 125.00098717500009, 11.289780992000203 ], [ 124.9917098320002, 11.318019924000112 ], [ 125.00017337300017, 11.398871161000102 ], [ 124.99984785200013, 11.407131252000227 ], [ 125.00074303500014, 11.413723049000225 ], [ 125.0029403000002, 11.419745184000135 ], [ 125.00700931100016, 11.426174221000167 ], [ 124.99927819100014, 11.430324611 ], [ 124.97974694100003, 11.447251695000261 ], [ 124.97242272200003, 11.450140692000105 ], [ 124.95834394600013, 11.451361395000106 ], [ 124.95183353000016, 11.453517971000224 ], [ 124.9379988940002, 11.462795315000108 ], [ 124.92644290500004, 11.473944403000132 ], [ 124.91732832100013, 11.48704661700026 ], [ 124.91146894600001, 11.501898505000213 ], [ 124.8964949880002, 11.470119533000172 ], [ 124.88746178500026, 11.465521552000155 ], [ 124.86988366000003, 11.467759507000153 ], [ 124.85613040500004, 11.47304922100011 ], [ 124.84506269600013, 11.481756903000303 ], [ 124.83619225400003, 11.493638414000259 ], [ 124.82829837300005, 11.508734442000161 ], [ 124.84376061300009, 11.515773830000114 ], [ 124.85238691500012, 11.524969794000185 ], [ 124.85954837300005, 11.534613348000164 ], [ 124.86988366000003, 11.542873440000051 ], [ 124.88640384200016, 11.547186591000127 ], [ 124.90007571700005, 11.548773505000156 ], [ 124.90365644600001, 11.554266669000128 ], [ 124.89031009200028, 11.570217190000108 ], [ 124.94874108200008, 11.570217190000108 ], [ 124.9614363940002, 11.576971747000243 ], [ 124.97779381600014, 11.59275950700021 ], [ 124.99244225400025, 11.611029364000103 ], [ 125.00017337300017, 11.624823309000192 ], [ 124.9995223320002, 11.640285549000225 ], [ 124.99439537900003, 11.655666408000172 ], [ 124.99122155000032, 11.670314846000167 ], [ 124.99675540500016, 11.683417059000192 ], [ 125.01840254000024, 11.706366278000189 ], [ 125.03443444100014, 11.727850653000132 ], [ 125.03939863400001, 11.72296784100007 ], [ 125.05543053500014, 11.714178778000189 ], [ 125.05420983200008, 11.738226630000042 ], [ 125.04371178500003, 11.757757880000099 ], [ 125.02637780000032, 11.770900783000172 ], [ 125.00359134200028, 11.775580145000106 ], [ 124.98666425900001, 11.770249742000203 ], [ 124.9453231130002, 11.74681224200026 ], [ 124.9282332690002, 11.741441148000092 ], [ 124.89242597700002, 11.761460679000152 ], [ 124.83350670700008, 11.845363674000225 ], [ 124.79411868600027, 11.858140367000203 ], [ 124.79411868600027, 11.864976304000095 ], [ 124.80103600400014, 11.864569403000132 ], [ 124.80787194100026, 11.864976304000095 ], [ 124.79818769600013, 11.869818427000098 ], [ 124.79411868600027, 11.871242580000228 ], [ 124.80787194100026, 11.899115302000212 ], [ 124.81267337300028, 11.896144924000112 ], [ 124.81755618600005, 11.893947658000172 ], [ 124.8227645190002, 11.890936591000184 ], [ 124.82829837300005, 11.885443427000098 ], [ 124.82398522200015, 11.905829169000128 ], [ 124.80982506600003, 11.915676174000168 ], [ 124.79493248800009, 11.916449286000216 ], [ 124.77857506600014, 11.899155992000203 ], [ 124.76107832100001, 11.901312567000218 ], [ 124.7519637380002, 11.910305080000228 ], [ 124.76734459700015, 11.920233466000127 ], [ 124.76205488400012, 11.929022528000246 ], [ 124.75570722700013, 11.933294989000217 ], [ 124.74822024800017, 11.932562567000161 ], [ 124.73951256600014, 11.926459052000098 ], [ 124.73747806100016, 11.953314520000276 ], [ 124.73422285200013, 11.968207098000221 ], [ 124.72925866000014, 11.977972723000221 ], [ 124.67986087300028, 12.029730536000159 ], [ 124.6401473320002, 12.045355536000159 ], [ 124.60043379000012, 12.054632880000213 ], [ 124.56934655000009, 12.050848700000302 ], [ 124.54037519600001, 12.065741278000246 ], [ 124.4931746750002, 12.097805080000228 ], [ 124.44646243600016, 12.153062242000203 ], [ 124.4248153000002, 12.172837632000096 ], [ 124.42750084700003, 12.175034898000149 ], [ 124.42823326900032, 12.175848700000188 ], [ 124.43091881600014, 12.180324611000231 ], [ 124.40723717500009, 12.193793036000216 ], [ 124.39079837300017, 12.221869208000101 ], [ 124.34213300900001, 12.385728257000096 ], [ 124.27621504000012, 12.533270575000131 ], [ 124.27393639400032, 12.546820380000099 ], [ 124.27662194100003, 12.558539130000213 ], [ 124.28345787900014, 12.570624091000127 ], [ 124.2934676440002, 12.579982815000164 ], [ 124.30502363400012, 12.582993882000153 ], [ 124.31275475400014, 12.579494533000229 ], [ 124.35840905000009, 12.544907945000261 ], [ 124.36304772200003, 12.543605861000174 ], [ 124.37330162900014, 12.543402411000216 ], [ 124.39861087300017, 12.554917710000211 ], [ 124.40748131600014, 12.557074286000159 ], [ 124.41325931100016, 12.555243231000247 ], [ 124.43848717500009, 12.543402411000216 ], [ 124.45427493600016, 12.538397528000246 ], [ 124.51734459700003, 12.537258205000228 ], [ 124.5214949880002, 12.535793361000174 ], [ 124.53248131600003, 12.528794664000259 ], [ 124.53467858200031, 12.526312567000161 ], [ 124.53679446700016, 12.52252838700025 ], [ 124.5415145190002, 12.524155992000146 ], [ 124.54712975400003, 12.527777411000216 ], [ 124.55144290500016, 12.529730536000102 ], [ 124.57447350400014, 12.527533270000163 ], [ 124.5962020190002, 12.522935289000145 ], [ 124.67920983200008, 12.515936591000184 ], [ 124.86793053500014, 12.530340887000193 ], [ 124.87720787900014, 12.533392645000106 ], [ 124.88689212300017, 12.540350653000132 ], [ 124.89551842500009, 12.554266669000299 ], [ 124.88990319100003, 12.563625393000109 ], [ 124.88021894600013, 12.572211005000156 ], [ 124.87671959700026, 12.583726303999981 ], [ 124.87671959700026, 12.591253973000107 ], [ 124.89478600400025, 12.585435289000259 ], [ 124.90821373800009, 12.573716539000202 ], [ 124.91895592500009, 12.562241929000209 ] ] ], [ [ [ 123.35531660200013, 12.54767487200013 ], [ 123.35596764400009, 12.543402411000216 ], [ 123.33838951900009, 12.546942450000245 ], [ 123.3403426440002, 12.531683661000102 ], [ 123.35596764400009, 12.495591539000259 ], [ 123.35043379000001, 12.487779039000259 ], [ 123.33855228000016, 12.479437567000218 ], [ 123.3266707690002, 12.467922268000166 ], [ 123.32113691500012, 12.450913804000095 ], [ 123.32642662900003, 12.43805573100019 ], [ 123.33822675900012, 12.445298570000205 ], [ 123.35596764400009, 12.468329169000185 ], [ 123.35865319100026, 12.469183661000159 ], [ 123.36890709700003, 12.469794012000136 ], [ 123.37281334700015, 12.471380927000098 ], [ 123.37476647200003, 12.475775458000157 ], [ 123.37452233200008, 12.485174872000186 ], [ 123.37582441500001, 12.488755601000264 ], [ 123.37378991000026, 12.489650783000229 ], [ 123.37916100400003, 12.501206773000149 ], [ 123.38648522200003, 12.512518622000243 ], [ 123.3901473320002, 12.512396552000098 ], [ 123.39763431100005, 12.519029039000259 ], [ 123.41472415500027, 12.520941473000221 ], [ 123.4340926440002, 12.518622137000136 ], [ 123.44809004000001, 12.512396552000098 ], [ 123.47982832100013, 12.481024481000247 ], [ 123.4956160820002, 12.468573309000135 ], [ 123.51295006600014, 12.460882880000213 ], [ 123.54712975400014, 12.460882880000213 ], [ 123.55241946700016, 12.456610419000299 ], [ 123.56421959700003, 12.440375067000048 ], [ 123.57227623800031, 12.43183014500022 ], [ 123.58139082100013, 12.413072007000153 ], [ 123.59343509200016, 12.394354559000305 ], [ 123.60922285200013, 12.385728257000096 ], [ 123.60922285200013, 12.378892320000148 ], [ 123.59750410200002, 12.377875067000105 ], [ 123.59009850400014, 12.372300523000206 ], [ 123.58716881600026, 12.363104559000135 ], [ 123.58814537900014, 12.351019598000221 ], [ 123.62191816500012, 12.368353583000101 ], [ 123.63697350400014, 12.370266018000166 ], [ 123.64332116000003, 12.354722398000149 ], [ 123.64771569100014, 12.348293361000174 ], [ 123.65756269600013, 12.346421617000203 ], [ 123.6689559250002, 12.346258856000134 ], [ 123.67750084700026, 12.34479401200025 ], [ 123.68824303500014, 12.337795315000164 ], [ 123.6967879570002, 12.329901434000135 ], [ 123.70435631600014, 12.320746161000159 ], [ 123.76734459700026, 12.214056708000101 ], [ 123.79363040500016, 12.187160549000225 ], [ 123.78842207100001, 12.23126862200013 ], [ 123.7949324880002, 12.24689362200013 ], [ 123.81812584700003, 12.231838283000116 ], [ 123.84880618600005, 12.200832424000168 ], [ 123.86264082100013, 12.202866929000209 ], [ 123.8735457690002, 12.210191148000206 ], [ 123.88233483200008, 12.212795315000108 ], [ 123.8896590500002, 12.200832424000168 ], [ 123.8896590500002, 12.207668361000117 ], [ 123.8994246750002, 12.187730210000211 ], [ 123.95191491000026, 12.104559637000136 ], [ 123.95826256600014, 12.100572007000096 ], [ 123.97315514400009, 12.095648505000213 ], [ 123.97917728000027, 12.090969143000109 ], [ 123.98324629000012, 12.082342841000127 ], [ 123.99284915500027, 12.049302476000264 ], [ 123.99830162900014, 12.039740302000098 ], [ 124.04029381600014, 11.988104559000135 ], [ 124.0503035820002, 11.971136786000159 ], [ 124.05494225400003, 11.954413153000132 ], [ 124.03842207100013, 11.96454498900016 ], [ 124.01791425900001, 11.995550848000107 ], [ 123.9995223320002, 12.00836823100019 ], [ 124.0029403000002, 11.997788803999981 ], [ 124.00717207100013, 11.990708726000207 ], [ 124.02076256600014, 11.974839585000154 ], [ 124.00953209700003, 11.965765692000161 ], [ 124.01295006600026, 11.954250393000166 ], [ 124.03386478000004, 11.926459052000098 ], [ 124.05827884200005, 11.875189520000163 ], [ 124.06177819100026, 11.861558335000211 ], [ 124.06177819100026, 11.837713934000192 ], [ 124.05567467500009, 11.810532945000205 ], [ 124.05494225400003, 11.799790757000096 ], [ 124.0590926440002, 11.783921617000146 ], [ 124.06714928500003, 11.764105536000216 ], [ 124.07252037900025, 11.744086005000156 ], [ 124.06853274800017, 11.727850653000132 ], [ 124.05486087300005, 11.725572007000096 ], [ 124.0415145190002, 11.74298737200013 ], [ 124.02076256600014, 11.783107815000164 ], [ 124.00798587300017, 11.796698309000192 ], [ 123.97437584700015, 11.824937242000146 ], [ 123.94564863400024, 11.835679429000209 ], [ 123.92408287900014, 11.859564520000163 ], [ 123.89031009200005, 11.870794989000274 ], [ 123.87517337300005, 11.884507554000209 ], [ 123.85564212300005, 11.913397528000132 ], [ 123.84253991000014, 11.906154690000164 ], [ 123.82439212300017, 11.910060940000108 ], [ 123.78736412900014, 11.926459052000098 ], [ 123.76400800900024, 11.915676174000168 ], [ 123.74293053500014, 11.926947333000101 ], [ 123.7251082690002, 11.944891669000128 ], [ 123.71168053500014, 11.954413153000132 ], [ 123.71607506600014, 11.96674225500027 ], [ 123.72242272200015, 11.975816148000263 ], [ 123.7319442070002, 11.980902411000159 ], [ 123.74577884200016, 11.981105861000117 ], [ 123.73267662900003, 12.00836823100019 ], [ 123.72689863400012, 11.999335028000189 ], [ 123.72535241000003, 11.995306708000157 ], [ 123.71908613400012, 11.995306708000157 ], [ 123.71062259200005, 12.007391669000242 ], [ 123.69849694100014, 12.020819403000132 ], [ 123.68539472700024, 12.03180573100019 ], [ 123.65943444100014, 12.042954820000148 ], [ 123.65072675900001, 12.056952216000241 ], [ 123.65300540500004, 12.069281317000105 ], [ 123.67066491000014, 12.071030992000203 ], [ 123.64893639400009, 12.077582098000107 ], [ 123.62907962300017, 12.075873114000103 ], [ 123.6147567070002, 12.079331773000206 ], [ 123.60385175900024, 12.118719794000185 ], [ 123.59099368600016, 12.135484117000203 ], [ 123.56080162900003, 12.166652736000117 ], [ 123.5463973320002, 12.188055731000247 ], [ 123.53972415500027, 12.193996486000174 ], [ 123.51075280000009, 12.206000067000105 ], [ 123.50310306100016, 12.211004950000245 ], [ 123.48536217500032, 12.218085028000189 ], [ 123.46159915500004, 12.215725002000113 ], [ 123.43864993600005, 12.208400783000116 ], [ 123.42416425900001, 12.200832424000168 ], [ 123.41236412900014, 12.188177802000098 ], [ 123.38200931100016, 12.14508698100019 ], [ 123.37273196700016, 12.118638414000202 ], [ 123.3647567070002, 12.10602448100019 ], [ 123.35474694100014, 12.09540436399999 ], [ 123.34522545700008, 12.090969143000109 ], [ 123.33375084700003, 12.089504299000225 ], [ 123.32837975400014, 12.085272528000132 ], [ 123.32113691500012, 12.071030992000203 ], [ 123.26596113400012, 12.007513739000217 ], [ 123.18140709700026, 11.930853583000157 ], [ 123.1596785820002, 11.917792059000192 ], [ 123.14991295700008, 11.93016185100015 ], [ 123.1518660820002, 11.950384833000214 ], [ 123.15699303500014, 11.974310614000217 ], [ 123.16472415500004, 11.994370835000097 ], [ 123.17383873800031, 12.002834377000113 ], [ 123.18523196700016, 12.005113023000149 ], [ 123.19011478000016, 12.011664130000156 ], [ 123.19109134200005, 12.02118561400016 ], [ 123.19092858200008, 12.032904364000217 ], [ 123.19320722700013, 12.046332098000164 ], [ 123.19898522200003, 12.056586005000099 ], [ 123.20557701900009, 12.066107489000274 ], [ 123.21127363400001, 12.077297268000166 ], [ 123.21021569100014, 12.114976304000265 ], [ 123.21599368600016, 12.133490302000155 ], [ 123.23194420700008, 12.125677801999984 ], [ 123.2373153000002, 12.139227606000247 ], [ 123.24431399800017, 12.149847723000107 ], [ 123.25464928500014, 12.156805731000247 ], [ 123.2700301440002, 12.159165757000153 ], [ 123.27719160200002, 12.164292710000211 ], [ 123.27344811300009, 12.175848700000188 ], [ 123.2597762380002, 12.193996486000174 ], [ 123.27369225400003, 12.202948309000192 ], [ 123.28663170700031, 12.208482164000202 ], [ 123.29460696700028, 12.217230536000159 ], [ 123.2939559250002, 12.235541083000214 ], [ 123.25953209700015, 12.236883856000247 ], [ 123.23698978000004, 12.235174872000243 ], [ 123.21810957100013, 12.228094794000242 ], [ 123.2187606130002, 12.234849351000207 ], [ 123.21778405000009, 12.265448309000135 ], [ 123.2187606130002, 12.268011786000216 ], [ 123.2212020190002, 12.26972077000022 ], [ 123.24878991000014, 12.307114976000207 ], [ 123.25228925900001, 12.320624091000184 ], [ 123.25562584700003, 12.350287177000098 ], [ 123.27019290500004, 12.400539455000228 ], [ 123.27344811300009, 12.423651434000192 ], [ 123.27149498800031, 12.439439195000261 ], [ 123.26563561300009, 12.447333075000245 ], [ 123.25586998800009, 12.45368073100019 ], [ 123.24244225400025, 12.464585679000209 ], [ 123.23194420700008, 12.580633856000247 ], [ 123.23471113400024, 12.592759507000153 ], [ 123.2421981130002, 12.595363674000112 ], [ 123.25212649800017, 12.592027085000154 ], [ 123.2622176440002, 12.58612702000022 ], [ 123.27711022200003, 12.579535223000221 ], [ 123.30583743600016, 12.574937242000203 ], [ 123.32113691500012, 12.570746161000102 ], [ 123.33073978000016, 12.564357815000164 ], [ 123.33814537900014, 12.556626695000148 ], [ 123.34734134200016, 12.550930080000171 ], [ 123.35645592500009, 12.549261786000159 ], [ 123.35531660200013, 12.54767487200013 ] ] ], [ [ [ 122.30982506600003, 12.501125393 ], [ 122.27963300900012, 12.474514065000164 ], [ 122.26368248800009, 12.493231512000136 ], [ 122.25464928500014, 12.511175848000164 ], [ 122.25114993600016, 12.52968984600011 ], [ 122.25171959700003, 12.550238348000107 ], [ 122.25074303500026, 12.554185289000316 ], [ 122.24822024800005, 12.559027411000159 ], [ 122.24586022200003, 12.564601955000114 ], [ 122.24561608200008, 12.570746161000102 ], [ 122.24822024800005, 12.57587311400016 ], [ 122.25570722700002, 12.57884349200026 ], [ 122.25928795700008, 12.583726303999981 ], [ 122.26587975400025, 12.604803778000303 ], [ 122.27100670700008, 12.613104559000249 ], [ 122.27963300900012, 12.619126695000261 ], [ 122.27963300900012, 12.605454820000148 ], [ 122.29688561300009, 12.57391998900016 ], [ 122.31128991000014, 12.536688544000242 ], [ 122.30982506600003, 12.501125393 ] ] ], [ [ [ 122.15626061300031, 12.632147528000189 ], [ 122.15137780000009, 12.628119208000101 ], [ 122.13591556100016, 12.630275783000116 ], [ 122.1289168630002, 12.625392971000224 ], [ 122.12867272200015, 12.616400458000214 ], [ 122.13575280000009, 12.560777085000154 ], [ 122.1303817070002, 12.528387762000193 ], [ 122.10694420700031, 12.45978424700013 ], [ 122.09888756600003, 12.386379299000168 ], [ 122.08082116000003, 12.315497137000136 ], [ 122.05103600400014, 12.242987372000243 ], [ 122.04322350400014, 12.231838283000116 ], [ 122.03646894600013, 12.214056708000101 ], [ 122.04802493600016, 12.200628973000107 ], [ 122.06120853000016, 12.188055731000247 ], [ 122.05990644600024, 12.172837632000096 ], [ 122.0468856130002, 12.187160549000225 ], [ 122.04102623800009, 12.179348049000225 ], [ 122.02279707100001, 12.16282786700026 ], [ 122.01905358200008, 12.156073309000249 ], [ 122.01905358200008, 12.104559637000136 ], [ 122.01221764400009, 12.104559637000136 ], [ 121.99105879000024, 12.128485419000242 ], [ 121.98617597700002, 12.142564195000148 ], [ 121.9917098320002, 12.159165757000153 ], [ 121.96501712300017, 12.161444403000189 ], [ 121.9589949880002, 12.177801825000017 ], [ 121.96371504000012, 12.228094794000242 ], [ 121.97331790500016, 12.204494533000229 ], [ 121.98715254000012, 12.20010000200017 ], [ 121.99976647200003, 12.210638739000217 ], [ 122.0053817070002, 12.231838283000116 ], [ 122.00212649800028, 12.244370835000211 ], [ 121.99366295700008, 12.249212958000157 ], [ 121.98267662900003, 12.251410223000164 ], [ 121.97120201900009, 12.256048895000106 ], [ 121.92969811300009, 12.296372789000145 ], [ 121.92074629000012, 12.302883205000228 ], [ 121.92408287900025, 12.339341539000031 ], [ 121.93441816500001, 12.380072333000214 ], [ 121.94662519600013, 12.39940013200021 ], [ 121.97828209700003, 12.41181061400016 ], [ 121.9931746750002, 12.44179922100011 ], [ 121.99781334700015, 12.478908596000224 ], [ 121.99789472700013, 12.512396552000098 ], [ 121.99089603000027, 12.571193752000283 ], [ 121.99586022200026, 12.592718817000161 ], [ 122.01905358200008, 12.61172109600011 ], [ 122.07634524800005, 12.62734609600011 ], [ 122.10499108200008, 12.641791083000214 ], [ 122.1152449880002, 12.666327216000241 ], [ 122.14568118600016, 12.657456773000206 ], [ 122.15601647200026, 12.648342190000221 ], [ 122.15626061300031, 12.632147528000189 ] ] ], [ [ [ 123.64673912900014, 12.65713125200017 ], [ 123.6962996750002, 12.628363348000221 ], [ 123.70484459700026, 12.625392971000224 ], [ 123.70386803500014, 12.618841864000217 ], [ 123.70093834700015, 12.615423895000163 ], [ 123.69117272200015, 12.61172109600011 ], [ 123.70492597700024, 12.61172109600011 ], [ 123.71656334700003, 12.60830312700017 ], [ 123.72584069100003, 12.601467190000278 ], [ 123.73267662900003, 12.591253973000107 ], [ 123.72787519600013, 12.573635158000116 ], [ 123.73568769600001, 12.55369700700021 ], [ 123.74732506600014, 12.534491278000189 ], [ 123.75318444100014, 12.519232489000217 ], [ 123.7563582690002, 12.503485419000242 ], [ 123.77051842500032, 12.471096096000224 ], [ 123.78158613400001, 12.418687242000146 ], [ 123.78394616000026, 12.413723049000225 ], [ 123.78939863400001, 12.409125067000105 ], [ 123.7900496750002, 12.398342190000108 ], [ 123.78736412900014, 12.375555731000247 ], [ 123.79330488400012, 12.355454820000205 ], [ 123.79476972700013, 12.343329169000128 ], [ 123.7905379570002, 12.337958075000131 ], [ 123.78248131600026, 12.341131903000189 ], [ 123.77491295700031, 12.349025783000172 ], [ 123.76921634200005, 12.358954169000299 ], [ 123.76685631600003, 12.368719794000128 ], [ 123.76254316500012, 12.378078518000166 ], [ 123.73267662900003, 12.406236070000261 ], [ 123.58318118600016, 12.62392812700017 ], [ 123.58025149800017, 12.633449611000174 ], [ 123.58130944100014, 12.646429755000156 ], [ 123.58814537900014, 12.646429755000156 ], [ 123.59734134200005, 12.641343492000203 ], [ 123.60181725400003, 12.654608466000184 ], [ 123.60474694100003, 12.674017645000163 ], [ 123.60922285200013, 12.687445380000156 ], [ 123.61833743600016, 12.687323309000305 ], [ 123.62956790500016, 12.677639065000164 ], [ 123.64673912900014, 12.65713125200017 ] ] ], [ [ [ 121.70045006600003, 12.950140692000161 ], [ 121.71412194100014, 12.947333075000131 ], [ 121.71827233200008, 12.947333075000131 ], [ 121.72575931100016, 12.939886786000159 ], [ 121.73170006600026, 12.928778387000023 ], [ 121.72917728000016, 12.919134833000214 ], [ 121.72396894600001, 12.913967190000164 ], [ 121.72046959700015, 12.913234768000109 ], [ 121.71745853000016, 12.911078192000218 ], [ 121.71924889400009, 12.90729401200025 ], [ 121.72217858200008, 12.903631903000246 ], [ 121.71778405000009, 12.899603583000157 ], [ 121.71119225400003, 12.900376695000205 ], [ 121.70671634200005, 12.90509674700013 ], [ 121.70329837300005, 12.904120184000192 ], [ 121.69906660200013, 12.90534088700025 ], [ 121.69166100400014, 12.91445547100011 ], [ 121.68474368600005, 12.920152085000211 ], [ 121.68279056100027, 12.924383856000134 ], [ 121.68181399800017, 12.935532945000261 ], [ 121.68864993600005, 12.947170315000164 ], [ 121.70045006600003, 12.950140692000161 ] ] ], [ [ [ 123.20142662900014, 12.906439520000106 ], [ 123.2265731130002, 12.898342190000164 ], [ 123.2461043630002, 12.906480210000097 ], [ 123.26197350400025, 12.897853908000286 ], [ 123.26856530000032, 12.888169664000145 ], [ 123.27263431100016, 12.877386786000216 ], [ 123.28028405000009, 12.864935614000103 ], [ 123.28663170700031, 12.815008856000247 ], [ 123.36085045700008, 12.736517645000106 ], [ 123.37582441500001, 12.693589585000211 ], [ 123.34107506600003, 12.71820709800005 ], [ 123.27344811300009, 12.810939846000167 ], [ 123.2519637380002, 12.832709052000155 ], [ 123.23845462300017, 12.841498114000103 ], [ 123.20101972700013, 12.848822333000101 ], [ 123.18531334700015, 12.85846588700025 ], [ 123.10987389400032, 12.923895575000131 ], [ 123.10206139400032, 12.937567450000245 ], [ 123.09791100400003, 12.938910223000107 ], [ 123.08033287900025, 12.957220770000163 ], [ 123.07789147200015, 12.9617373720003 ], [ 123.06967207100013, 12.964789130000156 ], [ 123.06609134200016, 12.971991278000132 ], [ 123.06381269600013, 12.980861721000167 ], [ 123.06055748800009, 12.988470770000106 ], [ 123.03549238400012, 13.00438060100015 ], [ 122.97388756600014, 13.018703518000109 ], [ 122.9506942070002, 13.043687242000146 ], [ 122.94410241000003, 13.099554755000099 ], [ 122.94450931100005, 13.111314195000148 ], [ 122.95826256600003, 13.12002187700017 ], [ 122.97543379000024, 13.121893622000243 ], [ 122.98894290500016, 13.128973700000188 ], [ 122.9921981130002, 13.153550523000206 ], [ 123.00391686300009, 13.150213934000249 ], [ 123.0171004570002, 13.143622137000307 ], [ 123.03980553500014, 13.128078518000166 ], [ 123.0498153000002, 13.118475653000132 ], [ 123.05884850400014, 13.107855536000102 ], [ 123.07422936300009, 13.084662177000155 ], [ 123.09457441500012, 13.043687242000146 ], [ 123.11833743600016, 13.024603583000214 ], [ 123.12208092500032, 13.019761460000097 ], [ 123.12517337300028, 13.008042709999984 ], [ 123.13933353000004, 12.983384507000153 ], [ 123.14242597700002, 12.971380927000155 ], [ 123.1450301440002, 12.968736070000261 ], [ 123.1601668630002, 12.937567450000245 ], [ 123.17701256600014, 12.922308661000102 ], [ 123.20142662900014, 12.906439520000106 ] ] ], [ [ [ 124.20915774800005, 13.178208726000207 ], [ 124.1967879570002, 13.173325914000145 ], [ 124.16236412900025, 13.180812893000109 ], [ 124.14861087300005, 13.185777085000154 ], [ 124.1362410820002, 13.188544012000193 ], [ 124.11378014400032, 13.189032294000299 ], [ 124.09791100400003, 13.192450262000307 ], [ 124.06902103000016, 13.203762111000174 ], [ 124.06560306100016, 13.210760809000135 ], [ 124.08472741000014, 13.216986395000106 ], [ 124.11410566500012, 13.227728583000214 ], [ 124.12378991000003, 13.233140367000203 ], [ 124.13884524800017, 13.234198309000135 ], [ 124.17872155000009, 13.222967841000127 ], [ 124.19792728000004, 13.213039455000228 ], [ 124.20964603000016, 13.195786851000207 ], [ 124.20915774800005, 13.178208726000207 ] ] ], [ [ [ 123.96257571700028, 13.287339585000211 ], [ 123.98682701900009, 13.276027736000174 ], [ 123.99537194100003, 13.278794664000145 ], [ 124.0024520190002, 13.281073309000249 ], [ 124.01579837300017, 13.280422268000166 ], [ 124.01693769600013, 13.28034088700025 ], [ 124.0180770190002, 13.278998114000103 ], [ 124.02556399800017, 13.270168361000231 ], [ 124.03256269600001, 13.266750393000223 ], [ 124.03825931100016, 13.269680080000228 ], [ 124.0385848320002, 13.273993231000134 ], [ 124.03956139400009, 13.278509833000101 ], [ 124.04769941500001, 13.278957424000112 ], [ 124.05640709700015, 13.276068427000212 ], [ 124.06918379000012, 13.273016669000128 ], [ 124.08448326900009, 13.267401434000135 ], [ 124.08562259200005, 13.262925523000263 ], [ 124.08627363400012, 13.260443427000098 ], [ 124.07309004000012, 13.254055080000228 ], [ 124.06755618600005, 13.251410223000164 ], [ 124.06226647200003, 13.245428778000246 ], [ 124.05640709700015, 13.235988674000225 ], [ 124.04615319100014, 13.226385809000135 ], [ 124.03948001400011, 13.224961656000175 ], [ 124.0254012380002, 13.221991278000246 ], [ 124.01742597700002, 13.223781643000166 ], [ 123.99789472700024, 13.228216864000217 ], [ 123.97673587300017, 13.235581773000206 ], [ 123.95834394600013, 13.23704661700026 ], [ 123.93930097700002, 13.244452216000241 ], [ 123.9218856130002, 13.25869375200017 ], [ 123.91391035200024, 13.271307684000249 ], [ 123.91480553500014, 13.279608466000127 ], [ 123.91285241000003, 13.285142320000261 ], [ 123.91244550900001, 13.288641669000128 ], [ 123.91391035200024, 13.289455471000167 ], [ 123.91472415500016, 13.289943752000113 ], [ 123.96257571700028, 13.287339585000211 ] ] ], [ [ [ 123.8842879570002, 13.229925848000221 ], [ 123.8735457690002, 13.229641018000109 ], [ 123.86361738400001, 13.244777736000174 ], [ 123.85775800900012, 13.250148830000171 ], [ 123.84595787900003, 13.27024974200009 ], [ 123.84449303500003, 13.282416082999987 ], [ 123.84937584700003, 13.299139716000184 ], [ 123.85108483200031, 13.317572333000214 ], [ 123.8471785820002, 13.330877997000186 ], [ 123.83676191500012, 13.344671942000105 ], [ 123.84009850400014, 13.34853750200017 ], [ 123.84888756600003, 13.354152736000287 ], [ 123.8588973320002, 13.353827216000127 ], [ 123.90007571700028, 13.340521552000212 ], [ 123.90609785200002, 13.335598049000282 ], [ 123.91342207100001, 13.332220770000163 ], [ 123.92212975400014, 13.329982815000164 ], [ 123.92212975400014, 13.320013739000103 ], [ 123.89527428500026, 13.292873440000221 ], [ 123.89031009200005, 13.274074611000117 ], [ 123.89665774800005, 13.258490302000212 ], [ 123.90357506600014, 13.24648672100011 ], [ 123.9018660820002, 13.238348700000245 ], [ 123.8842879570002, 13.229925848000221 ] ] ], [ [ [ 123.82048587300017, 13.380275783000116 ], [ 123.82748457100013, 13.373114325000188 ], [ 123.8330184250002, 13.373236395000163 ], [ 123.84294681100016, 13.371812242000203 ], [ 123.84555097700013, 13.367824611000231 ], [ 123.83472741000014, 13.355902411000159 ], [ 123.82309004000001, 13.35195547100011 ], [ 123.80152428500014, 13.366034247000243 ], [ 123.77515709700026, 13.39158763200021 ], [ 123.77165774800017, 13.403509833000157 ], [ 123.78736412900014, 13.399074611000174 ], [ 123.8042098320002, 13.391546942000218 ], [ 123.82048587300017, 13.380275783000116 ] ] ], [ [ [ 120.97868899800005, 13.526516018 ], [ 120.98438561300031, 13.522894598000221 ], [ 120.97966556100016, 13.514146226000264 ], [ 120.97388756600014, 13.507757880000156 ], [ 120.96656334700015, 13.503973700000188 ], [ 120.9570418630002, 13.502997137000136 ], [ 120.96306399800017, 13.494330145000163 ], [ 120.9731551440002, 13.482733466000127 ], [ 120.98462975400014, 13.472601630000099 ], [ 120.99488366000014, 13.468247789000145 ], [ 121.00391686300031, 13.459662177000155 ], [ 121.0268660820002, 13.42157623900016 ], [ 121.04273522200003, 13.413031317000161 ], [ 121.10865319100014, 13.415961005000099 ], [ 121.12525475400003, 13.40477122600015 ], [ 121.1215926440002, 13.372015692000161 ], [ 121.12826582100013, 13.372015692000161 ], [ 121.13013756600003, 13.378363348000107 ], [ 121.13282311300009, 13.39362213700025 ], [ 121.13510175900024, 13.399359442000218 ], [ 121.13933353000016, 13.405422268000223 ], [ 121.14112389400009, 13.407416083000214 ], [ 121.14877363400012, 13.413031317000161 ], [ 121.15886478000004, 13.417547919000128 ], [ 121.17164147200003, 13.421454169000185 ], [ 121.18336022200015, 13.428127346000167 ], [ 121.19027754000012, 13.440904039000259 ], [ 121.19711347700002, 13.440904039000259 ], [ 121.21778405000032, 13.404120184000135 ], [ 121.33375084700026, 13.310614325000245 ], [ 121.37623131600026, 13.24510325700021 ], [ 121.39210045700008, 13.235500393000223 ], [ 121.41391035200002, 13.232733466000184 ], [ 121.43051191500001, 13.224269924000112 ], [ 121.44076582100001, 13.209418036000159 ], [ 121.44361412900014, 13.18768952000022 ], [ 121.44068444100003, 13.17743561400016 ], [ 121.4355574880002, 13.166693427000155 ], [ 121.43262780000009, 13.156073309000192 ], [ 121.43628991000014, 13.146063544000242 ], [ 121.44752037900014, 13.13898346600007 ], [ 121.45899498800009, 13.139715887000193 ], [ 121.47022545700008, 13.143744208000157 ], [ 121.48121178500014, 13.146063544000242 ], [ 121.50464928500003, 13.145168361000117 ], [ 121.52702884200005, 13.140773830000228 ], [ 121.5444442070002, 13.130316473000164 ], [ 121.55298912900025, 13.111314195000148 ], [ 121.54916425900012, 13.090643622000243 ], [ 121.53589928500003, 13.076849677000155 ], [ 121.50171959700015, 13.054266669000185 ], [ 121.48951256600003, 13.036769924000112 ], [ 121.48316491000014, 13.014715887000136 ], [ 121.48194420700008, 12.990871486000174 ], [ 121.49244225400014, 12.929510809000249 ], [ 121.49203535200013, 12.913316148000092 ], [ 121.48308353000016, 12.872137762000193 ], [ 121.48462975400025, 12.858710028000132 ], [ 121.47779381600003, 12.858710028000132 ], [ 121.48340905000032, 12.831122137000023 ], [ 121.48560631600003, 12.768459377000113 ], [ 121.4951278000002, 12.745428778000132 ], [ 121.52247155000009, 12.711493231000134 ], [ 121.52613366000014, 12.704494533000116 ], [ 121.5273543630002, 12.692206122000243 ], [ 121.53093509200005, 12.676011460000211 ], [ 121.53638756600026, 12.66034577000022 ], [ 121.54639733200008, 12.644110419000128 ], [ 121.54737389400032, 12.636908270000276 ], [ 121.54566491000014, 12.611232815000108 ], [ 121.54273522200015, 12.609035549000225 ], [ 121.53825931100005, 12.609198309000192 ], [ 121.53239993600016, 12.605454820000148 ], [ 121.49341881600003, 12.549261786000159 ], [ 121.48145592500009, 12.539007880000099 ], [ 121.45671634200005, 12.522935289000145 ], [ 121.44898522200003, 12.520819403000246 ], [ 121.44239342500032, 12.522406317000275 ], [ 121.43783613400001, 12.521633205000228 ], [ 121.43628991000014, 12.512396552000098 ], [ 121.43677819100003, 12.495917059000192 ], [ 121.43897545700031, 12.489243882000039 ], [ 121.44361412900014, 12.482001044000128 ], [ 121.43628991000014, 12.474514065000164 ], [ 121.43002363400001, 12.482001044000128 ], [ 121.42628014400009, 12.475083726000094 ], [ 121.42465254000012, 12.470038153000189 ], [ 121.42562910200002, 12.464097398000263 ], [ 121.43002363400001, 12.454657294000242 ], [ 121.41187584700015, 12.443182684000305 ], [ 121.41244550900001, 12.414984442000218 ], [ 121.42530358200008, 12.384222723000221 ], [ 121.44361412900014, 12.365301825000188 ], [ 121.44361412900014, 12.358465887000193 ], [ 121.40333092500009, 12.369818426999984 ], [ 121.38428795700008, 12.368597723000221 ], [ 121.38160241000003, 12.351019598000221 ], [ 121.3872176440002, 12.344712632000096 ], [ 121.38892662900003, 12.336371161000102 ], [ 121.38697350400025, 12.326890367000317 ], [ 121.38160241000003, 12.317531643000109 ], [ 121.39039147200026, 12.313055731000134 ], [ 121.39454186300031, 12.307684637000136 ], [ 121.39584394600001, 12.300238348000164 ], [ 121.39576256600003, 12.28953685100015 ], [ 121.3657332690002, 12.307766018000223 ], [ 121.35474694100014, 12.324123440000051 ], [ 121.34017988400001, 12.316636460000154 ], [ 121.31641686300009, 12.296372789000145 ], [ 121.30339603000016, 12.293402411000272 ], [ 121.29127037900003, 12.286200262000193 ], [ 121.2729598320002, 12.269029039000259 ], [ 121.24781334700015, 12.219916083000101 ], [ 121.24496504000024, 12.214422919000128 ], [ 121.23015384200005, 12.214341539000145 ], [ 121.20777428500003, 12.236029364000217 ], [ 121.19369550900001, 12.241766669000015 ], [ 121.13168379000012, 12.241766669000015 ], [ 121.11361738400024, 12.251288153000189 ], [ 121.09913170700008, 12.274644273000206 ], [ 121.0932723320002, 12.303697007000096 ], [ 121.1010848320002, 12.330511786000159 ], [ 121.10694420700008, 12.314357815000221 ], [ 121.11597741000014, 12.305243231000134 ], [ 121.12818444100014, 12.303656317000105 ], [ 121.1425887380002, 12.310044664000316 ], [ 121.13493899800017, 12.313462632000096 ], [ 121.12818444100014, 12.312933661000159 ], [ 121.1215926440002, 12.310044664000316 ], [ 121.11540774800028, 12.327541408000059 ], [ 121.11475670700008, 12.330511786000159 ], [ 121.09441165500016, 12.345404364000103 ], [ 121.08725019600001, 12.343247789000145 ], [ 121.08725019600001, 12.323675848000164 ], [ 121.07113691500024, 12.332505601000207 ], [ 121.05062910200002, 12.349432684000192 ], [ 121.03288821700028, 12.368109442000105 ], [ 121.02051842500009, 12.389797268000223 ], [ 120.99488366000014, 12.413723049000225 ], [ 120.98682701900009, 12.41620514500022 ], [ 120.98113040500027, 12.422674872000243 ], [ 120.9389754570002, 12.493963934000135 ], [ 120.92603600400014, 12.501857815000221 ], [ 120.91635175900001, 12.512396552000098 ], [ 120.9184676440002, 12.536281643000223 ], [ 120.92904707100013, 12.577582098000164 ], [ 120.92790774800028, 12.597601630000156 ], [ 120.92212975400003, 12.617092190000051 ], [ 120.91244550900012, 12.634711005000099 ], [ 120.88591556100005, 12.664984442000161 ], [ 120.8686629570002, 12.699652411000045 ], [ 120.8545028000002, 12.715318101000207 ], [ 120.83220462300005, 12.724025783000172 ], [ 120.81226647200015, 12.724269924000225 ], [ 120.79786217500009, 12.729437567000161 ], [ 120.7924910820002, 12.752590236000117 ], [ 120.79135175900001, 12.76386139499999 ], [ 120.78630618600016, 12.782619533000229 ], [ 120.7851668630002, 12.79385000200017 ], [ 120.78199303500014, 12.805568752000227 ], [ 120.76531009200005, 12.831447658000229 ], [ 120.76644941500012, 12.840521552000155 ], [ 120.77084394600024, 12.847113348000221 ], [ 120.77588951900009, 12.852728583000214 ], [ 120.77898196700005, 12.858710028000132 ], [ 120.77963300900012, 12.867905992000203 ], [ 120.77670332100013, 12.916083075000131 ], [ 120.76742597700013, 12.946844794000128 ], [ 120.75831139400032, 13.002386786000102 ], [ 120.74097741000014, 13.033270575000245 ], [ 120.69695071700005, 13.092108466000127 ], [ 120.66488691500001, 13.155910549000225 ], [ 120.64234459700026, 13.183254299000112 ], [ 120.59457441500012, 13.199204820000148 ], [ 120.57634524800005, 13.22142161700009 ], [ 120.55982506600026, 13.228664455000228 ], [ 120.52515709700015, 13.225653387000136 ], [ 120.51482181100016, 13.230536200000245 ], [ 120.52621504000024, 13.249172268000166 ], [ 120.49976647200015, 13.273342190000164 ], [ 120.47999108200008, 13.30149974200026 ], [ 120.46778405000009, 13.333482164000259 ], [ 120.45972741000014, 13.403713283000116 ], [ 120.45248457100001, 13.420233466000184 ], [ 120.4399520190002, 13.427232164000145 ], [ 120.4326278000002, 13.426703192000105 ], [ 120.4150496750002, 13.423000393000223 ], [ 120.40821373800009, 13.420477606000134 ], [ 120.40015709700003, 13.41502513200021 ], [ 120.39576256600014, 13.409491278000246 ], [ 120.39242597700013, 13.404201565000164 ], [ 120.38786868600016, 13.399359442000218 ], [ 120.36817467500032, 13.38336823100002 ], [ 120.3559676440002, 13.380519924000168 ], [ 120.34009850400014, 13.386297919000128 ], [ 120.3276473320002, 13.396877346000167 ], [ 120.31690514400009, 13.41120026200025 ], [ 120.30933678500014, 13.427639065000164 ], [ 120.3066512380002, 13.444322007000096 ], [ 120.31055748800009, 13.466986395000276 ], [ 120.32154381600003, 13.487779039000259 ], [ 120.33765709700015, 13.505316473000164 ], [ 120.35661868600005, 13.518377997000186 ], [ 120.38013756600026, 13.526353257000153 ], [ 120.40316816500012, 13.527329820000205 ], [ 120.4716903000002, 13.511542059000135 ], [ 120.53191165500004, 13.509222723000107 ], [ 120.54468834700026, 13.510931708000214 ], [ 120.55518639400009, 13.513495184000192 ], [ 120.56544030000009, 13.513128973000164 ], [ 120.58472741000003, 13.501857815000164 ], [ 120.59538821700005, 13.498928127000283 ], [ 120.61443118600005, 13.496161200000017 ], [ 120.65333092500032, 13.496568101000207 ], [ 120.67652428500014, 13.49298737200013 ], [ 120.69019616000003, 13.481878973000221 ], [ 120.70639082100024, 13.490383205000228 ], [ 120.71924889400009, 13.48517487200013 ], [ 120.7373153000002, 13.468247789000145 ], [ 120.75456790500004, 13.466742255000099 ], [ 120.7700301440002, 13.470689195000205 ], [ 120.79932701900009, 13.481878973000221 ], [ 120.88819420700008, 13.501857815000164 ], [ 120.91537519600013, 13.51666901200025 ], [ 120.92839603000016, 13.504950262000193 ], [ 120.93677819100026, 13.507513739000103 ], [ 120.94483483200008, 13.512844143000223 ], [ 120.9502059250002, 13.530340887000193 ], [ 120.9643660820002, 13.526353257000153 ], [ 120.96900475400014, 13.527167059000135 ], [ 120.97738691500012, 13.530340887000193 ], [ 120.97868899800005, 13.526516018 ] ] ], [ [ [ 121.88754316500012, 13.554754950000245 ], [ 121.9091903000002, 13.522894598000221 ], [ 121.91374759200005, 13.528631903000189 ], [ 121.92505944100003, 13.538641669000242 ], [ 121.92969811300009, 13.544623114000217 ], [ 121.94499759200005, 13.528998114000217 ], [ 121.96802819100003, 13.523749091000127 ], [ 121.98902428500003, 13.530462958000101 ], [ 121.99789472700013, 13.550767320000148 ], [ 122.01099694100026, 13.542141018000166 ], [ 122.02019290500016, 13.533636786000159 ], [ 122.0234481130002, 13.523179429000095 ], [ 122.01905358200008, 13.509222723000107 ], [ 122.03394616000014, 13.514634507000039 ], [ 122.04517662900003, 13.509222723000107 ], [ 122.04867597700002, 13.498765367000317 ], [ 122.0395613940002, 13.489325262000193 ], [ 122.04379316500012, 13.485337632000096 ], [ 122.0546981130002, 13.478094794000185 ], [ 122.05990644600024, 13.475734768000166 ], [ 122.0752059250002, 13.485419012000307 ], [ 122.09669030000032, 13.479681708000214 ], [ 122.1152449880002, 13.464992580000228 ], [ 122.1220809250002, 13.447739976000207 ], [ 122.11841881600014, 13.443101304000095 ], [ 122.1113387380002, 13.441392320000261 ], [ 122.10157311300009, 13.440904039000259 ], [ 122.10084069100014, 13.433905341000127 ], [ 122.10157311300009, 13.416693427000098 ], [ 122.1054793630002, 13.408433335000211 ], [ 122.12370853000027, 13.395209051999984 ], [ 122.1289168630002, 13.386297919000128 ], [ 122.12029056100005, 13.356634833000214 ], [ 122.0620223320002, 13.298570054000152 ], [ 122.0395613940002, 13.269598700000245 ], [ 122.04908287900014, 13.248358466000184 ], [ 122.04029381600026, 13.230698960000211 ], [ 122.0087996750002, 13.204779364000217 ], [ 121.9931746750002, 13.201605536000159 ], [ 121.97673587300017, 13.21308014500022 ], [ 121.96257571700005, 13.228013414000259 ], [ 121.95386803500014, 13.235500393000223 ], [ 121.9428817070002, 13.240179755000156 ], [ 121.9091903000002, 13.269598700000245 ], [ 121.90072675900001, 13.271958726000094 ], [ 121.88347415500004, 13.273179429000095 ], [ 121.8750106130002, 13.276434637000136 ], [ 121.86491946700005, 13.284369208000214 ], [ 121.84766686300031, 13.310614325000245 ], [ 121.81723066500012, 13.341945705000171 ], [ 121.81373131600003, 13.352240302000098 ], [ 121.8178817070002, 13.375799872000243 ], [ 121.81723066500012, 13.382879950000245 ], [ 121.81413821700028, 13.397528387000136 ], [ 121.81430097700024, 13.450506903000075 ], [ 121.81723066500012, 13.464829820000261 ], [ 121.82439212300005, 13.474066473000221 ], [ 121.85075931100016, 13.520941473000164 ], [ 121.85385175900012, 13.530340887000193 ], [ 121.85564212300028, 13.558417059000135 ], [ 121.85865319100014, 13.56549713700025 ], [ 121.87305748800009, 13.568508205000171 ], [ 121.88754316500012, 13.554754950000245 ] ] ], [ [ [ 121.08578535200013, 13.570624091000241 ], [ 121.09131920700008, 13.562323309000192 ], [ 121.0942488940002, 13.537054755000213 ], [ 121.08863366000003, 13.530340887000193 ], [ 121.07211347700002, 13.535834052000212 ], [ 121.04346764400009, 13.561224677000268 ], [ 121.04346764400009, 13.567572333000157 ], [ 121.05128014400032, 13.567775783000116 ], [ 121.05811608200008, 13.565090236000231 ], [ 121.06690514400032, 13.567206122000186 ], [ 121.07748457100013, 13.572251695000261 ], [ 121.08578535200013, 13.570624091000241 ] ] ], [ [ [ 120.16407311300009, 13.834906317000105 ], [ 120.16871178500003, 13.824530341000127 ], [ 120.18336022200015, 13.828802802000212 ], [ 120.20264733200031, 13.82461172100011 ], [ 120.2221785820002, 13.81541575700021 ], [ 120.23764082100013, 13.804632880000213 ], [ 120.27173912900014, 13.752508856000247 ], [ 120.26677493600027, 13.741278387000193 ], [ 120.25733483200008, 13.733099677000098 ], [ 120.25269616000014, 13.724432684000192 ], [ 120.26091556100016, 13.711574611000231 ], [ 120.26929772200003, 13.707342841000241 ], [ 120.27719160200002, 13.706040757000153 ], [ 120.28305097700013, 13.702460028000246 ], [ 120.28541100400014, 13.691392320000034 ], [ 120.2685653000002, 13.678697007000096 ], [ 120.26433353000016, 13.673732815000221 ], [ 120.2578231130002, 13.68211497600015 ], [ 120.25082441500001, 13.693793036000102 ], [ 120.2431746750002, 13.704046942000105 ], [ 120.2338973320002, 13.708441473000164 ], [ 120.21949303500026, 13.711249091000127 ], [ 120.21363366000014, 13.718247789000145 ], [ 120.21021569100003, 13.727199611000231 ], [ 120.20346113400012, 13.735785223000221 ], [ 120.19288170700008, 13.74258047100011 ], [ 120.18279056100016, 13.746730861000117 ], [ 120.17188561300009, 13.748846747000243 ], [ 120.15886478000016, 13.749416408000172 ], [ 120.15251712300017, 13.752630927000155 ], [ 120.14112389400009, 13.766750393000109 ], [ 120.10824629000012, 13.776841539000145 ], [ 120.09229576900009, 13.794501044000185 ], [ 120.08285566500012, 13.817938544000128 ], [ 120.07992597700013, 13.842230536000102 ], [ 120.08130944100003, 13.852932033000172 ], [ 120.08570397200015, 13.860785223000107 ], [ 120.09302819100014, 13.865301825000245 ], [ 120.10368899800017, 13.86627838700025 ], [ 120.11833743600005, 13.860825914000202 ], [ 120.14283287900003, 13.848700262000193 ], [ 120.16407311300009, 13.834906317000105 ] ] ], [ [ [ 124.2358504570002, 14.068060614000274 ], [ 124.25261478000027, 14.046698309000135 ], [ 124.26563561300009, 14.022691148000149 ], [ 124.27393639400032, 13.99648672100011 ], [ 124.2773543630002, 13.955511786000102 ], [ 124.28687584700015, 13.952582098000164 ], [ 124.2954207690002, 13.94550202000022 ], [ 124.3081160820002, 13.928168036000216 ], [ 124.30062910200013, 13.920721747000243 ], [ 124.30543053500014, 13.914048570000261 ], [ 124.30689537900003, 13.911200262000136 ], [ 124.3081160820002, 13.906439520000276 ], [ 124.31495201900009, 13.906439520000276 ], [ 124.32976321700005, 13.933091539000202 ], [ 124.35775800900024, 13.920599677000098 ], [ 124.4179793630002, 13.872951565000108 ], [ 124.4179793630002, 13.865464585000211 ], [ 124.40349368600027, 13.856838283000229 ], [ 124.38998457100013, 13.845648505000213 ], [ 124.40357506600026, 13.838812567000218 ], [ 124.40984134200028, 13.826402085000097 ], [ 124.41293379000012, 13.811672268000166 ], [ 124.4179793630002, 13.797796942000218 ], [ 124.39877363400024, 13.790432033000229 ], [ 124.38998457100013, 13.790350653000246 ], [ 124.39722741000014, 13.779608466000184 ], [ 124.39877363400024, 13.77118561400016 ], [ 124.39576256600014, 13.74237702000022 ], [ 124.3911238940002, 13.721869207999987 ], [ 124.38998457100013, 13.711574611000231 ], [ 124.40748131600014, 13.683742580000171 ], [ 124.4087020190002, 13.667303778000189 ], [ 124.38656660200002, 13.660060940000108 ], [ 124.36605879000012, 13.660711981000247 ], [ 124.35531660200002, 13.659613348000164 ], [ 124.35084069100014, 13.651800848000164 ], [ 124.3491317070002, 13.632757880000213 ], [ 124.33334394600013, 13.57245514500022 ], [ 124.33472741000026, 13.557603257000096 ], [ 124.31983483200031, 13.567775783000116 ], [ 124.30640709700003, 13.588527736000231 ], [ 124.2934676440002, 13.604071356000247 ], [ 124.28077233200008, 13.598578192000105 ], [ 124.2680770190002, 13.602199611000174 ], [ 124.25163821700016, 13.599188544000185 ], [ 124.23519941500001, 13.591538804000152 ], [ 124.2226668630002, 13.581854559000078 ], [ 124.2153426440002, 13.567531643000166 ], [ 124.20801842500009, 13.547796942000275 ], [ 124.19939212300028, 13.530422268000109 ], [ 124.18775475400003, 13.522894598000221 ], [ 124.17017662900025, 13.529771226000037 ], [ 124.1162215500002, 13.578111070000261 ], [ 124.08594811300009, 13.600043036000159 ], [ 124.06869550900012, 13.606105861000231 ], [ 124.04737389400009, 13.606024481000247 ], [ 124.0512801440002, 13.619533596000224 ], [ 124.04810631600014, 13.633368231000134 ], [ 124.04004967500009, 13.646307684000249 ], [ 124.03044681100016, 13.656927802000212 ], [ 124.02605228000004, 13.669623114000103 ], [ 124.03589928500014, 13.680812893000166 ], [ 124.06177819100026, 13.69476959800005 ], [ 124.08716881600014, 13.716131903000189 ], [ 124.1074324880002, 13.745103257000096 ], [ 124.12183678500014, 13.77977122600015 ], [ 124.12940514400009, 13.818304755000156 ], [ 124.12077884200016, 13.875921942000105 ], [ 124.1259871750002, 13.890326239000103 ], [ 124.13591556100016, 13.90729401200025 ], [ 124.13453209700003, 13.925034898000149 ], [ 124.12029056100016, 13.963527736000231 ], [ 124.1162215500002, 13.980698960000097 ], [ 124.1162215500002, 13.988959052000155 ], [ 124.1211043630002, 13.994126695000261 ], [ 124.12964928500014, 14.001695054000209 ], [ 124.13591556100016, 14.010646877000227 ], [ 124.13306725400014, 14.01972077000022 ], [ 124.12452233200031, 14.033840236000174 ], [ 124.12452233200031, 14.04938385600019 ], [ 124.12964928500014, 14.064846096000224 ], [ 124.13689212300017, 14.078355210000097 ], [ 124.14966881600003, 14.062241929000095 ], [ 124.16391035200002, 14.065578518000223 ], [ 124.1845809250002, 14.085191148000092 ], [ 124.19361412900014, 14.090033270000163 ], [ 124.20093834700015, 14.092230536000102 ], [ 124.20777428500014, 14.091253973000164 ], [ 124.21566816500012, 14.086493231000304 ], [ 124.2358504570002, 14.068060614000274 ] ] ], [ [ [ 122.17701256600003, 14.007066148000149 ], [ 122.15837649800005, 14.006781317000161 ], [ 122.13607832100013, 14.019232489000274 ], [ 122.09896894600001, 14.050360419000242 ], [ 122.03337649800005, 14.092027085000211 ], [ 121.9931746750002, 14.127630926999984 ], [ 121.98145592500009, 14.13300202000022 ], [ 121.96517988400024, 14.14297109600011 ], [ 121.94581139400032, 14.165757554000265 ], [ 121.92986087300005, 14.191148179000095 ], [ 121.92351321700016, 14.208685614000103 ], [ 121.92660566500001, 14.22125885600019 ], [ 121.93433678500003, 14.229437567000218 ], [ 121.94507897200003, 14.232611395000106 ], [ 121.95777428500026, 14.229966539000259 ], [ 121.96404056100016, 14.226141669000185 ], [ 121.96810957100001, 14.221380927000098 ], [ 121.97584069100026, 14.210435289000202 ], [ 122.10474694100014, 14.10260651200025 ], [ 122.14975019600013, 14.072699286000159 ], [ 122.17269941500024, 14.05353424700013 ], [ 122.18344160200013, 14.030585028000132 ], [ 122.17701256600003, 14.007066148000149 ] ] ], [ [ [ 122.37484785200013, 14.681463934000135 ], [ 122.35401451900009, 14.679510809000249 ], [ 122.3193465500002, 14.683498440000221 ], [ 122.3164168630002, 14.69891998900016 ], [ 122.34156334700015, 14.712591864000103 ], [ 122.36426842500009, 14.720607815000164 ], [ 122.38062584700015, 14.728705145000106 ], [ 122.3969832690002, 14.732245184000135 ], [ 122.41179446700016, 14.725816148000206 ], [ 122.41846764400032, 14.719956773000092 ], [ 122.41960696700016, 14.705145575000131 ], [ 122.39779707100013, 14.685858466000298 ], [ 122.37484785200013, 14.681463934000135 ] ] ], [ [ [ 122.13843834700015, 14.838934637000136 ], [ 122.14600670700008, 14.833644924000112 ], [ 122.15707441500012, 14.834295966000127 ], [ 122.16976972700013, 14.83877187700017 ], [ 122.20386803500003, 14.83877187700017 ], [ 122.19695071700005, 14.832912502000056 ], [ 122.19263756600014, 14.824774481000247 ], [ 122.19239342500009, 14.814927476000207 ], [ 122.19711347700002, 14.803941148000149 ], [ 122.20630944100026, 14.796616929000152 ], [ 122.21697024800017, 14.795152085000097 ], [ 122.2353621750002, 14.79775625200017 ], [ 122.24822024800005, 14.788153387000136 ], [ 122.25700931100016, 14.767035223000221 ], [ 122.25660241000014, 14.745917059000249 ], [ 122.2421981130002, 14.736314195000318 ], [ 122.24154707100013, 14.74111562700017 ], [ 122.16293379000001, 14.79775625200017 ], [ 122.13550866000003, 14.802557684000078 ], [ 122.12126712300017, 14.806870835000154 ], [ 122.1152449880002, 14.814846096000224 ], [ 122.11117597700013, 14.826117255000156 ], [ 122.10499108200008, 14.837836005000213 ], [ 122.10572350400003, 14.843939520000106 ], [ 122.1220809250002, 14.83877187700017 ], [ 122.12484785200002, 14.842474677000155 ], [ 122.13575280000009, 14.85236237200013 ], [ 122.13843834700015, 14.838934637000136 ] ] ], [ [ [ 121.96941165500016, 15.047186591000184 ], [ 121.98487389400009, 15.037990627000113 ], [ 121.99382571700005, 15.04291413000027 ], [ 122.00513756600014, 15.038641669000128 ], [ 122.01124108200008, 15.027167059000192 ], [ 122.0053817070002, 15.010687567000218 ], [ 122.02906334700015, 15.009182033000172 ], [ 122.04818769600013, 14.999457098000107 ], [ 122.05787194100003, 14.98330312700017 ], [ 122.05307050900001, 14.962225653000246 ], [ 122.03150475400003, 14.987738348000221 ], [ 122.02035566500012, 14.993719794000242 ], [ 122.0053817070002, 14.990179755000156 ], [ 121.9951278000002, 14.980129299000112 ], [ 121.9926863940002, 14.969183661000216 ], [ 121.99634850400003, 14.963527736000231 ], [ 122.0053817070002, 14.969061591000241 ], [ 122.0131942070002, 14.944810289000259 ], [ 122.01286868600016, 14.932928778000132 ], [ 122.00359134200016, 14.925238348000107 ], [ 121.97169030000032, 14.905585028000246 ], [ 121.96810957100001, 14.902573960000154 ], [ 121.96957441500012, 14.897772528000246 ], [ 121.97152754000012, 14.862046617000203 ], [ 121.97364342500009, 14.852118231000134 ], [ 121.97803795700008, 14.83877187700017 ], [ 121.99659264400009, 14.841376044000128 ], [ 122.0087996750002, 14.82461172100011 ], [ 122.01587975400003, 14.799465236 ], [ 122.02588951900009, 14.736314195000318 ], [ 122.02369225400003, 14.722601630000156 ], [ 122.00416100400003, 14.673651434000135 ], [ 121.98487389400009, 14.656927802000155 ], [ 121.96119225400014, 14.644761460000211 ], [ 121.94019616000003, 14.640082098000107 ], [ 121.91667728000016, 14.649074611000117 ], [ 121.9087020190002, 14.67096588700025 ], [ 121.91032962300017, 14.697821356000134 ], [ 121.9160262380002, 14.722072658000116 ], [ 121.93490644600024, 14.725775458000214 ], [ 121.93384850400003, 14.764960028000189 ], [ 121.91944420700031, 14.810248114000103 ], [ 121.89893639400009, 14.831854559000192 ], [ 121.88363691500001, 14.83641185100015 ], [ 121.87916100400014, 14.848334052000098 ], [ 121.88184655000032, 14.883693752000113 ], [ 121.8774520190002, 14.894435940000221 ], [ 121.85572350400014, 14.926947333000214 ], [ 121.84766686300031, 14.935532945000205 ], [ 121.83139082100001, 14.940578518000166 ], [ 121.82178795700031, 14.940334377000113 ], [ 121.8183699880002, 14.94603099200026 ], [ 121.82642662900025, 15.012152411000102 ], [ 121.83326256600014, 15.035305080000228 ], [ 121.8442488940002, 15.045396226000094 ], [ 121.87427819100014, 15.027777411000272 ], [ 121.89372806100027, 15.024562893000223 ], [ 121.90235436300009, 15.041693427000212 ], [ 121.90992272200003, 15.050197658000172 ], [ 121.92798912900014, 15.052232164000259 ], [ 121.96941165500016, 15.047186591000184 ] ] ], [ [ [ 120.00554446700005, 16.232082424000225 ], [ 119.99293053500014, 16.23016998899999 ], [ 119.9809676440002, 16.239447333000214 ], [ 119.97632897200003, 16.247259833000214 ], [ 119.95671634200005, 16.262437242000203 ], [ 119.93677819100014, 16.288153387000193 ], [ 119.92554772200026, 16.295355536000045 ], [ 119.9223738940002, 16.303778387000136 ], [ 119.92750084700003, 16.313137111000174 ], [ 119.94304446700005, 16.329291083000044 ], [ 119.95346113400001, 16.331976630000156 ], [ 119.96119225400003, 16.334784247000186 ], [ 119.96257571700016, 16.33885325700021 ], [ 119.96501712300017, 16.344387111000174 ], [ 119.9731551440002, 16.350572007000153 ], [ 119.98406009200005, 16.34870026200025 ], [ 119.9912215500002, 16.343573309000135 ], [ 119.99488366000003, 16.337551174000225 ], [ 119.99708092500032, 16.330755927000098 ], [ 120.00562584700003, 16.311753648000206 ], [ 120.00505618600016, 16.268622137000079 ], [ 120.01075280000032, 16.254624742000203 ], [ 120.01221764400032, 16.241522528000246 ], [ 120.00554446700005, 16.232082424000225 ] ] ], [ [ [ 120.9091903000002, 18.567206122000243 ], [ 120.92693118600005, 18.566229559000192 ], [ 120.94703209700015, 18.572007554000152 ], [ 120.96387780000009, 18.581366278000189 ], [ 120.97055097700024, 18.59076569199999 ], [ 120.97877037900003, 18.598293361000174 ], [ 121.01832116000014, 18.617092190000108 ], [ 121.03272545700031, 18.621812242000203 ], [ 121.04249108200008, 18.622300523000206 ], [ 121.06332441500024, 18.620672919000185 ], [ 121.07300866000003, 18.621812242000203 ], [ 121.08334394600024, 18.62799713700025 ], [ 121.09498131600003, 18.637030341000184 ], [ 121.10678144600001, 18.642726955000057 ], [ 121.11817467500009, 18.638861395000163 ], [ 121.12614993600016, 18.634100653000246 ], [ 121.13705488400001, 18.630926825000188 ], [ 121.15935306100016, 18.628648179000152 ], [ 121.17066491000003, 18.625474351000094 ], [ 121.17741946700005, 18.617824611000231 ], [ 121.18262780000032, 18.60883209800005 ], [ 121.19027754000012, 18.601304429000095 ], [ 121.23991946700016, 18.577704169000128 ], [ 121.26628665500027, 18.554877020000106 ], [ 121.36402428500026, 18.506415106000134 ], [ 121.37818444100014, 18.49485911700026 ], [ 121.39185631600003, 18.486314195000261 ], [ 121.42408287900014, 18.477240302000098 ], [ 121.49830162900014, 18.429388739000217 ], [ 121.50611412900014, 18.42666250200017 ], [ 121.51978600400003, 18.425116278000132 ], [ 121.52613366000014, 18.422552802000155 ], [ 121.53256269600013, 18.415961005000156 ], [ 121.53882897200003, 18.40704987200013 ], [ 121.54656009200005, 18.39923737200013 ], [ 121.59205162900003, 18.384711004999986 ], [ 121.61329186300009, 18.359320380000156 ], [ 121.62964928500014, 18.331691799000225 ], [ 121.64966881600026, 18.313950914000088 ], [ 121.64966881600026, 18.320217190000051 ], [ 121.63461347700024, 18.334540106000077 ], [ 121.63493899800017, 18.355129299000225 ], [ 121.64503014400032, 18.369452216000013 ], [ 121.65967858200008, 18.364813544000071 ], [ 121.67286217500009, 18.354966539000259 ], [ 121.85279381600014, 18.28799062700017 ], [ 121.8955184250002, 18.27920156499999 ], [ 121.91732832100001, 18.278631903000132 ], [ 121.9746199880002, 18.286037502000113 ], [ 121.98682701900032, 18.290432033000172 ], [ 122.0395613940002, 18.320217190000051 ], [ 122.07862389400009, 18.37946198100019 ], [ 122.09131920700008, 18.38906484600011 ], [ 122.11158287900025, 18.392767645000106 ], [ 122.11931399800017, 18.403021552000041 ], [ 122.1220809250002, 18.436835028000019 ], [ 122.14576256600014, 18.507391669000185 ], [ 122.1528426440002, 18.518784898000092 ], [ 122.19939212300005, 18.522853908000116 ], [ 122.22022545700031, 18.522406317000105 ], [ 122.2353621750002, 18.515366929000152 ], [ 122.24317467500032, 18.499823309000135 ], [ 122.24708092500009, 18.459784247000186 ], [ 122.25171959700003, 18.44306061400016 ], [ 122.26050866000003, 18.43227773600006 ], [ 122.2880965500002, 18.409247137000136 ], [ 122.29721113400001, 18.403876044000242 ], [ 122.31714928500003, 18.37742747600015 ], [ 122.32496178500003, 18.336615302000212 ], [ 122.32016035200002, 18.292547919000128 ], [ 122.30697675900024, 18.251288153000246 ], [ 122.28858483200031, 18.21820709800005 ], [ 122.26270592500009, 18.186102606000077 ], [ 122.24675540500016, 18.171942450000131 ], [ 122.21371504000012, 18.149969794000185 ], [ 122.18002363400012, 18.120754299000055 ], [ 122.17432701900032, 18.11347077000022 ], [ 122.16976972700013, 18.10049062700017 ], [ 122.16911868600005, 18.088120835000211 ], [ 122.1718856130002, 18.079413153000075 ], [ 122.17554772200015, 18.071844794000071 ], [ 122.1772567070002, 18.063177802000098 ], [ 122.1772567070002, 18.029038804000038 ], [ 122.1831160820002, 17.996486721000224 ], [ 122.18344160200013, 17.984361070000148 ], [ 122.14014733200008, 17.798285223000107 ], [ 122.13990319100003, 17.78790924700013 ], [ 122.14323978000004, 17.765285549000112 ], [ 122.14234459700026, 17.757066148000149 ], [ 122.13607832100013, 17.744289455000171 ], [ 122.13575280000009, 17.73729075700021 ], [ 122.13982181100005, 17.730047919000071 ], [ 122.15316816500024, 17.715521552000155 ], [ 122.15626061300031, 17.706935940000164 ], [ 122.15658613400012, 17.619289455000114 ], [ 122.16293379000001, 17.593329169000128 ], [ 122.1938582690002, 17.519191799000112 ], [ 122.19711347700002, 17.494614976000094 ], [ 122.20606530000009, 17.475287177000212 ], [ 122.22445722700013, 17.45189036700009 ], [ 122.23959394600013, 17.426825262000136 ], [ 122.23878014400032, 17.402167059000192 ], [ 122.24366295700008, 17.39109935100015 ], [ 122.24634850400014, 17.374904690000164 ], [ 122.25114993600016, 17.360174872000186 ], [ 122.26270592500009, 17.353745835000154 ], [ 122.26644941500012, 17.355373440000108 ], [ 122.27149498800009, 17.358628648000149 ], [ 122.2783309250002, 17.361232815000221 ], [ 122.28711998800031, 17.360581773000206 ], [ 122.30534915500016, 17.344183661000159 ], [ 122.31373131600014, 17.340073960000211 ], [ 122.32601972700013, 17.340887762000079 ], [ 122.35287519600024, 17.351141669000185 ], [ 122.36540774800017, 17.353745835000154 ], [ 122.38160241000026, 17.347398179000209 ], [ 122.3901473320002, 17.316880601000094 ], [ 122.40259850400003, 17.305975653000019 ], [ 122.39779707100013, 17.329087632000153 ], [ 122.4145613940002, 17.319077867000203 ], [ 122.43539472700024, 17.29242584800005 ], [ 122.44361412900003, 17.265611070000261 ], [ 122.42514082100001, 17.279527085000154 ], [ 122.41431725400003, 17.283636786000102 ], [ 122.40943444100014, 17.275213934000078 ], [ 122.4116317070002, 17.260443427000155 ], [ 122.42090905000009, 17.232326565000108 ], [ 122.42310631600026, 17.220607815000164 ], [ 122.42058353000016, 17.205877997000186 ], [ 122.41041100400014, 17.175523179000209 ], [ 122.40943444100014, 17.161932684000249 ], [ 122.41684004000024, 17.145819403000075 ], [ 122.44141686300031, 17.127997137000193 ], [ 122.45101972700002, 17.114162502000113 ], [ 122.45443769600013, 17.118719794000242 ], [ 122.4609481130002, 17.123480536000159 ], [ 122.46469160200024, 17.127834377000227 ], [ 122.48047936300009, 17.123480536000159 ], [ 122.49024498800031, 17.132879950000188 ], [ 122.50098717500032, 17.139797268000166 ], [ 122.51929772200015, 17.127834377000227 ], [ 122.52914472700013, 17.109605210000154 ], [ 122.52906334700015, 17.090521551999984 ], [ 122.5214949880002, 17.072007554000095 ], [ 122.50879967500032, 17.055853583000101 ], [ 122.5039168630002, 17.046535549000055 ], [ 122.50049889400009, 17.034125067000161 ], [ 122.4961043630002, 17.023260809000249 ], [ 122.48829186300009, 17.018540757000153 ], [ 122.48357181100016, 17.013657945000261 ], [ 122.47291100400014, 16.989691473000221 ], [ 122.45972741000014, 16.91201406499999 ], [ 122.46469160200024, 16.895086981000134 ], [ 122.44898522200026, 16.864976303999981 ], [ 122.42269941500001, 16.794338283000229 ], [ 122.37338300900001, 16.713527736000231 ], [ 122.36500084700015, 16.685126044000185 ], [ 122.34546959700015, 16.642523505000156 ], [ 122.33838951900009, 16.631293036000102 ], [ 122.3252059250002, 16.616156317000105 ], [ 122.30014082100013, 16.565497137000193 ], [ 122.28638756600003, 16.546820380000213 ], [ 122.25318444100003, 16.519964911000159 ], [ 122.2446395190002, 16.51056549700013 ], [ 122.23878014400032, 16.504055080000114 ], [ 122.23422285200013, 16.495103257000096 ], [ 122.23218834700015, 16.486517645000106 ], [ 122.2319442070002, 16.466498114000046 ], [ 122.22917728000016, 16.461615302000155 ], [ 122.2114363940002, 16.449408270000163 ], [ 122.20427493600005, 16.434759833000214 ], [ 122.20533287900014, 16.423895575000188 ], [ 122.21762129000012, 16.394761460000041 ], [ 122.2241317070002, 16.408514716000013 ], [ 122.22510826900009, 16.415269273000149 ], [ 122.2319442070002, 16.415269273000149 ], [ 122.22494550900012, 16.380764065000164 ], [ 122.19190514400009, 16.317368882000096 ], [ 122.19711347700002, 16.291693427000155 ], [ 122.21452884200005, 16.307074286000102 ], [ 122.2319442070002, 16.319037177000212 ], [ 122.22868899800005, 16.304632880000099 ], [ 122.20386803500003, 16.263820705 ], [ 122.20337975400003, 16.257473049000112 ], [ 122.20533287900014, 16.242499091000127 ], [ 122.20386803500003, 16.236517645000106 ], [ 122.1987410820002, 16.233710028000246 ], [ 122.18246504000012, 16.232001044000242 ], [ 122.1772567070002, 16.230292059000192 ], [ 122.14942467500009, 16.195542710000097 ], [ 122.1152449880002, 16.168890692000105 ], [ 122.08399498800009, 16.13735586100006 ], [ 122.08041425900001, 16.135321356000077 ], [ 122.07699629000012, 16.132717190000221 ], [ 122.07357832100024, 16.127264716000127 ], [ 122.0717879570002, 16.11933014500022 ], [ 122.07243899800017, 16.111558335000211 ], [ 122.07357832100024, 16.104925848000107 ], [ 122.07357832100024, 16.09992096600007 ], [ 122.05925540500016, 16.077785549000225 ], [ 122.0161238940002, 16.051459052000041 ], [ 121.99789472700013, 16.031073309000249 ], [ 121.9917098320002, 16.038519598000221 ], [ 122.01156660200002, 16.065741278000132 ], [ 122.02165774800017, 16.083929755000213 ], [ 122.02588951900009, 16.103705145000049 ], [ 122.03345787900014, 16.117132880000042 ], [ 122.0810653000002, 16.148382880000213 ], [ 122.08757571700016, 16.164455471 ], [ 122.0927840500002, 16.187323309000135 ], [ 122.10157311300009, 16.20774974200026 ], [ 122.13257897200003, 16.225490627000113 ], [ 122.14087975400014, 16.244086005000156 ], [ 122.13526451900009, 16.260728257000153 ], [ 122.10775800900012, 16.263820705 ], [ 122.0874129570002, 16.255316473000164 ], [ 122.07740319100014, 16.241278387000193 ], [ 122.07398522200026, 16.224025783000059 ], [ 122.07357832100024, 16.205755927000212 ], [ 122.06690514400009, 16.190130927000098 ], [ 122.05054772200003, 16.180853583000044 ], [ 122.01221764400009, 16.168890692000105 ], [ 121.95476321700016, 16.13914622600015 ], [ 121.94019616000003, 16.134711005000099 ], [ 121.90398196700005, 16.129828192000105 ], [ 121.86817467500009, 16.120428778000075 ], [ 121.8559676440002, 16.111314195000261 ], [ 121.84408613400001, 16.100002346000053 ], [ 121.82992597700024, 16.090399481000134 ], [ 121.79997806100016, 16.083238023000206 ], [ 121.78842207100024, 16.077215887000193 ], [ 121.77767988400024, 16.073187567000105 ], [ 121.7695418630002, 16.075751044000071 ], [ 121.76107832100013, 16.079982815000164 ], [ 121.75228925900001, 16.07689036700026 ], [ 121.68441816500024, 16.021144924000055 ], [ 121.67872155000032, 16.010728257000153 ], [ 121.64226321700016, 15.96963125200017 ], [ 121.5932723320002, 15.944891669000185 ], [ 121.57781009200028, 15.932074286000102 ], [ 121.5673934250002, 15.915716864000103 ], [ 121.56006920700008, 15.895209052000212 ], [ 121.55298912900025, 15.852932033000116 ], [ 121.55486087300028, 15.82892487200013 ], [ 121.57064863400012, 15.793768622000073 ], [ 121.57455488400024, 15.774359442000161 ], [ 121.58521569100026, 15.765448309000135 ], [ 121.60865319100014, 15.763088283000116 ], [ 121.63184655000009, 15.757025457999987 ], [ 121.64226321700016, 15.736883856000247 ], [ 121.63656660200002, 15.722479559000249 ], [ 121.59449303500014, 15.674750067000161 ], [ 121.61109459700003, 15.671087958000101 ], [ 121.61980228000016, 15.667466539000202 ], [ 121.62916100400014, 15.661118881999982 ], [ 121.59099368600005, 15.640448309000249 ], [ 121.5737410820002, 15.627264716000013 ], [ 121.56657962300017, 15.61025625200017 ], [ 121.5615340500002, 15.591376044000128 ], [ 121.54900149800017, 15.576402085000097 ], [ 121.4956160820002, 15.532456773000092 ], [ 121.48755944100026, 15.52041250200017 ], [ 121.47925866000003, 15.456203518000052 ], [ 121.47291100400014, 15.437689520000106 ], [ 121.46412194100003, 15.421535549000112 ], [ 121.42628014400009, 15.373765367000203 ], [ 121.40886478000016, 15.377752997000243 ], [ 121.39771569100026, 15.382717190000221 ], [ 121.38990319100026, 15.377875067000218 ], [ 121.38160241000003, 15.352687893000279 ], [ 121.37916100400025, 15.308172919000185 ], [ 121.39112389400009, 15.266262111000231 ], [ 121.41374759200005, 15.231634833000101 ], [ 121.44361412900014, 15.209295966000127 ], [ 121.46843509200016, 15.196112372000186 ], [ 121.48145592500009, 15.182521877000227 ], [ 121.48755944100026, 15.163316148000206 ], [ 121.50814863400001, 15.062811591000127 ], [ 121.51531009200016, 15.051662502000227 ], [ 121.5278426440002, 15.040757554000152 ], [ 121.56006920700008, 14.989650783000116 ], [ 121.56657962300017, 14.972805080000114 ], [ 121.57064863400012, 14.945990302000098 ], [ 121.58179772200015, 14.919663804000152 ], [ 121.59734134200016, 14.894842841000241 ], [ 121.61500084700015, 14.872870184000192 ], [ 121.60962975400014, 14.869940497000186 ], [ 121.5996199880002, 14.862005927000212 ], [ 121.59449303500014, 14.859198309000249 ], [ 121.6357528000002, 14.81159088700025 ], [ 121.64226321700016, 14.800848700000245 ], [ 121.6499129570002, 14.792181708000101 ], [ 121.71265709700015, 14.744370835000211 ], [ 121.72494550900012, 14.730780341000184 ], [ 121.72608483200008, 14.72016022300005 ], [ 121.70736738400012, 14.715806382000153 ], [ 121.67090905000032, 14.714341539000202 ], [ 121.64918053500026, 14.710516669000242 ], [ 121.62916100400014, 14.702826239000274 ], [ 121.61394290500016, 14.689886786000159 ], [ 121.60808353000027, 14.674261786000159 ], [ 121.60816491000026, 14.630194403000246 ], [ 121.61068769600001, 14.612616278000246 ], [ 121.64722741000003, 14.492254950000302 ], [ 121.6513778000002, 14.456122137000136 ], [ 121.66244550900001, 14.417385158000229 ], [ 121.67017662900003, 14.40110911700026 ], [ 121.68238366000003, 14.385443427000098 ], [ 121.72486412900014, 14.345892645000276 ], [ 121.73471113400012, 14.328680731000247 ], [ 121.73609459700015, 14.314886786000159 ], [ 121.73161868600027, 14.280422268000109 ], [ 121.7358504570002, 14.273138739000103 ], [ 121.75464928500026, 14.255764065000108 ], [ 121.75896243600016, 14.246568101000264 ], [ 121.75717207100001, 14.230617580000228 ], [ 121.75212649800005, 14.215725002000113 ], [ 121.7436629570002, 14.203436591000241 ], [ 121.73161868600027, 14.195054428999981 ], [ 121.73161868600027, 14.18821849200026 ], [ 121.74488366000003, 14.177150783000116 ], [ 121.78003991000003, 14.126166083000101 ], [ 121.84766686300031, 14.078355210000097 ], [ 121.91724694100003, 14.009507554000209 ], [ 121.93628991000014, 13.995184637000193 ], [ 122.0879012380002, 13.937811591000127 ], [ 122.2319442070002, 13.906439520000276 ], [ 122.23316491000003, 13.933050848000107 ], [ 122.22201582100001, 13.952093817000218 ], [ 122.18344160200013, 13.988959052000155 ], [ 122.20240319100014, 13.994574286000102 ], [ 122.29330488400012, 13.970119533000229 ], [ 122.29851321700016, 13.972560940000164 ], [ 122.30014082100013, 13.985581773000263 ], [ 122.2963973320002, 14.002752997000073 ], [ 122.2998153000002, 14.007554429000152 ], [ 122.31373131600014, 14.010077216000241 ], [ 122.31373131600014, 14.016302802000212 ], [ 122.29078209700015, 14.023098049000168 ], [ 122.2519637380002, 14.067694403000246 ], [ 122.2353621750002, 14.078355210000097 ], [ 122.20866946700016, 14.087632554000152 ], [ 122.18620853000027, 14.110541083000157 ], [ 122.17017662900003, 14.13963450700021 ], [ 122.16293379000001, 14.167792059000078 ], [ 122.17318769600001, 14.160223700000131 ], [ 122.17554772200015, 14.155951239000217 ], [ 122.1772567070002, 14.146673895000163 ], [ 122.18344160200013, 14.146673895000163 ], [ 122.18409264400009, 14.169867255000213 ], [ 122.19556725400014, 14.183783270000106 ], [ 122.2319442070002, 14.201849677000212 ], [ 122.24439537900014, 14.19603099200026 ], [ 122.2475692070002, 14.212795315000278 ], [ 122.24781334700015, 14.236151434000135 ], [ 122.25171959700003, 14.250311591000184 ], [ 122.26368248800009, 14.247381903000246 ], [ 122.26661217500009, 14.227606512000136 ], [ 122.26400800900012, 14.20368073100019 ], [ 122.25928795700008, 14.18821849200026 ], [ 122.26685631600003, 14.178859768000223 ], [ 122.26889082100024, 14.167303778000303 ], [ 122.2695418630002, 14.154242255000213 ], [ 122.27279707100013, 14.140448309000192 ], [ 122.27149498800009, 14.136664130000156 ], [ 122.27320397200015, 14.132513739000217 ], [ 122.27963300900012, 14.126166083000101 ], [ 122.28435306100027, 14.125881252000113 ], [ 122.28858483200031, 14.130194403000189 ], [ 122.29175866000026, 14.136053778000132 ], [ 122.29330488400012, 14.140448309000192 ], [ 122.29851321700016, 14.129339911000159 ], [ 122.30030358200008, 14.11758047100011 ], [ 122.30014082100013, 14.092027085000211 ], [ 122.31869550900012, 14.100043036000272 ], [ 122.3349715500002, 14.113226630000213 ], [ 122.34571373800009, 14.131333726000207 ], [ 122.34799238400024, 14.154120184000135 ], [ 122.3442488940002, 14.160589911000159 ], [ 122.3300887380002, 14.180568752000227 ], [ 122.32748457100001, 14.18821849200026 ], [ 122.33130944100014, 14.20026276200025 ], [ 122.33765709700026, 14.207586981000247 ], [ 122.34400475400014, 14.206935940000108 ], [ 122.34799238400024, 14.195054428999981 ], [ 122.3554793630002, 14.195054428999981 ], [ 122.35670006600014, 14.204657294000242 ], [ 122.35572350400025, 14.212225653000189 ], [ 122.35279381600026, 14.218085028000132 ], [ 122.34799238400024, 14.222357489000217 ], [ 122.36695397200026, 14.222154039000259 ], [ 122.37680097700002, 14.228501695000034 ], [ 122.37671959700003, 14.239650783000229 ], [ 122.36540774800017, 14.253404039000259 ], [ 122.3662215500002, 14.261460679000209 ], [ 122.3813582690002, 14.293280341000241 ], [ 122.38892662900003, 14.304917710000211 ], [ 122.39454186300009, 14.29148997600015 ], [ 122.40365644600013, 14.295396226000264 ], [ 122.41244550900024, 14.309027411000216 ], [ 122.41627037900014, 14.324774481000134 ], [ 122.4311629570002, 14.318060614000217 ], [ 122.44459069100014, 14.324652411000159 ], [ 122.4575301440002, 14.336615302000098 ], [ 122.47095787900003, 14.345892645000276 ], [ 122.48316491000014, 14.346665757000096 ], [ 122.4946395190002, 14.341376044000015 ], [ 122.51929772200015, 14.324774481000134 ], [ 122.51490319100003, 14.329901434000249 ], [ 122.50505618600005, 14.345892645000276 ], [ 122.5278426440002, 14.348700262000136 ], [ 122.57536868600016, 14.329291083000101 ], [ 122.60124759200005, 14.324774481000134 ], [ 122.59888756600014, 14.311224677000098 ], [ 122.60466556100016, 14.301255601000207 ], [ 122.61378014400032, 14.29970937700017 ], [ 122.62232506600014, 14.311183986 ], [ 122.62566165500027, 14.296535549000112 ], [ 122.63461347700013, 14.286037502000227 ], [ 122.64429772200026, 14.284735419000185 ], [ 122.64966881600014, 14.297512111000231 ], [ 122.67798912900014, 14.294663804000209 ], [ 122.69068444100014, 14.291245835000097 ], [ 122.6743270190002, 14.31610748900016 ], [ 122.6713973320002, 14.339422919000185 ], [ 122.67986087300005, 14.350531317000161 ], [ 122.69752037900025, 14.338446356000247 ], [ 122.70427493600016, 14.345892645000276 ], [ 122.71168053500014, 14.32953522300005 ], [ 122.72169030000009, 14.315741278000132 ], [ 122.73511803500014, 14.31354401200025 ], [ 122.75269616000014, 14.332220770000106 ], [ 122.75749759200028, 14.325832424000225 ], [ 122.76270592500009, 14.32135651200025 ], [ 122.76889082100013, 14.318793036000216 ], [ 122.78443444100014, 14.316961981000134 ], [ 122.78541100400003, 14.314154364000103 ], [ 122.78443444100014, 14.310044664000259 ], [ 122.78687584700015, 14.304917710000211 ], [ 122.80258222700013, 14.287176825000245 ], [ 122.80982506600014, 14.284409898000206 ], [ 122.82471764400032, 14.283840236000117 ], [ 122.85328209700015, 14.278550523000263 ], [ 122.87330162900014, 14.265204169000128 ], [ 122.90357506600026, 14.229193427000098 ], [ 122.90455162900014, 14.224025783000229 ], [ 122.9033309250002, 14.217189846000167 ], [ 122.90308678500003, 14.211249091000241 ], [ 122.90699303500014, 14.208685614000103 ], [ 122.91993248800009, 14.208156643000166 ], [ 122.92505944100014, 14.206122137000193 ], [ 122.93083743600016, 14.201849677000212 ], [ 122.95435631600003, 14.167792059000078 ], [ 122.96550540500004, 14.15924713700025 ], [ 123.00269616000026, 14.118882554000095 ], [ 123.01221764400032, 14.105698960000154 ], [ 123.02173912900014, 14.111395575000131 ], [ 123.03272545700008, 14.107814846000224 ], [ 123.04224694100003, 14.098049221000224 ], [ 123.0468856130002, 14.085191148000092 ], [ 123.04395592500009, 14.069769598000278 ], [ 123.03638756600026, 14.057440497000186 ], [ 123.03052819100014, 14.043443101000094 ], [ 123.0332137380002, 14.02313873900016 ], [ 123.05372155000032, 14.002630927000098 ], [ 123.07813561300009, 13.988104559000249 ], [ 123.08155358200008, 13.988959052000155 ], [ 123.08423912900014, 13.974269924000168 ], [ 123.08155358200008, 13.928168036000216 ], [ 123.08838951900032, 13.901434637000136 ], [ 123.08773847700013, 13.89345937700017 ], [ 123.0820418630002, 13.884426174000168 ], [ 123.07496178500003, 13.88165924700013 ], [ 123.06763756600003, 13.879584052000098 ], [ 123.06055748800009, 13.872951565000108 ], [ 123.05591881600003, 13.861314195000205 ], [ 123.0488387380002, 13.821966864000217 ], [ 123.0468856130002, 13.810858466000184 ], [ 123.0498153000002, 13.775824286000102 ], [ 123.06666100400025, 13.756089585000154 ], [ 123.08871504000012, 13.741644598000221 ], [ 123.10824629000012, 13.722113348000107 ], [ 123.11589603000004, 13.722113348000107 ], [ 123.1367293630002, 13.732814846000224 ], [ 123.16089928500003, 13.734076239000217 ], [ 123.21469160200002, 13.728949286000159 ], [ 123.22494550900001, 13.731146552000212 ], [ 123.25562584700003, 13.743312893000109 ], [ 123.26661217500009, 13.749416408000172 ], [ 123.3017684250002, 13.789455471000224 ], [ 123.30746504000001, 13.801255601000094 ], [ 123.3095809250002, 13.807928778000246 ], [ 123.31316165500016, 13.814113674000225 ], [ 123.31495201900009, 13.820542710000154 ], [ 123.30827884200016, 13.833319403000246 ], [ 123.29664147200003, 13.869818427000212 ], [ 123.28093509200005, 13.891831773000149 ], [ 123.28028405000009, 13.906439520000276 ], [ 123.3134871750002, 13.93008047100011 ], [ 123.31771894600013, 13.934393622000186 ], [ 123.32553144600013, 13.940008856000304 ], [ 123.33139082100013, 13.953355210000211 ], [ 123.33480879000001, 13.969183661000045 ], [ 123.33545983200031, 13.982163804000152 ], [ 123.32488040500027, 13.97150299700013 ], [ 123.31251061300031, 13.940822658000116 ], [ 123.30404707100001, 13.934393622000186 ], [ 123.29004967500032, 13.934556382000153 ], [ 123.28060957100024, 13.93610260600019 ], [ 123.23462975400025, 13.963812567000105 ], [ 123.22299238400012, 13.975816148000206 ], [ 123.21810957100013, 13.99274323100019 ], [ 123.22771243600016, 14.000433661000216 ], [ 123.24529056100027, 14.006781317000161 ], [ 123.25424238400012, 14.013739325000131 ], [ 123.2387801440002, 14.02313873900016 ], [ 123.25904381600014, 14.031195380000213 ], [ 123.26172936300009, 14.042303778000189 ], [ 123.25228925900001, 14.068101304000265 ], [ 123.26148522200015, 14.072902736000117 ], [ 123.28207441500012, 14.066473700000245 ], [ 123.31430097700024, 14.051092841000298 ], [ 123.31430097700024, 14.057277736000174 ], [ 123.31031334700015, 14.060248114000103 ], [ 123.3007918630002, 14.071519273000149 ], [ 123.32960045700008, 14.070298570000148 ], [ 123.33545983200031, 14.071519273000149 ], [ 123.33529707100001, 14.078762111000117 ], [ 123.3271590500002, 14.096014716000184 ], [ 123.33179772200015, 14.099514065000108 ], [ 123.34506269600001, 14.093695380000156 ], [ 123.35328209700003, 14.079413153000132 ], [ 123.36215254000012, 14.043605861000231 ], [ 123.34538821700005, 14.03953685100015 ], [ 123.34205162900003, 14.027777411000102 ], [ 123.34644616000014, 14.016302802000212 ], [ 123.35230553500014, 14.013169664000145 ], [ 123.3701278000002, 14.029852606000134 ], [ 123.37867272200003, 14.035101630000099 ], [ 123.3901473320002, 14.037339585000097 ], [ 123.38510175900012, 14.030910549000168 ], [ 123.37582441500001, 14.010077216000241 ], [ 123.38624108200008, 14.014105536000159 ], [ 123.3901473320002, 14.016302802000212 ], [ 123.39625084700015, 14.010077216000241 ], [ 123.39234459700026, 13.991848049000168 ], [ 123.41179446700028, 13.964260158000116 ], [ 123.4038192070002, 13.948675848000107 ], [ 123.41065514400032, 13.939439195000148 ], [ 123.41521243600016, 13.929388739000217 ], [ 123.41732832100001, 13.918443101000207 ], [ 123.41732832100001, 13.906439520000276 ], [ 123.42416425900001, 13.906439520000276 ], [ 123.42945397200015, 13.919378973000164 ], [ 123.43726647200015, 13.929144598000221 ], [ 123.44369550900012, 13.941351630000156 ], [ 123.44467207100013, 13.96165599200026 ], [ 123.46469160200013, 13.956447658000116 ], [ 123.47779381600014, 13.950506903000189 ], [ 123.4863387380002, 13.940008856000304 ], [ 123.49252363400012, 13.920721747000243 ], [ 123.53882897200026, 13.924953518000166 ], [ 123.61280358200008, 13.897162177000098 ], [ 123.68140709700015, 13.884670315000221 ], [ 123.71168053500014, 13.934393622000186 ], [ 123.73406009200028, 13.897121486000231 ], [ 123.76531009200005, 13.864325262000193 ], [ 123.80404707100013, 13.837632554000209 ], [ 123.87631269600013, 13.807318427000098 ], [ 123.8789168630002, 13.803900458000214 ], [ 123.88005618600027, 13.800726630000156 ], [ 123.88298587300005, 13.797796942000218 ], [ 123.89527428500026, 13.794094143000166 ], [ 123.91944420700008, 13.79376862200013 ], [ 123.93140709700003, 13.790350653000246 ], [ 123.93775475400014, 13.78400299700013 ], [ 123.95191491000026, 13.755601303999981 ], [ 123.9687606130002, 13.740057684000192 ], [ 123.97266686300009, 13.72931549700013 ], [ 123.96550540500016, 13.714667059000135 ], [ 123.94857832100013, 13.728176174000112 ], [ 123.94271894600013, 13.73456452000022 ], [ 123.9375106130002, 13.742621161000102 ], [ 123.93140709700003, 13.742621161000102 ], [ 123.92994225400014, 13.738430080000171 ], [ 123.92457116000014, 13.728949286000159 ], [ 123.90992272200015, 13.735988674000112 ], [ 123.8925887380002, 13.740057684000192 ], [ 123.85938561300009, 13.742621161000102 ], [ 123.85027103000016, 13.734076239000217 ], [ 123.83627363400012, 13.715277411000216 ], [ 123.81836998800009, 13.696478583000157 ], [ 123.7973738940002, 13.68797435100015 ], [ 123.7793074880002, 13.69212474200026 ], [ 123.74293053500014, 13.710435289000145 ], [ 123.68816165500016, 13.718695380000099 ], [ 123.66667728000027, 13.718329169000128 ], [ 123.65699303500003, 13.711574611000231 ], [ 123.6479598320002, 13.703558661000102 ], [ 123.6269637380002, 13.710842190000108 ], [ 123.60385175900024, 13.722886460000154 ], [ 123.58814537900014, 13.728949286000159 ], [ 123.57048587300017, 13.722967841000241 ], [ 123.5600692070002, 13.709621486000231 ], [ 123.52849368600016, 13.626776434000192 ], [ 123.52662194100014, 13.606024481000247 ], [ 123.53500410200013, 13.603949286000102 ], [ 123.53891035200024, 13.600978908000172 ], [ 123.5366317070002, 13.595160223000221 ], [ 123.53402754000012, 13.59064362200013 ], [ 123.53321373800009, 13.585598049000225 ], [ 123.53345787900014, 13.57469310100015 ], [ 123.53630618600005, 13.563299872000073 ], [ 123.54297936300031, 13.56024811399999 ], [ 123.55176842500009, 13.563625393000109 ], [ 123.56080162900003, 13.571234442000218 ], [ 123.59359785200013, 13.529445705000228 ], [ 123.59831790500016, 13.523586330000228 ], [ 123.60547936300031, 13.51666901200025 ], [ 123.66724694100014, 13.485581773000149 ], [ 123.68002363400012, 13.469956773000149 ], [ 123.70484459700026, 13.427232164000145 ], [ 123.70923912900014, 13.423529364000217 ], [ 123.72250410200013, 13.415187893000223 ], [ 123.72535241000003, 13.409898179000095 ], [ 123.72527103000004, 13.399074611000174 ], [ 123.72632897200026, 13.390855210000154 ], [ 123.73145592500009, 13.362534898000149 ], [ 123.74341881600003, 13.34031810100015 ], [ 123.75928795700008, 13.323879299000168 ], [ 123.77711022200003, 13.31736888200021 ], [ 123.79460696700016, 13.308417059000135 ], [ 123.80567467500032, 13.287095445000261 ], [ 123.82154381600014, 13.242905992000203 ], [ 123.82545006600014, 13.260158596000224 ], [ 123.83619225400014, 13.256089585000097 ], [ 123.8481551440002, 13.24188873900016 ], [ 123.85564212300005, 13.228664455000228 ], [ 123.78931725400003, 13.232407945000148 ], [ 123.76758873800031, 13.224310614000103 ], [ 123.75945071700005, 13.197943427000155 ], [ 123.75684655000032, 13.180975653000246 ], [ 123.75220787900014, 13.167629299000168 ], [ 123.7495223320002, 13.154730536000216 ], [ 123.75318444100014, 13.139308986 ], [ 123.77019290500016, 13.110785223000107 ], [ 123.7680770190002, 13.098537502000227 ], [ 123.74577884200016, 13.092108466000127 ], [ 123.74577884200016, 13.084662177000155 ], [ 123.75001061300009, 13.077622789000145 ], [ 123.74984785200013, 13.072658596000224 ], [ 123.74577884200016, 13.06415436400016 ], [ 123.76710045700031, 13.053371486000117 ], [ 123.7754012380002, 13.050767320000261 ], [ 123.78736412900014, 13.05117422100011 ], [ 123.79769941500024, 13.05516185100015 ], [ 123.81275475400025, 13.068182684000249 ], [ 123.81812584700003, 13.070990302000212 ], [ 123.85564212300005, 13.118801174000168 ], [ 123.86109459700015, 13.127875067000161 ], [ 123.86500084700026, 13.136379299000168 ], [ 123.87094160200002, 13.142889716000184 ], [ 123.88298587300005, 13.146063544000242 ], [ 123.8945418630002, 13.143500067000105 ], [ 123.9052840500002, 13.129055080000171 ], [ 123.91431725400014, 13.125637111000231 ], [ 123.92432701900009, 13.125067450000302 ], [ 123.93165123800009, 13.122707424000225 ], [ 123.93620853000004, 13.11758047100011 ], [ 123.9375106130002, 13.108587958000101 ], [ 123.94361412900003, 13.107896226000094 ], [ 123.97917728000027, 13.098334052000098 ], [ 123.99236087300017, 13.091620184000249 ], [ 124.00814863400024, 13.080023505000213 ], [ 124.02133222700002, 13.06659577000022 ], [ 124.02702884200028, 13.054266669000185 ], [ 124.07113691500012, 13.016099351000207 ], [ 124.0815535820002, 13.009507554000209 ], [ 124.0913192070002, 13.018744208000101 ], [ 124.11231530000032, 13.060492255000156 ], [ 124.1162215500002, 13.07440827000022 ], [ 124.12671959700003, 13.078680731000134 ], [ 124.14991295700008, 13.072902736000174 ], [ 124.17318769600024, 13.063544012000136 ], [ 124.1845809250002, 13.057318427000098 ], [ 124.18824303500026, 13.039536851000207 ], [ 124.18580162900014, 13.020819403000132 ], [ 124.17750084700015, 13.009995835000211 ], [ 124.16480553500003, 13.01634349200026 ], [ 124.15300540500016, 13.001288153000246 ], [ 124.1464949880002, 12.98993561400016 ], [ 124.13689212300017, 12.9617373720003 ], [ 124.11882571700005, 12.92548248899999 ], [ 124.1162215500002, 12.916449286000159 ], [ 124.11947675900012, 12.900824286000159 ], [ 124.13363691500012, 12.878485419000242 ], [ 124.14283287900014, 12.814398505000099 ], [ 124.14307701900032, 12.797308661000045 ], [ 124.12940514400009, 12.677191473000221 ], [ 124.1230574880002, 12.662298895000106 ], [ 124.0947371750002, 12.64354075700021 ], [ 124.08838951900009, 12.628810940000164 ], [ 124.09148196700016, 12.611883856000247 ], [ 124.09620201900009, 12.601629950000245 ], [ 124.09506269600013, 12.593654690000108 ], [ 124.0815535820002, 12.583726303999981 ], [ 124.08659915500016, 12.577378648000206 ], [ 124.09522545700031, 12.557074286000159 ], [ 124.08334394600024, 12.553412177000098 ], [ 124.06674238400001, 12.541449286000159 ], [ 124.05494225400003, 12.537258205000228 ], [ 124.04224694100026, 12.535834052000268 ], [ 124.01010175900001, 12.537258205000228 ], [ 123.98316491000014, 12.546779690000108 ], [ 123.9599715500002, 12.56891510600019 ], [ 123.93140709700003, 12.61172109600011 ], [ 123.93336022200015, 12.622219143000166 ], [ 123.92994225400014, 12.623683986000117 ], [ 123.92302493600016, 12.621079820000148 ], [ 123.91431725400014, 12.619126695000261 ], [ 123.89918053500014, 12.635891018000109 ], [ 123.87859134200016, 12.645209052000155 ], [ 123.87012780000009, 12.66034577000022 ], [ 123.86296634200005, 12.679429429000152 ], [ 123.84253991000014, 12.716213283000229 ], [ 123.84302819100014, 12.735785223000107 ], [ 123.8471785820002, 12.755804755000213 ], [ 123.84880618600005, 12.77619049700013 ], [ 123.84205162900014, 12.801214911000159 ], [ 123.82984459700015, 12.811997789000259 ], [ 123.81316165500027, 12.818670966000184 ], [ 123.79363040500016, 12.831447658000229 ], [ 123.81910241000014, 12.831854559000249 ], [ 123.83871504000001, 12.839300848000221 ], [ 123.85320071700016, 12.853094794000242 ], [ 123.86304772200003, 12.872381903000246 ], [ 123.87387129000012, 12.866929429000152 ], [ 123.88998457100001, 12.850734768000166 ], [ 123.89722741000003, 12.845119533000172 ], [ 123.9067488940002, 12.841620184000249 ], [ 123.91228274800017, 12.842027085000097 ], [ 123.9179793630002, 12.843939520000163 ], [ 123.92798912900003, 12.845119533000172 ], [ 123.9404403000002, 12.848293361000231 ], [ 123.94353274800017, 12.856146552000155 ], [ 123.9438582690002, 12.866115627000113 ], [ 123.94849694100014, 12.87547435100015 ], [ 123.95883222700013, 12.880031643000109 ], [ 123.96957441500001, 12.878078518000223 ], [ 123.97901451900009, 12.874009507000096 ], [ 123.98601321700016, 12.872381903000246 ], [ 124.0024520190002, 12.879706122000073 ], [ 124.01783287900003, 12.893784898000206 ], [ 124.02930748800009, 12.911769924000225 ], [ 124.03386478000004, 12.930405992000146 ], [ 124.02515709700015, 12.955308335000097 ], [ 124.0048934250002, 12.96133047100011 ], [ 123.95866946700016, 12.954291083000101 ], [ 123.9409285820002, 12.957261460000154 ], [ 123.9101668630002, 12.97150299700013 ], [ 123.89340254000001, 12.974798895000163 ], [ 123.88160241000026, 12.96649811400016 ], [ 123.87387129000012, 12.947495835000097 ], [ 123.86850019600013, 12.926825262000193 ], [ 123.86304772200003, 12.913316148000092 ], [ 123.8393660820002, 12.888169664000145 ], [ 123.82300866000003, 12.877020575000188 ], [ 123.7993270190002, 12.871242580000228 ], [ 123.7900496750002, 12.866115627000113 ], [ 123.78394616000026, 12.864935614000103 ], [ 123.77833092500032, 12.867092190000164 ], [ 123.76921634200005, 12.876450914000031 ], [ 123.7631942070002, 12.878607489000217 ], [ 123.7583113940002, 12.874904690000164 ], [ 123.7475692070002, 12.857489325000131 ], [ 123.73894290500016, 12.851874091000184 ], [ 123.7353621750002, 12.850327867000146 ], [ 123.72974694100014, 12.84625885600002 ], [ 123.72535241000003, 12.845119533000172 ], [ 123.72006269600024, 12.85907623900016 ], [ 123.71168053500014, 12.872381903000246 ], [ 123.7226668630002, 12.876369533000172 ], [ 123.73129316500012, 12.88328685100015 ], [ 123.73267662900003, 12.889878648000149 ], [ 123.7221785820002, 12.892889716000241 ], [ 123.6962996750002, 12.891546942000161 ], [ 123.69011478000016, 12.888739325000245 ], [ 123.69483483200008, 12.882798570000148 ], [ 123.69752037900014, 12.874945380000156 ], [ 123.69800866000003, 12.864935614000103 ], [ 123.67725670700031, 12.884182033000116 ], [ 123.6865340500002, 12.905422268000109 ], [ 123.70329837300028, 12.927191473000164 ], [ 123.69825280000009, 12.930894273000149 ], [ 123.6909285820002, 12.927801825000245 ], [ 123.68067467500032, 12.926988023000206 ], [ 123.6684676440002, 12.924139716000184 ], [ 123.66342207100013, 12.917141018000223 ], [ 123.66138756600003, 12.908351955000171 ], [ 123.65699303500003, 12.900295315000221 ], [ 123.64966881600014, 12.890326239000103 ], [ 123.64893639400009, 12.886297919000242 ], [ 123.64600670700008, 12.885687567000161 ], [ 123.63249759200016, 12.886053778000189 ], [ 123.61573326900009, 12.88947174700013 ], [ 123.60515384200005, 12.892889716000241 ], [ 123.59839928500014, 12.896551825000245 ], [ 123.57113691500001, 12.927964585000211 ], [ 123.55909264400009, 12.93789297100011 ], [ 123.53972415500027, 12.94806549700013 ], [ 123.5293074880002, 12.951646226000207 ], [ 123.52100670700008, 12.953436591000127 ], [ 123.51303144600013, 12.956691799000168 ], [ 123.50310306100016, 12.964829820000148 ], [ 123.48804772200015, 12.985581773000263 ], [ 123.46810957100013, 12.995998440000164 ], [ 123.4502059250002, 13.029282945000148 ], [ 123.44125410200024, 13.036851304000095 ], [ 123.41879316500012, 13.039252020000163 ], [ 123.40202884200005, 13.043280341000127 ], [ 123.38502037900014, 13.044094143000109 ], [ 123.36215254000012, 13.036851304000095 ], [ 123.33041425900001, 13.019029039000145 ], [ 123.3100692070002, 13.012355861000287 ], [ 123.3007918630002, 13.019761460000097 ], [ 123.29615319100003, 13.036078192000105 ], [ 123.28785241000014, 13.054348049000168 ], [ 123.28443444100014, 13.071519273000206 ], [ 123.2939559250002, 13.084662177000155 ], [ 123.27898196700028, 13.120184637000136 ], [ 123.30518639400032, 13.198635158000229 ], [ 123.3007918630002, 13.235500393000223 ], [ 123.28443444100014, 13.253607489000217 ], [ 123.24732506600003, 13.279201565000108 ], [ 123.23194420700008, 13.297552801999984 ], [ 123.22779381600014, 13.306301174000168 ], [ 123.22242272200003, 13.322007554000095 ], [ 123.21810957100013, 13.331040757000153 ], [ 123.19092858200008, 13.359035549000225 ], [ 123.19703209700026, 13.386542059000078 ], [ 123.18775475400003, 13.420477606000134 ], [ 123.16879316500001, 13.449204820000261 ], [ 123.14625084700015, 13.461371161000159 ], [ 123.11793053500014, 13.468898830000114 ], [ 123.06519616000026, 13.501776434000135 ], [ 123.03663170700008, 13.509222723000107 ], [ 123.01970462300028, 13.511379299 ], [ 122.99708092500032, 13.520697333000214 ], [ 122.98170006600014, 13.522894598000221 ], [ 122.97201582100013, 13.527533270000163 ], [ 122.94776451900009, 13.549994208000157 ], [ 122.88550866000026, 13.593329169000242 ], [ 122.87281334700003, 13.598578192000105 ], [ 122.85914147200015, 13.606105861000231 ], [ 122.82894941500024, 13.641750393000223 ], [ 122.81470787900014, 13.653794664000145 ], [ 122.86255944100026, 13.69476959800005 ], [ 122.81373131600026, 13.748439846000224 ], [ 122.78931725400003, 13.768540757000096 ], [ 122.7587996750002, 13.78359609600011 ], [ 122.7587996750002, 13.777329820000148 ], [ 122.75269616000014, 13.78359609600011 ], [ 122.7587996750002, 13.790350653000246 ], [ 122.7714949880002, 13.790961005000099 ], [ 122.76685631600003, 13.79954661700026 ], [ 122.75310306100016, 13.810492255000156 ], [ 122.73902428500026, 13.818304755000156 ], [ 122.69996178500003, 13.825832424000112 ], [ 122.69068444100014, 13.831976630000099 ], [ 122.6787215500002, 13.820786851000207 ], [ 122.66578209700015, 13.819484768 ], [ 122.65316816500012, 13.826076565000164 ], [ 122.64283287900003, 13.838812567000218 ], [ 122.64486738400012, 13.843003648000149 ], [ 122.65170332100001, 13.848089911000102 ], [ 122.65658613400024, 13.854315497000243 ], [ 122.65300540500016, 13.862372137000136 ], [ 122.62273196700016, 13.891994533000116 ], [ 122.6103621750002, 13.899318752000113 ], [ 122.59693444100026, 13.90448639500022 ], [ 122.5844832690002, 13.906439520000276 ], [ 122.58033287900014, 13.913275458000101 ], [ 122.5776473320002, 13.926459052000212 ], [ 122.57211347700002, 13.935044664000259 ], [ 122.56031334700015, 13.928168036000216 ], [ 122.55591881600014, 13.93789297100011 ], [ 122.5429793630002, 13.952582098000164 ], [ 122.54029381600014, 13.958563544000185 ], [ 122.53687584700015, 13.96112702000022 ], [ 122.51587975400014, 13.934393622000186 ], [ 122.45948326900009, 13.93789297100011 ], [ 122.43490644600013, 13.945990302000098 ], [ 122.41627037900014, 13.96165599200026 ], [ 122.41309655000009, 13.94806549700013 ], [ 122.42066491000014, 13.932277736000117 ], [ 122.43384850400014, 13.919338283000172 ], [ 122.4472762380002, 13.913885809000249 ], [ 122.45085696700005, 13.906195380000099 ], [ 122.49976647200003, 13.837795315000051 ], [ 122.50961347700013, 13.82001373900016 ], [ 122.50879967500032, 13.807766018000109 ], [ 122.50269616000014, 13.793158270000106 ], [ 122.5039168630002, 13.771918036000216 ], [ 122.51246178500003, 13.735785223000221 ], [ 122.49057050900012, 13.740627346000224 ], [ 122.48552493600016, 13.721625067000161 ], [ 122.49138431100016, 13.677069403000246 ], [ 122.49756920700031, 13.652044989000217 ], [ 122.51295006600026, 13.630438544000128 ], [ 122.54997806100016, 13.595160223000221 ], [ 122.62175540500016, 13.552720445000205 ], [ 122.63599694100003, 13.537095445000205 ], [ 122.6323348320002, 13.520697333000214 ], [ 122.60954837300017, 13.531968492000146 ], [ 122.56714928500014, 13.563869533000229 ], [ 122.57292728000016, 13.548041083000101 ], [ 122.59888756600014, 13.508286851000094 ], [ 122.64283287900003, 13.457586981000247 ], [ 122.65430748800009, 13.44041575700021 ], [ 122.66325931100016, 13.420477606000134 ], [ 122.67269941500001, 13.379299221000167 ], [ 122.67701256600003, 13.341945705000171 ], [ 122.67701256600003, 13.30097077 ], [ 122.67888431100016, 13.28986237200013 ], [ 122.68295332100013, 13.282294012000136 ], [ 122.68767337300005, 13.276109117000203 ], [ 122.69068444100014, 13.269598700000245 ], [ 122.69255618600005, 13.248765367000146 ], [ 122.69223066500001, 13.236802476000037 ], [ 122.69068444100014, 13.228664455000228 ], [ 122.68523196700005, 13.225246486000117 ], [ 122.67579186300009, 13.222113348000221 ], [ 122.66716556100027, 13.218085028000189 ], [ 122.66325931100016, 13.211615302000098 ], [ 122.65316816500012, 13.200995184000135 ], [ 122.63013756600014, 13.18805573100002 ], [ 122.60482832100013, 13.177557684000135 ], [ 122.58814537900014, 13.174017645000276 ], [ 122.57097415500016, 13.184556382000153 ], [ 122.50505618600005, 13.239203192000105 ], [ 122.50757897200003, 13.25946686400016 ], [ 122.51807701900009, 13.294867255000099 ], [ 122.51929772200015, 13.310614325000245 ], [ 122.50114993600016, 13.368068752000056 ], [ 122.40259850400003, 13.496161200000017 ], [ 122.40023847700024, 13.502875067000161 ], [ 122.3984481130002, 13.515814520000276 ], [ 122.39519290500016, 13.522894598000221 ], [ 122.3759871750002, 13.540838934000249 ], [ 122.36947675900012, 13.549790757000096 ], [ 122.3413192070002, 13.56110260600019 ], [ 122.3349715500002, 13.57469310100015 ], [ 122.31902103000027, 13.592230536000159 ], [ 122.25855553500014, 13.592027085000154 ], [ 122.25928795700008, 13.606024481000247 ], [ 122.24154707100013, 13.611965236000231 ], [ 122.20753014400009, 13.61432526200025 ], [ 122.19402103000027, 13.622788804000095 ], [ 122.18995201900032, 13.631048895000106 ], [ 122.18637129000024, 13.648016669000185 ], [ 122.18043053500014, 13.656927802000212 ], [ 122.17221113400012, 13.666693427000212 ], [ 122.11841881600014, 13.752101955000114 ], [ 122.09310957100013, 13.780585028000189 ], [ 122.05990644600024, 13.804632880000213 ], [ 122.05372155000009, 13.785142320000148 ], [ 122.03891035200013, 13.78961823100019 ], [ 122.0219832690002, 13.803127346000167 ], [ 122.0087996750002, 13.810858466000184 ], [ 121.98943118600016, 13.810044664000145 ], [ 121.98585045700008, 13.812079169000185 ], [ 121.94988040500027, 13.844549872000186 ], [ 121.93702233200008, 13.851792710000097 ], [ 121.92481530000009, 13.855373440000108 ], [ 121.91358483200008, 13.857123114000103 ], [ 121.90300540500004, 13.860541083000157 ], [ 121.8823348320002, 13.877997137000136 ], [ 121.87086022200026, 13.885728257000153 ], [ 121.85962975400025, 13.891302802000155 ], [ 121.82715905000009, 13.899725653000132 ], [ 121.8129988940002, 13.914943752000113 ], [ 121.80176842500009, 13.933091539000202 ], [ 121.78630618600005, 13.948675848000107 ], [ 121.77800540500016, 13.949042059000135 ], [ 121.74024498800009, 13.96190013200021 ], [ 121.72486412900014, 13.969142971000053 ], [ 121.71843509200005, 13.955308335000268 ], [ 121.70101972700002, 13.944769598000164 ], [ 121.69752037900003, 13.931301174000112 ], [ 121.6899520190002, 13.925970770000163 ], [ 121.64226321700016, 13.913885809000249 ], [ 121.63689212300005, 13.909613348000107 ], [ 121.62175540500016, 13.89345937700017 ], [ 121.61312910200013, 13.89305247600015 ], [ 121.59595787900014, 13.897406317000218 ], [ 121.59107506600003, 13.896795966000127 ], [ 121.57789147200026, 13.888006903000246 ], [ 121.54932701900009, 13.878159898000206 ], [ 121.53052819100014, 13.864976304000095 ], [ 121.52328535200002, 13.86188385600019 ], [ 121.51587975400003, 13.860012111000117 ], [ 121.4990340500002, 13.859076239000103 ], [ 121.49439537900003, 13.858099677000155 ], [ 121.48462975400025, 13.851792710000097 ], [ 121.4546004570002, 13.81924062700017 ], [ 121.43344160200002, 13.796372789000202 ], [ 121.44076582100001, 13.726385809000249 ], [ 121.43628991000014, 13.700995184000192 ], [ 121.4458113940002, 13.700913804000209 ], [ 121.45232181100016, 13.699448960000154 ], [ 121.46412194100003, 13.69476959800005 ], [ 121.43433678500014, 13.663560289000145 ], [ 121.43002363400001, 13.656927802000212 ], [ 121.38884524800017, 13.666734117000203 ], [ 121.37476647200026, 13.667466539000259 ], [ 121.35564212300017, 13.65713125200017 ], [ 121.29810631600003, 13.614894924000112 ], [ 121.27881920700008, 13.595038153000246 ], [ 121.26351972700024, 13.600043036000159 ], [ 121.24919681100005, 13.608628648000206 ], [ 121.24496504000024, 13.612250067000048 ], [ 121.21778405000032, 13.623236395000106 ], [ 121.20460045700008, 13.625718492000203 ], [ 121.18669681100005, 13.626532294000242 ], [ 121.17798912900003, 13.62909577000022 ], [ 121.16944420700008, 13.634588934000192 ], [ 121.15870201900009, 13.63947174700013 ], [ 121.1425887380002, 13.640204169000185 ], [ 121.11011803500003, 13.632961330000171 ], [ 121.09449303500014, 13.62689850500027 ], [ 121.08041425900001, 13.619086005000099 ], [ 121.07048587300017, 13.622503973000107 ], [ 121.04753665500004, 13.62726471600007 ], [ 121.03891035200002, 13.632757880000213 ], [ 121.03394616000014, 13.641831773000206 ], [ 121.03736412900025, 13.647121486000287 ], [ 121.04322350400014, 13.652980861000231 ], [ 121.0463973320002, 13.663763739000103 ], [ 121.0488387380002, 13.68829987200013 ], [ 121.05274498800031, 13.705877997000186 ], [ 121.05347741000003, 13.722113348000107 ], [ 121.03980553500003, 13.758693752000056 ], [ 121.03589928500014, 13.76260000200017 ], [ 121.01628665500004, 13.775295315000108 ], [ 121.00375410200013, 13.780910549000225 ], [ 120.99097741000003, 13.783636786000102 ], [ 120.9809676440002, 13.780462958000214 ], [ 120.90308678500026, 13.692938544000242 ], [ 120.89503014400009, 13.68797435100015 ], [ 120.88746178500014, 13.693508205000228 ], [ 120.8823348320002, 13.705226955000114 ], [ 120.88070722700013, 13.716864325000245 ], [ 120.88502037900003, 13.722113348000107 ], [ 120.89323978000004, 13.727280992000146 ], [ 120.89820397200015, 13.738836981000134 ], [ 120.90186608200031, 13.75039297100011 ], [ 120.9057723320002, 13.755601303999981 ], [ 120.91871178500003, 13.757025458000214 ], [ 120.92603600400014, 13.761664130000156 ], [ 120.92896569100014, 13.770249742000203 ], [ 120.92904707100013, 13.78359609600011 ], [ 120.91260826900032, 13.800034898000263 ], [ 120.9091903000002, 13.804632880000213 ], [ 120.9087020190002, 13.816107489000103 ], [ 120.91391035200013, 13.837347723000164 ], [ 120.91537519600013, 13.848700262000193 ], [ 120.91488691500001, 13.864935614000103 ], [ 120.91236412900014, 13.881781317000105 ], [ 120.90626061300031, 13.896470445000261 ], [ 120.89503014400009, 13.906439520000276 ], [ 120.87671959700003, 13.912258205000228 ], [ 120.78687584700003, 13.923325914000145 ], [ 120.74594160200002, 13.933783270000163 ], [ 120.7236434250002, 13.934393622000186 ], [ 120.70484459700015, 13.927435614000217 ], [ 120.69743899800017, 13.913885809000249 ], [ 120.70093834700003, 13.896144924000225 ], [ 120.7143660820002, 13.876369533000116 ], [ 120.72291100400025, 13.855414130000099 ], [ 120.70337975400025, 13.851711330000114 ], [ 120.66228274800028, 13.859279690000164 ], [ 120.65259850400014, 13.845526434000135 ], [ 120.6562606130002, 13.827093817000105 ], [ 120.66488691500001, 13.806626695000261 ], [ 120.66968834700015, 13.786932684000135 ], [ 120.66342207100001, 13.775376695000261 ], [ 120.64966881600003, 13.78424713700025 ], [ 120.62810306100016, 13.810858466000184 ], [ 120.6201278000002, 13.846625067000218 ], [ 120.61841881600003, 13.931626695000148 ], [ 120.60132897200026, 13.969142971000053 ], [ 120.61687259200016, 13.971665757000096 ], [ 120.62891686300009, 13.98126862200013 ], [ 120.63477623800031, 13.991603908000172 ], [ 120.63168379000024, 13.99648672100011 ], [ 120.61988366000014, 14.002915757000039 ], [ 120.61744225400014, 14.01788971600007 ], [ 120.62183678500003, 14.07656484600011 ], [ 120.61947675900012, 14.104234117000203 ], [ 120.60775800900001, 14.124904690000108 ], [ 120.58033287900003, 14.13300202000022 ], [ 120.58033287900003, 14.140448309000192 ], [ 120.59571373800009, 14.147935289000259 ], [ 120.59742272200015, 14.156927802000098 ], [ 120.58887780000009, 14.166164455000228 ], [ 120.57349694100014, 14.174546617000146 ], [ 120.58301842500032, 14.174465236000231 ], [ 120.58961022200015, 14.176011460000097 ], [ 120.60132897200026, 14.181382554000209 ], [ 120.60132897200026, 14.18821849200026 ], [ 120.58725019600013, 14.20026276200025 ], [ 120.59595787900003, 14.217962958000157 ], [ 120.61247806100016, 14.23704661700026 ], [ 120.62126712300017, 14.253404039000259 ], [ 120.62745201900032, 14.269598700000188 ], [ 120.64332116000014, 14.277085679000209 ], [ 120.68336022200003, 14.283840236000117 ], [ 120.69760175900001, 14.289496161000102 ], [ 120.71314537900003, 14.298529364000103 ], [ 120.72535241000014, 14.309556382000153 ], [ 120.73047936300009, 14.32135651200025 ], [ 120.73560631600014, 14.327215887000193 ], [ 120.76002037900014, 14.337144273000263 ], [ 120.76832116000003, 14.342189846000224 ], [ 120.7895613940002, 14.375311591000241 ], [ 120.8779403000002, 14.458889065000108 ], [ 120.88607832100001, 14.462388414000202 ], [ 120.89747155000032, 14.463120835000154 ], [ 120.91920006600003, 14.461981512000307 ], [ 120.92611738400012, 14.464667059000192 ], [ 120.9433699880002, 14.483099677000098 ], [ 120.97038821700028, 14.501898505000156 ], [ 120.98031660200013, 14.515448309000192 ], [ 120.98438561300031, 14.53400299700013 ], [ 120.98015384200016, 14.55744049700013 ], [ 120.95883222700013, 14.591782945000148 ], [ 120.9502059250002, 14.612779039000259 ], [ 120.94312584700026, 14.653509833000101 ], [ 120.93653405000009, 14.667425848000164 ], [ 120.90691165500004, 14.70673248900016 ], [ 120.9023543630002, 14.71893952000022 ], [ 120.89429772200026, 14.725083726000207 ], [ 120.84717858200008, 14.743719794000128 ], [ 120.84392337300017, 14.749090887000136 ], [ 120.84343509200005, 14.755682684000135 ], [ 120.84058678500014, 14.761216539000145 ], [ 120.83008873800031, 14.763617255000213 ], [ 120.73161868600005, 14.766669012000193 ], [ 120.66968834700015, 14.777289130000156 ], [ 120.66382897200015, 14.778957424000168 ], [ 120.6557723320002, 14.781236070000205 ], [ 120.64210045700031, 14.787014065000164 ], [ 120.63209069100014, 14.795477606000134 ], [ 120.62810306100016, 14.807684637000193 ], [ 120.62891686300009, 14.842027085000211 ], [ 120.62720787900014, 14.858710028000246 ], [ 120.62126712300017, 14.872870184000192 ], [ 120.61988366000014, 14.840480861000174 ], [ 120.62126712300017, 14.831854559000192 ], [ 120.61833743600005, 14.828314520000106 ], [ 120.60759524800017, 14.818264065000164 ], [ 120.60385175900012, 14.82493724200026 ], [ 120.60092207100001, 14.825628973000221 ], [ 120.59392337300028, 14.818264065000164 ], [ 120.60572350400025, 14.884833075000131 ], [ 120.60132897200026, 14.900824286000159 ], [ 120.58570397200003, 14.90281810100015 ], [ 120.57732181100005, 14.883490302000155 ], [ 120.57349694100014, 14.83877187700017 ], [ 120.5527449880002, 14.849920966000127 ], [ 120.54517662900014, 14.836859442000161 ], [ 120.5454207690002, 14.827093817000105 ], [ 120.54615319100026, 14.787827867000203 ], [ 120.53646894600001, 14.723211981000134 ], [ 120.53931725400003, 14.702826239000274 ], [ 120.57837975400014, 14.659409898000206 ], [ 120.58220462300017, 14.648260809000249 ], [ 120.57691491000003, 14.636948960000211 ], [ 120.57496178500026, 14.621649481000247 ], [ 120.59392337300028, 14.550726630000156 ], [ 120.59791100400025, 14.505601304000209 ], [ 120.58838951900009, 14.46698639500022 ], [ 120.56462649800028, 14.441229559000192 ], [ 120.52621504000024, 14.434637762000193 ], [ 120.51685631600003, 14.43720123900016 ], [ 120.5097762380002, 14.440822658000172 ], [ 120.50220787900003, 14.443182684000249 ], [ 120.49146569100014, 14.442084052000098 ], [ 120.48845462300028, 14.437933661000159 ], [ 120.4868270190002, 14.430731512000136 ], [ 120.4814559250002, 14.423976955 ], [ 120.46705162900014, 14.421047268000166 ], [ 120.46322675900012, 14.424261786000216 ], [ 120.4604598320002, 14.431545315000221 ], [ 120.45590254000012, 14.438788153000189 ], [ 120.4101668630002, 14.452053127000113 ], [ 120.40211022200015, 14.455755927000212 ], [ 120.38200931100005, 14.480292059000135 ], [ 120.37680097700013, 14.50820547100011 ], [ 120.38160241000003, 14.568101304000152 ], [ 120.37794030000009, 14.602036851000207 ], [ 120.36736087300005, 14.620754299000225 ], [ 120.32642662900014, 14.64752838700025 ], [ 120.31519616000003, 14.641302802000212 ], [ 120.30494225400025, 14.640570380000156 ], [ 120.2968856130002, 14.644842841000241 ], [ 120.29224694100003, 14.653753973000221 ], [ 120.28541100400014, 14.653753973000221 ], [ 120.25318444100026, 14.698635158000116 ], [ 120.24236087300005, 14.729641018000166 ], [ 120.26091556100016, 14.743719794000128 ], [ 120.27263431100005, 14.747056382000153 ], [ 120.2651473320002, 14.754584052000155 ], [ 120.24390709700003, 14.767035223000221 ], [ 120.24732506600014, 14.778062242000146 ], [ 120.2553817070002, 14.787054755000156 ], [ 120.26465905000009, 14.795152085000097 ], [ 120.27173912900014, 14.803941148000149 ], [ 120.27767988400012, 14.802720445000148 ], [ 120.28337649800005, 14.806708075000188 ], [ 120.28834069100014, 14.814764716000241 ], [ 120.29224694100003, 14.825669664000145 ], [ 120.27572675900012, 14.827134507000096 ], [ 120.26775149800017, 14.829535223000164 ], [ 120.26433353000016, 14.835353908000116 ], [ 120.26335696700016, 14.84658437700017 ], [ 120.2597762380002, 14.851507880000156 ], [ 120.25261478000016, 14.852606512000307 ], [ 120.2407332690002, 14.85236237200013 ], [ 120.23031660200013, 14.859808661000159 ], [ 120.22022545700008, 14.873358466000127 ], [ 120.20932050900001, 14.880031643000223 ], [ 120.19605553500014, 14.86664459800005 ], [ 120.20142662900003, 14.843085028000132 ], [ 120.19711347700013, 14.808010158000229 ], [ 120.18726647200003, 14.774969794000242 ], [ 120.17554772200015, 14.757391669000242 ], [ 120.16179446700028, 14.756415106000134 ], [ 120.14356530000032, 14.760402736000231 ], [ 120.12777754000001, 14.767035223000221 ], [ 120.12094160200024, 14.773871161000216 ], [ 120.11573326900009, 14.785467841000127 ], [ 120.09009850400014, 14.794338283000116 ], [ 120.07992597700013, 14.803941148000149 ], [ 120.08822675900024, 14.807440497000243 ], [ 120.09343509200016, 14.811835028000132 ], [ 120.09693444100003, 14.817613023000092 ], [ 120.10043379000012, 14.825669664000145 ], [ 120.09595787900014, 14.823472398000206 ], [ 120.07992597700013, 14.818264065000164 ], [ 120.05665123800031, 14.893255927000212 ], [ 120.04981530000009, 14.931219794000128 ], [ 120.05681399800028, 15.022162177000155 ], [ 120.05298912900025, 15.062445380000156 ], [ 120.01807701900009, 15.206122137000193 ], [ 120.0083113940002, 15.215480861000231 ], [ 120.00245201900009, 15.219671942000161 ], [ 120.00196373800009, 15.229437567000161 ], [ 120.0048934250002, 15.24681224200026 ], [ 120.00513756600014, 15.269435940000221 ], [ 120.00123131600014, 15.277411200000188 ], [ 119.98064212300017, 15.307806708000157 ], [ 119.96387780000009, 15.341009833000157 ], [ 119.95337975400003, 15.356390692000105 ], [ 119.89698326900009, 15.410589911000102 ], [ 119.8881942070002, 15.429022528000132 ], [ 119.89087975400003, 15.437445380000156 ], [ 119.90544681100016, 15.446763414000202 ], [ 119.9087020190002, 15.452297268000109 ], [ 119.9082137380002, 15.461615302000155 ], [ 119.90699303500026, 15.468654690000108 ], [ 119.90186608200008, 15.48297760600019 ], [ 119.92066491000014, 15.471502997000186 ], [ 119.9409285820002, 15.475775458000101 ], [ 119.95728600400003, 15.491441148000092 ], [ 119.96387780000009, 15.514349677000041 ], [ 119.96208743600016, 15.521307684000135 ], [ 119.95728600400003, 15.528876044000185 ], [ 119.9516707690002, 15.535060940000164 ], [ 119.94654381600014, 15.53758372600015 ], [ 119.94410241000014, 15.542547919000128 ], [ 119.94174238400024, 15.55361562700017 ], [ 119.93734785200013, 15.565578518000109 ], [ 119.9292098320002, 15.57298411700026 ], [ 119.92774498800009, 15.568670966000184 ], [ 119.9223738940002, 15.558742580000114 ], [ 119.90430748800009, 15.597072658 ], [ 119.90186608200008, 15.61025625200017 ], [ 119.90455162900003, 15.621283270000049 ], [ 119.91765384200028, 15.647447007000039 ], [ 119.9223738940002, 15.661118881999982 ], [ 119.91968834700003, 15.690334377000113 ], [ 119.90251712300028, 15.704657294000128 ], [ 119.88135826900009, 15.717718817000161 ], [ 119.8671981130002, 15.743068752000056 ], [ 119.88941491000003, 15.748032945000148 ], [ 119.89405358200008, 15.763902085000097 ], [ 119.8881942070002, 15.805731512000136 ], [ 119.89177493600027, 15.822984117000203 ], [ 119.89625084700026, 15.837469794000185 ], [ 119.89861087300017, 15.853176174000168 ], [ 119.89503014400032, 15.87400950700021 ], [ 119.87891686300009, 15.914740302000098 ], [ 119.8671981130002, 15.935003973000107 ], [ 119.8540145190002, 15.949164130000156 ], [ 119.82829837300017, 15.955715236 ], [ 119.81251061300031, 15.941880601000094 ], [ 119.80014082100013, 15.926662502000113 ], [ 119.7851668630002, 15.928656317000161 ], [ 119.78207441500012, 15.924790757000096 ], [ 119.77084394600001, 15.914984442000218 ], [ 119.75586998800031, 15.944566148000206 ], [ 119.75782311300009, 16.058986721000053 ], [ 119.7602645190002, 16.075588283000172 ], [ 119.7749129570002, 16.117987372000243 ], [ 119.7783309250002, 16.137844143000166 ], [ 119.77515709700015, 16.146877346000167 ], [ 119.76099694100014, 16.162014065000164 ], [ 119.75782311300009, 16.172267971000167 ], [ 119.75570722700002, 16.203436591000184 ], [ 119.75782311300009, 16.216701565000108 ], [ 119.77605228000016, 16.280747789000259 ], [ 119.78191165500016, 16.322251695000261 ], [ 119.79078209700015, 16.341864325000131 ], [ 119.80193118600016, 16.357855536000159 ], [ 119.81251061300031, 16.367499091000184 ], [ 119.81706790500016, 16.368312893000223 ], [ 119.82837975400014, 16.366603908000116 ], [ 119.83285566500001, 16.367499091000184 ], [ 119.8496199880002, 16.378892320000261 ], [ 119.8540145190002, 16.381170966000127 ], [ 119.87029056100016, 16.385402736000174 ], [ 119.8916121750002, 16.38735586100006 ], [ 119.91635175900001, 16.380845445000148 ], [ 119.9257918630002, 16.364976304000095 ], [ 119.9257918630002, 16.345119533000172 ], [ 119.90186608200008, 16.25079987200013 ], [ 119.91480553500014, 16.242499091000127 ], [ 119.96021569100026, 16.231431382000039 ], [ 119.9702254570002, 16.226548570000148 ], [ 119.97624759200005, 16.218247789000145 ], [ 120.00513756600014, 16.188421942000161 ], [ 120.01514733200031, 16.181870835000154 ], [ 120.03736412900003, 16.18235911700009 ], [ 120.05005944100014, 16.180853583000044 ], [ 120.06153405000009, 16.173000393000223 ], [ 120.07992597700013, 16.154527085000097 ], [ 120.08773847700013, 16.157212632000153 ], [ 120.09115644600013, 16.153469143000166 ], [ 120.10043379000012, 16.089748440000164 ], [ 120.10564212300028, 16.069647528000075 ], [ 120.1191512380002, 16.05573151200025 ], [ 120.13884524800028, 16.046128648000263 ], [ 120.18531334700015, 16.033392645000163 ], [ 120.20850670700008, 16.032660223000107 ], [ 120.22982832100013, 16.03729889500022 ], [ 120.24781334700015, 16.048488674000168 ], [ 120.25766035200002, 16.052191473000164 ], [ 120.29224694100003, 16.055609442000105 ], [ 120.3066512380002, 16.044663804000209 ], [ 120.29908287900003, 16.017401434000135 ], [ 120.31137129000012, 16.027085679000038 ], [ 120.3227645190002, 16.048570054000152 ], [ 120.33383222700002, 16.058986721000053 ], [ 120.3408309250002, 16.054877020000049 ], [ 120.35254967500032, 16.052720445000091 ], [ 120.3632918630002, 16.05548737200013 ], [ 120.36736087300005, 16.065822658000116 ], [ 120.36101321700016, 16.073187567000105 ], [ 120.3481551440002, 16.070298570000261 ], [ 120.33464603000016, 16.065252997000186 ], [ 120.32642662900014, 16.065822658000116 ], [ 120.32935631600014, 16.079494533000229 ], [ 120.3652449880002, 16.108710028000189 ], [ 120.37419681100005, 16.123846747000186 ], [ 120.37859134200016, 16.134100653000019 ], [ 120.39771569100003, 16.154038804000095 ], [ 120.40211022200015, 16.165472723000164 ], [ 120.40211022200015, 16.205755927000212 ], [ 120.3974715500002, 16.22898997600015 ], [ 120.38550866000003, 16.251939195000148 ], [ 120.35377037900025, 16.291693427000155 ], [ 120.35377037900025, 16.271307684000192 ], [ 120.3486434250002, 16.279527085000154 ], [ 120.34205162900014, 16.285589911000159 ], [ 120.33627363400001, 16.292181708000157 ], [ 120.31218509200016, 16.456203518000166 ], [ 120.29908287900003, 16.493801174000112 ], [ 120.3066512380002, 16.544989325000131 ], [ 120.2978621750002, 16.568915106000134 ], [ 120.2841903000002, 16.592962958000157 ], [ 120.27613366000014, 16.611883856000134 ], [ 120.28541100400014, 16.620672919000015 ], [ 120.28541100400014, 16.616848049000112 ], [ 120.28842207100013, 16.614569403000075 ], [ 120.29525800900001, 16.613714911000216 ], [ 120.3066512380002, 16.613918361000174 ], [ 120.3066512380002, 16.620672919000015 ], [ 120.30144290500016, 16.63320547100011 ], [ 120.30250084700003, 16.654974677000098 ], [ 120.30787194100003, 16.677679755000213 ], [ 120.32593834700003, 16.712591864000217 ], [ 120.32341556100027, 16.733832098000164 ], [ 120.31617272200026, 16.755804755000156 ], [ 120.31218509200016, 16.777777411000102 ], [ 120.31364993600005, 16.799627997000186 ], [ 120.31576582100024, 16.809271552000098 ], [ 120.31959069100014, 16.819322007000039 ], [ 120.32642662900014, 16.83095937700017 ], [ 120.33350670700008, 16.83698151200025 ], [ 120.34156334700003, 16.841945705000057 ], [ 120.35059655000009, 16.85032786700026 ], [ 120.4272567070002, 16.961900132000153 ], [ 120.43409264400009, 16.982123114000103 ], [ 120.43628991000026, 17.008002020000106 ], [ 120.41635175900012, 17.179348049000112 ], [ 120.41423587300017, 17.18431224200026 ], [ 120.4043074880002, 17.198309637000136 ], [ 120.40211022200015, 17.206691799 ], [ 120.40308678500014, 17.221625067000161 ], [ 120.41236412900003, 17.264593817000048 ], [ 120.40821373800009, 17.322699286000045 ], [ 120.41138756600003, 17.328314520000163 ], [ 120.42945397200015, 17.347560940000108 ], [ 120.43751061300009, 17.358832098000107 ], [ 120.44174238400001, 17.367987372000186 ], [ 120.4433699880002, 17.377101955000171 ], [ 120.44369550900024, 17.388495184000021 ], [ 120.43523196700016, 17.422796942000105 ], [ 120.40170332100013, 17.497015692000105 ], [ 120.40211022200015, 17.518866278000246 ], [ 120.35792076900009, 17.530259507000153 ], [ 120.3408309250002, 17.53876373900016 ], [ 120.33383222700002, 17.556382554000152 ], [ 120.35320071700016, 17.678127346 ], [ 120.36353600400003, 17.687160549000055 ], [ 120.38477623800009, 17.690130927000155 ], [ 120.4023543630002, 17.696966864000217 ], [ 120.41244550900001, 17.712836005000099 ], [ 120.41667728000016, 17.731024481000247 ], [ 120.41635175900012, 17.744777736000174 ], [ 120.40821373800009, 17.759995835000154 ], [ 120.39714603000004, 17.770738023000263 ], [ 120.39128665500016, 17.781439520000106 ], [ 120.39869225400014, 17.796332098000221 ], [ 120.42261803500014, 17.823553778000132 ], [ 120.42790774800017, 17.838120835000097 ], [ 120.42945397200015, 17.860825914000145 ], [ 120.4253035820002, 17.902411200000131 ], [ 120.42790774800017, 17.916652736000174 ], [ 120.45167076900032, 17.948879299000225 ], [ 120.47266686300009, 17.991603908000229 ], [ 120.47722415500027, 18.00482819199999 ], [ 120.47828209700015, 18.021795966000241 ], [ 120.47681725400003, 18.043646552000212 ], [ 120.47299238400012, 18.064276434000078 ], [ 120.46705162900014, 18.077134507000153 ], [ 120.47006269600024, 18.091009833000157 ], [ 120.52621504000024, 18.204087632000096 ], [ 120.5234481130002, 18.202541408000229 ], [ 120.52027428500014, 18.206040757000153 ], [ 120.51791425900001, 18.212103583000157 ], [ 120.5180770190002, 18.217718817000218 ], [ 120.52084394600001, 18.219631252000113 ], [ 120.52556399800017, 18.221258856000134 ], [ 120.52995853000016, 18.22353750200017 ], [ 120.53191165500004, 18.22736237200013 ], [ 120.5361434250002, 18.239813544000185 ], [ 120.56609134200016, 18.292222398000263 ], [ 120.5791121750002, 18.325140692000105 ], [ 120.58619225400014, 18.364488023000092 ], [ 120.5849715500002, 18.405462958000101 ], [ 120.57349694100014, 18.44306061400016 ], [ 120.56177819100003, 18.469671942000218 ], [ 120.56080162900014, 18.486761786000102 ], [ 120.57016035200002, 18.501776434000192 ], [ 120.59050540500027, 18.522162177000155 ], [ 120.61109459700003, 18.538560289000202 ], [ 120.62712649800028, 18.541489976000037 ], [ 120.66968834700015, 18.532416083000044 ], [ 120.69068444100003, 18.534409898000035 ], [ 120.73536217500009, 18.549302476000037 ], [ 120.75424238400001, 18.552923895000049 ], [ 120.77084394600024, 18.561468817000105 ], [ 120.77564537900003, 18.581366278000189 ], [ 120.77588951900009, 18.604315497000186 ], [ 120.77898196700005, 18.621812242000203 ], [ 120.79273522200015, 18.636135158000116 ], [ 120.81299889400009, 18.644517320000148 ], [ 120.83423912900025, 18.645941473000107 ], [ 120.85084069100003, 18.638861395000163 ], [ 120.86589603000004, 18.620306708000157 ], [ 120.89185631600003, 18.579901434000135 ], [ 120.9091903000002, 18.567206122000243 ] ] ], [ [ [ 121.4580184250002, 18.883937893000223 ], [ 121.46697024800005, 18.881781317000161 ], [ 121.47779381600003, 18.881903387000136 ], [ 121.4536238940002, 18.865952867000203 ], [ 121.43140709700026, 18.856146551999984 ], [ 121.4067488940002, 18.850816148000206 ], [ 121.31861412900014, 18.843207098000164 ], [ 121.29493248800009, 18.846828518000166 ], [ 121.27914472700002, 18.862005927000155 ], [ 121.27523847700002, 18.875881252000056 ], [ 121.28003991000014, 18.88056061400016 ], [ 121.29957116000003, 18.881903387000136 ], [ 121.35328209700015, 18.898830471 ], [ 121.38843834700015, 18.902980861000231 ], [ 121.41675866000014, 18.908148505000042 ], [ 121.42986087300017, 18.905585028000132 ], [ 121.44361412900014, 18.895493882000096 ], [ 121.45053144600013, 18.888413804000095 ], [ 121.4580184250002, 18.883937893000223 ] ] ], [ [ [ 121.96070397200026, 19.000962632000096 ], [ 121.96461022200015, 18.991888739000103 ], [ 121.97120201900009, 18.984930731000247 ], [ 121.98365319100026, 18.974839585000211 ], [ 121.99089603000027, 18.961127020000106 ], [ 121.98910566500001, 18.949123440000108 ], [ 121.96257571700005, 18.938666082999987 ], [ 121.9423934250002, 18.909979559000021 ], [ 121.92969811300009, 18.895493882000096 ], [ 121.89527428500003, 18.867661851000207 ], [ 121.88103274800005, 18.85016510600019 ], [ 121.8750106130002, 18.830389716000127 ], [ 121.86573326900009, 18.821926174000112 ], [ 121.84717858200008, 18.824367580000114 ], [ 121.83415774800028, 18.83429596600007 ], [ 121.8408309250002, 18.848334051999984 ], [ 121.84107506600014, 18.868150132000039 ], [ 121.86158287900003, 18.884019273000206 ], [ 121.87484785200013, 18.900824286000216 ], [ 121.85385175900012, 18.923488674 ], [ 121.86410566500012, 18.934637762000193 ], [ 121.87159264400009, 18.95062897300005 ], [ 121.87468509200016, 18.965033270000163 ], [ 121.87159264400009, 18.971258856000134 ], [ 121.87916100400014, 18.975409247000073 ], [ 121.8925887380002, 18.996486721000053 ], [ 121.90235436300009, 19.005357164000088 ], [ 121.90796959700015, 19.004584052000212 ], [ 121.91504967500032, 19.000637111000231 ], [ 121.92090905000009, 18.998114325000074 ], [ 121.92351321700016, 19.002020575000131 ], [ 121.92660566500001, 19.003892320000205 ], [ 121.94166100400003, 19.010728257000096 ], [ 121.94662519600013, 19.01219310100015 ], [ 121.95582116000014, 19.008856512000079 ], [ 121.96070397200026, 19.000962632000096 ] ] ], [ [ [ 121.25896243600027, 19.045721747000186 ], [ 121.24496504000024, 19.018459377000113 ], [ 121.20923912900003, 19.050238348000107 ], [ 121.19678795700008, 19.065497137000079 ], [ 121.19027754000012, 19.087347723000164 ], [ 121.19239342500009, 19.111721096000224 ], [ 121.20818118600016, 19.153794664000088 ], [ 121.21094811300009, 19.176703192000048 ], [ 121.2197371750002, 19.171779690000164 ], [ 121.22584069100014, 19.166205145000163 ], [ 121.22982832100024, 19.159247137000136 ], [ 121.23853600400014, 19.118394273000035 ], [ 121.25220787900014, 19.081284898000092 ], [ 121.25896243600027, 19.045721747000186 ] ] ], [ [ [ 121.45240319100014, 19.384344794000128 ], [ 121.47095787900003, 19.382147528000246 ], [ 121.48894290500027, 19.385931708000157 ], [ 121.50424238400024, 19.392279364000103 ], [ 121.51661217500009, 19.393540757000153 ], [ 121.52613366000014, 19.382269598000221 ], [ 121.52613366000014, 19.334865627000113 ], [ 121.52515709700015, 19.331366278000189 ], [ 121.52466881600014, 19.327866929000152 ], [ 121.52613366000014, 19.320705471000167 ], [ 121.53785241000026, 19.306789455000171 ], [ 121.53980553500014, 19.303371486000117 ], [ 121.54086347700013, 19.300116278000075 ], [ 121.54330488400001, 19.295884507000153 ], [ 121.54558353000016, 19.290269273000206 ], [ 121.54672285200002, 19.282863674000225 ], [ 121.54330488400001, 19.278876044000185 ], [ 121.5351668630002, 19.278753973000107 ], [ 121.52588951900032, 19.279730536000159 ], [ 121.51872806100016, 19.279120184000135 ], [ 121.5127059250002, 19.27399323100019 ], [ 121.51010175900001, 19.267645575000245 ], [ 121.50668379000012, 19.262152411000159 ], [ 121.49830162900014, 19.259263414000259 ], [ 121.47095787900003, 19.269232489000103 ], [ 121.46461022200003, 19.274969794000242 ], [ 121.42628014400009, 19.296535549000168 ], [ 121.42115319100014, 19.297919012000136 ], [ 121.41391035200002, 19.297593492000203 ], [ 121.40601647200015, 19.298529364000046 ], [ 121.39893639400009, 19.303371486000117 ], [ 121.39356530000032, 19.311224677000155 ], [ 121.38160241000003, 19.33437734600011 ], [ 121.34986412900014, 19.370306708000044 ], [ 121.35084069100003, 19.375921942000105 ], [ 121.3676863940002, 19.377997137000136 ], [ 121.3789168630002, 19.383734442000105 ], [ 121.39576256600003, 19.403265692000161 ], [ 121.45240319100014, 19.384344794000128 ] ] ], [ [ [ 121.99789472700013, 19.560288804000209 ], [ 121.99203535200013, 19.548163153000132 ], [ 121.98715254000012, 19.513128973000221 ], [ 121.97803795700008, 19.49884674700013 ], [ 121.96094811300031, 19.491766669000185 ], [ 121.94711347700024, 19.496771552000155 ], [ 121.92351321700016, 19.519354559000192 ], [ 121.90552819100014, 19.529933986000231 ], [ 121.89820397200026, 19.536769924000112 ], [ 121.8955184250002, 19.546616929000095 ], [ 121.89682050900012, 19.556870835000154 ], [ 121.90023847700013, 19.559230861000174 ], [ 121.90642337300005, 19.558661200000188 ], [ 121.92652428500003, 19.562567450000131 ], [ 121.94157962300017, 19.559963283 ], [ 121.95004316500024, 19.560288804000209 ], [ 121.95736738400024, 19.564113674000168 ], [ 121.96949303500014, 19.575344143000223 ], [ 121.97730553500026, 19.577378648000092 ], [ 121.9829207690002, 19.575344143000223 ], [ 121.9912215500002, 19.570542710000097 ], [ 121.99773196700016, 19.56492747600015 ], [ 121.99789472700013, 19.560288804000209 ] ] ], [ [ [ 121.8618270190002, 20.273749091000013 ], [ 121.85084069100014, 20.273423570000205 ], [ 121.83920332100001, 20.32078685100015 ], [ 121.83765709700015, 20.333929755000099 ], [ 121.83838951900009, 20.340765692000048 ], [ 121.84164472700013, 20.346014716000184 ], [ 121.8593856130002, 20.34735748900016 ], [ 121.87940514400009, 20.33344147300005 ], [ 121.89323978000027, 20.313666083000157 ], [ 121.8921004570002, 20.29734935100015 ], [ 121.86931399800017, 20.276190497000243 ], [ 121.8618270190002, 20.273749091000013 ] ] ], [ [ [ 121.9580184250002, 20.354966539000202 ], [ 121.9389754570002, 20.348700262000193 ], [ 121.92212975400014, 20.354152736000117 ], [ 121.9160262380002, 20.375921942000105 ], [ 121.92237389400009, 20.393296617000146 ], [ 121.96371504000012, 20.451605536000159 ], [ 121.96599368600005, 20.46063873900016 ], [ 121.98023522200015, 20.472967841000127 ], [ 121.99789472700013, 20.483872789000202 ], [ 122.00977623800031, 20.48847077000022 ], [ 122.01929772200003, 20.486476955000171 ], [ 122.02759850400014, 20.481146552000155 ], [ 122.0327254570002, 20.47345612200013 ], [ 122.03239993600027, 20.464056708000101 ], [ 122.02654056100005, 20.45579661700026 ], [ 121.9912215500002, 20.432359117000146 ], [ 121.9687606130002, 20.413397528000189 ], [ 121.96371504000012, 20.406642971000053 ], [ 121.96615644600001, 20.393540757000096 ], [ 121.97087649800005, 20.386053778000132 ], [ 121.97388756600003, 20.379299221000167 ], [ 121.97120201900009, 20.368475653000132 ], [ 121.9580184250002, 20.354966539000202 ] ] ], [ [ [ 121.82984459700026, 20.698960679000209 ], [ 121.80339603000027, 20.691148179000209 ], [ 121.78638756600003, 20.703070380000156 ], [ 121.79118899800005, 20.730047919000015 ], [ 121.80543053500003, 20.758978583000157 ], [ 121.82374108200008, 20.78681061400016 ], [ 121.83765709700015, 20.820257880000213 ], [ 121.84587649800005, 20.831366278000246 ], [ 121.85580488400012, 20.838324286000102 ], [ 121.86597741000014, 20.838202216000127 ], [ 121.87484785200013, 20.82782623899999 ], [ 121.87924238400012, 20.814032294000071 ], [ 121.88070722700002, 20.799383856000247 ], [ 121.8798934250002, 20.784491278000132 ], [ 121.87720787900003, 20.770331122000186 ], [ 121.86768639400032, 20.744289455000114 ], [ 121.85173587300017, 20.718573309000249 ], [ 121.82984459700026, 20.698960679000209 ] ] ], [ [ [ 121.93669681100005, 21.065619208000101 ], [ 121.92969811300009, 21.064520575000188 ], [ 121.93482506600026, 21.073228257000039 ], [ 121.93669681100005, 21.065619208000101 ] ] ], [ [ [ 121.95427493600016, 21.118394273000149 ], [ 121.94906660200013, 21.10687897300005 ], [ 121.94743899800005, 21.116156317000105 ], [ 121.95069420700008, 21.122381903000019 ], [ 121.95427493600016, 21.118394273000149 ] ] ] ] } },\\r\\n    {\\r\\n      \\\"type\\\": \\\"Feature\\\",\\r\\n      \\\"properties\\\": {},\\r\\n      \\\"geometry\\\": {\\r\\n        \\\"type\\\": \\\"Polygon\\\",\\r\\n        \\\"coordinates\\\": [\\r\\n          [\\r\\n            [\\r\\n              91.318359375,\\r\\n              -0.4394488164139641\\r\\n            ],\\r\\n            [\\r\\n              105.205078125,\\r\\n              -0.4394488164139641\\r\\n            ],\\r\\n            [\\r\\n              105.205078125,\\r\\n              8.320212289522944\\r\\n            ],\\r\\n            [\\r\\n              91.318359375,\\r\\n              8.320212289522944\\r\\n            ],\\r\\n            [\\r\\n              91.318359375,\\r\\n              -0.4394488164139641\\r\\n            ]\\r\\n          ]\\r\\n        ]\\r\\n      }\\r\\n    }\\r\\n]\\r\\n}\\r\\n\"","/*\n\tMIT License http://www.opensource.org/licenses/mit-license.php\n\tAuthor Tobias Koppers @sokra\n*/\n// css base code, injected by the css-loader\nmodule.exports = function(useSourceMap) {\n\tvar list = [];\n\n\t// return the list of modules as css string\n\tlist.toString = function toString() {\n\t\treturn this.map(function (item) {\n\t\t\tvar content = cssWithMappingToString(item, useSourceMap);\n\t\t\tif(item[2]) {\n\t\t\t\treturn \"@media \" + item[2] + \"{\" + content + \"}\";\n\t\t\t} else {\n\t\t\t\treturn content;\n\t\t\t}\n\t\t}).join(\"\");\n\t};\n\n\t// import a list of modules into the list\n\tlist.i = function(modules, mediaQuery) {\n\t\tif(typeof modules === \"string\")\n\t\t\tmodules = [[null, modules, \"\"]];\n\t\tvar alreadyImportedModules = {};\n\t\tfor(var i = 0; i < this.length; i++) {\n\t\t\tvar id = this[i][0];\n\t\t\tif(typeof id === \"number\")\n\t\t\t\talreadyImportedModules[id] = true;\n\t\t}\n\t\tfor(i = 0; i < modules.length; i++) {\n\t\t\tvar item = modules[i];\n\t\t\t// skip already imported module\n\t\t\t// this implementation is not 100% perfect for weird media query combinations\n\t\t\t//  when a module is imported multiple times with different media queries.\n\t\t\t//  I hope this will never occur (Hey this way we have smaller bundles)\n\t\t\tif(typeof item[0] !== \"number\" || !alreadyImportedModules[item[0]]) {\n\t\t\t\tif(mediaQuery && !item[2]) {\n\t\t\t\t\titem[2] = mediaQuery;\n\t\t\t\t} else if(mediaQuery) {\n\t\t\t\t\titem[2] = \"(\" + item[2] + \") and (\" + mediaQuery + \")\";\n\t\t\t\t}\n\t\t\t\tlist.push(item);\n\t\t\t}\n\t\t}\n\t};\n\treturn list;\n};\n\nfunction cssWithMappingToString(item, useSourceMap) {\n\tvar content = item[1] || '';\n\tvar cssMapping = item[3];\n\tif (!cssMapping) {\n\t\treturn content;\n\t}\n\n\tif (useSourceMap && typeof btoa === 'function') {\n\t\tvar sourceMapping = toComment(cssMapping);\n\t\tvar sourceURLs = cssMapping.sources.map(function (source) {\n\t\t\treturn '/*# sourceURL=' + cssMapping.sourceRoot + source + ' */'\n\t\t});\n\n\t\treturn [content].concat(sourceURLs).concat([sourceMapping]).join('\\n');\n\t}\n\n\treturn [content].join('\\n');\n}\n\n// Adapted from convert-source-map (MIT)\nfunction toComment(sourceMap) {\n\t// eslint-disable-next-line no-undef\n\tvar base64 = btoa(unescape(encodeURIComponent(JSON.stringify(sourceMap))));\n\tvar data = 'sourceMappingURL=data:application/json;charset=utf-8;base64,' + base64;\n\n\treturn '/*# ' + data + ' */';\n}\n","exports = module.exports = require(\"../node_modules/css-loader/lib/css-base.js\")(false);\n// imports\n\n\n// module\nexports.push([module.id, \"#app,#map,body,html{width:100%;height:100%;margin:0}.control{position:absolute;top:10px;right:10px;background:#fff;padding:10px;z-index:10000}h4{margin-bottom:5px}p{margin-top:5px}\", \"\"]);\n\n// exports\n","// style-loader: Adds some css to the DOM by adding a <style> tag\n\n// load the styles\nvar content = require(\"!!../node_modules/css-loader/index.js?minimize!../node_modules/vue-loader/lib/style-compiler/index.js?{\\\"optionsId\\\":\\\"0\\\",\\\"vue\\\":true,\\\"scoped\\\":false,\\\"sourceMap\\\":false}!../node_modules/vue-loader/lib/selector.js?type=styles&index=0!./App.vue\");\nif(typeof content === 'string') content = [[module.id, content, '']];\nif(content.locals) module.exports = content.locals;\n// add the styles to the DOM\nvar add = require(\"!../node_modules/vue-style-loader/lib/addStylesClient.js\").default\nvar update = add(\"09356530\", content, true, {});","function injectStyle (context) {\n  require(\"!!vue-style-loader!css-loader?minimize!../node_modules/vue-loader/lib/style-compiler/index?{\\\"optionsId\\\":\\\"0\\\",\\\"vue\\\":true,\\\"scoped\\\":false,\\\"sourceMap\\\":false}!../node_modules/vue-loader/lib/selector?type=styles&index=0!./App.vue\")\n}\n/* script */\nexport * from \"!!babel-loader!../node_modules/vue-loader/lib/selector?type=script&index=0!./App.vue\"\nimport __vue_script__ from \"!!babel-loader!../node_modules/vue-loader/lib/selector?type=script&index=0!./App.vue\"\n/* template */\nimport {render as __vue_render__, staticRenderFns as __vue_static_render_fns__} from \"!!../node_modules/vue-loader/lib/template-compiler/index?{\\\"id\\\":\\\"data-v-7d55b0ee\\\",\\\"hasScoped\\\":false,\\\"optionsId\\\":\\\"0\\\",\\\"buble\\\":{\\\"transforms\\\":{}}}!../node_modules/vue-loader/lib/selector?type=template&index=0!./App.vue\"\n/* template functional */\nvar __vue_template_functional__ = false\n/* styles */\nvar __vue_styles__ = injectStyle\n/* scopeId */\nvar __vue_scopeId__ = null\n/* moduleIdentifier (server only) */\nvar __vue_module_identifier__ = null\nimport normalizeComponent from \"!../node_modules/vue-loader/lib/runtime/component-normalizer\"\nvar Component = normalizeComponent(\n  __vue_script__,\n  __vue_render__,\n  __vue_static_render_fns__,\n  __vue_template_functional__,\n  __vue_styles__,\n  __vue_scopeId__,\n  __vue_module_identifier__\n)\n\nexport default Component.exports\n","// shim for using process in browser\nvar process = module.exports = {};\n\n// cached from whatever global is present so that test runners that stub it\n// don't break things.  But we need to wrap it in a try catch in case it is\n// wrapped in strict mode code which doesn't define any globals.  It's inside a\n// function because try/catches deoptimize in certain engines.\n\nvar cachedSetTimeout;\nvar cachedClearTimeout;\n\nfunction defaultSetTimout() {\n    throw new Error('setTimeout has not been defined');\n}\nfunction defaultClearTimeout () {\n    throw new Error('clearTimeout has not been defined');\n}\n(function () {\n    try {\n        if (typeof setTimeout === 'function') {\n            cachedSetTimeout = setTimeout;\n        } else {\n            cachedSetTimeout = defaultSetTimout;\n        }\n    } catch (e) {\n        cachedSetTimeout = defaultSetTimout;\n    }\n    try {\n        if (typeof clearTimeout === 'function') {\n            cachedClearTimeout = clearTimeout;\n        } else {\n            cachedClearTimeout = defaultClearTimeout;\n        }\n    } catch (e) {\n        cachedClearTimeout = defaultClearTimeout;\n    }\n} ())\nfunction runTimeout(fun) {\n    if (cachedSetTimeout === setTimeout) {\n        //normal enviroments in sane situations\n        return setTimeout(fun, 0);\n    }\n    // if setTimeout wasn't available but was latter defined\n    if ((cachedSetTimeout === defaultSetTimout || !cachedSetTimeout) && setTimeout) {\n        cachedSetTimeout = setTimeout;\n        return setTimeout(fun, 0);\n    }\n    try {\n        // when when somebody has screwed with setTimeout but no I.E. maddness\n        return cachedSetTimeout(fun, 0);\n    } catch(e){\n        try {\n            // When we are in I.E. but the script has been evaled so I.E. doesn't trust the global object when called normally\n            return cachedSetTimeout.call(null, fun, 0);\n        } catch(e){\n            // same as above but when it's a version of I.E. that must have the global object for 'this', hopfully our context correct otherwise it will throw a global error\n            return cachedSetTimeout.call(this, fun, 0);\n        }\n    }\n\n\n}\nfunction runClearTimeout(marker) {\n    if (cachedClearTimeout === clearTimeout) {\n        //normal enviroments in sane situations\n        return clearTimeout(marker);\n    }\n    // if clearTimeout wasn't available but was latter defined\n    if ((cachedClearTimeout === defaultClearTimeout || !cachedClearTimeout) && clearTimeout) {\n        cachedClearTimeout = clearTimeout;\n        return clearTimeout(marker);\n    }\n    try {\n        // when when somebody has screwed with setTimeout but no I.E. maddness\n        return cachedClearTimeout(marker);\n    } catch (e){\n        try {\n            // When we are in I.E. but the script has been evaled so I.E. doesn't  trust the global object when called normally\n            return cachedClearTimeout.call(null, marker);\n        } catch (e){\n            // same as above but when it's a version of I.E. that must have the global object for 'this', hopfully our context correct otherwise it will throw a global error.\n            // Some versions of I.E. have different rules for clearTimeout vs setTimeout\n            return cachedClearTimeout.call(this, marker);\n        }\n    }\n\n\n\n}\nvar queue = [];\nvar draining = false;\nvar currentQueue;\nvar queueIndex = -1;\n\nfunction cleanUpNextTick() {\n    if (!draining || !currentQueue) {\n        return;\n    }\n    draining = false;\n    if (currentQueue.length) {\n        queue = currentQueue.concat(queue);\n    } else {\n        queueIndex = -1;\n    }\n    if (queue.length) {\n        drainQueue();\n    }\n}\n\nfunction drainQueue() {\n    if (draining) {\n        return;\n    }\n    var timeout = runTimeout(cleanUpNextTick);\n    draining = true;\n\n    var len = queue.length;\n    while(len) {\n        currentQueue = queue;\n        queue = [];\n        while (++queueIndex < len) {\n            if (currentQueue) {\n                currentQueue[queueIndex].run();\n            }\n        }\n        queueIndex = -1;\n        len = queue.length;\n    }\n    currentQueue = null;\n    draining = false;\n    runClearTimeout(timeout);\n}\n\nprocess.nextTick = function (fun) {\n    var args = new Array(arguments.length - 1);\n    if (arguments.length > 1) {\n        for (var i = 1; i < arguments.length; i++) {\n            args[i - 1] = arguments[i];\n        }\n    }\n    queue.push(new Item(fun, args));\n    if (queue.length === 1 && !draining) {\n        runTimeout(drainQueue);\n    }\n};\n\n// v8 likes predictible objects\nfunction Item(fun, array) {\n    this.fun = fun;\n    this.array = array;\n}\nItem.prototype.run = function () {\n    this.fun.apply(null, this.array);\n};\nprocess.title = 'browser';\nprocess.browser = true;\nprocess.env = {};\nprocess.argv = [];\nprocess.version = ''; // empty string to avoid regexp issues\nprocess.versions = {};\n\nfunction noop() {}\n\nprocess.on = noop;\nprocess.addListener = noop;\nprocess.once = noop;\nprocess.off = noop;\nprocess.removeListener = noop;\nprocess.removeAllListeners = noop;\nprocess.emit = noop;\nprocess.prependListener = noop;\nprocess.prependOnceListener = noop;\n\nprocess.listeners = function (name) { return [] }\n\nprocess.binding = function (name) {\n    throw new Error('process.binding is not supported');\n};\n\nprocess.cwd = function () { return '/' };\nprocess.chdir = function (dir) {\n    throw new Error('process.chdir is not supported');\n};\nprocess.umask = function() { return 0; };\n","(function (global, undefined) {\n    \"use strict\";\n\n    if (global.setImmediate) {\n        return;\n    }\n\n    var nextHandle = 1; // Spec says greater than zero\n    var tasksByHandle = {};\n    var currentlyRunningATask = false;\n    var doc = global.document;\n    var registerImmediate;\n\n    function setImmediate(callback) {\n      // Callback can either be a function or a string\n      if (typeof callback !== \"function\") {\n        callback = new Function(\"\" + callback);\n      }\n      // Copy function arguments\n      var args = new Array(arguments.length - 1);\n      for (var i = 0; i < args.length; i++) {\n          args[i] = arguments[i + 1];\n      }\n      // Store and register the task\n      var task = { callback: callback, args: args };\n      tasksByHandle[nextHandle] = task;\n      registerImmediate(nextHandle);\n      return nextHandle++;\n    }\n\n    function clearImmediate(handle) {\n        delete tasksByHandle[handle];\n    }\n\n    function run(task) {\n        var callback = task.callback;\n        var args = task.args;\n        switch (args.length) {\n        case 0:\n            callback();\n            break;\n        case 1:\n            callback(args[0]);\n            break;\n        case 2:\n            callback(args[0], args[1]);\n            break;\n        case 3:\n            callback(args[0], args[1], args[2]);\n            break;\n        default:\n            callback.apply(undefined, args);\n            break;\n        }\n    }\n\n    function runIfPresent(handle) {\n        // From the spec: \"Wait until any invocations of this algorithm started before this one have completed.\"\n        // So if we're currently running a task, we'll need to delay this invocation.\n        if (currentlyRunningATask) {\n            // Delay by doing a setTimeout. setImmediate was tried instead, but in Firefox 7 it generated a\n            // \"too much recursion\" error.\n            setTimeout(runIfPresent, 0, handle);\n        } else {\n            var task = tasksByHandle[handle];\n            if (task) {\n                currentlyRunningATask = true;\n                try {\n                    run(task);\n                } finally {\n                    clearImmediate(handle);\n                    currentlyRunningATask = false;\n                }\n            }\n        }\n    }\n\n    function installNextTickImplementation() {\n        registerImmediate = function(handle) {\n            process.nextTick(function () { runIfPresent(handle); });\n        };\n    }\n\n    function canUsePostMessage() {\n        // The test against `importScripts` prevents this implementation from being installed inside a web worker,\n        // where `global.postMessage` means something completely different and can't be used for this purpose.\n        if (global.postMessage && !global.importScripts) {\n            var postMessageIsAsynchronous = true;\n            var oldOnMessage = global.onmessage;\n            global.onmessage = function() {\n                postMessageIsAsynchronous = false;\n            };\n            global.postMessage(\"\", \"*\");\n            global.onmessage = oldOnMessage;\n            return postMessageIsAsynchronous;\n        }\n    }\n\n    function installPostMessageImplementation() {\n        // Installs an event handler on `global` for the `message` event: see\n        // * https://developer.mozilla.org/en/DOM/window.postMessage\n        // * http://www.whatwg.org/specs/web-apps/current-work/multipage/comms.html#crossDocumentMessages\n\n        var messagePrefix = \"setImmediate$\" + Math.random() + \"$\";\n        var onGlobalMessage = function(event) {\n            if (event.source === global &&\n                typeof event.data === \"string\" &&\n                event.data.indexOf(messagePrefix) === 0) {\n                runIfPresent(+event.data.slice(messagePrefix.length));\n            }\n        };\n\n        if (global.addEventListener) {\n            global.addEventListener(\"message\", onGlobalMessage, false);\n        } else {\n            global.attachEvent(\"onmessage\", onGlobalMessage);\n        }\n\n        registerImmediate = function(handle) {\n            global.postMessage(messagePrefix + handle, \"*\");\n        };\n    }\n\n    function installMessageChannelImplementation() {\n        var channel = new MessageChannel();\n        channel.port1.onmessage = function(event) {\n            var handle = event.data;\n            runIfPresent(handle);\n        };\n\n        registerImmediate = function(handle) {\n            channel.port2.postMessage(handle);\n        };\n    }\n\n    function installReadyStateChangeImplementation() {\n        var html = doc.documentElement;\n        registerImmediate = function(handle) {\n            // Create a <script> element; its readystatechange event will be fired asynchronously once it is inserted\n            // into the document. Do so, thus queuing up the task. Remember to clean up once it's been called.\n            var script = doc.createElement(\"script\");\n            script.onreadystatechange = function () {\n                runIfPresent(handle);\n                script.onreadystatechange = null;\n                html.removeChild(script);\n                script = null;\n            };\n            html.appendChild(script);\n        };\n    }\n\n    function installSetTimeoutImplementation() {\n        registerImmediate = function(handle) {\n            setTimeout(runIfPresent, 0, handle);\n        };\n    }\n\n    // If supported, we should attach to the prototype of global, since that is where setTimeout et al. live.\n    var attachTo = Object.getPrototypeOf && Object.getPrototypeOf(global);\n    attachTo = attachTo && attachTo.setTimeout ? attachTo : global;\n\n    // Don't get fooled by e.g. browserify environments.\n    if ({}.toString.call(global.process) === \"[object process]\") {\n        // For Node.js before 0.9\n        installNextTickImplementation();\n\n    } else if (canUsePostMessage()) {\n        // For non-IE10 modern browsers\n        installPostMessageImplementation();\n\n    } else if (global.MessageChannel) {\n        // For web workers, where supported\n        installMessageChannelImplementation();\n\n    } else if (doc && \"onreadystatechange\" in doc.createElement(\"script\")) {\n        // For IE 6–8\n        installReadyStateChangeImplementation();\n\n    } else {\n        // For older browsers\n        installSetTimeoutImplementation();\n    }\n\n    attachTo.setImmediate = setImmediate;\n    attachTo.clearImmediate = clearImmediate;\n}(typeof self === \"undefined\" ? typeof global === \"undefined\" ? this : global : self));\n","var apply = Function.prototype.apply;\n\n// DOM APIs, for completeness\n\nexports.setTimeout = function() {\n  return new Timeout(apply.call(setTimeout, window, arguments), clearTimeout);\n};\nexports.setInterval = function() {\n  return new Timeout(apply.call(setInterval, window, arguments), clearInterval);\n};\nexports.clearTimeout =\nexports.clearInterval = function(timeout) {\n  if (timeout) {\n    timeout.close();\n  }\n};\n\nfunction Timeout(id, clearFn) {\n  this._id = id;\n  this._clearFn = clearFn;\n}\nTimeout.prototype.unref = Timeout.prototype.ref = function() {};\nTimeout.prototype.close = function() {\n  this._clearFn.call(window, this._id);\n};\n\n// Does not start the time, just sets up the members needed.\nexports.enroll = function(item, msecs) {\n  clearTimeout(item._idleTimeoutId);\n  item._idleTimeout = msecs;\n};\n\nexports.unenroll = function(item) {\n  clearTimeout(item._idleTimeoutId);\n  item._idleTimeout = -1;\n};\n\nexports._unrefActive = exports.active = function(item) {\n  clearTimeout(item._idleTimeoutId);\n\n  var msecs = item._idleTimeout;\n  if (msecs >= 0) {\n    item._idleTimeoutId = setTimeout(function onTimeout() {\n      if (item._onTimeout)\n        item._onTimeout();\n    }, msecs);\n  }\n};\n\n// setimmediate attaches itself to the global object\nrequire(\"setimmediate\");\n// On some exotic environments, it's not clear which object `setimmeidate` was\n// able to install onto.  Search each possibility in the same order as the\n// `setimmediate` library.\nexports.setImmediate = (typeof self !== \"undefined\" && self.setImmediate) ||\n                       (typeof global !== \"undefined\" && global.setImmediate) ||\n                       (this && this.setImmediate);\nexports.clearImmediate = (typeof self !== \"undefined\" && self.clearImmediate) ||\n                         (typeof global !== \"undefined\" && global.clearImmediate) ||\n                         (this && this.clearImmediate);\n","/*!\n * Vue.js v2.5.16\n * (c) 2014-2018 Evan You\n * Released under the MIT License.\n */\n/*  */\n\nvar emptyObject = Object.freeze({});\n\n// these helpers produces better vm code in JS engines due to their\n// explicitness and function inlining\nfunction isUndef (v) {\n  return v === undefined || v === null\n}\n\nfunction isDef (v) {\n  return v !== undefined && v !== null\n}\n\nfunction isTrue (v) {\n  return v === true\n}\n\nfunction isFalse (v) {\n  return v === false\n}\n\n/**\n * Check if value is primitive\n */\nfunction isPrimitive (value) {\n  return (\n    typeof value === 'string' ||\n    typeof value === 'number' ||\n    // $flow-disable-line\n    typeof value === 'symbol' ||\n    typeof value === 'boolean'\n  )\n}\n\n/**\n * Quick object check - this is primarily used to tell\n * Objects from primitive values when we know the value\n * is a JSON-compliant type.\n */\nfunction isObject (obj) {\n  return obj !== null && typeof obj === 'object'\n}\n\n/**\n * Get the raw type string of a value e.g. [object Object]\n */\nvar _toString = Object.prototype.toString;\n\nfunction toRawType (value) {\n  return _toString.call(value).slice(8, -1)\n}\n\n/**\n * Strict object type check. Only returns true\n * for plain JavaScript objects.\n */\nfunction isPlainObject (obj) {\n  return _toString.call(obj) === '[object Object]'\n}\n\nfunction isRegExp (v) {\n  return _toString.call(v) === '[object RegExp]'\n}\n\n/**\n * Check if val is a valid array index.\n */\nfunction isValidArrayIndex (val) {\n  var n = parseFloat(String(val));\n  return n >= 0 && Math.floor(n) === n && isFinite(val)\n}\n\n/**\n * Convert a value to a string that is actually rendered.\n */\nfunction toString (val) {\n  return val == null\n    ? ''\n    : typeof val === 'object'\n      ? JSON.stringify(val, null, 2)\n      : String(val)\n}\n\n/**\n * Convert a input value to a number for persistence.\n * If the conversion fails, return original string.\n */\nfunction toNumber (val) {\n  var n = parseFloat(val);\n  return isNaN(n) ? val : n\n}\n\n/**\n * Make a map and return a function for checking if a key\n * is in that map.\n */\nfunction makeMap (\n  str,\n  expectsLowerCase\n) {\n  var map = Object.create(null);\n  var list = str.split(',');\n  for (var i = 0; i < list.length; i++) {\n    map[list[i]] = true;\n  }\n  return expectsLowerCase\n    ? function (val) { return map[val.toLowerCase()]; }\n    : function (val) { return map[val]; }\n}\n\n/**\n * Check if a tag is a built-in tag.\n */\nvar isBuiltInTag = makeMap('slot,component', true);\n\n/**\n * Check if a attribute is a reserved attribute.\n */\nvar isReservedAttribute = makeMap('key,ref,slot,slot-scope,is');\n\n/**\n * Remove an item from an array\n */\nfunction remove (arr, item) {\n  if (arr.length) {\n    var index = arr.indexOf(item);\n    if (index > -1) {\n      return arr.splice(index, 1)\n    }\n  }\n}\n\n/**\n * Check whether the object has the property.\n */\nvar hasOwnProperty = Object.prototype.hasOwnProperty;\nfunction hasOwn (obj, key) {\n  return hasOwnProperty.call(obj, key)\n}\n\n/**\n * Create a cached version of a pure function.\n */\nfunction cached (fn) {\n  var cache = Object.create(null);\n  return (function cachedFn (str) {\n    var hit = cache[str];\n    return hit || (cache[str] = fn(str))\n  })\n}\n\n/**\n * Camelize a hyphen-delimited string.\n */\nvar camelizeRE = /-(\\w)/g;\nvar camelize = cached(function (str) {\n  return str.replace(camelizeRE, function (_, c) { return c ? c.toUpperCase() : ''; })\n});\n\n/**\n * Capitalize a string.\n */\nvar capitalize = cached(function (str) {\n  return str.charAt(0).toUpperCase() + str.slice(1)\n});\n\n/**\n * Hyphenate a camelCase string.\n */\nvar hyphenateRE = /\\B([A-Z])/g;\nvar hyphenate = cached(function (str) {\n  return str.replace(hyphenateRE, '-$1').toLowerCase()\n});\n\n/**\n * Simple bind polyfill for environments that do not support it... e.g.\n * PhantomJS 1.x. Technically we don't need this anymore since native bind is\n * now more performant in most browsers, but removing it would be breaking for\n * code that was able to run in PhantomJS 1.x, so this must be kept for\n * backwards compatibility.\n */\n\n/* istanbul ignore next */\nfunction polyfillBind (fn, ctx) {\n  function boundFn (a) {\n    var l = arguments.length;\n    return l\n      ? l > 1\n        ? fn.apply(ctx, arguments)\n        : fn.call(ctx, a)\n      : fn.call(ctx)\n  }\n\n  boundFn._length = fn.length;\n  return boundFn\n}\n\nfunction nativeBind (fn, ctx) {\n  return fn.bind(ctx)\n}\n\nvar bind = Function.prototype.bind\n  ? nativeBind\n  : polyfillBind;\n\n/**\n * Convert an Array-like object to a real Array.\n */\nfunction toArray (list, start) {\n  start = start || 0;\n  var i = list.length - start;\n  var ret = new Array(i);\n  while (i--) {\n    ret[i] = list[i + start];\n  }\n  return ret\n}\n\n/**\n * Mix properties into target object.\n */\nfunction extend (to, _from) {\n  for (var key in _from) {\n    to[key] = _from[key];\n  }\n  return to\n}\n\n/**\n * Merge an Array of Objects into a single Object.\n */\nfunction toObject (arr) {\n  var res = {};\n  for (var i = 0; i < arr.length; i++) {\n    if (arr[i]) {\n      extend(res, arr[i]);\n    }\n  }\n  return res\n}\n\n/**\n * Perform no operation.\n * Stubbing args to make Flow happy without leaving useless transpiled code\n * with ...rest (https://flow.org/blog/2017/05/07/Strict-Function-Call-Arity/)\n */\nfunction noop (a, b, c) {}\n\n/**\n * Always return false.\n */\nvar no = function (a, b, c) { return false; };\n\n/**\n * Return same value\n */\nvar identity = function (_) { return _; };\n\n/**\n * Generate a static keys string from compiler modules.\n */\nfunction genStaticKeys (modules) {\n  return modules.reduce(function (keys, m) {\n    return keys.concat(m.staticKeys || [])\n  }, []).join(',')\n}\n\n/**\n * Check if two values are loosely equal - that is,\n * if they are plain objects, do they have the same shape?\n */\nfunction looseEqual (a, b) {\n  if (a === b) { return true }\n  var isObjectA = isObject(a);\n  var isObjectB = isObject(b);\n  if (isObjectA && isObjectB) {\n    try {\n      var isArrayA = Array.isArray(a);\n      var isArrayB = Array.isArray(b);\n      if (isArrayA && isArrayB) {\n        return a.length === b.length && a.every(function (e, i) {\n          return looseEqual(e, b[i])\n        })\n      } else if (!isArrayA && !isArrayB) {\n        var keysA = Object.keys(a);\n        var keysB = Object.keys(b);\n        return keysA.length === keysB.length && keysA.every(function (key) {\n          return looseEqual(a[key], b[key])\n        })\n      } else {\n        /* istanbul ignore next */\n        return false\n      }\n    } catch (e) {\n      /* istanbul ignore next */\n      return false\n    }\n  } else if (!isObjectA && !isObjectB) {\n    return String(a) === String(b)\n  } else {\n    return false\n  }\n}\n\nfunction looseIndexOf (arr, val) {\n  for (var i = 0; i < arr.length; i++) {\n    if (looseEqual(arr[i], val)) { return i }\n  }\n  return -1\n}\n\n/**\n * Ensure a function is called only once.\n */\nfunction once (fn) {\n  var called = false;\n  return function () {\n    if (!called) {\n      called = true;\n      fn.apply(this, arguments);\n    }\n  }\n}\n\nvar SSR_ATTR = 'data-server-rendered';\n\nvar ASSET_TYPES = [\n  'component',\n  'directive',\n  'filter'\n];\n\nvar LIFECYCLE_HOOKS = [\n  'beforeCreate',\n  'created',\n  'beforeMount',\n  'mounted',\n  'beforeUpdate',\n  'updated',\n  'beforeDestroy',\n  'destroyed',\n  'activated',\n  'deactivated',\n  'errorCaptured'\n];\n\n/*  */\n\nvar config = ({\n  /**\n   * Option merge strategies (used in core/util/options)\n   */\n  // $flow-disable-line\n  optionMergeStrategies: Object.create(null),\n\n  /**\n   * Whether to suppress warnings.\n   */\n  silent: false,\n\n  /**\n   * Show production mode tip message on boot?\n   */\n  productionTip: process.env.NODE_ENV !== 'production',\n\n  /**\n   * Whether to enable devtools\n   */\n  devtools: process.env.NODE_ENV !== 'production',\n\n  /**\n   * Whether to record perf\n   */\n  performance: false,\n\n  /**\n   * Error handler for watcher errors\n   */\n  errorHandler: null,\n\n  /**\n   * Warn handler for watcher warns\n   */\n  warnHandler: null,\n\n  /**\n   * Ignore certain custom elements\n   */\n  ignoredElements: [],\n\n  /**\n   * Custom user key aliases for v-on\n   */\n  // $flow-disable-line\n  keyCodes: Object.create(null),\n\n  /**\n   * Check if a tag is reserved so that it cannot be registered as a\n   * component. This is platform-dependent and may be overwritten.\n   */\n  isReservedTag: no,\n\n  /**\n   * Check if an attribute is reserved so that it cannot be used as a component\n   * prop. This is platform-dependent and may be overwritten.\n   */\n  isReservedAttr: no,\n\n  /**\n   * Check if a tag is an unknown element.\n   * Platform-dependent.\n   */\n  isUnknownElement: no,\n\n  /**\n   * Get the namespace of an element\n   */\n  getTagNamespace: noop,\n\n  /**\n   * Parse the real tag name for the specific platform.\n   */\n  parsePlatformTagName: identity,\n\n  /**\n   * Check if an attribute must be bound using property, e.g. value\n   * Platform-dependent.\n   */\n  mustUseProp: no,\n\n  /**\n   * Exposed for legacy reasons\n   */\n  _lifecycleHooks: LIFECYCLE_HOOKS\n})\n\n/*  */\n\n/**\n * Check if a string starts with $ or _\n */\nfunction isReserved (str) {\n  var c = (str + '').charCodeAt(0);\n  return c === 0x24 || c === 0x5F\n}\n\n/**\n * Define a property.\n */\nfunction def (obj, key, val, enumerable) {\n  Object.defineProperty(obj, key, {\n    value: val,\n    enumerable: !!enumerable,\n    writable: true,\n    configurable: true\n  });\n}\n\n/**\n * Parse simple path.\n */\nvar bailRE = /[^\\w.$]/;\nfunction parsePath (path) {\n  if (bailRE.test(path)) {\n    return\n  }\n  var segments = path.split('.');\n  return function (obj) {\n    for (var i = 0; i < segments.length; i++) {\n      if (!obj) { return }\n      obj = obj[segments[i]];\n    }\n    return obj\n  }\n}\n\n/*  */\n\n// can we use __proto__?\nvar hasProto = '__proto__' in {};\n\n// Browser environment sniffing\nvar inBrowser = typeof window !== 'undefined';\nvar inWeex = typeof WXEnvironment !== 'undefined' && !!WXEnvironment.platform;\nvar weexPlatform = inWeex && WXEnvironment.platform.toLowerCase();\nvar UA = inBrowser && window.navigator.userAgent.toLowerCase();\nvar isIE = UA && /msie|trident/.test(UA);\nvar isIE9 = UA && UA.indexOf('msie 9.0') > 0;\nvar isEdge = UA && UA.indexOf('edge/') > 0;\nvar isAndroid = (UA && UA.indexOf('android') > 0) || (weexPlatform === 'android');\nvar isIOS = (UA && /iphone|ipad|ipod|ios/.test(UA)) || (weexPlatform === 'ios');\nvar isChrome = UA && /chrome\\/\\d+/.test(UA) && !isEdge;\n\n// Firefox has a \"watch\" function on Object.prototype...\nvar nativeWatch = ({}).watch;\n\nvar supportsPassive = false;\nif (inBrowser) {\n  try {\n    var opts = {};\n    Object.defineProperty(opts, 'passive', ({\n      get: function get () {\n        /* istanbul ignore next */\n        supportsPassive = true;\n      }\n    })); // https://github.com/facebook/flow/issues/285\n    window.addEventListener('test-passive', null, opts);\n  } catch (e) {}\n}\n\n// this needs to be lazy-evaled because vue may be required before\n// vue-server-renderer can set VUE_ENV\nvar _isServer;\nvar isServerRendering = function () {\n  if (_isServer === undefined) {\n    /* istanbul ignore if */\n    if (!inBrowser && !inWeex && typeof global !== 'undefined') {\n      // detect presence of vue-server-renderer and avoid\n      // Webpack shimming the process\n      _isServer = global['process'].env.VUE_ENV === 'server';\n    } else {\n      _isServer = false;\n    }\n  }\n  return _isServer\n};\n\n// detect devtools\nvar devtools = inBrowser && window.__VUE_DEVTOOLS_GLOBAL_HOOK__;\n\n/* istanbul ignore next */\nfunction isNative (Ctor) {\n  return typeof Ctor === 'function' && /native code/.test(Ctor.toString())\n}\n\nvar hasSymbol =\n  typeof Symbol !== 'undefined' && isNative(Symbol) &&\n  typeof Reflect !== 'undefined' && isNative(Reflect.ownKeys);\n\nvar _Set;\n/* istanbul ignore if */ // $flow-disable-line\nif (typeof Set !== 'undefined' && isNative(Set)) {\n  // use native Set when available.\n  _Set = Set;\n} else {\n  // a non-standard Set polyfill that only works with primitive keys.\n  _Set = (function () {\n    function Set () {\n      this.set = Object.create(null);\n    }\n    Set.prototype.has = function has (key) {\n      return this.set[key] === true\n    };\n    Set.prototype.add = function add (key) {\n      this.set[key] = true;\n    };\n    Set.prototype.clear = function clear () {\n      this.set = Object.create(null);\n    };\n\n    return Set;\n  }());\n}\n\n/*  */\n\nvar warn = noop;\nvar tip = noop;\nvar generateComponentTrace = (noop); // work around flow check\nvar formatComponentName = (noop);\n\nif (process.env.NODE_ENV !== 'production') {\n  var hasConsole = typeof console !== 'undefined';\n  var classifyRE = /(?:^|[-_])(\\w)/g;\n  var classify = function (str) { return str\n    .replace(classifyRE, function (c) { return c.toUpperCase(); })\n    .replace(/[-_]/g, ''); };\n\n  warn = function (msg, vm) {\n    var trace = vm ? generateComponentTrace(vm) : '';\n\n    if (config.warnHandler) {\n      config.warnHandler.call(null, msg, vm, trace);\n    } else if (hasConsole && (!config.silent)) {\n      console.error((\"[Vue warn]: \" + msg + trace));\n    }\n  };\n\n  tip = function (msg, vm) {\n    if (hasConsole && (!config.silent)) {\n      console.warn(\"[Vue tip]: \" + msg + (\n        vm ? generateComponentTrace(vm) : ''\n      ));\n    }\n  };\n\n  formatComponentName = function (vm, includeFile) {\n    if (vm.$root === vm) {\n      return '<Root>'\n    }\n    var options = typeof vm === 'function' && vm.cid != null\n      ? vm.options\n      : vm._isVue\n        ? vm.$options || vm.constructor.options\n        : vm || {};\n    var name = options.name || options._componentTag;\n    var file = options.__file;\n    if (!name && file) {\n      var match = file.match(/([^/\\\\]+)\\.vue$/);\n      name = match && match[1];\n    }\n\n    return (\n      (name ? (\"<\" + (classify(name)) + \">\") : \"<Anonymous>\") +\n      (file && includeFile !== false ? (\" at \" + file) : '')\n    )\n  };\n\n  var repeat = function (str, n) {\n    var res = '';\n    while (n) {\n      if (n % 2 === 1) { res += str; }\n      if (n > 1) { str += str; }\n      n >>= 1;\n    }\n    return res\n  };\n\n  generateComponentTrace = function (vm) {\n    if (vm._isVue && vm.$parent) {\n      var tree = [];\n      var currentRecursiveSequence = 0;\n      while (vm) {\n        if (tree.length > 0) {\n          var last = tree[tree.length - 1];\n          if (last.constructor === vm.constructor) {\n            currentRecursiveSequence++;\n            vm = vm.$parent;\n            continue\n          } else if (currentRecursiveSequence > 0) {\n            tree[tree.length - 1] = [last, currentRecursiveSequence];\n            currentRecursiveSequence = 0;\n          }\n        }\n        tree.push(vm);\n        vm = vm.$parent;\n      }\n      return '\\n\\nfound in\\n\\n' + tree\n        .map(function (vm, i) { return (\"\" + (i === 0 ? '---> ' : repeat(' ', 5 + i * 2)) + (Array.isArray(vm)\n            ? ((formatComponentName(vm[0])) + \"... (\" + (vm[1]) + \" recursive calls)\")\n            : formatComponentName(vm))); })\n        .join('\\n')\n    } else {\n      return (\"\\n\\n(found in \" + (formatComponentName(vm)) + \")\")\n    }\n  };\n}\n\n/*  */\n\n\nvar uid = 0;\n\n/**\n * A dep is an observable that can have multiple\n * directives subscribing to it.\n */\nvar Dep = function Dep () {\n  this.id = uid++;\n  this.subs = [];\n};\n\nDep.prototype.addSub = function addSub (sub) {\n  this.subs.push(sub);\n};\n\nDep.prototype.removeSub = function removeSub (sub) {\n  remove(this.subs, sub);\n};\n\nDep.prototype.depend = function depend () {\n  if (Dep.target) {\n    Dep.target.addDep(this);\n  }\n};\n\nDep.prototype.notify = function notify () {\n  // stabilize the subscriber list first\n  var subs = this.subs.slice();\n  for (var i = 0, l = subs.length; i < l; i++) {\n    subs[i].update();\n  }\n};\n\n// the current target watcher being evaluated.\n// this is globally unique because there could be only one\n// watcher being evaluated at any time.\nDep.target = null;\nvar targetStack = [];\n\nfunction pushTarget (_target) {\n  if (Dep.target) { targetStack.push(Dep.target); }\n  Dep.target = _target;\n}\n\nfunction popTarget () {\n  Dep.target = targetStack.pop();\n}\n\n/*  */\n\nvar VNode = function VNode (\n  tag,\n  data,\n  children,\n  text,\n  elm,\n  context,\n  componentOptions,\n  asyncFactory\n) {\n  this.tag = tag;\n  this.data = data;\n  this.children = children;\n  this.text = text;\n  this.elm = elm;\n  this.ns = undefined;\n  this.context = context;\n  this.fnContext = undefined;\n  this.fnOptions = undefined;\n  this.fnScopeId = undefined;\n  this.key = data && data.key;\n  this.componentOptions = componentOptions;\n  this.componentInstance = undefined;\n  this.parent = undefined;\n  this.raw = false;\n  this.isStatic = false;\n  this.isRootInsert = true;\n  this.isComment = false;\n  this.isCloned = false;\n  this.isOnce = false;\n  this.asyncFactory = asyncFactory;\n  this.asyncMeta = undefined;\n  this.isAsyncPlaceholder = false;\n};\n\nvar prototypeAccessors = { child: { configurable: true } };\n\n// DEPRECATED: alias for componentInstance for backwards compat.\n/* istanbul ignore next */\nprototypeAccessors.child.get = function () {\n  return this.componentInstance\n};\n\nObject.defineProperties( VNode.prototype, prototypeAccessors );\n\nvar createEmptyVNode = function (text) {\n  if ( text === void 0 ) text = '';\n\n  var node = new VNode();\n  node.text = text;\n  node.isComment = true;\n  return node\n};\n\nfunction createTextVNode (val) {\n  return new VNode(undefined, undefined, undefined, String(val))\n}\n\n// optimized shallow clone\n// used for static nodes and slot nodes because they may be reused across\n// multiple renders, cloning them avoids errors when DOM manipulations rely\n// on their elm reference.\nfunction cloneVNode (vnode) {\n  var cloned = new VNode(\n    vnode.tag,\n    vnode.data,\n    vnode.children,\n    vnode.text,\n    vnode.elm,\n    vnode.context,\n    vnode.componentOptions,\n    vnode.asyncFactory\n  );\n  cloned.ns = vnode.ns;\n  cloned.isStatic = vnode.isStatic;\n  cloned.key = vnode.key;\n  cloned.isComment = vnode.isComment;\n  cloned.fnContext = vnode.fnContext;\n  cloned.fnOptions = vnode.fnOptions;\n  cloned.fnScopeId = vnode.fnScopeId;\n  cloned.isCloned = true;\n  return cloned\n}\n\n/*\n * not type checking this file because flow doesn't play well with\n * dynamically accessing methods on Array prototype\n */\n\nvar arrayProto = Array.prototype;\nvar arrayMethods = Object.create(arrayProto);\n\nvar methodsToPatch = [\n  'push',\n  'pop',\n  'shift',\n  'unshift',\n  'splice',\n  'sort',\n  'reverse'\n];\n\n/**\n * Intercept mutating methods and emit events\n */\nmethodsToPatch.forEach(function (method) {\n  // cache original method\n  var original = arrayProto[method];\n  def(arrayMethods, method, function mutator () {\n    var args = [], len = arguments.length;\n    while ( len-- ) args[ len ] = arguments[ len ];\n\n    var result = original.apply(this, args);\n    var ob = this.__ob__;\n    var inserted;\n    switch (method) {\n      case 'push':\n      case 'unshift':\n        inserted = args;\n        break\n      case 'splice':\n        inserted = args.slice(2);\n        break\n    }\n    if (inserted) { ob.observeArray(inserted); }\n    // notify change\n    ob.dep.notify();\n    return result\n  });\n});\n\n/*  */\n\nvar arrayKeys = Object.getOwnPropertyNames(arrayMethods);\n\n/**\n * In some cases we may want to disable observation inside a component's\n * update computation.\n */\nvar shouldObserve = true;\n\nfunction toggleObserving (value) {\n  shouldObserve = value;\n}\n\n/**\n * Observer class that is attached to each observed\n * object. Once attached, the observer converts the target\n * object's property keys into getter/setters that\n * collect dependencies and dispatch updates.\n */\nvar Observer = function Observer (value) {\n  this.value = value;\n  this.dep = new Dep();\n  this.vmCount = 0;\n  def(value, '__ob__', this);\n  if (Array.isArray(value)) {\n    var augment = hasProto\n      ? protoAugment\n      : copyAugment;\n    augment(value, arrayMethods, arrayKeys);\n    this.observeArray(value);\n  } else {\n    this.walk(value);\n  }\n};\n\n/**\n * Walk through each property and convert them into\n * getter/setters. This method should only be called when\n * value type is Object.\n */\nObserver.prototype.walk = function walk (obj) {\n  var keys = Object.keys(obj);\n  for (var i = 0; i < keys.length; i++) {\n    defineReactive(obj, keys[i]);\n  }\n};\n\n/**\n * Observe a list of Array items.\n */\nObserver.prototype.observeArray = function observeArray (items) {\n  for (var i = 0, l = items.length; i < l; i++) {\n    observe(items[i]);\n  }\n};\n\n// helpers\n\n/**\n * Augment an target Object or Array by intercepting\n * the prototype chain using __proto__\n */\nfunction protoAugment (target, src, keys) {\n  /* eslint-disable no-proto */\n  target.__proto__ = src;\n  /* eslint-enable no-proto */\n}\n\n/**\n * Augment an target Object or Array by defining\n * hidden properties.\n */\n/* istanbul ignore next */\nfunction copyAugment (target, src, keys) {\n  for (var i = 0, l = keys.length; i < l; i++) {\n    var key = keys[i];\n    def(target, key, src[key]);\n  }\n}\n\n/**\n * Attempt to create an observer instance for a value,\n * returns the new observer if successfully observed,\n * or the existing observer if the value already has one.\n */\nfunction observe (value, asRootData) {\n  if (!isObject(value) || value instanceof VNode) {\n    return\n  }\n  var ob;\n  if (hasOwn(value, '__ob__') && value.__ob__ instanceof Observer) {\n    ob = value.__ob__;\n  } else if (\n    shouldObserve &&\n    !isServerRendering() &&\n    (Array.isArray(value) || isPlainObject(value)) &&\n    Object.isExtensible(value) &&\n    !value._isVue\n  ) {\n    ob = new Observer(value);\n  }\n  if (asRootData && ob) {\n    ob.vmCount++;\n  }\n  return ob\n}\n\n/**\n * Define a reactive property on an Object.\n */\nfunction defineReactive (\n  obj,\n  key,\n  val,\n  customSetter,\n  shallow\n) {\n  var dep = new Dep();\n\n  var property = Object.getOwnPropertyDescriptor(obj, key);\n  if (property && property.configurable === false) {\n    return\n  }\n\n  // cater for pre-defined getter/setters\n  var getter = property && property.get;\n  if (!getter && arguments.length === 2) {\n    val = obj[key];\n  }\n  var setter = property && property.set;\n\n  var childOb = !shallow && observe(val);\n  Object.defineProperty(obj, key, {\n    enumerable: true,\n    configurable: true,\n    get: function reactiveGetter () {\n      var value = getter ? getter.call(obj) : val;\n      if (Dep.target) {\n        dep.depend();\n        if (childOb) {\n          childOb.dep.depend();\n          if (Array.isArray(value)) {\n            dependArray(value);\n          }\n        }\n      }\n      return value\n    },\n    set: function reactiveSetter (newVal) {\n      var value = getter ? getter.call(obj) : val;\n      /* eslint-disable no-self-compare */\n      if (newVal === value || (newVal !== newVal && value !== value)) {\n        return\n      }\n      /* eslint-enable no-self-compare */\n      if (process.env.NODE_ENV !== 'production' && customSetter) {\n        customSetter();\n      }\n      if (setter) {\n        setter.call(obj, newVal);\n      } else {\n        val = newVal;\n      }\n      childOb = !shallow && observe(newVal);\n      dep.notify();\n    }\n  });\n}\n\n/**\n * Set a property on an object. Adds the new property and\n * triggers change notification if the property doesn't\n * already exist.\n */\nfunction set (target, key, val) {\n  if (process.env.NODE_ENV !== 'production' &&\n    (isUndef(target) || isPrimitive(target))\n  ) {\n    warn((\"Cannot set reactive property on undefined, null, or primitive value: \" + ((target))));\n  }\n  if (Array.isArray(target) && isValidArrayIndex(key)) {\n    target.length = Math.max(target.length, key);\n    target.splice(key, 1, val);\n    return val\n  }\n  if (key in target && !(key in Object.prototype)) {\n    target[key] = val;\n    return val\n  }\n  var ob = (target).__ob__;\n  if (target._isVue || (ob && ob.vmCount)) {\n    process.env.NODE_ENV !== 'production' && warn(\n      'Avoid adding reactive properties to a Vue instance or its root $data ' +\n      'at runtime - declare it upfront in the data option.'\n    );\n    return val\n  }\n  if (!ob) {\n    target[key] = val;\n    return val\n  }\n  defineReactive(ob.value, key, val);\n  ob.dep.notify();\n  return val\n}\n\n/**\n * Delete a property and trigger change if necessary.\n */\nfunction del (target, key) {\n  if (process.env.NODE_ENV !== 'production' &&\n    (isUndef(target) || isPrimitive(target))\n  ) {\n    warn((\"Cannot delete reactive property on undefined, null, or primitive value: \" + ((target))));\n  }\n  if (Array.isArray(target) && isValidArrayIndex(key)) {\n    target.splice(key, 1);\n    return\n  }\n  var ob = (target).__ob__;\n  if (target._isVue || (ob && ob.vmCount)) {\n    process.env.NODE_ENV !== 'production' && warn(\n      'Avoid deleting properties on a Vue instance or its root $data ' +\n      '- just set it to null.'\n    );\n    return\n  }\n  if (!hasOwn(target, key)) {\n    return\n  }\n  delete target[key];\n  if (!ob) {\n    return\n  }\n  ob.dep.notify();\n}\n\n/**\n * Collect dependencies on array elements when the array is touched, since\n * we cannot intercept array element access like property getters.\n */\nfunction dependArray (value) {\n  for (var e = (void 0), i = 0, l = value.length; i < l; i++) {\n    e = value[i];\n    e && e.__ob__ && e.__ob__.dep.depend();\n    if (Array.isArray(e)) {\n      dependArray(e);\n    }\n  }\n}\n\n/*  */\n\n/**\n * Option overwriting strategies are functions that handle\n * how to merge a parent option value and a child option\n * value into the final value.\n */\nvar strats = config.optionMergeStrategies;\n\n/**\n * Options with restrictions\n */\nif (process.env.NODE_ENV !== 'production') {\n  strats.el = strats.propsData = function (parent, child, vm, key) {\n    if (!vm) {\n      warn(\n        \"option \\\"\" + key + \"\\\" can only be used during instance \" +\n        'creation with the `new` keyword.'\n      );\n    }\n    return defaultStrat(parent, child)\n  };\n}\n\n/**\n * Helper that recursively merges two data objects together.\n */\nfunction mergeData (to, from) {\n  if (!from) { return to }\n  var key, toVal, fromVal;\n  var keys = Object.keys(from);\n  for (var i = 0; i < keys.length; i++) {\n    key = keys[i];\n    toVal = to[key];\n    fromVal = from[key];\n    if (!hasOwn(to, key)) {\n      set(to, key, fromVal);\n    } else if (isPlainObject(toVal) && isPlainObject(fromVal)) {\n      mergeData(toVal, fromVal);\n    }\n  }\n  return to\n}\n\n/**\n * Data\n */\nfunction mergeDataOrFn (\n  parentVal,\n  childVal,\n  vm\n) {\n  if (!vm) {\n    // in a Vue.extend merge, both should be functions\n    if (!childVal) {\n      return parentVal\n    }\n    if (!parentVal) {\n      return childVal\n    }\n    // when parentVal & childVal are both present,\n    // we need to return a function that returns the\n    // merged result of both functions... no need to\n    // check if parentVal is a function here because\n    // it has to be a function to pass previous merges.\n    return function mergedDataFn () {\n      return mergeData(\n        typeof childVal === 'function' ? childVal.call(this, this) : childVal,\n        typeof parentVal === 'function' ? parentVal.call(this, this) : parentVal\n      )\n    }\n  } else {\n    return function mergedInstanceDataFn () {\n      // instance merge\n      var instanceData = typeof childVal === 'function'\n        ? childVal.call(vm, vm)\n        : childVal;\n      var defaultData = typeof parentVal === 'function'\n        ? parentVal.call(vm, vm)\n        : parentVal;\n      if (instanceData) {\n        return mergeData(instanceData, defaultData)\n      } else {\n        return defaultData\n      }\n    }\n  }\n}\n\nstrats.data = function (\n  parentVal,\n  childVal,\n  vm\n) {\n  if (!vm) {\n    if (childVal && typeof childVal !== 'function') {\n      process.env.NODE_ENV !== 'production' && warn(\n        'The \"data\" option should be a function ' +\n        'that returns a per-instance value in component ' +\n        'definitions.',\n        vm\n      );\n\n      return parentVal\n    }\n    return mergeDataOrFn(parentVal, childVal)\n  }\n\n  return mergeDataOrFn(parentVal, childVal, vm)\n};\n\n/**\n * Hooks and props are merged as arrays.\n */\nfunction mergeHook (\n  parentVal,\n  childVal\n) {\n  return childVal\n    ? parentVal\n      ? parentVal.concat(childVal)\n      : Array.isArray(childVal)\n        ? childVal\n        : [childVal]\n    : parentVal\n}\n\nLIFECYCLE_HOOKS.forEach(function (hook) {\n  strats[hook] = mergeHook;\n});\n\n/**\n * Assets\n *\n * When a vm is present (instance creation), we need to do\n * a three-way merge between constructor options, instance\n * options and parent options.\n */\nfunction mergeAssets (\n  parentVal,\n  childVal,\n  vm,\n  key\n) {\n  var res = Object.create(parentVal || null);\n  if (childVal) {\n    process.env.NODE_ENV !== 'production' && assertObjectType(key, childVal, vm);\n    return extend(res, childVal)\n  } else {\n    return res\n  }\n}\n\nASSET_TYPES.forEach(function (type) {\n  strats[type + 's'] = mergeAssets;\n});\n\n/**\n * Watchers.\n *\n * Watchers hashes should not overwrite one\n * another, so we merge them as arrays.\n */\nstrats.watch = function (\n  parentVal,\n  childVal,\n  vm,\n  key\n) {\n  // work around Firefox's Object.prototype.watch...\n  if (parentVal === nativeWatch) { parentVal = undefined; }\n  if (childVal === nativeWatch) { childVal = undefined; }\n  /* istanbul ignore if */\n  if (!childVal) { return Object.create(parentVal || null) }\n  if (process.env.NODE_ENV !== 'production') {\n    assertObjectType(key, childVal, vm);\n  }\n  if (!parentVal) { return childVal }\n  var ret = {};\n  extend(ret, parentVal);\n  for (var key$1 in childVal) {\n    var parent = ret[key$1];\n    var child = childVal[key$1];\n    if (parent && !Array.isArray(parent)) {\n      parent = [parent];\n    }\n    ret[key$1] = parent\n      ? parent.concat(child)\n      : Array.isArray(child) ? child : [child];\n  }\n  return ret\n};\n\n/**\n * Other object hashes.\n */\nstrats.props =\nstrats.methods =\nstrats.inject =\nstrats.computed = function (\n  parentVal,\n  childVal,\n  vm,\n  key\n) {\n  if (childVal && process.env.NODE_ENV !== 'production') {\n    assertObjectType(key, childVal, vm);\n  }\n  if (!parentVal) { return childVal }\n  var ret = Object.create(null);\n  extend(ret, parentVal);\n  if (childVal) { extend(ret, childVal); }\n  return ret\n};\nstrats.provide = mergeDataOrFn;\n\n/**\n * Default strategy.\n */\nvar defaultStrat = function (parentVal, childVal) {\n  return childVal === undefined\n    ? parentVal\n    : childVal\n};\n\n/**\n * Validate component names\n */\nfunction checkComponents (options) {\n  for (var key in options.components) {\n    validateComponentName(key);\n  }\n}\n\nfunction validateComponentName (name) {\n  if (!/^[a-zA-Z][\\w-]*$/.test(name)) {\n    warn(\n      'Invalid component name: \"' + name + '\". Component names ' +\n      'can only contain alphanumeric characters and the hyphen, ' +\n      'and must start with a letter.'\n    );\n  }\n  if (isBuiltInTag(name) || config.isReservedTag(name)) {\n    warn(\n      'Do not use built-in or reserved HTML elements as component ' +\n      'id: ' + name\n    );\n  }\n}\n\n/**\n * Ensure all props option syntax are normalized into the\n * Object-based format.\n */\nfunction normalizeProps (options, vm) {\n  var props = options.props;\n  if (!props) { return }\n  var res = {};\n  var i, val, name;\n  if (Array.isArray(props)) {\n    i = props.length;\n    while (i--) {\n      val = props[i];\n      if (typeof val === 'string') {\n        name = camelize(val);\n        res[name] = { type: null };\n      } else if (process.env.NODE_ENV !== 'production') {\n        warn('props must be strings when using array syntax.');\n      }\n    }\n  } else if (isPlainObject(props)) {\n    for (var key in props) {\n      val = props[key];\n      name = camelize(key);\n      res[name] = isPlainObject(val)\n        ? val\n        : { type: val };\n    }\n  } else if (process.env.NODE_ENV !== 'production') {\n    warn(\n      \"Invalid value for option \\\"props\\\": expected an Array or an Object, \" +\n      \"but got \" + (toRawType(props)) + \".\",\n      vm\n    );\n  }\n  options.props = res;\n}\n\n/**\n * Normalize all injections into Object-based format\n */\nfunction normalizeInject (options, vm) {\n  var inject = options.inject;\n  if (!inject) { return }\n  var normalized = options.inject = {};\n  if (Array.isArray(inject)) {\n    for (var i = 0; i < inject.length; i++) {\n      normalized[inject[i]] = { from: inject[i] };\n    }\n  } else if (isPlainObject(inject)) {\n    for (var key in inject) {\n      var val = inject[key];\n      normalized[key] = isPlainObject(val)\n        ? extend({ from: key }, val)\n        : { from: val };\n    }\n  } else if (process.env.NODE_ENV !== 'production') {\n    warn(\n      \"Invalid value for option \\\"inject\\\": expected an Array or an Object, \" +\n      \"but got \" + (toRawType(inject)) + \".\",\n      vm\n    );\n  }\n}\n\n/**\n * Normalize raw function directives into object format.\n */\nfunction normalizeDirectives (options) {\n  var dirs = options.directives;\n  if (dirs) {\n    for (var key in dirs) {\n      var def = dirs[key];\n      if (typeof def === 'function') {\n        dirs[key] = { bind: def, update: def };\n      }\n    }\n  }\n}\n\nfunction assertObjectType (name, value, vm) {\n  if (!isPlainObject(value)) {\n    warn(\n      \"Invalid value for option \\\"\" + name + \"\\\": expected an Object, \" +\n      \"but got \" + (toRawType(value)) + \".\",\n      vm\n    );\n  }\n}\n\n/**\n * Merge two option objects into a new one.\n * Core utility used in both instantiation and inheritance.\n */\nfunction mergeOptions (\n  parent,\n  child,\n  vm\n) {\n  if (process.env.NODE_ENV !== 'production') {\n    checkComponents(child);\n  }\n\n  if (typeof child === 'function') {\n    child = child.options;\n  }\n\n  normalizeProps(child, vm);\n  normalizeInject(child, vm);\n  normalizeDirectives(child);\n  var extendsFrom = child.extends;\n  if (extendsFrom) {\n    parent = mergeOptions(parent, extendsFrom, vm);\n  }\n  if (child.mixins) {\n    for (var i = 0, l = child.mixins.length; i < l; i++) {\n      parent = mergeOptions(parent, child.mixins[i], vm);\n    }\n  }\n  var options = {};\n  var key;\n  for (key in parent) {\n    mergeField(key);\n  }\n  for (key in child) {\n    if (!hasOwn(parent, key)) {\n      mergeField(key);\n    }\n  }\n  function mergeField (key) {\n    var strat = strats[key] || defaultStrat;\n    options[key] = strat(parent[key], child[key], vm, key);\n  }\n  return options\n}\n\n/**\n * Resolve an asset.\n * This function is used because child instances need access\n * to assets defined in its ancestor chain.\n */\nfunction resolveAsset (\n  options,\n  type,\n  id,\n  warnMissing\n) {\n  /* istanbul ignore if */\n  if (typeof id !== 'string') {\n    return\n  }\n  var assets = options[type];\n  // check local registration variations first\n  if (hasOwn(assets, id)) { return assets[id] }\n  var camelizedId = camelize(id);\n  if (hasOwn(assets, camelizedId)) { return assets[camelizedId] }\n  var PascalCaseId = capitalize(camelizedId);\n  if (hasOwn(assets, PascalCaseId)) { return assets[PascalCaseId] }\n  // fallback to prototype chain\n  var res = assets[id] || assets[camelizedId] || assets[PascalCaseId];\n  if (process.env.NODE_ENV !== 'production' && warnMissing && !res) {\n    warn(\n      'Failed to resolve ' + type.slice(0, -1) + ': ' + id,\n      options\n    );\n  }\n  return res\n}\n\n/*  */\n\nfunction validateProp (\n  key,\n  propOptions,\n  propsData,\n  vm\n) {\n  var prop = propOptions[key];\n  var absent = !hasOwn(propsData, key);\n  var value = propsData[key];\n  // boolean casting\n  var booleanIndex = getTypeIndex(Boolean, prop.type);\n  if (booleanIndex > -1) {\n    if (absent && !hasOwn(prop, 'default')) {\n      value = false;\n    } else if (value === '' || value === hyphenate(key)) {\n      // only cast empty string / same name to boolean if\n      // boolean has higher priority\n      var stringIndex = getTypeIndex(String, prop.type);\n      if (stringIndex < 0 || booleanIndex < stringIndex) {\n        value = true;\n      }\n    }\n  }\n  // check default value\n  if (value === undefined) {\n    value = getPropDefaultValue(vm, prop, key);\n    // since the default value is a fresh copy,\n    // make sure to observe it.\n    var prevShouldObserve = shouldObserve;\n    toggleObserving(true);\n    observe(value);\n    toggleObserving(prevShouldObserve);\n  }\n  if (\n    process.env.NODE_ENV !== 'production' &&\n    // skip validation for weex recycle-list child component props\n    !(false && isObject(value) && ('@binding' in value))\n  ) {\n    assertProp(prop, key, value, vm, absent);\n  }\n  return value\n}\n\n/**\n * Get the default value of a prop.\n */\nfunction getPropDefaultValue (vm, prop, key) {\n  // no default, return undefined\n  if (!hasOwn(prop, 'default')) {\n    return undefined\n  }\n  var def = prop.default;\n  // warn against non-factory defaults for Object & Array\n  if (process.env.NODE_ENV !== 'production' && isObject(def)) {\n    warn(\n      'Invalid default value for prop \"' + key + '\": ' +\n      'Props with type Object/Array must use a factory function ' +\n      'to return the default value.',\n      vm\n    );\n  }\n  // the raw prop value was also undefined from previous render,\n  // return previous default value to avoid unnecessary watcher trigger\n  if (vm && vm.$options.propsData &&\n    vm.$options.propsData[key] === undefined &&\n    vm._props[key] !== undefined\n  ) {\n    return vm._props[key]\n  }\n  // call factory function for non-Function types\n  // a value is Function if its prototype is function even across different execution context\n  return typeof def === 'function' && getType(prop.type) !== 'Function'\n    ? def.call(vm)\n    : def\n}\n\n/**\n * Assert whether a prop is valid.\n */\nfunction assertProp (\n  prop,\n  name,\n  value,\n  vm,\n  absent\n) {\n  if (prop.required && absent) {\n    warn(\n      'Missing required prop: \"' + name + '\"',\n      vm\n    );\n    return\n  }\n  if (value == null && !prop.required) {\n    return\n  }\n  var type = prop.type;\n  var valid = !type || type === true;\n  var expectedTypes = [];\n  if (type) {\n    if (!Array.isArray(type)) {\n      type = [type];\n    }\n    for (var i = 0; i < type.length && !valid; i++) {\n      var assertedType = assertType(value, type[i]);\n      expectedTypes.push(assertedType.expectedType || '');\n      valid = assertedType.valid;\n    }\n  }\n  if (!valid) {\n    warn(\n      \"Invalid prop: type check failed for prop \\\"\" + name + \"\\\".\" +\n      \" Expected \" + (expectedTypes.map(capitalize).join(', ')) +\n      \", got \" + (toRawType(value)) + \".\",\n      vm\n    );\n    return\n  }\n  var validator = prop.validator;\n  if (validator) {\n    if (!validator(value)) {\n      warn(\n        'Invalid prop: custom validator check failed for prop \"' + name + '\".',\n        vm\n      );\n    }\n  }\n}\n\nvar simpleCheckRE = /^(String|Number|Boolean|Function|Symbol)$/;\n\nfunction assertType (value, type) {\n  var valid;\n  var expectedType = getType(type);\n  if (simpleCheckRE.test(expectedType)) {\n    var t = typeof value;\n    valid = t === expectedType.toLowerCase();\n    // for primitive wrapper objects\n    if (!valid && t === 'object') {\n      valid = value instanceof type;\n    }\n  } else if (expectedType === 'Object') {\n    valid = isPlainObject(value);\n  } else if (expectedType === 'Array') {\n    valid = Array.isArray(value);\n  } else {\n    valid = value instanceof type;\n  }\n  return {\n    valid: valid,\n    expectedType: expectedType\n  }\n}\n\n/**\n * Use function string name to check built-in types,\n * because a simple equality check will fail when running\n * across different vms / iframes.\n */\nfunction getType (fn) {\n  var match = fn && fn.toString().match(/^\\s*function (\\w+)/);\n  return match ? match[1] : ''\n}\n\nfunction isSameType (a, b) {\n  return getType(a) === getType(b)\n}\n\nfunction getTypeIndex (type, expectedTypes) {\n  if (!Array.isArray(expectedTypes)) {\n    return isSameType(expectedTypes, type) ? 0 : -1\n  }\n  for (var i = 0, len = expectedTypes.length; i < len; i++) {\n    if (isSameType(expectedTypes[i], type)) {\n      return i\n    }\n  }\n  return -1\n}\n\n/*  */\n\nfunction handleError (err, vm, info) {\n  if (vm) {\n    var cur = vm;\n    while ((cur = cur.$parent)) {\n      var hooks = cur.$options.errorCaptured;\n      if (hooks) {\n        for (var i = 0; i < hooks.length; i++) {\n          try {\n            var capture = hooks[i].call(cur, err, vm, info) === false;\n            if (capture) { return }\n          } catch (e) {\n            globalHandleError(e, cur, 'errorCaptured hook');\n          }\n        }\n      }\n    }\n  }\n  globalHandleError(err, vm, info);\n}\n\nfunction globalHandleError (err, vm, info) {\n  if (config.errorHandler) {\n    try {\n      return config.errorHandler.call(null, err, vm, info)\n    } catch (e) {\n      logError(e, null, 'config.errorHandler');\n    }\n  }\n  logError(err, vm, info);\n}\n\nfunction logError (err, vm, info) {\n  if (process.env.NODE_ENV !== 'production') {\n    warn((\"Error in \" + info + \": \\\"\" + (err.toString()) + \"\\\"\"), vm);\n  }\n  /* istanbul ignore else */\n  if ((inBrowser || inWeex) && typeof console !== 'undefined') {\n    console.error(err);\n  } else {\n    throw err\n  }\n}\n\n/*  */\n/* globals MessageChannel */\n\nvar callbacks = [];\nvar pending = false;\n\nfunction flushCallbacks () {\n  pending = false;\n  var copies = callbacks.slice(0);\n  callbacks.length = 0;\n  for (var i = 0; i < copies.length; i++) {\n    copies[i]();\n  }\n}\n\n// Here we have async deferring wrappers using both microtasks and (macro) tasks.\n// In < 2.4 we used microtasks everywhere, but there are some scenarios where\n// microtasks have too high a priority and fire in between supposedly\n// sequential events (e.g. #4521, #6690) or even between bubbling of the same\n// event (#6566). However, using (macro) tasks everywhere also has subtle problems\n// when state is changed right before repaint (e.g. #6813, out-in transitions).\n// Here we use microtask by default, but expose a way to force (macro) task when\n// needed (e.g. in event handlers attached by v-on).\nvar microTimerFunc;\nvar macroTimerFunc;\nvar useMacroTask = false;\n\n// Determine (macro) task defer implementation.\n// Technically setImmediate should be the ideal choice, but it's only available\n// in IE. The only polyfill that consistently queues the callback after all DOM\n// events triggered in the same loop is by using MessageChannel.\n/* istanbul ignore if */\nif (typeof setImmediate !== 'undefined' && isNative(setImmediate)) {\n  macroTimerFunc = function () {\n    setImmediate(flushCallbacks);\n  };\n} else if (typeof MessageChannel !== 'undefined' && (\n  isNative(MessageChannel) ||\n  // PhantomJS\n  MessageChannel.toString() === '[object MessageChannelConstructor]'\n)) {\n  var channel = new MessageChannel();\n  var port = channel.port2;\n  channel.port1.onmessage = flushCallbacks;\n  macroTimerFunc = function () {\n    port.postMessage(1);\n  };\n} else {\n  /* istanbul ignore next */\n  macroTimerFunc = function () {\n    setTimeout(flushCallbacks, 0);\n  };\n}\n\n// Determine microtask defer implementation.\n/* istanbul ignore next, $flow-disable-line */\nif (typeof Promise !== 'undefined' && isNative(Promise)) {\n  var p = Promise.resolve();\n  microTimerFunc = function () {\n    p.then(flushCallbacks);\n    // in problematic UIWebViews, Promise.then doesn't completely break, but\n    // it can get stuck in a weird state where callbacks are pushed into the\n    // microtask queue but the queue isn't being flushed, until the browser\n    // needs to do some other work, e.g. handle a timer. Therefore we can\n    // \"force\" the microtask queue to be flushed by adding an empty timer.\n    if (isIOS) { setTimeout(noop); }\n  };\n} else {\n  // fallback to macro\n  microTimerFunc = macroTimerFunc;\n}\n\n/**\n * Wrap a function so that if any code inside triggers state change,\n * the changes are queued using a (macro) task instead of a microtask.\n */\nfunction withMacroTask (fn) {\n  return fn._withTask || (fn._withTask = function () {\n    useMacroTask = true;\n    var res = fn.apply(null, arguments);\n    useMacroTask = false;\n    return res\n  })\n}\n\nfunction nextTick (cb, ctx) {\n  var _resolve;\n  callbacks.push(function () {\n    if (cb) {\n      try {\n        cb.call(ctx);\n      } catch (e) {\n        handleError(e, ctx, 'nextTick');\n      }\n    } else if (_resolve) {\n      _resolve(ctx);\n    }\n  });\n  if (!pending) {\n    pending = true;\n    if (useMacroTask) {\n      macroTimerFunc();\n    } else {\n      microTimerFunc();\n    }\n  }\n  // $flow-disable-line\n  if (!cb && typeof Promise !== 'undefined') {\n    return new Promise(function (resolve) {\n      _resolve = resolve;\n    })\n  }\n}\n\n/*  */\n\nvar mark;\nvar measure;\n\nif (process.env.NODE_ENV !== 'production') {\n  var perf = inBrowser && window.performance;\n  /* istanbul ignore if */\n  if (\n    perf &&\n    perf.mark &&\n    perf.measure &&\n    perf.clearMarks &&\n    perf.clearMeasures\n  ) {\n    mark = function (tag) { return perf.mark(tag); };\n    measure = function (name, startTag, endTag) {\n      perf.measure(name, startTag, endTag);\n      perf.clearMarks(startTag);\n      perf.clearMarks(endTag);\n      perf.clearMeasures(name);\n    };\n  }\n}\n\n/* not type checking this file because flow doesn't play well with Proxy */\n\nvar initProxy;\n\nif (process.env.NODE_ENV !== 'production') {\n  var allowedGlobals = makeMap(\n    'Infinity,undefined,NaN,isFinite,isNaN,' +\n    'parseFloat,parseInt,decodeURI,decodeURIComponent,encodeURI,encodeURIComponent,' +\n    'Math,Number,Date,Array,Object,Boolean,String,RegExp,Map,Set,JSON,Intl,' +\n    'require' // for Webpack/Browserify\n  );\n\n  var warnNonPresent = function (target, key) {\n    warn(\n      \"Property or method \\\"\" + key + \"\\\" is not defined on the instance but \" +\n      'referenced during render. Make sure that this property is reactive, ' +\n      'either in the data option, or for class-based components, by ' +\n      'initializing the property. ' +\n      'See: https://vuejs.org/v2/guide/reactivity.html#Declaring-Reactive-Properties.',\n      target\n    );\n  };\n\n  var hasProxy =\n    typeof Proxy !== 'undefined' && isNative(Proxy);\n\n  if (hasProxy) {\n    var isBuiltInModifier = makeMap('stop,prevent,self,ctrl,shift,alt,meta,exact');\n    config.keyCodes = new Proxy(config.keyCodes, {\n      set: function set (target, key, value) {\n        if (isBuiltInModifier(key)) {\n          warn((\"Avoid overwriting built-in modifier in config.keyCodes: .\" + key));\n          return false\n        } else {\n          target[key] = value;\n          return true\n        }\n      }\n    });\n  }\n\n  var hasHandler = {\n    has: function has (target, key) {\n      var has = key in target;\n      var isAllowed = allowedGlobals(key) || key.charAt(0) === '_';\n      if (!has && !isAllowed) {\n        warnNonPresent(target, key);\n      }\n      return has || !isAllowed\n    }\n  };\n\n  var getHandler = {\n    get: function get (target, key) {\n      if (typeof key === 'string' && !(key in target)) {\n        warnNonPresent(target, key);\n      }\n      return target[key]\n    }\n  };\n\n  initProxy = function initProxy (vm) {\n    if (hasProxy) {\n      // determine which proxy handler to use\n      var options = vm.$options;\n      var handlers = options.render && options.render._withStripped\n        ? getHandler\n        : hasHandler;\n      vm._renderProxy = new Proxy(vm, handlers);\n    } else {\n      vm._renderProxy = vm;\n    }\n  };\n}\n\n/*  */\n\nvar seenObjects = new _Set();\n\n/**\n * Recursively traverse an object to evoke all converted\n * getters, so that every nested property inside the object\n * is collected as a \"deep\" dependency.\n */\nfunction traverse (val) {\n  _traverse(val, seenObjects);\n  seenObjects.clear();\n}\n\nfunction _traverse (val, seen) {\n  var i, keys;\n  var isA = Array.isArray(val);\n  if ((!isA && !isObject(val)) || Object.isFrozen(val) || val instanceof VNode) {\n    return\n  }\n  if (val.__ob__) {\n    var depId = val.__ob__.dep.id;\n    if (seen.has(depId)) {\n      return\n    }\n    seen.add(depId);\n  }\n  if (isA) {\n    i = val.length;\n    while (i--) { _traverse(val[i], seen); }\n  } else {\n    keys = Object.keys(val);\n    i = keys.length;\n    while (i--) { _traverse(val[keys[i]], seen); }\n  }\n}\n\n/*  */\n\nvar normalizeEvent = cached(function (name) {\n  var passive = name.charAt(0) === '&';\n  name = passive ? name.slice(1) : name;\n  var once$$1 = name.charAt(0) === '~'; // Prefixed last, checked first\n  name = once$$1 ? name.slice(1) : name;\n  var capture = name.charAt(0) === '!';\n  name = capture ? name.slice(1) : name;\n  return {\n    name: name,\n    once: once$$1,\n    capture: capture,\n    passive: passive\n  }\n});\n\nfunction createFnInvoker (fns) {\n  function invoker () {\n    var arguments$1 = arguments;\n\n    var fns = invoker.fns;\n    if (Array.isArray(fns)) {\n      var cloned = fns.slice();\n      for (var i = 0; i < cloned.length; i++) {\n        cloned[i].apply(null, arguments$1);\n      }\n    } else {\n      // return handler return value for single handlers\n      return fns.apply(null, arguments)\n    }\n  }\n  invoker.fns = fns;\n  return invoker\n}\n\nfunction updateListeners (\n  on,\n  oldOn,\n  add,\n  remove$$1,\n  vm\n) {\n  var name, def, cur, old, event;\n  for (name in on) {\n    def = cur = on[name];\n    old = oldOn[name];\n    event = normalizeEvent(name);\n    /* istanbul ignore if */\n    if (isUndef(cur)) {\n      process.env.NODE_ENV !== 'production' && warn(\n        \"Invalid handler for event \\\"\" + (event.name) + \"\\\": got \" + String(cur),\n        vm\n      );\n    } else if (isUndef(old)) {\n      if (isUndef(cur.fns)) {\n        cur = on[name] = createFnInvoker(cur);\n      }\n      add(event.name, cur, event.once, event.capture, event.passive, event.params);\n    } else if (cur !== old) {\n      old.fns = cur;\n      on[name] = old;\n    }\n  }\n  for (name in oldOn) {\n    if (isUndef(on[name])) {\n      event = normalizeEvent(name);\n      remove$$1(event.name, oldOn[name], event.capture);\n    }\n  }\n}\n\n/*  */\n\nfunction mergeVNodeHook (def, hookKey, hook) {\n  if (def instanceof VNode) {\n    def = def.data.hook || (def.data.hook = {});\n  }\n  var invoker;\n  var oldHook = def[hookKey];\n\n  function wrappedHook () {\n    hook.apply(this, arguments);\n    // important: remove merged hook to ensure it's called only once\n    // and prevent memory leak\n    remove(invoker.fns, wrappedHook);\n  }\n\n  if (isUndef(oldHook)) {\n    // no existing hook\n    invoker = createFnInvoker([wrappedHook]);\n  } else {\n    /* istanbul ignore if */\n    if (isDef(oldHook.fns) && isTrue(oldHook.merged)) {\n      // already a merged invoker\n      invoker = oldHook;\n      invoker.fns.push(wrappedHook);\n    } else {\n      // existing plain hook\n      invoker = createFnInvoker([oldHook, wrappedHook]);\n    }\n  }\n\n  invoker.merged = true;\n  def[hookKey] = invoker;\n}\n\n/*  */\n\nfunction extractPropsFromVNodeData (\n  data,\n  Ctor,\n  tag\n) {\n  // we are only extracting raw values here.\n  // validation and default values are handled in the child\n  // component itself.\n  var propOptions = Ctor.options.props;\n  if (isUndef(propOptions)) {\n    return\n  }\n  var res = {};\n  var attrs = data.attrs;\n  var props = data.props;\n  if (isDef(attrs) || isDef(props)) {\n    for (var key in propOptions) {\n      var altKey = hyphenate(key);\n      if (process.env.NODE_ENV !== 'production') {\n        var keyInLowerCase = key.toLowerCase();\n        if (\n          key !== keyInLowerCase &&\n          attrs && hasOwn(attrs, keyInLowerCase)\n        ) {\n          tip(\n            \"Prop \\\"\" + keyInLowerCase + \"\\\" is passed to component \" +\n            (formatComponentName(tag || Ctor)) + \", but the declared prop name is\" +\n            \" \\\"\" + key + \"\\\". \" +\n            \"Note that HTML attributes are case-insensitive and camelCased \" +\n            \"props need to use their kebab-case equivalents when using in-DOM \" +\n            \"templates. You should probably use \\\"\" + altKey + \"\\\" instead of \\\"\" + key + \"\\\".\"\n          );\n        }\n      }\n      checkProp(res, props, key, altKey, true) ||\n      checkProp(res, attrs, key, altKey, false);\n    }\n  }\n  return res\n}\n\nfunction checkProp (\n  res,\n  hash,\n  key,\n  altKey,\n  preserve\n) {\n  if (isDef(hash)) {\n    if (hasOwn(hash, key)) {\n      res[key] = hash[key];\n      if (!preserve) {\n        delete hash[key];\n      }\n      return true\n    } else if (hasOwn(hash, altKey)) {\n      res[key] = hash[altKey];\n      if (!preserve) {\n        delete hash[altKey];\n      }\n      return true\n    }\n  }\n  return false\n}\n\n/*  */\n\n// The template compiler attempts to minimize the need for normalization by\n// statically analyzing the template at compile time.\n//\n// For plain HTML markup, normalization can be completely skipped because the\n// generated render function is guaranteed to return Array<VNode>. There are\n// two cases where extra normalization is needed:\n\n// 1. When the children contains components - because a functional component\n// may return an Array instead of a single root. In this case, just a simple\n// normalization is needed - if any child is an Array, we flatten the whole\n// thing with Array.prototype.concat. It is guaranteed to be only 1-level deep\n// because functional components already normalize their own children.\nfunction simpleNormalizeChildren (children) {\n  for (var i = 0; i < children.length; i++) {\n    if (Array.isArray(children[i])) {\n      return Array.prototype.concat.apply([], children)\n    }\n  }\n  return children\n}\n\n// 2. When the children contains constructs that always generated nested Arrays,\n// e.g. <template>, <slot>, v-for, or when the children is provided by user\n// with hand-written render functions / JSX. In such cases a full normalization\n// is needed to cater to all possible types of children values.\nfunction normalizeChildren (children) {\n  return isPrimitive(children)\n    ? [createTextVNode(children)]\n    : Array.isArray(children)\n      ? normalizeArrayChildren(children)\n      : undefined\n}\n\nfunction isTextNode (node) {\n  return isDef(node) && isDef(node.text) && isFalse(node.isComment)\n}\n\nfunction normalizeArrayChildren (children, nestedIndex) {\n  var res = [];\n  var i, c, lastIndex, last;\n  for (i = 0; i < children.length; i++) {\n    c = children[i];\n    if (isUndef(c) || typeof c === 'boolean') { continue }\n    lastIndex = res.length - 1;\n    last = res[lastIndex];\n    //  nested\n    if (Array.isArray(c)) {\n      if (c.length > 0) {\n        c = normalizeArrayChildren(c, ((nestedIndex || '') + \"_\" + i));\n        // merge adjacent text nodes\n        if (isTextNode(c[0]) && isTextNode(last)) {\n          res[lastIndex] = createTextVNode(last.text + (c[0]).text);\n          c.shift();\n        }\n        res.push.apply(res, c);\n      }\n    } else if (isPrimitive(c)) {\n      if (isTextNode(last)) {\n        // merge adjacent text nodes\n        // this is necessary for SSR hydration because text nodes are\n        // essentially merged when rendered to HTML strings\n        res[lastIndex] = createTextVNode(last.text + c);\n      } else if (c !== '') {\n        // convert primitive to vnode\n        res.push(createTextVNode(c));\n      }\n    } else {\n      if (isTextNode(c) && isTextNode(last)) {\n        // merge adjacent text nodes\n        res[lastIndex] = createTextVNode(last.text + c.text);\n      } else {\n        // default key for nested array children (likely generated by v-for)\n        if (isTrue(children._isVList) &&\n          isDef(c.tag) &&\n          isUndef(c.key) &&\n          isDef(nestedIndex)) {\n          c.key = \"__vlist\" + nestedIndex + \"_\" + i + \"__\";\n        }\n        res.push(c);\n      }\n    }\n  }\n  return res\n}\n\n/*  */\n\nfunction ensureCtor (comp, base) {\n  if (\n    comp.__esModule ||\n    (hasSymbol && comp[Symbol.toStringTag] === 'Module')\n  ) {\n    comp = comp.default;\n  }\n  return isObject(comp)\n    ? base.extend(comp)\n    : comp\n}\n\nfunction createAsyncPlaceholder (\n  factory,\n  data,\n  context,\n  children,\n  tag\n) {\n  var node = createEmptyVNode();\n  node.asyncFactory = factory;\n  node.asyncMeta = { data: data, context: context, children: children, tag: tag };\n  return node\n}\n\nfunction resolveAsyncComponent (\n  factory,\n  baseCtor,\n  context\n) {\n  if (isTrue(factory.error) && isDef(factory.errorComp)) {\n    return factory.errorComp\n  }\n\n  if (isDef(factory.resolved)) {\n    return factory.resolved\n  }\n\n  if (isTrue(factory.loading) && isDef(factory.loadingComp)) {\n    return factory.loadingComp\n  }\n\n  if (isDef(factory.contexts)) {\n    // already pending\n    factory.contexts.push(context);\n  } else {\n    var contexts = factory.contexts = [context];\n    var sync = true;\n\n    var forceRender = function () {\n      for (var i = 0, l = contexts.length; i < l; i++) {\n        contexts[i].$forceUpdate();\n      }\n    };\n\n    var resolve = once(function (res) {\n      // cache resolved\n      factory.resolved = ensureCtor(res, baseCtor);\n      // invoke callbacks only if this is not a synchronous resolve\n      // (async resolves are shimmed as synchronous during SSR)\n      if (!sync) {\n        forceRender();\n      }\n    });\n\n    var reject = once(function (reason) {\n      process.env.NODE_ENV !== 'production' && warn(\n        \"Failed to resolve async component: \" + (String(factory)) +\n        (reason ? (\"\\nReason: \" + reason) : '')\n      );\n      if (isDef(factory.errorComp)) {\n        factory.error = true;\n        forceRender();\n      }\n    });\n\n    var res = factory(resolve, reject);\n\n    if (isObject(res)) {\n      if (typeof res.then === 'function') {\n        // () => Promise\n        if (isUndef(factory.resolved)) {\n          res.then(resolve, reject);\n        }\n      } else if (isDef(res.component) && typeof res.component.then === 'function') {\n        res.component.then(resolve, reject);\n\n        if (isDef(res.error)) {\n          factory.errorComp = ensureCtor(res.error, baseCtor);\n        }\n\n        if (isDef(res.loading)) {\n          factory.loadingComp = ensureCtor(res.loading, baseCtor);\n          if (res.delay === 0) {\n            factory.loading = true;\n          } else {\n            setTimeout(function () {\n              if (isUndef(factory.resolved) && isUndef(factory.error)) {\n                factory.loading = true;\n                forceRender();\n              }\n            }, res.delay || 200);\n          }\n        }\n\n        if (isDef(res.timeout)) {\n          setTimeout(function () {\n            if (isUndef(factory.resolved)) {\n              reject(\n                process.env.NODE_ENV !== 'production'\n                  ? (\"timeout (\" + (res.timeout) + \"ms)\")\n                  : null\n              );\n            }\n          }, res.timeout);\n        }\n      }\n    }\n\n    sync = false;\n    // return in case resolved synchronously\n    return factory.loading\n      ? factory.loadingComp\n      : factory.resolved\n  }\n}\n\n/*  */\n\nfunction isAsyncPlaceholder (node) {\n  return node.isComment && node.asyncFactory\n}\n\n/*  */\n\nfunction getFirstComponentChild (children) {\n  if (Array.isArray(children)) {\n    for (var i = 0; i < children.length; i++) {\n      var c = children[i];\n      if (isDef(c) && (isDef(c.componentOptions) || isAsyncPlaceholder(c))) {\n        return c\n      }\n    }\n  }\n}\n\n/*  */\n\n/*  */\n\nfunction initEvents (vm) {\n  vm._events = Object.create(null);\n  vm._hasHookEvent = false;\n  // init parent attached events\n  var listeners = vm.$options._parentListeners;\n  if (listeners) {\n    updateComponentListeners(vm, listeners);\n  }\n}\n\nvar target;\n\nfunction add (event, fn, once) {\n  if (once) {\n    target.$once(event, fn);\n  } else {\n    target.$on(event, fn);\n  }\n}\n\nfunction remove$1 (event, fn) {\n  target.$off(event, fn);\n}\n\nfunction updateComponentListeners (\n  vm,\n  listeners,\n  oldListeners\n) {\n  target = vm;\n  updateListeners(listeners, oldListeners || {}, add, remove$1, vm);\n  target = undefined;\n}\n\nfunction eventsMixin (Vue) {\n  var hookRE = /^hook:/;\n  Vue.prototype.$on = function (event, fn) {\n    var this$1 = this;\n\n    var vm = this;\n    if (Array.isArray(event)) {\n      for (var i = 0, l = event.length; i < l; i++) {\n        this$1.$on(event[i], fn);\n      }\n    } else {\n      (vm._events[event] || (vm._events[event] = [])).push(fn);\n      // optimize hook:event cost by using a boolean flag marked at registration\n      // instead of a hash lookup\n      if (hookRE.test(event)) {\n        vm._hasHookEvent = true;\n      }\n    }\n    return vm\n  };\n\n  Vue.prototype.$once = function (event, fn) {\n    var vm = this;\n    function on () {\n      vm.$off(event, on);\n      fn.apply(vm, arguments);\n    }\n    on.fn = fn;\n    vm.$on(event, on);\n    return vm\n  };\n\n  Vue.prototype.$off = function (event, fn) {\n    var this$1 = this;\n\n    var vm = this;\n    // all\n    if (!arguments.length) {\n      vm._events = Object.create(null);\n      return vm\n    }\n    // array of events\n    if (Array.isArray(event)) {\n      for (var i = 0, l = event.length; i < l; i++) {\n        this$1.$off(event[i], fn);\n      }\n      return vm\n    }\n    // specific event\n    var cbs = vm._events[event];\n    if (!cbs) {\n      return vm\n    }\n    if (!fn) {\n      vm._events[event] = null;\n      return vm\n    }\n    if (fn) {\n      // specific handler\n      var cb;\n      var i$1 = cbs.length;\n      while (i$1--) {\n        cb = cbs[i$1];\n        if (cb === fn || cb.fn === fn) {\n          cbs.splice(i$1, 1);\n          break\n        }\n      }\n    }\n    return vm\n  };\n\n  Vue.prototype.$emit = function (event) {\n    var vm = this;\n    if (process.env.NODE_ENV !== 'production') {\n      var lowerCaseEvent = event.toLowerCase();\n      if (lowerCaseEvent !== event && vm._events[lowerCaseEvent]) {\n        tip(\n          \"Event \\\"\" + lowerCaseEvent + \"\\\" is emitted in component \" +\n          (formatComponentName(vm)) + \" but the handler is registered for \\\"\" + event + \"\\\". \" +\n          \"Note that HTML attributes are case-insensitive and you cannot use \" +\n          \"v-on to listen to camelCase events when using in-DOM templates. \" +\n          \"You should probably use \\\"\" + (hyphenate(event)) + \"\\\" instead of \\\"\" + event + \"\\\".\"\n        );\n      }\n    }\n    var cbs = vm._events[event];\n    if (cbs) {\n      cbs = cbs.length > 1 ? toArray(cbs) : cbs;\n      var args = toArray(arguments, 1);\n      for (var i = 0, l = cbs.length; i < l; i++) {\n        try {\n          cbs[i].apply(vm, args);\n        } catch (e) {\n          handleError(e, vm, (\"event handler for \\\"\" + event + \"\\\"\"));\n        }\n      }\n    }\n    return vm\n  };\n}\n\n/*  */\n\n\n\n/**\n * Runtime helper for resolving raw children VNodes into a slot object.\n */\nfunction resolveSlots (\n  children,\n  context\n) {\n  var slots = {};\n  if (!children) {\n    return slots\n  }\n  for (var i = 0, l = children.length; i < l; i++) {\n    var child = children[i];\n    var data = child.data;\n    // remove slot attribute if the node is resolved as a Vue slot node\n    if (data && data.attrs && data.attrs.slot) {\n      delete data.attrs.slot;\n    }\n    // named slots should only be respected if the vnode was rendered in the\n    // same context.\n    if ((child.context === context || child.fnContext === context) &&\n      data && data.slot != null\n    ) {\n      var name = data.slot;\n      var slot = (slots[name] || (slots[name] = []));\n      if (child.tag === 'template') {\n        slot.push.apply(slot, child.children || []);\n      } else {\n        slot.push(child);\n      }\n    } else {\n      (slots.default || (slots.default = [])).push(child);\n    }\n  }\n  // ignore slots that contains only whitespace\n  for (var name$1 in slots) {\n    if (slots[name$1].every(isWhitespace)) {\n      delete slots[name$1];\n    }\n  }\n  return slots\n}\n\nfunction isWhitespace (node) {\n  return (node.isComment && !node.asyncFactory) || node.text === ' '\n}\n\nfunction resolveScopedSlots (\n  fns, // see flow/vnode\n  res\n) {\n  res = res || {};\n  for (var i = 0; i < fns.length; i++) {\n    if (Array.isArray(fns[i])) {\n      resolveScopedSlots(fns[i], res);\n    } else {\n      res[fns[i].key] = fns[i].fn;\n    }\n  }\n  return res\n}\n\n/*  */\n\nvar activeInstance = null;\nvar isUpdatingChildComponent = false;\n\nfunction initLifecycle (vm) {\n  var options = vm.$options;\n\n  // locate first non-abstract parent\n  var parent = options.parent;\n  if (parent && !options.abstract) {\n    while (parent.$options.abstract && parent.$parent) {\n      parent = parent.$parent;\n    }\n    parent.$children.push(vm);\n  }\n\n  vm.$parent = parent;\n  vm.$root = parent ? parent.$root : vm;\n\n  vm.$children = [];\n  vm.$refs = {};\n\n  vm._watcher = null;\n  vm._inactive = null;\n  vm._directInactive = false;\n  vm._isMounted = false;\n  vm._isDestroyed = false;\n  vm._isBeingDestroyed = false;\n}\n\nfunction lifecycleMixin (Vue) {\n  Vue.prototype._update = function (vnode, hydrating) {\n    var vm = this;\n    if (vm._isMounted) {\n      callHook(vm, 'beforeUpdate');\n    }\n    var prevEl = vm.$el;\n    var prevVnode = vm._vnode;\n    var prevActiveInstance = activeInstance;\n    activeInstance = vm;\n    vm._vnode = vnode;\n    // Vue.prototype.__patch__ is injected in entry points\n    // based on the rendering backend used.\n    if (!prevVnode) {\n      // initial render\n      vm.$el = vm.__patch__(\n        vm.$el, vnode, hydrating, false /* removeOnly */,\n        vm.$options._parentElm,\n        vm.$options._refElm\n      );\n      // no need for the ref nodes after initial patch\n      // this prevents keeping a detached DOM tree in memory (#5851)\n      vm.$options._parentElm = vm.$options._refElm = null;\n    } else {\n      // updates\n      vm.$el = vm.__patch__(prevVnode, vnode);\n    }\n    activeInstance = prevActiveInstance;\n    // update __vue__ reference\n    if (prevEl) {\n      prevEl.__vue__ = null;\n    }\n    if (vm.$el) {\n      vm.$el.__vue__ = vm;\n    }\n    // if parent is an HOC, update its $el as well\n    if (vm.$vnode && vm.$parent && vm.$vnode === vm.$parent._vnode) {\n      vm.$parent.$el = vm.$el;\n    }\n    // updated hook is called by the scheduler to ensure that children are\n    // updated in a parent's updated hook.\n  };\n\n  Vue.prototype.$forceUpdate = function () {\n    var vm = this;\n    if (vm._watcher) {\n      vm._watcher.update();\n    }\n  };\n\n  Vue.prototype.$destroy = function () {\n    var vm = this;\n    if (vm._isBeingDestroyed) {\n      return\n    }\n    callHook(vm, 'beforeDestroy');\n    vm._isBeingDestroyed = true;\n    // remove self from parent\n    var parent = vm.$parent;\n    if (parent && !parent._isBeingDestroyed && !vm.$options.abstract) {\n      remove(parent.$children, vm);\n    }\n    // teardown watchers\n    if (vm._watcher) {\n      vm._watcher.teardown();\n    }\n    var i = vm._watchers.length;\n    while (i--) {\n      vm._watchers[i].teardown();\n    }\n    // remove reference from data ob\n    // frozen object may not have observer.\n    if (vm._data.__ob__) {\n      vm._data.__ob__.vmCount--;\n    }\n    // call the last hook...\n    vm._isDestroyed = true;\n    // invoke destroy hooks on current rendered tree\n    vm.__patch__(vm._vnode, null);\n    // fire destroyed hook\n    callHook(vm, 'destroyed');\n    // turn off all instance listeners.\n    vm.$off();\n    // remove __vue__ reference\n    if (vm.$el) {\n      vm.$el.__vue__ = null;\n    }\n    // release circular reference (#6759)\n    if (vm.$vnode) {\n      vm.$vnode.parent = null;\n    }\n  };\n}\n\nfunction mountComponent (\n  vm,\n  el,\n  hydrating\n) {\n  vm.$el = el;\n  if (!vm.$options.render) {\n    vm.$options.render = createEmptyVNode;\n    if (process.env.NODE_ENV !== 'production') {\n      /* istanbul ignore if */\n      if ((vm.$options.template && vm.$options.template.charAt(0) !== '#') ||\n        vm.$options.el || el) {\n        warn(\n          'You are using the runtime-only build of Vue where the template ' +\n          'compiler is not available. Either pre-compile the templates into ' +\n          'render functions, or use the compiler-included build.',\n          vm\n        );\n      } else {\n        warn(\n          'Failed to mount component: template or render function not defined.',\n          vm\n        );\n      }\n    }\n  }\n  callHook(vm, 'beforeMount');\n\n  var updateComponent;\n  /* istanbul ignore if */\n  if (process.env.NODE_ENV !== 'production' && config.performance && mark) {\n    updateComponent = function () {\n      var name = vm._name;\n      var id = vm._uid;\n      var startTag = \"vue-perf-start:\" + id;\n      var endTag = \"vue-perf-end:\" + id;\n\n      mark(startTag);\n      var vnode = vm._render();\n      mark(endTag);\n      measure((\"vue \" + name + \" render\"), startTag, endTag);\n\n      mark(startTag);\n      vm._update(vnode, hydrating);\n      mark(endTag);\n      measure((\"vue \" + name + \" patch\"), startTag, endTag);\n    };\n  } else {\n    updateComponent = function () {\n      vm._update(vm._render(), hydrating);\n    };\n  }\n\n  // we set this to vm._watcher inside the watcher's constructor\n  // since the watcher's initial patch may call $forceUpdate (e.g. inside child\n  // component's mounted hook), which relies on vm._watcher being already defined\n  new Watcher(vm, updateComponent, noop, null, true /* isRenderWatcher */);\n  hydrating = false;\n\n  // manually mounted instance, call mounted on self\n  // mounted is called for render-created child components in its inserted hook\n  if (vm.$vnode == null) {\n    vm._isMounted = true;\n    callHook(vm, 'mounted');\n  }\n  return vm\n}\n\nfunction updateChildComponent (\n  vm,\n  propsData,\n  listeners,\n  parentVnode,\n  renderChildren\n) {\n  if (process.env.NODE_ENV !== 'production') {\n    isUpdatingChildComponent = true;\n  }\n\n  // determine whether component has slot children\n  // we need to do this before overwriting $options._renderChildren\n  var hasChildren = !!(\n    renderChildren ||               // has new static slots\n    vm.$options._renderChildren ||  // has old static slots\n    parentVnode.data.scopedSlots || // has new scoped slots\n    vm.$scopedSlots !== emptyObject // has old scoped slots\n  );\n\n  vm.$options._parentVnode = parentVnode;\n  vm.$vnode = parentVnode; // update vm's placeholder node without re-render\n\n  if (vm._vnode) { // update child tree's parent\n    vm._vnode.parent = parentVnode;\n  }\n  vm.$options._renderChildren = renderChildren;\n\n  // update $attrs and $listeners hash\n  // these are also reactive so they may trigger child update if the child\n  // used them during render\n  vm.$attrs = parentVnode.data.attrs || emptyObject;\n  vm.$listeners = listeners || emptyObject;\n\n  // update props\n  if (propsData && vm.$options.props) {\n    toggleObserving(false);\n    var props = vm._props;\n    var propKeys = vm.$options._propKeys || [];\n    for (var i = 0; i < propKeys.length; i++) {\n      var key = propKeys[i];\n      var propOptions = vm.$options.props; // wtf flow?\n      props[key] = validateProp(key, propOptions, propsData, vm);\n    }\n    toggleObserving(true);\n    // keep a copy of raw propsData\n    vm.$options.propsData = propsData;\n  }\n\n  // update listeners\n  listeners = listeners || emptyObject;\n  var oldListeners = vm.$options._parentListeners;\n  vm.$options._parentListeners = listeners;\n  updateComponentListeners(vm, listeners, oldListeners);\n\n  // resolve slots + force update if has children\n  if (hasChildren) {\n    vm.$slots = resolveSlots(renderChildren, parentVnode.context);\n    vm.$forceUpdate();\n  }\n\n  if (process.env.NODE_ENV !== 'production') {\n    isUpdatingChildComponent = false;\n  }\n}\n\nfunction isInInactiveTree (vm) {\n  while (vm && (vm = vm.$parent)) {\n    if (vm._inactive) { return true }\n  }\n  return false\n}\n\nfunction activateChildComponent (vm, direct) {\n  if (direct) {\n    vm._directInactive = false;\n    if (isInInactiveTree(vm)) {\n      return\n    }\n  } else if (vm._directInactive) {\n    return\n  }\n  if (vm._inactive || vm._inactive === null) {\n    vm._inactive = false;\n    for (var i = 0; i < vm.$children.length; i++) {\n      activateChildComponent(vm.$children[i]);\n    }\n    callHook(vm, 'activated');\n  }\n}\n\nfunction deactivateChildComponent (vm, direct) {\n  if (direct) {\n    vm._directInactive = true;\n    if (isInInactiveTree(vm)) {\n      return\n    }\n  }\n  if (!vm._inactive) {\n    vm._inactive = true;\n    for (var i = 0; i < vm.$children.length; i++) {\n      deactivateChildComponent(vm.$children[i]);\n    }\n    callHook(vm, 'deactivated');\n  }\n}\n\nfunction callHook (vm, hook) {\n  // #7573 disable dep collection when invoking lifecycle hooks\n  pushTarget();\n  var handlers = vm.$options[hook];\n  if (handlers) {\n    for (var i = 0, j = handlers.length; i < j; i++) {\n      try {\n        handlers[i].call(vm);\n      } catch (e) {\n        handleError(e, vm, (hook + \" hook\"));\n      }\n    }\n  }\n  if (vm._hasHookEvent) {\n    vm.$emit('hook:' + hook);\n  }\n  popTarget();\n}\n\n/*  */\n\n\nvar MAX_UPDATE_COUNT = 100;\n\nvar queue = [];\nvar activatedChildren = [];\nvar has = {};\nvar circular = {};\nvar waiting = false;\nvar flushing = false;\nvar index = 0;\n\n/**\n * Reset the scheduler's state.\n */\nfunction resetSchedulerState () {\n  index = queue.length = activatedChildren.length = 0;\n  has = {};\n  if (process.env.NODE_ENV !== 'production') {\n    circular = {};\n  }\n  waiting = flushing = false;\n}\n\n/**\n * Flush both queues and run the watchers.\n */\nfunction flushSchedulerQueue () {\n  flushing = true;\n  var watcher, id;\n\n  // Sort queue before flush.\n  // This ensures that:\n  // 1. Components are updated from parent to child. (because parent is always\n  //    created before the child)\n  // 2. A component's user watchers are run before its render watcher (because\n  //    user watchers are created before the render watcher)\n  // 3. If a component is destroyed during a parent component's watcher run,\n  //    its watchers can be skipped.\n  queue.sort(function (a, b) { return a.id - b.id; });\n\n  // do not cache length because more watchers might be pushed\n  // as we run existing watchers\n  for (index = 0; index < queue.length; index++) {\n    watcher = queue[index];\n    id = watcher.id;\n    has[id] = null;\n    watcher.run();\n    // in dev build, check and stop circular updates.\n    if (process.env.NODE_ENV !== 'production' && has[id] != null) {\n      circular[id] = (circular[id] || 0) + 1;\n      if (circular[id] > MAX_UPDATE_COUNT) {\n        warn(\n          'You may have an infinite update loop ' + (\n            watcher.user\n              ? (\"in watcher with expression \\\"\" + (watcher.expression) + \"\\\"\")\n              : \"in a component render function.\"\n          ),\n          watcher.vm\n        );\n        break\n      }\n    }\n  }\n\n  // keep copies of post queues before resetting state\n  var activatedQueue = activatedChildren.slice();\n  var updatedQueue = queue.slice();\n\n  resetSchedulerState();\n\n  // call component updated and activated hooks\n  callActivatedHooks(activatedQueue);\n  callUpdatedHooks(updatedQueue);\n\n  // devtool hook\n  /* istanbul ignore if */\n  if (devtools && config.devtools) {\n    devtools.emit('flush');\n  }\n}\n\nfunction callUpdatedHooks (queue) {\n  var i = queue.length;\n  while (i--) {\n    var watcher = queue[i];\n    var vm = watcher.vm;\n    if (vm._watcher === watcher && vm._isMounted) {\n      callHook(vm, 'updated');\n    }\n  }\n}\n\n/**\n * Queue a kept-alive component that was activated during patch.\n * The queue will be processed after the entire tree has been patched.\n */\nfunction queueActivatedComponent (vm) {\n  // setting _inactive to false here so that a render function can\n  // rely on checking whether it's in an inactive tree (e.g. router-view)\n  vm._inactive = false;\n  activatedChildren.push(vm);\n}\n\nfunction callActivatedHooks (queue) {\n  for (var i = 0; i < queue.length; i++) {\n    queue[i]._inactive = true;\n    activateChildComponent(queue[i], true /* true */);\n  }\n}\n\n/**\n * Push a watcher into the watcher queue.\n * Jobs with duplicate IDs will be skipped unless it's\n * pushed when the queue is being flushed.\n */\nfunction queueWatcher (watcher) {\n  var id = watcher.id;\n  if (has[id] == null) {\n    has[id] = true;\n    if (!flushing) {\n      queue.push(watcher);\n    } else {\n      // if already flushing, splice the watcher based on its id\n      // if already past its id, it will be run next immediately.\n      var i = queue.length - 1;\n      while (i > index && queue[i].id > watcher.id) {\n        i--;\n      }\n      queue.splice(i + 1, 0, watcher);\n    }\n    // queue the flush\n    if (!waiting) {\n      waiting = true;\n      nextTick(flushSchedulerQueue);\n    }\n  }\n}\n\n/*  */\n\nvar uid$1 = 0;\n\n/**\n * A watcher parses an expression, collects dependencies,\n * and fires callback when the expression value changes.\n * This is used for both the $watch() api and directives.\n */\nvar Watcher = function Watcher (\n  vm,\n  expOrFn,\n  cb,\n  options,\n  isRenderWatcher\n) {\n  this.vm = vm;\n  if (isRenderWatcher) {\n    vm._watcher = this;\n  }\n  vm._watchers.push(this);\n  // options\n  if (options) {\n    this.deep = !!options.deep;\n    this.user = !!options.user;\n    this.lazy = !!options.lazy;\n    this.sync = !!options.sync;\n  } else {\n    this.deep = this.user = this.lazy = this.sync = false;\n  }\n  this.cb = cb;\n  this.id = ++uid$1; // uid for batching\n  this.active = true;\n  this.dirty = this.lazy; // for lazy watchers\n  this.deps = [];\n  this.newDeps = [];\n  this.depIds = new _Set();\n  this.newDepIds = new _Set();\n  this.expression = process.env.NODE_ENV !== 'production'\n    ? expOrFn.toString()\n    : '';\n  // parse expression for getter\n  if (typeof expOrFn === 'function') {\n    this.getter = expOrFn;\n  } else {\n    this.getter = parsePath(expOrFn);\n    if (!this.getter) {\n      this.getter = function () {};\n      process.env.NODE_ENV !== 'production' && warn(\n        \"Failed watching path: \\\"\" + expOrFn + \"\\\" \" +\n        'Watcher only accepts simple dot-delimited paths. ' +\n        'For full control, use a function instead.',\n        vm\n      );\n    }\n  }\n  this.value = this.lazy\n    ? undefined\n    : this.get();\n};\n\n/**\n * Evaluate the getter, and re-collect dependencies.\n */\nWatcher.prototype.get = function get () {\n  pushTarget(this);\n  var value;\n  var vm = this.vm;\n  try {\n    value = this.getter.call(vm, vm);\n  } catch (e) {\n    if (this.user) {\n      handleError(e, vm, (\"getter for watcher \\\"\" + (this.expression) + \"\\\"\"));\n    } else {\n      throw e\n    }\n  } finally {\n    // \"touch\" every property so they are all tracked as\n    // dependencies for deep watching\n    if (this.deep) {\n      traverse(value);\n    }\n    popTarget();\n    this.cleanupDeps();\n  }\n  return value\n};\n\n/**\n * Add a dependency to this directive.\n */\nWatcher.prototype.addDep = function addDep (dep) {\n  var id = dep.id;\n  if (!this.newDepIds.has(id)) {\n    this.newDepIds.add(id);\n    this.newDeps.push(dep);\n    if (!this.depIds.has(id)) {\n      dep.addSub(this);\n    }\n  }\n};\n\n/**\n * Clean up for dependency collection.\n */\nWatcher.prototype.cleanupDeps = function cleanupDeps () {\n    var this$1 = this;\n\n  var i = this.deps.length;\n  while (i--) {\n    var dep = this$1.deps[i];\n    if (!this$1.newDepIds.has(dep.id)) {\n      dep.removeSub(this$1);\n    }\n  }\n  var tmp = this.depIds;\n  this.depIds = this.newDepIds;\n  this.newDepIds = tmp;\n  this.newDepIds.clear();\n  tmp = this.deps;\n  this.deps = this.newDeps;\n  this.newDeps = tmp;\n  this.newDeps.length = 0;\n};\n\n/**\n * Subscriber interface.\n * Will be called when a dependency changes.\n */\nWatcher.prototype.update = function update () {\n  /* istanbul ignore else */\n  if (this.lazy) {\n    this.dirty = true;\n  } else if (this.sync) {\n    this.run();\n  } else {\n    queueWatcher(this);\n  }\n};\n\n/**\n * Scheduler job interface.\n * Will be called by the scheduler.\n */\nWatcher.prototype.run = function run () {\n  if (this.active) {\n    var value = this.get();\n    if (\n      value !== this.value ||\n      // Deep watchers and watchers on Object/Arrays should fire even\n      // when the value is the same, because the value may\n      // have mutated.\n      isObject(value) ||\n      this.deep\n    ) {\n      // set new value\n      var oldValue = this.value;\n      this.value = value;\n      if (this.user) {\n        try {\n          this.cb.call(this.vm, value, oldValue);\n        } catch (e) {\n          handleError(e, this.vm, (\"callback for watcher \\\"\" + (this.expression) + \"\\\"\"));\n        }\n      } else {\n        this.cb.call(this.vm, value, oldValue);\n      }\n    }\n  }\n};\n\n/**\n * Evaluate the value of the watcher.\n * This only gets called for lazy watchers.\n */\nWatcher.prototype.evaluate = function evaluate () {\n  this.value = this.get();\n  this.dirty = false;\n};\n\n/**\n * Depend on all deps collected by this watcher.\n */\nWatcher.prototype.depend = function depend () {\n    var this$1 = this;\n\n  var i = this.deps.length;\n  while (i--) {\n    this$1.deps[i].depend();\n  }\n};\n\n/**\n * Remove self from all dependencies' subscriber list.\n */\nWatcher.prototype.teardown = function teardown () {\n    var this$1 = this;\n\n  if (this.active) {\n    // remove self from vm's watcher list\n    // this is a somewhat expensive operation so we skip it\n    // if the vm is being destroyed.\n    if (!this.vm._isBeingDestroyed) {\n      remove(this.vm._watchers, this);\n    }\n    var i = this.deps.length;\n    while (i--) {\n      this$1.deps[i].removeSub(this$1);\n    }\n    this.active = false;\n  }\n};\n\n/*  */\n\nvar sharedPropertyDefinition = {\n  enumerable: true,\n  configurable: true,\n  get: noop,\n  set: noop\n};\n\nfunction proxy (target, sourceKey, key) {\n  sharedPropertyDefinition.get = function proxyGetter () {\n    return this[sourceKey][key]\n  };\n  sharedPropertyDefinition.set = function proxySetter (val) {\n    this[sourceKey][key] = val;\n  };\n  Object.defineProperty(target, key, sharedPropertyDefinition);\n}\n\nfunction initState (vm) {\n  vm._watchers = [];\n  var opts = vm.$options;\n  if (opts.props) { initProps(vm, opts.props); }\n  if (opts.methods) { initMethods(vm, opts.methods); }\n  if (opts.data) {\n    initData(vm);\n  } else {\n    observe(vm._data = {}, true /* asRootData */);\n  }\n  if (opts.computed) { initComputed(vm, opts.computed); }\n  if (opts.watch && opts.watch !== nativeWatch) {\n    initWatch(vm, opts.watch);\n  }\n}\n\nfunction initProps (vm, propsOptions) {\n  var propsData = vm.$options.propsData || {};\n  var props = vm._props = {};\n  // cache prop keys so that future props updates can iterate using Array\n  // instead of dynamic object key enumeration.\n  var keys = vm.$options._propKeys = [];\n  var isRoot = !vm.$parent;\n  // root instance props should be converted\n  if (!isRoot) {\n    toggleObserving(false);\n  }\n  var loop = function ( key ) {\n    keys.push(key);\n    var value = validateProp(key, propsOptions, propsData, vm);\n    /* istanbul ignore else */\n    if (process.env.NODE_ENV !== 'production') {\n      var hyphenatedKey = hyphenate(key);\n      if (isReservedAttribute(hyphenatedKey) ||\n          config.isReservedAttr(hyphenatedKey)) {\n        warn(\n          (\"\\\"\" + hyphenatedKey + \"\\\" is a reserved attribute and cannot be used as component prop.\"),\n          vm\n        );\n      }\n      defineReactive(props, key, value, function () {\n        if (vm.$parent && !isUpdatingChildComponent) {\n          warn(\n            \"Avoid mutating a prop directly since the value will be \" +\n            \"overwritten whenever the parent component re-renders. \" +\n            \"Instead, use a data or computed property based on the prop's \" +\n            \"value. Prop being mutated: \\\"\" + key + \"\\\"\",\n            vm\n          );\n        }\n      });\n    } else {\n      defineReactive(props, key, value);\n    }\n    // static props are already proxied on the component's prototype\n    // during Vue.extend(). We only need to proxy props defined at\n    // instantiation here.\n    if (!(key in vm)) {\n      proxy(vm, \"_props\", key);\n    }\n  };\n\n  for (var key in propsOptions) loop( key );\n  toggleObserving(true);\n}\n\nfunction initData (vm) {\n  var data = vm.$options.data;\n  data = vm._data = typeof data === 'function'\n    ? getData(data, vm)\n    : data || {};\n  if (!isPlainObject(data)) {\n    data = {};\n    process.env.NODE_ENV !== 'production' && warn(\n      'data functions should return an object:\\n' +\n      'https://vuejs.org/v2/guide/components.html#data-Must-Be-a-Function',\n      vm\n    );\n  }\n  // proxy data on instance\n  var keys = Object.keys(data);\n  var props = vm.$options.props;\n  var methods = vm.$options.methods;\n  var i = keys.length;\n  while (i--) {\n    var key = keys[i];\n    if (process.env.NODE_ENV !== 'production') {\n      if (methods && hasOwn(methods, key)) {\n        warn(\n          (\"Method \\\"\" + key + \"\\\" has already been defined as a data property.\"),\n          vm\n        );\n      }\n    }\n    if (props && hasOwn(props, key)) {\n      process.env.NODE_ENV !== 'production' && warn(\n        \"The data property \\\"\" + key + \"\\\" is already declared as a prop. \" +\n        \"Use prop default value instead.\",\n        vm\n      );\n    } else if (!isReserved(key)) {\n      proxy(vm, \"_data\", key);\n    }\n  }\n  // observe data\n  observe(data, true /* asRootData */);\n}\n\nfunction getData (data, vm) {\n  // #7573 disable dep collection when invoking data getters\n  pushTarget();\n  try {\n    return data.call(vm, vm)\n  } catch (e) {\n    handleError(e, vm, \"data()\");\n    return {}\n  } finally {\n    popTarget();\n  }\n}\n\nvar computedWatcherOptions = { lazy: true };\n\nfunction initComputed (vm, computed) {\n  // $flow-disable-line\n  var watchers = vm._computedWatchers = Object.create(null);\n  // computed properties are just getters during SSR\n  var isSSR = isServerRendering();\n\n  for (var key in computed) {\n    var userDef = computed[key];\n    var getter = typeof userDef === 'function' ? userDef : userDef.get;\n    if (process.env.NODE_ENV !== 'production' && getter == null) {\n      warn(\n        (\"Getter is missing for computed property \\\"\" + key + \"\\\".\"),\n        vm\n      );\n    }\n\n    if (!isSSR) {\n      // create internal watcher for the computed property.\n      watchers[key] = new Watcher(\n        vm,\n        getter || noop,\n        noop,\n        computedWatcherOptions\n      );\n    }\n\n    // component-defined computed properties are already defined on the\n    // component prototype. We only need to define computed properties defined\n    // at instantiation here.\n    if (!(key in vm)) {\n      defineComputed(vm, key, userDef);\n    } else if (process.env.NODE_ENV !== 'production') {\n      if (key in vm.$data) {\n        warn((\"The computed property \\\"\" + key + \"\\\" is already defined in data.\"), vm);\n      } else if (vm.$options.props && key in vm.$options.props) {\n        warn((\"The computed property \\\"\" + key + \"\\\" is already defined as a prop.\"), vm);\n      }\n    }\n  }\n}\n\nfunction defineComputed (\n  target,\n  key,\n  userDef\n) {\n  var shouldCache = !isServerRendering();\n  if (typeof userDef === 'function') {\n    sharedPropertyDefinition.get = shouldCache\n      ? createComputedGetter(key)\n      : userDef;\n    sharedPropertyDefinition.set = noop;\n  } else {\n    sharedPropertyDefinition.get = userDef.get\n      ? shouldCache && userDef.cache !== false\n        ? createComputedGetter(key)\n        : userDef.get\n      : noop;\n    sharedPropertyDefinition.set = userDef.set\n      ? userDef.set\n      : noop;\n  }\n  if (process.env.NODE_ENV !== 'production' &&\n      sharedPropertyDefinition.set === noop) {\n    sharedPropertyDefinition.set = function () {\n      warn(\n        (\"Computed property \\\"\" + key + \"\\\" was assigned to but it has no setter.\"),\n        this\n      );\n    };\n  }\n  Object.defineProperty(target, key, sharedPropertyDefinition);\n}\n\nfunction createComputedGetter (key) {\n  return function computedGetter () {\n    var watcher = this._computedWatchers && this._computedWatchers[key];\n    if (watcher) {\n      if (watcher.dirty) {\n        watcher.evaluate();\n      }\n      if (Dep.target) {\n        watcher.depend();\n      }\n      return watcher.value\n    }\n  }\n}\n\nfunction initMethods (vm, methods) {\n  var props = vm.$options.props;\n  for (var key in methods) {\n    if (process.env.NODE_ENV !== 'production') {\n      if (methods[key] == null) {\n        warn(\n          \"Method \\\"\" + key + \"\\\" has an undefined value in the component definition. \" +\n          \"Did you reference the function correctly?\",\n          vm\n        );\n      }\n      if (props && hasOwn(props, key)) {\n        warn(\n          (\"Method \\\"\" + key + \"\\\" has already been defined as a prop.\"),\n          vm\n        );\n      }\n      if ((key in vm) && isReserved(key)) {\n        warn(\n          \"Method \\\"\" + key + \"\\\" conflicts with an existing Vue instance method. \" +\n          \"Avoid defining component methods that start with _ or $.\"\n        );\n      }\n    }\n    vm[key] = methods[key] == null ? noop : bind(methods[key], vm);\n  }\n}\n\nfunction initWatch (vm, watch) {\n  for (var key in watch) {\n    var handler = watch[key];\n    if (Array.isArray(handler)) {\n      for (var i = 0; i < handler.length; i++) {\n        createWatcher(vm, key, handler[i]);\n      }\n    } else {\n      createWatcher(vm, key, handler);\n    }\n  }\n}\n\nfunction createWatcher (\n  vm,\n  expOrFn,\n  handler,\n  options\n) {\n  if (isPlainObject(handler)) {\n    options = handler;\n    handler = handler.handler;\n  }\n  if (typeof handler === 'string') {\n    handler = vm[handler];\n  }\n  return vm.$watch(expOrFn, handler, options)\n}\n\nfunction stateMixin (Vue) {\n  // flow somehow has problems with directly declared definition object\n  // when using Object.defineProperty, so we have to procedurally build up\n  // the object here.\n  var dataDef = {};\n  dataDef.get = function () { return this._data };\n  var propsDef = {};\n  propsDef.get = function () { return this._props };\n  if (process.env.NODE_ENV !== 'production') {\n    dataDef.set = function (newData) {\n      warn(\n        'Avoid replacing instance root $data. ' +\n        'Use nested data properties instead.',\n        this\n      );\n    };\n    propsDef.set = function () {\n      warn(\"$props is readonly.\", this);\n    };\n  }\n  Object.defineProperty(Vue.prototype, '$data', dataDef);\n  Object.defineProperty(Vue.prototype, '$props', propsDef);\n\n  Vue.prototype.$set = set;\n  Vue.prototype.$delete = del;\n\n  Vue.prototype.$watch = function (\n    expOrFn,\n    cb,\n    options\n  ) {\n    var vm = this;\n    if (isPlainObject(cb)) {\n      return createWatcher(vm, expOrFn, cb, options)\n    }\n    options = options || {};\n    options.user = true;\n    var watcher = new Watcher(vm, expOrFn, cb, options);\n    if (options.immediate) {\n      cb.call(vm, watcher.value);\n    }\n    return function unwatchFn () {\n      watcher.teardown();\n    }\n  };\n}\n\n/*  */\n\nfunction initProvide (vm) {\n  var provide = vm.$options.provide;\n  if (provide) {\n    vm._provided = typeof provide === 'function'\n      ? provide.call(vm)\n      : provide;\n  }\n}\n\nfunction initInjections (vm) {\n  var result = resolveInject(vm.$options.inject, vm);\n  if (result) {\n    toggleObserving(false);\n    Object.keys(result).forEach(function (key) {\n      /* istanbul ignore else */\n      if (process.env.NODE_ENV !== 'production') {\n        defineReactive(vm, key, result[key], function () {\n          warn(\n            \"Avoid mutating an injected value directly since the changes will be \" +\n            \"overwritten whenever the provided component re-renders. \" +\n            \"injection being mutated: \\\"\" + key + \"\\\"\",\n            vm\n          );\n        });\n      } else {\n        defineReactive(vm, key, result[key]);\n      }\n    });\n    toggleObserving(true);\n  }\n}\n\nfunction resolveInject (inject, vm) {\n  if (inject) {\n    // inject is :any because flow is not smart enough to figure out cached\n    var result = Object.create(null);\n    var keys = hasSymbol\n      ? Reflect.ownKeys(inject).filter(function (key) {\n        /* istanbul ignore next */\n        return Object.getOwnPropertyDescriptor(inject, key).enumerable\n      })\n      : Object.keys(inject);\n\n    for (var i = 0; i < keys.length; i++) {\n      var key = keys[i];\n      var provideKey = inject[key].from;\n      var source = vm;\n      while (source) {\n        if (source._provided && hasOwn(source._provided, provideKey)) {\n          result[key] = source._provided[provideKey];\n          break\n        }\n        source = source.$parent;\n      }\n      if (!source) {\n        if ('default' in inject[key]) {\n          var provideDefault = inject[key].default;\n          result[key] = typeof provideDefault === 'function'\n            ? provideDefault.call(vm)\n            : provideDefault;\n        } else if (process.env.NODE_ENV !== 'production') {\n          warn((\"Injection \\\"\" + key + \"\\\" not found\"), vm);\n        }\n      }\n    }\n    return result\n  }\n}\n\n/*  */\n\n/**\n * Runtime helper for rendering v-for lists.\n */\nfunction renderList (\n  val,\n  render\n) {\n  var ret, i, l, keys, key;\n  if (Array.isArray(val) || typeof val === 'string') {\n    ret = new Array(val.length);\n    for (i = 0, l = val.length; i < l; i++) {\n      ret[i] = render(val[i], i);\n    }\n  } else if (typeof val === 'number') {\n    ret = new Array(val);\n    for (i = 0; i < val; i++) {\n      ret[i] = render(i + 1, i);\n    }\n  } else if (isObject(val)) {\n    keys = Object.keys(val);\n    ret = new Array(keys.length);\n    for (i = 0, l = keys.length; i < l; i++) {\n      key = keys[i];\n      ret[i] = render(val[key], key, i);\n    }\n  }\n  if (isDef(ret)) {\n    (ret)._isVList = true;\n  }\n  return ret\n}\n\n/*  */\n\n/**\n * Runtime helper for rendering <slot>\n */\nfunction renderSlot (\n  name,\n  fallback,\n  props,\n  bindObject\n) {\n  var scopedSlotFn = this.$scopedSlots[name];\n  var nodes;\n  if (scopedSlotFn) { // scoped slot\n    props = props || {};\n    if (bindObject) {\n      if (process.env.NODE_ENV !== 'production' && !isObject(bindObject)) {\n        warn(\n          'slot v-bind without argument expects an Object',\n          this\n        );\n      }\n      props = extend(extend({}, bindObject), props);\n    }\n    nodes = scopedSlotFn(props) || fallback;\n  } else {\n    var slotNodes = this.$slots[name];\n    // warn duplicate slot usage\n    if (slotNodes) {\n      if (process.env.NODE_ENV !== 'production' && slotNodes._rendered) {\n        warn(\n          \"Duplicate presence of slot \\\"\" + name + \"\\\" found in the same render tree \" +\n          \"- this will likely cause render errors.\",\n          this\n        );\n      }\n      slotNodes._rendered = true;\n    }\n    nodes = slotNodes || fallback;\n  }\n\n  var target = props && props.slot;\n  if (target) {\n    return this.$createElement('template', { slot: target }, nodes)\n  } else {\n    return nodes\n  }\n}\n\n/*  */\n\n/**\n * Runtime helper for resolving filters\n */\nfunction resolveFilter (id) {\n  return resolveAsset(this.$options, 'filters', id, true) || identity\n}\n\n/*  */\n\nfunction isKeyNotMatch (expect, actual) {\n  if (Array.isArray(expect)) {\n    return expect.indexOf(actual) === -1\n  } else {\n    return expect !== actual\n  }\n}\n\n/**\n * Runtime helper for checking keyCodes from config.\n * exposed as Vue.prototype._k\n * passing in eventKeyName as last argument separately for backwards compat\n */\nfunction checkKeyCodes (\n  eventKeyCode,\n  key,\n  builtInKeyCode,\n  eventKeyName,\n  builtInKeyName\n) {\n  var mappedKeyCode = config.keyCodes[key] || builtInKeyCode;\n  if (builtInKeyName && eventKeyName && !config.keyCodes[key]) {\n    return isKeyNotMatch(builtInKeyName, eventKeyName)\n  } else if (mappedKeyCode) {\n    return isKeyNotMatch(mappedKeyCode, eventKeyCode)\n  } else if (eventKeyName) {\n    return hyphenate(eventKeyName) !== key\n  }\n}\n\n/*  */\n\n/**\n * Runtime helper for merging v-bind=\"object\" into a VNode's data.\n */\nfunction bindObjectProps (\n  data,\n  tag,\n  value,\n  asProp,\n  isSync\n) {\n  if (value) {\n    if (!isObject(value)) {\n      process.env.NODE_ENV !== 'production' && warn(\n        'v-bind without argument expects an Object or Array value',\n        this\n      );\n    } else {\n      if (Array.isArray(value)) {\n        value = toObject(value);\n      }\n      var hash;\n      var loop = function ( key ) {\n        if (\n          key === 'class' ||\n          key === 'style' ||\n          isReservedAttribute(key)\n        ) {\n          hash = data;\n        } else {\n          var type = data.attrs && data.attrs.type;\n          hash = asProp || config.mustUseProp(tag, type, key)\n            ? data.domProps || (data.domProps = {})\n            : data.attrs || (data.attrs = {});\n        }\n        if (!(key in hash)) {\n          hash[key] = value[key];\n\n          if (isSync) {\n            var on = data.on || (data.on = {});\n            on[(\"update:\" + key)] = function ($event) {\n              value[key] = $event;\n            };\n          }\n        }\n      };\n\n      for (var key in value) loop( key );\n    }\n  }\n  return data\n}\n\n/*  */\n\n/**\n * Runtime helper for rendering static trees.\n */\nfunction renderStatic (\n  index,\n  isInFor\n) {\n  var cached = this._staticTrees || (this._staticTrees = []);\n  var tree = cached[index];\n  // if has already-rendered static tree and not inside v-for,\n  // we can reuse the same tree.\n  if (tree && !isInFor) {\n    return tree\n  }\n  // otherwise, render a fresh tree.\n  tree = cached[index] = this.$options.staticRenderFns[index].call(\n    this._renderProxy,\n    null,\n    this // for render fns generated for functional component templates\n  );\n  markStatic(tree, (\"__static__\" + index), false);\n  return tree\n}\n\n/**\n * Runtime helper for v-once.\n * Effectively it means marking the node as static with a unique key.\n */\nfunction markOnce (\n  tree,\n  index,\n  key\n) {\n  markStatic(tree, (\"__once__\" + index + (key ? (\"_\" + key) : \"\")), true);\n  return tree\n}\n\nfunction markStatic (\n  tree,\n  key,\n  isOnce\n) {\n  if (Array.isArray(tree)) {\n    for (var i = 0; i < tree.length; i++) {\n      if (tree[i] && typeof tree[i] !== 'string') {\n        markStaticNode(tree[i], (key + \"_\" + i), isOnce);\n      }\n    }\n  } else {\n    markStaticNode(tree, key, isOnce);\n  }\n}\n\nfunction markStaticNode (node, key, isOnce) {\n  node.isStatic = true;\n  node.key = key;\n  node.isOnce = isOnce;\n}\n\n/*  */\n\nfunction bindObjectListeners (data, value) {\n  if (value) {\n    if (!isPlainObject(value)) {\n      process.env.NODE_ENV !== 'production' && warn(\n        'v-on without argument expects an Object value',\n        this\n      );\n    } else {\n      var on = data.on = data.on ? extend({}, data.on) : {};\n      for (var key in value) {\n        var existing = on[key];\n        var ours = value[key];\n        on[key] = existing ? [].concat(existing, ours) : ours;\n      }\n    }\n  }\n  return data\n}\n\n/*  */\n\nfunction installRenderHelpers (target) {\n  target._o = markOnce;\n  target._n = toNumber;\n  target._s = toString;\n  target._l = renderList;\n  target._t = renderSlot;\n  target._q = looseEqual;\n  target._i = looseIndexOf;\n  target._m = renderStatic;\n  target._f = resolveFilter;\n  target._k = checkKeyCodes;\n  target._b = bindObjectProps;\n  target._v = createTextVNode;\n  target._e = createEmptyVNode;\n  target._u = resolveScopedSlots;\n  target._g = bindObjectListeners;\n}\n\n/*  */\n\nfunction FunctionalRenderContext (\n  data,\n  props,\n  children,\n  parent,\n  Ctor\n) {\n  var options = Ctor.options;\n  // ensure the createElement function in functional components\n  // gets a unique context - this is necessary for correct named slot check\n  var contextVm;\n  if (hasOwn(parent, '_uid')) {\n    contextVm = Object.create(parent);\n    // $flow-disable-line\n    contextVm._original = parent;\n  } else {\n    // the context vm passed in is a functional context as well.\n    // in this case we want to make sure we are able to get a hold to the\n    // real context instance.\n    contextVm = parent;\n    // $flow-disable-line\n    parent = parent._original;\n  }\n  var isCompiled = isTrue(options._compiled);\n  var needNormalization = !isCompiled;\n\n  this.data = data;\n  this.props = props;\n  this.children = children;\n  this.parent = parent;\n  this.listeners = data.on || emptyObject;\n  this.injections = resolveInject(options.inject, parent);\n  this.slots = function () { return resolveSlots(children, parent); };\n\n  // support for compiled functional template\n  if (isCompiled) {\n    // exposing $options for renderStatic()\n    this.$options = options;\n    // pre-resolve slots for renderSlot()\n    this.$slots = this.slots();\n    this.$scopedSlots = data.scopedSlots || emptyObject;\n  }\n\n  if (options._scopeId) {\n    this._c = function (a, b, c, d) {\n      var vnode = createElement(contextVm, a, b, c, d, needNormalization);\n      if (vnode && !Array.isArray(vnode)) {\n        vnode.fnScopeId = options._scopeId;\n        vnode.fnContext = parent;\n      }\n      return vnode\n    };\n  } else {\n    this._c = function (a, b, c, d) { return createElement(contextVm, a, b, c, d, needNormalization); };\n  }\n}\n\ninstallRenderHelpers(FunctionalRenderContext.prototype);\n\nfunction createFunctionalComponent (\n  Ctor,\n  propsData,\n  data,\n  contextVm,\n  children\n) {\n  var options = Ctor.options;\n  var props = {};\n  var propOptions = options.props;\n  if (isDef(propOptions)) {\n    for (var key in propOptions) {\n      props[key] = validateProp(key, propOptions, propsData || emptyObject);\n    }\n  } else {\n    if (isDef(data.attrs)) { mergeProps(props, data.attrs); }\n    if (isDef(data.props)) { mergeProps(props, data.props); }\n  }\n\n  var renderContext = new FunctionalRenderContext(\n    data,\n    props,\n    children,\n    contextVm,\n    Ctor\n  );\n\n  var vnode = options.render.call(null, renderContext._c, renderContext);\n\n  if (vnode instanceof VNode) {\n    return cloneAndMarkFunctionalResult(vnode, data, renderContext.parent, options)\n  } else if (Array.isArray(vnode)) {\n    var vnodes = normalizeChildren(vnode) || [];\n    var res = new Array(vnodes.length);\n    for (var i = 0; i < vnodes.length; i++) {\n      res[i] = cloneAndMarkFunctionalResult(vnodes[i], data, renderContext.parent, options);\n    }\n    return res\n  }\n}\n\nfunction cloneAndMarkFunctionalResult (vnode, data, contextVm, options) {\n  // #7817 clone node before setting fnContext, otherwise if the node is reused\n  // (e.g. it was from a cached normal slot) the fnContext causes named slots\n  // that should not be matched to match.\n  var clone = cloneVNode(vnode);\n  clone.fnContext = contextVm;\n  clone.fnOptions = options;\n  if (data.slot) {\n    (clone.data || (clone.data = {})).slot = data.slot;\n  }\n  return clone\n}\n\nfunction mergeProps (to, from) {\n  for (var key in from) {\n    to[camelize(key)] = from[key];\n  }\n}\n\n/*  */\n\n\n\n\n// Register the component hook to weex native render engine.\n// The hook will be triggered by native, not javascript.\n\n\n// Updates the state of the component to weex native render engine.\n\n/*  */\n\n// https://github.com/Hanks10100/weex-native-directive/tree/master/component\n\n// listening on native callback\n\n/*  */\n\n/*  */\n\n// inline hooks to be invoked on component VNodes during patch\nvar componentVNodeHooks = {\n  init: function init (\n    vnode,\n    hydrating,\n    parentElm,\n    refElm\n  ) {\n    if (\n      vnode.componentInstance &&\n      !vnode.componentInstance._isDestroyed &&\n      vnode.data.keepAlive\n    ) {\n      // kept-alive components, treat as a patch\n      var mountedNode = vnode; // work around flow\n      componentVNodeHooks.prepatch(mountedNode, mountedNode);\n    } else {\n      var child = vnode.componentInstance = createComponentInstanceForVnode(\n        vnode,\n        activeInstance,\n        parentElm,\n        refElm\n      );\n      child.$mount(hydrating ? vnode.elm : undefined, hydrating);\n    }\n  },\n\n  prepatch: function prepatch (oldVnode, vnode) {\n    var options = vnode.componentOptions;\n    var child = vnode.componentInstance = oldVnode.componentInstance;\n    updateChildComponent(\n      child,\n      options.propsData, // updated props\n      options.listeners, // updated listeners\n      vnode, // new parent vnode\n      options.children // new children\n    );\n  },\n\n  insert: function insert (vnode) {\n    var context = vnode.context;\n    var componentInstance = vnode.componentInstance;\n    if (!componentInstance._isMounted) {\n      componentInstance._isMounted = true;\n      callHook(componentInstance, 'mounted');\n    }\n    if (vnode.data.keepAlive) {\n      if (context._isMounted) {\n        // vue-router#1212\n        // During updates, a kept-alive component's child components may\n        // change, so directly walking the tree here may call activated hooks\n        // on incorrect children. Instead we push them into a queue which will\n        // be processed after the whole patch process ended.\n        queueActivatedComponent(componentInstance);\n      } else {\n        activateChildComponent(componentInstance, true /* direct */);\n      }\n    }\n  },\n\n  destroy: function destroy (vnode) {\n    var componentInstance = vnode.componentInstance;\n    if (!componentInstance._isDestroyed) {\n      if (!vnode.data.keepAlive) {\n        componentInstance.$destroy();\n      } else {\n        deactivateChildComponent(componentInstance, true /* direct */);\n      }\n    }\n  }\n};\n\nvar hooksToMerge = Object.keys(componentVNodeHooks);\n\nfunction createComponent (\n  Ctor,\n  data,\n  context,\n  children,\n  tag\n) {\n  if (isUndef(Ctor)) {\n    return\n  }\n\n  var baseCtor = context.$options._base;\n\n  // plain options object: turn it into a constructor\n  if (isObject(Ctor)) {\n    Ctor = baseCtor.extend(Ctor);\n  }\n\n  // if at this stage it's not a constructor or an async component factory,\n  // reject.\n  if (typeof Ctor !== 'function') {\n    if (process.env.NODE_ENV !== 'production') {\n      warn((\"Invalid Component definition: \" + (String(Ctor))), context);\n    }\n    return\n  }\n\n  // async component\n  var asyncFactory;\n  if (isUndef(Ctor.cid)) {\n    asyncFactory = Ctor;\n    Ctor = resolveAsyncComponent(asyncFactory, baseCtor, context);\n    if (Ctor === undefined) {\n      // return a placeholder node for async component, which is rendered\n      // as a comment node but preserves all the raw information for the node.\n      // the information will be used for async server-rendering and hydration.\n      return createAsyncPlaceholder(\n        asyncFactory,\n        data,\n        context,\n        children,\n        tag\n      )\n    }\n  }\n\n  data = data || {};\n\n  // resolve constructor options in case global mixins are applied after\n  // component constructor creation\n  resolveConstructorOptions(Ctor);\n\n  // transform component v-model data into props & events\n  if (isDef(data.model)) {\n    transformModel(Ctor.options, data);\n  }\n\n  // extract props\n  var propsData = extractPropsFromVNodeData(data, Ctor, tag);\n\n  // functional component\n  if (isTrue(Ctor.options.functional)) {\n    return createFunctionalComponent(Ctor, propsData, data, context, children)\n  }\n\n  // extract listeners, since these needs to be treated as\n  // child component listeners instead of DOM listeners\n  var listeners = data.on;\n  // replace with listeners with .native modifier\n  // so it gets processed during parent component patch.\n  data.on = data.nativeOn;\n\n  if (isTrue(Ctor.options.abstract)) {\n    // abstract components do not keep anything\n    // other than props & listeners & slot\n\n    // work around flow\n    var slot = data.slot;\n    data = {};\n    if (slot) {\n      data.slot = slot;\n    }\n  }\n\n  // install component management hooks onto the placeholder node\n  installComponentHooks(data);\n\n  // return a placeholder vnode\n  var name = Ctor.options.name || tag;\n  var vnode = new VNode(\n    (\"vue-component-\" + (Ctor.cid) + (name ? (\"-\" + name) : '')),\n    data, undefined, undefined, undefined, context,\n    { Ctor: Ctor, propsData: propsData, listeners: listeners, tag: tag, children: children },\n    asyncFactory\n  );\n\n  // Weex specific: invoke recycle-list optimized @render function for\n  // extracting cell-slot template.\n  // https://github.com/Hanks10100/weex-native-directive/tree/master/component\n  /* istanbul ignore if */\n  return vnode\n}\n\nfunction createComponentInstanceForVnode (\n  vnode, // we know it's MountedComponentVNode but flow doesn't\n  parent, // activeInstance in lifecycle state\n  parentElm,\n  refElm\n) {\n  var options = {\n    _isComponent: true,\n    parent: parent,\n    _parentVnode: vnode,\n    _parentElm: parentElm || null,\n    _refElm: refElm || null\n  };\n  // check inline-template render functions\n  var inlineTemplate = vnode.data.inlineTemplate;\n  if (isDef(inlineTemplate)) {\n    options.render = inlineTemplate.render;\n    options.staticRenderFns = inlineTemplate.staticRenderFns;\n  }\n  return new vnode.componentOptions.Ctor(options)\n}\n\nfunction installComponentHooks (data) {\n  var hooks = data.hook || (data.hook = {});\n  for (var i = 0; i < hooksToMerge.length; i++) {\n    var key = hooksToMerge[i];\n    hooks[key] = componentVNodeHooks[key];\n  }\n}\n\n// transform component v-model info (value and callback) into\n// prop and event handler respectively.\nfunction transformModel (options, data) {\n  var prop = (options.model && options.model.prop) || 'value';\n  var event = (options.model && options.model.event) || 'input';(data.props || (data.props = {}))[prop] = data.model.value;\n  var on = data.on || (data.on = {});\n  if (isDef(on[event])) {\n    on[event] = [data.model.callback].concat(on[event]);\n  } else {\n    on[event] = data.model.callback;\n  }\n}\n\n/*  */\n\nvar SIMPLE_NORMALIZE = 1;\nvar ALWAYS_NORMALIZE = 2;\n\n// wrapper function for providing a more flexible interface\n// without getting yelled at by flow\nfunction createElement (\n  context,\n  tag,\n  data,\n  children,\n  normalizationType,\n  alwaysNormalize\n) {\n  if (Array.isArray(data) || isPrimitive(data)) {\n    normalizationType = children;\n    children = data;\n    data = undefined;\n  }\n  if (isTrue(alwaysNormalize)) {\n    normalizationType = ALWAYS_NORMALIZE;\n  }\n  return _createElement(context, tag, data, children, normalizationType)\n}\n\nfunction _createElement (\n  context,\n  tag,\n  data,\n  children,\n  normalizationType\n) {\n  if (isDef(data) && isDef((data).__ob__)) {\n    process.env.NODE_ENV !== 'production' && warn(\n      \"Avoid using observed data object as vnode data: \" + (JSON.stringify(data)) + \"\\n\" +\n      'Always create fresh vnode data objects in each render!',\n      context\n    );\n    return createEmptyVNode()\n  }\n  // object syntax in v-bind\n  if (isDef(data) && isDef(data.is)) {\n    tag = data.is;\n  }\n  if (!tag) {\n    // in case of component :is set to falsy value\n    return createEmptyVNode()\n  }\n  // warn against non-primitive key\n  if (process.env.NODE_ENV !== 'production' &&\n    isDef(data) && isDef(data.key) && !isPrimitive(data.key)\n  ) {\n    {\n      warn(\n        'Avoid using non-primitive value as key, ' +\n        'use string/number value instead.',\n        context\n      );\n    }\n  }\n  // support single function children as default scoped slot\n  if (Array.isArray(children) &&\n    typeof children[0] === 'function'\n  ) {\n    data = data || {};\n    data.scopedSlots = { default: children[0] };\n    children.length = 0;\n  }\n  if (normalizationType === ALWAYS_NORMALIZE) {\n    children = normalizeChildren(children);\n  } else if (normalizationType === SIMPLE_NORMALIZE) {\n    children = simpleNormalizeChildren(children);\n  }\n  var vnode, ns;\n  if (typeof tag === 'string') {\n    var Ctor;\n    ns = (context.$vnode && context.$vnode.ns) || config.getTagNamespace(tag);\n    if (config.isReservedTag(tag)) {\n      // platform built-in elements\n      vnode = new VNode(\n        config.parsePlatformTagName(tag), data, children,\n        undefined, undefined, context\n      );\n    } else if (isDef(Ctor = resolveAsset(context.$options, 'components', tag))) {\n      // component\n      vnode = createComponent(Ctor, data, context, children, tag);\n    } else {\n      // unknown or unlisted namespaced elements\n      // check at runtime because it may get assigned a namespace when its\n      // parent normalizes children\n      vnode = new VNode(\n        tag, data, children,\n        undefined, undefined, context\n      );\n    }\n  } else {\n    // direct component options / constructor\n    vnode = createComponent(tag, data, context, children);\n  }\n  if (Array.isArray(vnode)) {\n    return vnode\n  } else if (isDef(vnode)) {\n    if (isDef(ns)) { applyNS(vnode, ns); }\n    if (isDef(data)) { registerDeepBindings(data); }\n    return vnode\n  } else {\n    return createEmptyVNode()\n  }\n}\n\nfunction applyNS (vnode, ns, force) {\n  vnode.ns = ns;\n  if (vnode.tag === 'foreignObject') {\n    // use default namespace inside foreignObject\n    ns = undefined;\n    force = true;\n  }\n  if (isDef(vnode.children)) {\n    for (var i = 0, l = vnode.children.length; i < l; i++) {\n      var child = vnode.children[i];\n      if (isDef(child.tag) && (\n        isUndef(child.ns) || (isTrue(force) && child.tag !== 'svg'))) {\n        applyNS(child, ns, force);\n      }\n    }\n  }\n}\n\n// ref #5318\n// necessary to ensure parent re-render when deep bindings like :style and\n// :class are used on slot nodes\nfunction registerDeepBindings (data) {\n  if (isObject(data.style)) {\n    traverse(data.style);\n  }\n  if (isObject(data.class)) {\n    traverse(data.class);\n  }\n}\n\n/*  */\n\nfunction initRender (vm) {\n  vm._vnode = null; // the root of the child tree\n  vm._staticTrees = null; // v-once cached trees\n  var options = vm.$options;\n  var parentVnode = vm.$vnode = options._parentVnode; // the placeholder node in parent tree\n  var renderContext = parentVnode && parentVnode.context;\n  vm.$slots = resolveSlots(options._renderChildren, renderContext);\n  vm.$scopedSlots = emptyObject;\n  // bind the createElement fn to this instance\n  // so that we get proper render context inside it.\n  // args order: tag, data, children, normalizationType, alwaysNormalize\n  // internal version is used by render functions compiled from templates\n  vm._c = function (a, b, c, d) { return createElement(vm, a, b, c, d, false); };\n  // normalization is always applied for the public version, used in\n  // user-written render functions.\n  vm.$createElement = function (a, b, c, d) { return createElement(vm, a, b, c, d, true); };\n\n  // $attrs & $listeners are exposed for easier HOC creation.\n  // they need to be reactive so that HOCs using them are always updated\n  var parentData = parentVnode && parentVnode.data;\n\n  /* istanbul ignore else */\n  if (process.env.NODE_ENV !== 'production') {\n    defineReactive(vm, '$attrs', parentData && parentData.attrs || emptyObject, function () {\n      !isUpdatingChildComponent && warn(\"$attrs is readonly.\", vm);\n    }, true);\n    defineReactive(vm, '$listeners', options._parentListeners || emptyObject, function () {\n      !isUpdatingChildComponent && warn(\"$listeners is readonly.\", vm);\n    }, true);\n  } else {\n    defineReactive(vm, '$attrs', parentData && parentData.attrs || emptyObject, null, true);\n    defineReactive(vm, '$listeners', options._parentListeners || emptyObject, null, true);\n  }\n}\n\nfunction renderMixin (Vue) {\n  // install runtime convenience helpers\n  installRenderHelpers(Vue.prototype);\n\n  Vue.prototype.$nextTick = function (fn) {\n    return nextTick(fn, this)\n  };\n\n  Vue.prototype._render = function () {\n    var vm = this;\n    var ref = vm.$options;\n    var render = ref.render;\n    var _parentVnode = ref._parentVnode;\n\n    // reset _rendered flag on slots for duplicate slot check\n    if (process.env.NODE_ENV !== 'production') {\n      for (var key in vm.$slots) {\n        // $flow-disable-line\n        vm.$slots[key]._rendered = false;\n      }\n    }\n\n    if (_parentVnode) {\n      vm.$scopedSlots = _parentVnode.data.scopedSlots || emptyObject;\n    }\n\n    // set parent vnode. this allows render functions to have access\n    // to the data on the placeholder node.\n    vm.$vnode = _parentVnode;\n    // render self\n    var vnode;\n    try {\n      vnode = render.call(vm._renderProxy, vm.$createElement);\n    } catch (e) {\n      handleError(e, vm, \"render\");\n      // return error render result,\n      // or previous vnode to prevent render error causing blank component\n      /* istanbul ignore else */\n      if (process.env.NODE_ENV !== 'production') {\n        if (vm.$options.renderError) {\n          try {\n            vnode = vm.$options.renderError.call(vm._renderProxy, vm.$createElement, e);\n          } catch (e) {\n            handleError(e, vm, \"renderError\");\n            vnode = vm._vnode;\n          }\n        } else {\n          vnode = vm._vnode;\n        }\n      } else {\n        vnode = vm._vnode;\n      }\n    }\n    // return empty vnode in case the render function errored out\n    if (!(vnode instanceof VNode)) {\n      if (process.env.NODE_ENV !== 'production' && Array.isArray(vnode)) {\n        warn(\n          'Multiple root nodes returned from render function. Render function ' +\n          'should return a single root node.',\n          vm\n        );\n      }\n      vnode = createEmptyVNode();\n    }\n    // set parent\n    vnode.parent = _parentVnode;\n    return vnode\n  };\n}\n\n/*  */\n\nvar uid$3 = 0;\n\nfunction initMixin (Vue) {\n  Vue.prototype._init = function (options) {\n    var vm = this;\n    // a uid\n    vm._uid = uid$3++;\n\n    var startTag, endTag;\n    /* istanbul ignore if */\n    if (process.env.NODE_ENV !== 'production' && config.performance && mark) {\n      startTag = \"vue-perf-start:\" + (vm._uid);\n      endTag = \"vue-perf-end:\" + (vm._uid);\n      mark(startTag);\n    }\n\n    // a flag to avoid this being observed\n    vm._isVue = true;\n    // merge options\n    if (options && options._isComponent) {\n      // optimize internal component instantiation\n      // since dynamic options merging is pretty slow, and none of the\n      // internal component options needs special treatment.\n      initInternalComponent(vm, options);\n    } else {\n      vm.$options = mergeOptions(\n        resolveConstructorOptions(vm.constructor),\n        options || {},\n        vm\n      );\n    }\n    /* istanbul ignore else */\n    if (process.env.NODE_ENV !== 'production') {\n      initProxy(vm);\n    } else {\n      vm._renderProxy = vm;\n    }\n    // expose real self\n    vm._self = vm;\n    initLifecycle(vm);\n    initEvents(vm);\n    initRender(vm);\n    callHook(vm, 'beforeCreate');\n    initInjections(vm); // resolve injections before data/props\n    initState(vm);\n    initProvide(vm); // resolve provide after data/props\n    callHook(vm, 'created');\n\n    /* istanbul ignore if */\n    if (process.env.NODE_ENV !== 'production' && config.performance && mark) {\n      vm._name = formatComponentName(vm, false);\n      mark(endTag);\n      measure((\"vue \" + (vm._name) + \" init\"), startTag, endTag);\n    }\n\n    if (vm.$options.el) {\n      vm.$mount(vm.$options.el);\n    }\n  };\n}\n\nfunction initInternalComponent (vm, options) {\n  var opts = vm.$options = Object.create(vm.constructor.options);\n  // doing this because it's faster than dynamic enumeration.\n  var parentVnode = options._parentVnode;\n  opts.parent = options.parent;\n  opts._parentVnode = parentVnode;\n  opts._parentElm = options._parentElm;\n  opts._refElm = options._refElm;\n\n  var vnodeComponentOptions = parentVnode.componentOptions;\n  opts.propsData = vnodeComponentOptions.propsData;\n  opts._parentListeners = vnodeComponentOptions.listeners;\n  opts._renderChildren = vnodeComponentOptions.children;\n  opts._componentTag = vnodeComponentOptions.tag;\n\n  if (options.render) {\n    opts.render = options.render;\n    opts.staticRenderFns = options.staticRenderFns;\n  }\n}\n\nfunction resolveConstructorOptions (Ctor) {\n  var options = Ctor.options;\n  if (Ctor.super) {\n    var superOptions = resolveConstructorOptions(Ctor.super);\n    var cachedSuperOptions = Ctor.superOptions;\n    if (superOptions !== cachedSuperOptions) {\n      // super option changed,\n      // need to resolve new options.\n      Ctor.superOptions = superOptions;\n      // check if there are any late-modified/attached options (#4976)\n      var modifiedOptions = resolveModifiedOptions(Ctor);\n      // update base extend options\n      if (modifiedOptions) {\n        extend(Ctor.extendOptions, modifiedOptions);\n      }\n      options = Ctor.options = mergeOptions(superOptions, Ctor.extendOptions);\n      if (options.name) {\n        options.components[options.name] = Ctor;\n      }\n    }\n  }\n  return options\n}\n\nfunction resolveModifiedOptions (Ctor) {\n  var modified;\n  var latest = Ctor.options;\n  var extended = Ctor.extendOptions;\n  var sealed = Ctor.sealedOptions;\n  for (var key in latest) {\n    if (latest[key] !== sealed[key]) {\n      if (!modified) { modified = {}; }\n      modified[key] = dedupe(latest[key], extended[key], sealed[key]);\n    }\n  }\n  return modified\n}\n\nfunction dedupe (latest, extended, sealed) {\n  // compare latest and sealed to ensure lifecycle hooks won't be duplicated\n  // between merges\n  if (Array.isArray(latest)) {\n    var res = [];\n    sealed = Array.isArray(sealed) ? sealed : [sealed];\n    extended = Array.isArray(extended) ? extended : [extended];\n    for (var i = 0; i < latest.length; i++) {\n      // push original options and not sealed options to exclude duplicated options\n      if (extended.indexOf(latest[i]) >= 0 || sealed.indexOf(latest[i]) < 0) {\n        res.push(latest[i]);\n      }\n    }\n    return res\n  } else {\n    return latest\n  }\n}\n\nfunction Vue (options) {\n  if (process.env.NODE_ENV !== 'production' &&\n    !(this instanceof Vue)\n  ) {\n    warn('Vue is a constructor and should be called with the `new` keyword');\n  }\n  this._init(options);\n}\n\ninitMixin(Vue);\nstateMixin(Vue);\neventsMixin(Vue);\nlifecycleMixin(Vue);\nrenderMixin(Vue);\n\n/*  */\n\nfunction initUse (Vue) {\n  Vue.use = function (plugin) {\n    var installedPlugins = (this._installedPlugins || (this._installedPlugins = []));\n    if (installedPlugins.indexOf(plugin) > -1) {\n      return this\n    }\n\n    // additional parameters\n    var args = toArray(arguments, 1);\n    args.unshift(this);\n    if (typeof plugin.install === 'function') {\n      plugin.install.apply(plugin, args);\n    } else if (typeof plugin === 'function') {\n      plugin.apply(null, args);\n    }\n    installedPlugins.push(plugin);\n    return this\n  };\n}\n\n/*  */\n\nfunction initMixin$1 (Vue) {\n  Vue.mixin = function (mixin) {\n    this.options = mergeOptions(this.options, mixin);\n    return this\n  };\n}\n\n/*  */\n\nfunction initExtend (Vue) {\n  /**\n   * Each instance constructor, including Vue, has a unique\n   * cid. This enables us to create wrapped \"child\n   * constructors\" for prototypal inheritance and cache them.\n   */\n  Vue.cid = 0;\n  var cid = 1;\n\n  /**\n   * Class inheritance\n   */\n  Vue.extend = function (extendOptions) {\n    extendOptions = extendOptions || {};\n    var Super = this;\n    var SuperId = Super.cid;\n    var cachedCtors = extendOptions._Ctor || (extendOptions._Ctor = {});\n    if (cachedCtors[SuperId]) {\n      return cachedCtors[SuperId]\n    }\n\n    var name = extendOptions.name || Super.options.name;\n    if (process.env.NODE_ENV !== 'production' && name) {\n      validateComponentName(name);\n    }\n\n    var Sub = function VueComponent (options) {\n      this._init(options);\n    };\n    Sub.prototype = Object.create(Super.prototype);\n    Sub.prototype.constructor = Sub;\n    Sub.cid = cid++;\n    Sub.options = mergeOptions(\n      Super.options,\n      extendOptions\n    );\n    Sub['super'] = Super;\n\n    // For props and computed properties, we define the proxy getters on\n    // the Vue instances at extension time, on the extended prototype. This\n    // avoids Object.defineProperty calls for each instance created.\n    if (Sub.options.props) {\n      initProps$1(Sub);\n    }\n    if (Sub.options.computed) {\n      initComputed$1(Sub);\n    }\n\n    // allow further extension/mixin/plugin usage\n    Sub.extend = Super.extend;\n    Sub.mixin = Super.mixin;\n    Sub.use = Super.use;\n\n    // create asset registers, so extended classes\n    // can have their private assets too.\n    ASSET_TYPES.forEach(function (type) {\n      Sub[type] = Super[type];\n    });\n    // enable recursive self-lookup\n    if (name) {\n      Sub.options.components[name] = Sub;\n    }\n\n    // keep a reference to the super options at extension time.\n    // later at instantiation we can check if Super's options have\n    // been updated.\n    Sub.superOptions = Super.options;\n    Sub.extendOptions = extendOptions;\n    Sub.sealedOptions = extend({}, Sub.options);\n\n    // cache constructor\n    cachedCtors[SuperId] = Sub;\n    return Sub\n  };\n}\n\nfunction initProps$1 (Comp) {\n  var props = Comp.options.props;\n  for (var key in props) {\n    proxy(Comp.prototype, \"_props\", key);\n  }\n}\n\nfunction initComputed$1 (Comp) {\n  var computed = Comp.options.computed;\n  for (var key in computed) {\n    defineComputed(Comp.prototype, key, computed[key]);\n  }\n}\n\n/*  */\n\nfunction initAssetRegisters (Vue) {\n  /**\n   * Create asset registration methods.\n   */\n  ASSET_TYPES.forEach(function (type) {\n    Vue[type] = function (\n      id,\n      definition\n    ) {\n      if (!definition) {\n        return this.options[type + 's'][id]\n      } else {\n        /* istanbul ignore if */\n        if (process.env.NODE_ENV !== 'production' && type === 'component') {\n          validateComponentName(id);\n        }\n        if (type === 'component' && isPlainObject(definition)) {\n          definition.name = definition.name || id;\n          definition = this.options._base.extend(definition);\n        }\n        if (type === 'directive' && typeof definition === 'function') {\n          definition = { bind: definition, update: definition };\n        }\n        this.options[type + 's'][id] = definition;\n        return definition\n      }\n    };\n  });\n}\n\n/*  */\n\nfunction getComponentName (opts) {\n  return opts && (opts.Ctor.options.name || opts.tag)\n}\n\nfunction matches (pattern, name) {\n  if (Array.isArray(pattern)) {\n    return pattern.indexOf(name) > -1\n  } else if (typeof pattern === 'string') {\n    return pattern.split(',').indexOf(name) > -1\n  } else if (isRegExp(pattern)) {\n    return pattern.test(name)\n  }\n  /* istanbul ignore next */\n  return false\n}\n\nfunction pruneCache (keepAliveInstance, filter) {\n  var cache = keepAliveInstance.cache;\n  var keys = keepAliveInstance.keys;\n  var _vnode = keepAliveInstance._vnode;\n  for (var key in cache) {\n    var cachedNode = cache[key];\n    if (cachedNode) {\n      var name = getComponentName(cachedNode.componentOptions);\n      if (name && !filter(name)) {\n        pruneCacheEntry(cache, key, keys, _vnode);\n      }\n    }\n  }\n}\n\nfunction pruneCacheEntry (\n  cache,\n  key,\n  keys,\n  current\n) {\n  var cached$$1 = cache[key];\n  if (cached$$1 && (!current || cached$$1.tag !== current.tag)) {\n    cached$$1.componentInstance.$destroy();\n  }\n  cache[key] = null;\n  remove(keys, key);\n}\n\nvar patternTypes = [String, RegExp, Array];\n\nvar KeepAlive = {\n  name: 'keep-alive',\n  abstract: true,\n\n  props: {\n    include: patternTypes,\n    exclude: patternTypes,\n    max: [String, Number]\n  },\n\n  created: function created () {\n    this.cache = Object.create(null);\n    this.keys = [];\n  },\n\n  destroyed: function destroyed () {\n    var this$1 = this;\n\n    for (var key in this$1.cache) {\n      pruneCacheEntry(this$1.cache, key, this$1.keys);\n    }\n  },\n\n  mounted: function mounted () {\n    var this$1 = this;\n\n    this.$watch('include', function (val) {\n      pruneCache(this$1, function (name) { return matches(val, name); });\n    });\n    this.$watch('exclude', function (val) {\n      pruneCache(this$1, function (name) { return !matches(val, name); });\n    });\n  },\n\n  render: function render () {\n    var slot = this.$slots.default;\n    var vnode = getFirstComponentChild(slot);\n    var componentOptions = vnode && vnode.componentOptions;\n    if (componentOptions) {\n      // check pattern\n      var name = getComponentName(componentOptions);\n      var ref = this;\n      var include = ref.include;\n      var exclude = ref.exclude;\n      if (\n        // not included\n        (include && (!name || !matches(include, name))) ||\n        // excluded\n        (exclude && name && matches(exclude, name))\n      ) {\n        return vnode\n      }\n\n      var ref$1 = this;\n      var cache = ref$1.cache;\n      var keys = ref$1.keys;\n      var key = vnode.key == null\n        // same constructor may get registered as different local components\n        // so cid alone is not enough (#3269)\n        ? componentOptions.Ctor.cid + (componentOptions.tag ? (\"::\" + (componentOptions.tag)) : '')\n        : vnode.key;\n      if (cache[key]) {\n        vnode.componentInstance = cache[key].componentInstance;\n        // make current key freshest\n        remove(keys, key);\n        keys.push(key);\n      } else {\n        cache[key] = vnode;\n        keys.push(key);\n        // prune oldest entry\n        if (this.max && keys.length > parseInt(this.max)) {\n          pruneCacheEntry(cache, keys[0], keys, this._vnode);\n        }\n      }\n\n      vnode.data.keepAlive = true;\n    }\n    return vnode || (slot && slot[0])\n  }\n}\n\nvar builtInComponents = {\n  KeepAlive: KeepAlive\n}\n\n/*  */\n\nfunction initGlobalAPI (Vue) {\n  // config\n  var configDef = {};\n  configDef.get = function () { return config; };\n  if (process.env.NODE_ENV !== 'production') {\n    configDef.set = function () {\n      warn(\n        'Do not replace the Vue.config object, set individual fields instead.'\n      );\n    };\n  }\n  Object.defineProperty(Vue, 'config', configDef);\n\n  // exposed util methods.\n  // NOTE: these are not considered part of the public API - avoid relying on\n  // them unless you are aware of the risk.\n  Vue.util = {\n    warn: warn,\n    extend: extend,\n    mergeOptions: mergeOptions,\n    defineReactive: defineReactive\n  };\n\n  Vue.set = set;\n  Vue.delete = del;\n  Vue.nextTick = nextTick;\n\n  Vue.options = Object.create(null);\n  ASSET_TYPES.forEach(function (type) {\n    Vue.options[type + 's'] = Object.create(null);\n  });\n\n  // this is used to identify the \"base\" constructor to extend all plain-object\n  // components with in Weex's multi-instance scenarios.\n  Vue.options._base = Vue;\n\n  extend(Vue.options.components, builtInComponents);\n\n  initUse(Vue);\n  initMixin$1(Vue);\n  initExtend(Vue);\n  initAssetRegisters(Vue);\n}\n\ninitGlobalAPI(Vue);\n\nObject.defineProperty(Vue.prototype, '$isServer', {\n  get: isServerRendering\n});\n\nObject.defineProperty(Vue.prototype, '$ssrContext', {\n  get: function get () {\n    /* istanbul ignore next */\n    return this.$vnode && this.$vnode.ssrContext\n  }\n});\n\n// expose FunctionalRenderContext for ssr runtime helper installation\nObject.defineProperty(Vue, 'FunctionalRenderContext', {\n  value: FunctionalRenderContext\n});\n\nVue.version = '2.5.16';\n\n/*  */\n\n// these are reserved for web because they are directly compiled away\n// during template compilation\nvar isReservedAttr = makeMap('style,class');\n\n// attributes that should be using props for binding\nvar acceptValue = makeMap('input,textarea,option,select,progress');\nvar mustUseProp = function (tag, type, attr) {\n  return (\n    (attr === 'value' && acceptValue(tag)) && type !== 'button' ||\n    (attr === 'selected' && tag === 'option') ||\n    (attr === 'checked' && tag === 'input') ||\n    (attr === 'muted' && tag === 'video')\n  )\n};\n\nvar isEnumeratedAttr = makeMap('contenteditable,draggable,spellcheck');\n\nvar isBooleanAttr = makeMap(\n  'allowfullscreen,async,autofocus,autoplay,checked,compact,controls,declare,' +\n  'default,defaultchecked,defaultmuted,defaultselected,defer,disabled,' +\n  'enabled,formnovalidate,hidden,indeterminate,inert,ismap,itemscope,loop,multiple,' +\n  'muted,nohref,noresize,noshade,novalidate,nowrap,open,pauseonexit,readonly,' +\n  'required,reversed,scoped,seamless,selected,sortable,translate,' +\n  'truespeed,typemustmatch,visible'\n);\n\nvar xlinkNS = 'http://www.w3.org/1999/xlink';\n\nvar isXlink = function (name) {\n  return name.charAt(5) === ':' && name.slice(0, 5) === 'xlink'\n};\n\nvar getXlinkProp = function (name) {\n  return isXlink(name) ? name.slice(6, name.length) : ''\n};\n\nvar isFalsyAttrValue = function (val) {\n  return val == null || val === false\n};\n\n/*  */\n\nfunction genClassForVnode (vnode) {\n  var data = vnode.data;\n  var parentNode = vnode;\n  var childNode = vnode;\n  while (isDef(childNode.componentInstance)) {\n    childNode = childNode.componentInstance._vnode;\n    if (childNode && childNode.data) {\n      data = mergeClassData(childNode.data, data);\n    }\n  }\n  while (isDef(parentNode = parentNode.parent)) {\n    if (parentNode && parentNode.data) {\n      data = mergeClassData(data, parentNode.data);\n    }\n  }\n  return renderClass(data.staticClass, data.class)\n}\n\nfunction mergeClassData (child, parent) {\n  return {\n    staticClass: concat(child.staticClass, parent.staticClass),\n    class: isDef(child.class)\n      ? [child.class, parent.class]\n      : parent.class\n  }\n}\n\nfunction renderClass (\n  staticClass,\n  dynamicClass\n) {\n  if (isDef(staticClass) || isDef(dynamicClass)) {\n    return concat(staticClass, stringifyClass(dynamicClass))\n  }\n  /* istanbul ignore next */\n  return ''\n}\n\nfunction concat (a, b) {\n  return a ? b ? (a + ' ' + b) : a : (b || '')\n}\n\nfunction stringifyClass (value) {\n  if (Array.isArray(value)) {\n    return stringifyArray(value)\n  }\n  if (isObject(value)) {\n    return stringifyObject(value)\n  }\n  if (typeof value === 'string') {\n    return value\n  }\n  /* istanbul ignore next */\n  return ''\n}\n\nfunction stringifyArray (value) {\n  var res = '';\n  var stringified;\n  for (var i = 0, l = value.length; i < l; i++) {\n    if (isDef(stringified = stringifyClass(value[i])) && stringified !== '') {\n      if (res) { res += ' '; }\n      res += stringified;\n    }\n  }\n  return res\n}\n\nfunction stringifyObject (value) {\n  var res = '';\n  for (var key in value) {\n    if (value[key]) {\n      if (res) { res += ' '; }\n      res += key;\n    }\n  }\n  return res\n}\n\n/*  */\n\nvar namespaceMap = {\n  svg: 'http://www.w3.org/2000/svg',\n  math: 'http://www.w3.org/1998/Math/MathML'\n};\n\nvar isHTMLTag = makeMap(\n  'html,body,base,head,link,meta,style,title,' +\n  'address,article,aside,footer,header,h1,h2,h3,h4,h5,h6,hgroup,nav,section,' +\n  'div,dd,dl,dt,figcaption,figure,picture,hr,img,li,main,ol,p,pre,ul,' +\n  'a,b,abbr,bdi,bdo,br,cite,code,data,dfn,em,i,kbd,mark,q,rp,rt,rtc,ruby,' +\n  's,samp,small,span,strong,sub,sup,time,u,var,wbr,area,audio,map,track,video,' +\n  'embed,object,param,source,canvas,script,noscript,del,ins,' +\n  'caption,col,colgroup,table,thead,tbody,td,th,tr,' +\n  'button,datalist,fieldset,form,input,label,legend,meter,optgroup,option,' +\n  'output,progress,select,textarea,' +\n  'details,dialog,menu,menuitem,summary,' +\n  'content,element,shadow,template,blockquote,iframe,tfoot'\n);\n\n// this map is intentionally selective, only covering SVG elements that may\n// contain child elements.\nvar isSVG = makeMap(\n  'svg,animate,circle,clippath,cursor,defs,desc,ellipse,filter,font-face,' +\n  'foreignObject,g,glyph,image,line,marker,mask,missing-glyph,path,pattern,' +\n  'polygon,polyline,rect,switch,symbol,text,textpath,tspan,use,view',\n  true\n);\n\nvar isPreTag = function (tag) { return tag === 'pre'; };\n\nvar isReservedTag = function (tag) {\n  return isHTMLTag(tag) || isSVG(tag)\n};\n\nfunction getTagNamespace (tag) {\n  if (isSVG(tag)) {\n    return 'svg'\n  }\n  // basic support for MathML\n  // note it doesn't support other MathML elements being component roots\n  if (tag === 'math') {\n    return 'math'\n  }\n}\n\nvar unknownElementCache = Object.create(null);\nfunction isUnknownElement (tag) {\n  /* istanbul ignore if */\n  if (!inBrowser) {\n    return true\n  }\n  if (isReservedTag(tag)) {\n    return false\n  }\n  tag = tag.toLowerCase();\n  /* istanbul ignore if */\n  if (unknownElementCache[tag] != null) {\n    return unknownElementCache[tag]\n  }\n  var el = document.createElement(tag);\n  if (tag.indexOf('-') > -1) {\n    // http://stackoverflow.com/a/28210364/1070244\n    return (unknownElementCache[tag] = (\n      el.constructor === window.HTMLUnknownElement ||\n      el.constructor === window.HTMLElement\n    ))\n  } else {\n    return (unknownElementCache[tag] = /HTMLUnknownElement/.test(el.toString()))\n  }\n}\n\nvar isTextInputType = makeMap('text,number,password,search,email,tel,url');\n\n/*  */\n\n/**\n * Query an element selector if it's not an element already.\n */\nfunction query (el) {\n  if (typeof el === 'string') {\n    var selected = document.querySelector(el);\n    if (!selected) {\n      process.env.NODE_ENV !== 'production' && warn(\n        'Cannot find element: ' + el\n      );\n      return document.createElement('div')\n    }\n    return selected\n  } else {\n    return el\n  }\n}\n\n/*  */\n\nfunction createElement$1 (tagName, vnode) {\n  var elm = document.createElement(tagName);\n  if (tagName !== 'select') {\n    return elm\n  }\n  // false or null will remove the attribute but undefined will not\n  if (vnode.data && vnode.data.attrs && vnode.data.attrs.multiple !== undefined) {\n    elm.setAttribute('multiple', 'multiple');\n  }\n  return elm\n}\n\nfunction createElementNS (namespace, tagName) {\n  return document.createElementNS(namespaceMap[namespace], tagName)\n}\n\nfunction createTextNode (text) {\n  return document.createTextNode(text)\n}\n\nfunction createComment (text) {\n  return document.createComment(text)\n}\n\nfunction insertBefore (parentNode, newNode, referenceNode) {\n  parentNode.insertBefore(newNode, referenceNode);\n}\n\nfunction removeChild (node, child) {\n  node.removeChild(child);\n}\n\nfunction appendChild (node, child) {\n  node.appendChild(child);\n}\n\nfunction parentNode (node) {\n  return node.parentNode\n}\n\nfunction nextSibling (node) {\n  return node.nextSibling\n}\n\nfunction tagName (node) {\n  return node.tagName\n}\n\nfunction setTextContent (node, text) {\n  node.textContent = text;\n}\n\nfunction setStyleScope (node, scopeId) {\n  node.setAttribute(scopeId, '');\n}\n\n\nvar nodeOps = Object.freeze({\n\tcreateElement: createElement$1,\n\tcreateElementNS: createElementNS,\n\tcreateTextNode: createTextNode,\n\tcreateComment: createComment,\n\tinsertBefore: insertBefore,\n\tremoveChild: removeChild,\n\tappendChild: appendChild,\n\tparentNode: parentNode,\n\tnextSibling: nextSibling,\n\ttagName: tagName,\n\tsetTextContent: setTextContent,\n\tsetStyleScope: setStyleScope\n});\n\n/*  */\n\nvar ref = {\n  create: function create (_, vnode) {\n    registerRef(vnode);\n  },\n  update: function update (oldVnode, vnode) {\n    if (oldVnode.data.ref !== vnode.data.ref) {\n      registerRef(oldVnode, true);\n      registerRef(vnode);\n    }\n  },\n  destroy: function destroy (vnode) {\n    registerRef(vnode, true);\n  }\n}\n\nfunction registerRef (vnode, isRemoval) {\n  var key = vnode.data.ref;\n  if (!isDef(key)) { return }\n\n  var vm = vnode.context;\n  var ref = vnode.componentInstance || vnode.elm;\n  var refs = vm.$refs;\n  if (isRemoval) {\n    if (Array.isArray(refs[key])) {\n      remove(refs[key], ref);\n    } else if (refs[key] === ref) {\n      refs[key] = undefined;\n    }\n  } else {\n    if (vnode.data.refInFor) {\n      if (!Array.isArray(refs[key])) {\n        refs[key] = [ref];\n      } else if (refs[key].indexOf(ref) < 0) {\n        // $flow-disable-line\n        refs[key].push(ref);\n      }\n    } else {\n      refs[key] = ref;\n    }\n  }\n}\n\n/**\n * Virtual DOM patching algorithm based on Snabbdom by\n * Simon Friis Vindum (@paldepind)\n * Licensed under the MIT License\n * https://github.com/paldepind/snabbdom/blob/master/LICENSE\n *\n * modified by Evan You (@yyx990803)\n *\n * Not type-checking this because this file is perf-critical and the cost\n * of making flow understand it is not worth it.\n */\n\nvar emptyNode = new VNode('', {}, []);\n\nvar hooks = ['create', 'activate', 'update', 'remove', 'destroy'];\n\nfunction sameVnode (a, b) {\n  return (\n    a.key === b.key && (\n      (\n        a.tag === b.tag &&\n        a.isComment === b.isComment &&\n        isDef(a.data) === isDef(b.data) &&\n        sameInputType(a, b)\n      ) || (\n        isTrue(a.isAsyncPlaceholder) &&\n        a.asyncFactory === b.asyncFactory &&\n        isUndef(b.asyncFactory.error)\n      )\n    )\n  )\n}\n\nfunction sameInputType (a, b) {\n  if (a.tag !== 'input') { return true }\n  var i;\n  var typeA = isDef(i = a.data) && isDef(i = i.attrs) && i.type;\n  var typeB = isDef(i = b.data) && isDef(i = i.attrs) && i.type;\n  return typeA === typeB || isTextInputType(typeA) && isTextInputType(typeB)\n}\n\nfunction createKeyToOldIdx (children, beginIdx, endIdx) {\n  var i, key;\n  var map = {};\n  for (i = beginIdx; i <= endIdx; ++i) {\n    key = children[i].key;\n    if (isDef(key)) { map[key] = i; }\n  }\n  return map\n}\n\nfunction createPatchFunction (backend) {\n  var i, j;\n  var cbs = {};\n\n  var modules = backend.modules;\n  var nodeOps = backend.nodeOps;\n\n  for (i = 0; i < hooks.length; ++i) {\n    cbs[hooks[i]] = [];\n    for (j = 0; j < modules.length; ++j) {\n      if (isDef(modules[j][hooks[i]])) {\n        cbs[hooks[i]].push(modules[j][hooks[i]]);\n      }\n    }\n  }\n\n  function emptyNodeAt (elm) {\n    return new VNode(nodeOps.tagName(elm).toLowerCase(), {}, [], undefined, elm)\n  }\n\n  function createRmCb (childElm, listeners) {\n    function remove () {\n      if (--remove.listeners === 0) {\n        removeNode(childElm);\n      }\n    }\n    remove.listeners = listeners;\n    return remove\n  }\n\n  function removeNode (el) {\n    var parent = nodeOps.parentNode(el);\n    // element may have already been removed due to v-html / v-text\n    if (isDef(parent)) {\n      nodeOps.removeChild(parent, el);\n    }\n  }\n\n  function isUnknownElement$$1 (vnode, inVPre) {\n    return (\n      !inVPre &&\n      !vnode.ns &&\n      !(\n        config.ignoredElements.length &&\n        config.ignoredElements.some(function (ignore) {\n          return isRegExp(ignore)\n            ? ignore.test(vnode.tag)\n            : ignore === vnode.tag\n        })\n      ) &&\n      config.isUnknownElement(vnode.tag)\n    )\n  }\n\n  var creatingElmInVPre = 0;\n\n  function createElm (\n    vnode,\n    insertedVnodeQueue,\n    parentElm,\n    refElm,\n    nested,\n    ownerArray,\n    index\n  ) {\n    if (isDef(vnode.elm) && isDef(ownerArray)) {\n      // This vnode was used in a previous render!\n      // now it's used as a new node, overwriting its elm would cause\n      // potential patch errors down the road when it's used as an insertion\n      // reference node. Instead, we clone the node on-demand before creating\n      // associated DOM element for it.\n      vnode = ownerArray[index] = cloneVNode(vnode);\n    }\n\n    vnode.isRootInsert = !nested; // for transition enter check\n    if (createComponent(vnode, insertedVnodeQueue, parentElm, refElm)) {\n      return\n    }\n\n    var data = vnode.data;\n    var children = vnode.children;\n    var tag = vnode.tag;\n    if (isDef(tag)) {\n      if (process.env.NODE_ENV !== 'production') {\n        if (data && data.pre) {\n          creatingElmInVPre++;\n        }\n        if (isUnknownElement$$1(vnode, creatingElmInVPre)) {\n          warn(\n            'Unknown custom element: <' + tag + '> - did you ' +\n            'register the component correctly? For recursive components, ' +\n            'make sure to provide the \"name\" option.',\n            vnode.context\n          );\n        }\n      }\n\n      vnode.elm = vnode.ns\n        ? nodeOps.createElementNS(vnode.ns, tag)\n        : nodeOps.createElement(tag, vnode);\n      setScope(vnode);\n\n      /* istanbul ignore if */\n      {\n        createChildren(vnode, children, insertedVnodeQueue);\n        if (isDef(data)) {\n          invokeCreateHooks(vnode, insertedVnodeQueue);\n        }\n        insert(parentElm, vnode.elm, refElm);\n      }\n\n      if (process.env.NODE_ENV !== 'production' && data && data.pre) {\n        creatingElmInVPre--;\n      }\n    } else if (isTrue(vnode.isComment)) {\n      vnode.elm = nodeOps.createComment(vnode.text);\n      insert(parentElm, vnode.elm, refElm);\n    } else {\n      vnode.elm = nodeOps.createTextNode(vnode.text);\n      insert(parentElm, vnode.elm, refElm);\n    }\n  }\n\n  function createComponent (vnode, insertedVnodeQueue, parentElm, refElm) {\n    var i = vnode.data;\n    if (isDef(i)) {\n      var isReactivated = isDef(vnode.componentInstance) && i.keepAlive;\n      if (isDef(i = i.hook) && isDef(i = i.init)) {\n        i(vnode, false /* hydrating */, parentElm, refElm);\n      }\n      // after calling the init hook, if the vnode is a child component\n      // it should've created a child instance and mounted it. the child\n      // component also has set the placeholder vnode's elm.\n      // in that case we can just return the element and be done.\n      if (isDef(vnode.componentInstance)) {\n        initComponent(vnode, insertedVnodeQueue);\n        if (isTrue(isReactivated)) {\n          reactivateComponent(vnode, insertedVnodeQueue, parentElm, refElm);\n        }\n        return true\n      }\n    }\n  }\n\n  function initComponent (vnode, insertedVnodeQueue) {\n    if (isDef(vnode.data.pendingInsert)) {\n      insertedVnodeQueue.push.apply(insertedVnodeQueue, vnode.data.pendingInsert);\n      vnode.data.pendingInsert = null;\n    }\n    vnode.elm = vnode.componentInstance.$el;\n    if (isPatchable(vnode)) {\n      invokeCreateHooks(vnode, insertedVnodeQueue);\n      setScope(vnode);\n    } else {\n      // empty component root.\n      // skip all element-related modules except for ref (#3455)\n      registerRef(vnode);\n      // make sure to invoke the insert hook\n      insertedVnodeQueue.push(vnode);\n    }\n  }\n\n  function reactivateComponent (vnode, insertedVnodeQueue, parentElm, refElm) {\n    var i;\n    // hack for #4339: a reactivated component with inner transition\n    // does not trigger because the inner node's created hooks are not called\n    // again. It's not ideal to involve module-specific logic in here but\n    // there doesn't seem to be a better way to do it.\n    var innerNode = vnode;\n    while (innerNode.componentInstance) {\n      innerNode = innerNode.componentInstance._vnode;\n      if (isDef(i = innerNode.data) && isDef(i = i.transition)) {\n        for (i = 0; i < cbs.activate.length; ++i) {\n          cbs.activate[i](emptyNode, innerNode);\n        }\n        insertedVnodeQueue.push(innerNode);\n        break\n      }\n    }\n    // unlike a newly created component,\n    // a reactivated keep-alive component doesn't insert itself\n    insert(parentElm, vnode.elm, refElm);\n  }\n\n  function insert (parent, elm, ref$$1) {\n    if (isDef(parent)) {\n      if (isDef(ref$$1)) {\n        if (ref$$1.parentNode === parent) {\n          nodeOps.insertBefore(parent, elm, ref$$1);\n        }\n      } else {\n        nodeOps.appendChild(parent, elm);\n      }\n    }\n  }\n\n  function createChildren (vnode, children, insertedVnodeQueue) {\n    if (Array.isArray(children)) {\n      if (process.env.NODE_ENV !== 'production') {\n        checkDuplicateKeys(children);\n      }\n      for (var i = 0; i < children.length; ++i) {\n        createElm(children[i], insertedVnodeQueue, vnode.elm, null, true, children, i);\n      }\n    } else if (isPrimitive(vnode.text)) {\n      nodeOps.appendChild(vnode.elm, nodeOps.createTextNode(String(vnode.text)));\n    }\n  }\n\n  function isPatchable (vnode) {\n    while (vnode.componentInstance) {\n      vnode = vnode.componentInstance._vnode;\n    }\n    return isDef(vnode.tag)\n  }\n\n  function invokeCreateHooks (vnode, insertedVnodeQueue) {\n    for (var i$1 = 0; i$1 < cbs.create.length; ++i$1) {\n      cbs.create[i$1](emptyNode, vnode);\n    }\n    i = vnode.data.hook; // Reuse variable\n    if (isDef(i)) {\n      if (isDef(i.create)) { i.create(emptyNode, vnode); }\n      if (isDef(i.insert)) { insertedVnodeQueue.push(vnode); }\n    }\n  }\n\n  // set scope id attribute for scoped CSS.\n  // this is implemented as a special case to avoid the overhead\n  // of going through the normal attribute patching process.\n  function setScope (vnode) {\n    var i;\n    if (isDef(i = vnode.fnScopeId)) {\n      nodeOps.setStyleScope(vnode.elm, i);\n    } else {\n      var ancestor = vnode;\n      while (ancestor) {\n        if (isDef(i = ancestor.context) && isDef(i = i.$options._scopeId)) {\n          nodeOps.setStyleScope(vnode.elm, i);\n        }\n        ancestor = ancestor.parent;\n      }\n    }\n    // for slot content they should also get the scopeId from the host instance.\n    if (isDef(i = activeInstance) &&\n      i !== vnode.context &&\n      i !== vnode.fnContext &&\n      isDef(i = i.$options._scopeId)\n    ) {\n      nodeOps.setStyleScope(vnode.elm, i);\n    }\n  }\n\n  function addVnodes (parentElm, refElm, vnodes, startIdx, endIdx, insertedVnodeQueue) {\n    for (; startIdx <= endIdx; ++startIdx) {\n      createElm(vnodes[startIdx], insertedVnodeQueue, parentElm, refElm, false, vnodes, startIdx);\n    }\n  }\n\n  function invokeDestroyHook (vnode) {\n    var i, j;\n    var data = vnode.data;\n    if (isDef(data)) {\n      if (isDef(i = data.hook) && isDef(i = i.destroy)) { i(vnode); }\n      for (i = 0; i < cbs.destroy.length; ++i) { cbs.destroy[i](vnode); }\n    }\n    if (isDef(i = vnode.children)) {\n      for (j = 0; j < vnode.children.length; ++j) {\n        invokeDestroyHook(vnode.children[j]);\n      }\n    }\n  }\n\n  function removeVnodes (parentElm, vnodes, startIdx, endIdx) {\n    for (; startIdx <= endIdx; ++startIdx) {\n      var ch = vnodes[startIdx];\n      if (isDef(ch)) {\n        if (isDef(ch.tag)) {\n          removeAndInvokeRemoveHook(ch);\n          invokeDestroyHook(ch);\n        } else { // Text node\n          removeNode(ch.elm);\n        }\n      }\n    }\n  }\n\n  function removeAndInvokeRemoveHook (vnode, rm) {\n    if (isDef(rm) || isDef(vnode.data)) {\n      var i;\n      var listeners = cbs.remove.length + 1;\n      if (isDef(rm)) {\n        // we have a recursively passed down rm callback\n        // increase the listeners count\n        rm.listeners += listeners;\n      } else {\n        // directly removing\n        rm = createRmCb(vnode.elm, listeners);\n      }\n      // recursively invoke hooks on child component root node\n      if (isDef(i = vnode.componentInstance) && isDef(i = i._vnode) && isDef(i.data)) {\n        removeAndInvokeRemoveHook(i, rm);\n      }\n      for (i = 0; i < cbs.remove.length; ++i) {\n        cbs.remove[i](vnode, rm);\n      }\n      if (isDef(i = vnode.data.hook) && isDef(i = i.remove)) {\n        i(vnode, rm);\n      } else {\n        rm();\n      }\n    } else {\n      removeNode(vnode.elm);\n    }\n  }\n\n  function updateChildren (parentElm, oldCh, newCh, insertedVnodeQueue, removeOnly) {\n    var oldStartIdx = 0;\n    var newStartIdx = 0;\n    var oldEndIdx = oldCh.length - 1;\n    var oldStartVnode = oldCh[0];\n    var oldEndVnode = oldCh[oldEndIdx];\n    var newEndIdx = newCh.length - 1;\n    var newStartVnode = newCh[0];\n    var newEndVnode = newCh[newEndIdx];\n    var oldKeyToIdx, idxInOld, vnodeToMove, refElm;\n\n    // removeOnly is a special flag used only by <transition-group>\n    // to ensure removed elements stay in correct relative positions\n    // during leaving transitions\n    var canMove = !removeOnly;\n\n    if (process.env.NODE_ENV !== 'production') {\n      checkDuplicateKeys(newCh);\n    }\n\n    while (oldStartIdx <= oldEndIdx && newStartIdx <= newEndIdx) {\n      if (isUndef(oldStartVnode)) {\n        oldStartVnode = oldCh[++oldStartIdx]; // Vnode has been moved left\n      } else if (isUndef(oldEndVnode)) {\n        oldEndVnode = oldCh[--oldEndIdx];\n      } else if (sameVnode(oldStartVnode, newStartVnode)) {\n        patchVnode(oldStartVnode, newStartVnode, insertedVnodeQueue);\n        oldStartVnode = oldCh[++oldStartIdx];\n        newStartVnode = newCh[++newStartIdx];\n      } else if (sameVnode(oldEndVnode, newEndVnode)) {\n        patchVnode(oldEndVnode, newEndVnode, insertedVnodeQueue);\n        oldEndVnode = oldCh[--oldEndIdx];\n        newEndVnode = newCh[--newEndIdx];\n      } else if (sameVnode(oldStartVnode, newEndVnode)) { // Vnode moved right\n        patchVnode(oldStartVnode, newEndVnode, insertedVnodeQueue);\n        canMove && nodeOps.insertBefore(parentElm, oldStartVnode.elm, nodeOps.nextSibling(oldEndVnode.elm));\n        oldStartVnode = oldCh[++oldStartIdx];\n        newEndVnode = newCh[--newEndIdx];\n      } else if (sameVnode(oldEndVnode, newStartVnode)) { // Vnode moved left\n        patchVnode(oldEndVnode, newStartVnode, insertedVnodeQueue);\n        canMove && nodeOps.insertBefore(parentElm, oldEndVnode.elm, oldStartVnode.elm);\n        oldEndVnode = oldCh[--oldEndIdx];\n        newStartVnode = newCh[++newStartIdx];\n      } else {\n        if (isUndef(oldKeyToIdx)) { oldKeyToIdx = createKeyToOldIdx(oldCh, oldStartIdx, oldEndIdx); }\n        idxInOld = isDef(newStartVnode.key)\n          ? oldKeyToIdx[newStartVnode.key]\n          : findIdxInOld(newStartVnode, oldCh, oldStartIdx, oldEndIdx);\n        if (isUndef(idxInOld)) { // New element\n          createElm(newStartVnode, insertedVnodeQueue, parentElm, oldStartVnode.elm, false, newCh, newStartIdx);\n        } else {\n          vnodeToMove = oldCh[idxInOld];\n          if (sameVnode(vnodeToMove, newStartVnode)) {\n            patchVnode(vnodeToMove, newStartVnode, insertedVnodeQueue);\n            oldCh[idxInOld] = undefined;\n            canMove && nodeOps.insertBefore(parentElm, vnodeToMove.elm, oldStartVnode.elm);\n          } else {\n            // same key but different element. treat as new element\n            createElm(newStartVnode, insertedVnodeQueue, parentElm, oldStartVnode.elm, false, newCh, newStartIdx);\n          }\n        }\n        newStartVnode = newCh[++newStartIdx];\n      }\n    }\n    if (oldStartIdx > oldEndIdx) {\n      refElm = isUndef(newCh[newEndIdx + 1]) ? null : newCh[newEndIdx + 1].elm;\n      addVnodes(parentElm, refElm, newCh, newStartIdx, newEndIdx, insertedVnodeQueue);\n    } else if (newStartIdx > newEndIdx) {\n      removeVnodes(parentElm, oldCh, oldStartIdx, oldEndIdx);\n    }\n  }\n\n  function checkDuplicateKeys (children) {\n    var seenKeys = {};\n    for (var i = 0; i < children.length; i++) {\n      var vnode = children[i];\n      var key = vnode.key;\n      if (isDef(key)) {\n        if (seenKeys[key]) {\n          warn(\n            (\"Duplicate keys detected: '\" + key + \"'. This may cause an update error.\"),\n            vnode.context\n          );\n        } else {\n          seenKeys[key] = true;\n        }\n      }\n    }\n  }\n\n  function findIdxInOld (node, oldCh, start, end) {\n    for (var i = start; i < end; i++) {\n      var c = oldCh[i];\n      if (isDef(c) && sameVnode(node, c)) { return i }\n    }\n  }\n\n  function patchVnode (oldVnode, vnode, insertedVnodeQueue, removeOnly) {\n    if (oldVnode === vnode) {\n      return\n    }\n\n    var elm = vnode.elm = oldVnode.elm;\n\n    if (isTrue(oldVnode.isAsyncPlaceholder)) {\n      if (isDef(vnode.asyncFactory.resolved)) {\n        hydrate(oldVnode.elm, vnode, insertedVnodeQueue);\n      } else {\n        vnode.isAsyncPlaceholder = true;\n      }\n      return\n    }\n\n    // reuse element for static trees.\n    // note we only do this if the vnode is cloned -\n    // if the new node is not cloned it means the render functions have been\n    // reset by the hot-reload-api and we need to do a proper re-render.\n    if (isTrue(vnode.isStatic) &&\n      isTrue(oldVnode.isStatic) &&\n      vnode.key === oldVnode.key &&\n      (isTrue(vnode.isCloned) || isTrue(vnode.isOnce))\n    ) {\n      vnode.componentInstance = oldVnode.componentInstance;\n      return\n    }\n\n    var i;\n    var data = vnode.data;\n    if (isDef(data) && isDef(i = data.hook) && isDef(i = i.prepatch)) {\n      i(oldVnode, vnode);\n    }\n\n    var oldCh = oldVnode.children;\n    var ch = vnode.children;\n    if (isDef(data) && isPatchable(vnode)) {\n      for (i = 0; i < cbs.update.length; ++i) { cbs.update[i](oldVnode, vnode); }\n      if (isDef(i = data.hook) && isDef(i = i.update)) { i(oldVnode, vnode); }\n    }\n    if (isUndef(vnode.text)) {\n      if (isDef(oldCh) && isDef(ch)) {\n        if (oldCh !== ch) { updateChildren(elm, oldCh, ch, insertedVnodeQueue, removeOnly); }\n      } else if (isDef(ch)) {\n        if (isDef(oldVnode.text)) { nodeOps.setTextContent(elm, ''); }\n        addVnodes(elm, null, ch, 0, ch.length - 1, insertedVnodeQueue);\n      } else if (isDef(oldCh)) {\n        removeVnodes(elm, oldCh, 0, oldCh.length - 1);\n      } else if (isDef(oldVnode.text)) {\n        nodeOps.setTextContent(elm, '');\n      }\n    } else if (oldVnode.text !== vnode.text) {\n      nodeOps.setTextContent(elm, vnode.text);\n    }\n    if (isDef(data)) {\n      if (isDef(i = data.hook) && isDef(i = i.postpatch)) { i(oldVnode, vnode); }\n    }\n  }\n\n  function invokeInsertHook (vnode, queue, initial) {\n    // delay insert hooks for component root nodes, invoke them after the\n    // element is really inserted\n    if (isTrue(initial) && isDef(vnode.parent)) {\n      vnode.parent.data.pendingInsert = queue;\n    } else {\n      for (var i = 0; i < queue.length; ++i) {\n        queue[i].data.hook.insert(queue[i]);\n      }\n    }\n  }\n\n  var hydrationBailed = false;\n  // list of modules that can skip create hook during hydration because they\n  // are already rendered on the client or has no need for initialization\n  // Note: style is excluded because it relies on initial clone for future\n  // deep updates (#7063).\n  var isRenderedModule = makeMap('attrs,class,staticClass,staticStyle,key');\n\n  // Note: this is a browser-only function so we can assume elms are DOM nodes.\n  function hydrate (elm, vnode, insertedVnodeQueue, inVPre) {\n    var i;\n    var tag = vnode.tag;\n    var data = vnode.data;\n    var children = vnode.children;\n    inVPre = inVPre || (data && data.pre);\n    vnode.elm = elm;\n\n    if (isTrue(vnode.isComment) && isDef(vnode.asyncFactory)) {\n      vnode.isAsyncPlaceholder = true;\n      return true\n    }\n    // assert node match\n    if (process.env.NODE_ENV !== 'production') {\n      if (!assertNodeMatch(elm, vnode, inVPre)) {\n        return false\n      }\n    }\n    if (isDef(data)) {\n      if (isDef(i = data.hook) && isDef(i = i.init)) { i(vnode, true /* hydrating */); }\n      if (isDef(i = vnode.componentInstance)) {\n        // child component. it should have hydrated its own tree.\n        initComponent(vnode, insertedVnodeQueue);\n        return true\n      }\n    }\n    if (isDef(tag)) {\n      if (isDef(children)) {\n        // empty element, allow client to pick up and populate children\n        if (!elm.hasChildNodes()) {\n          createChildren(vnode, children, insertedVnodeQueue);\n        } else {\n          // v-html and domProps: innerHTML\n          if (isDef(i = data) && isDef(i = i.domProps) && isDef(i = i.innerHTML)) {\n            if (i !== elm.innerHTML) {\n              /* istanbul ignore if */\n              if (process.env.NODE_ENV !== 'production' &&\n                typeof console !== 'undefined' &&\n                !hydrationBailed\n              ) {\n                hydrationBailed = true;\n                console.warn('Parent: ', elm);\n                console.warn('server innerHTML: ', i);\n                console.warn('client innerHTML: ', elm.innerHTML);\n              }\n              return false\n            }\n          } else {\n            // iterate and compare children lists\n            var childrenMatch = true;\n            var childNode = elm.firstChild;\n            for (var i$1 = 0; i$1 < children.length; i$1++) {\n              if (!childNode || !hydrate(childNode, children[i$1], insertedVnodeQueue, inVPre)) {\n                childrenMatch = false;\n                break\n              }\n              childNode = childNode.nextSibling;\n            }\n            // if childNode is not null, it means the actual childNodes list is\n            // longer than the virtual children list.\n            if (!childrenMatch || childNode) {\n              /* istanbul ignore if */\n              if (process.env.NODE_ENV !== 'production' &&\n                typeof console !== 'undefined' &&\n                !hydrationBailed\n              ) {\n                hydrationBailed = true;\n                console.warn('Parent: ', elm);\n                console.warn('Mismatching childNodes vs. VNodes: ', elm.childNodes, children);\n              }\n              return false\n            }\n          }\n        }\n      }\n      if (isDef(data)) {\n        var fullInvoke = false;\n        for (var key in data) {\n          if (!isRenderedModule(key)) {\n            fullInvoke = true;\n            invokeCreateHooks(vnode, insertedVnodeQueue);\n            break\n          }\n        }\n        if (!fullInvoke && data['class']) {\n          // ensure collecting deps for deep class bindings for future updates\n          traverse(data['class']);\n        }\n      }\n    } else if (elm.data !== vnode.text) {\n      elm.data = vnode.text;\n    }\n    return true\n  }\n\n  function assertNodeMatch (node, vnode, inVPre) {\n    if (isDef(vnode.tag)) {\n      return vnode.tag.indexOf('vue-component') === 0 || (\n        !isUnknownElement$$1(vnode, inVPre) &&\n        vnode.tag.toLowerCase() === (node.tagName && node.tagName.toLowerCase())\n      )\n    } else {\n      return node.nodeType === (vnode.isComment ? 8 : 3)\n    }\n  }\n\n  return function patch (oldVnode, vnode, hydrating, removeOnly, parentElm, refElm) {\n    if (isUndef(vnode)) {\n      if (isDef(oldVnode)) { invokeDestroyHook(oldVnode); }\n      return\n    }\n\n    var isInitialPatch = false;\n    var insertedVnodeQueue = [];\n\n    if (isUndef(oldVnode)) {\n      // empty mount (likely as component), create new root element\n      isInitialPatch = true;\n      createElm(vnode, insertedVnodeQueue, parentElm, refElm);\n    } else {\n      var isRealElement = isDef(oldVnode.nodeType);\n      if (!isRealElement && sameVnode(oldVnode, vnode)) {\n        // patch existing root node\n        patchVnode(oldVnode, vnode, insertedVnodeQueue, removeOnly);\n      } else {\n        if (isRealElement) {\n          // mounting to a real element\n          // check if this is server-rendered content and if we can perform\n          // a successful hydration.\n          if (oldVnode.nodeType === 1 && oldVnode.hasAttribute(SSR_ATTR)) {\n            oldVnode.removeAttribute(SSR_ATTR);\n            hydrating = true;\n          }\n          if (isTrue(hydrating)) {\n            if (hydrate(oldVnode, vnode, insertedVnodeQueue)) {\n              invokeInsertHook(vnode, insertedVnodeQueue, true);\n              return oldVnode\n            } else if (process.env.NODE_ENV !== 'production') {\n              warn(\n                'The client-side rendered virtual DOM tree is not matching ' +\n                'server-rendered content. This is likely caused by incorrect ' +\n                'HTML markup, for example nesting block-level elements inside ' +\n                '<p>, or missing <tbody>. Bailing hydration and performing ' +\n                'full client-side render.'\n              );\n            }\n          }\n          // either not server-rendered, or hydration failed.\n          // create an empty node and replace it\n          oldVnode = emptyNodeAt(oldVnode);\n        }\n\n        // replacing existing element\n        var oldElm = oldVnode.elm;\n        var parentElm$1 = nodeOps.parentNode(oldElm);\n\n        // create new node\n        createElm(\n          vnode,\n          insertedVnodeQueue,\n          // extremely rare edge case: do not insert if old element is in a\n          // leaving transition. Only happens when combining transition +\n          // keep-alive + HOCs. (#4590)\n          oldElm._leaveCb ? null : parentElm$1,\n          nodeOps.nextSibling(oldElm)\n        );\n\n        // update parent placeholder node element, recursively\n        if (isDef(vnode.parent)) {\n          var ancestor = vnode.parent;\n          var patchable = isPatchable(vnode);\n          while (ancestor) {\n            for (var i = 0; i < cbs.destroy.length; ++i) {\n              cbs.destroy[i](ancestor);\n            }\n            ancestor.elm = vnode.elm;\n            if (patchable) {\n              for (var i$1 = 0; i$1 < cbs.create.length; ++i$1) {\n                cbs.create[i$1](emptyNode, ancestor);\n              }\n              // #6513\n              // invoke insert hooks that may have been merged by create hooks.\n              // e.g. for directives that uses the \"inserted\" hook.\n              var insert = ancestor.data.hook.insert;\n              if (insert.merged) {\n                // start at index 1 to avoid re-invoking component mounted hook\n                for (var i$2 = 1; i$2 < insert.fns.length; i$2++) {\n                  insert.fns[i$2]();\n                }\n              }\n            } else {\n              registerRef(ancestor);\n            }\n            ancestor = ancestor.parent;\n          }\n        }\n\n        // destroy old node\n        if (isDef(parentElm$1)) {\n          removeVnodes(parentElm$1, [oldVnode], 0, 0);\n        } else if (isDef(oldVnode.tag)) {\n          invokeDestroyHook(oldVnode);\n        }\n      }\n    }\n\n    invokeInsertHook(vnode, insertedVnodeQueue, isInitialPatch);\n    return vnode.elm\n  }\n}\n\n/*  */\n\nvar directives = {\n  create: updateDirectives,\n  update: updateDirectives,\n  destroy: function unbindDirectives (vnode) {\n    updateDirectives(vnode, emptyNode);\n  }\n}\n\nfunction updateDirectives (oldVnode, vnode) {\n  if (oldVnode.data.directives || vnode.data.directives) {\n    _update(oldVnode, vnode);\n  }\n}\n\nfunction _update (oldVnode, vnode) {\n  var isCreate = oldVnode === emptyNode;\n  var isDestroy = vnode === emptyNode;\n  var oldDirs = normalizeDirectives$1(oldVnode.data.directives, oldVnode.context);\n  var newDirs = normalizeDirectives$1(vnode.data.directives, vnode.context);\n\n  var dirsWithInsert = [];\n  var dirsWithPostpatch = [];\n\n  var key, oldDir, dir;\n  for (key in newDirs) {\n    oldDir = oldDirs[key];\n    dir = newDirs[key];\n    if (!oldDir) {\n      // new directive, bind\n      callHook$1(dir, 'bind', vnode, oldVnode);\n      if (dir.def && dir.def.inserted) {\n        dirsWithInsert.push(dir);\n      }\n    } else {\n      // existing directive, update\n      dir.oldValue = oldDir.value;\n      callHook$1(dir, 'update', vnode, oldVnode);\n      if (dir.def && dir.def.componentUpdated) {\n        dirsWithPostpatch.push(dir);\n      }\n    }\n  }\n\n  if (dirsWithInsert.length) {\n    var callInsert = function () {\n      for (var i = 0; i < dirsWithInsert.length; i++) {\n        callHook$1(dirsWithInsert[i], 'inserted', vnode, oldVnode);\n      }\n    };\n    if (isCreate) {\n      mergeVNodeHook(vnode, 'insert', callInsert);\n    } else {\n      callInsert();\n    }\n  }\n\n  if (dirsWithPostpatch.length) {\n    mergeVNodeHook(vnode, 'postpatch', function () {\n      for (var i = 0; i < dirsWithPostpatch.length; i++) {\n        callHook$1(dirsWithPostpatch[i], 'componentUpdated', vnode, oldVnode);\n      }\n    });\n  }\n\n  if (!isCreate) {\n    for (key in oldDirs) {\n      if (!newDirs[key]) {\n        // no longer present, unbind\n        callHook$1(oldDirs[key], 'unbind', oldVnode, oldVnode, isDestroy);\n      }\n    }\n  }\n}\n\nvar emptyModifiers = Object.create(null);\n\nfunction normalizeDirectives$1 (\n  dirs,\n  vm\n) {\n  var res = Object.create(null);\n  if (!dirs) {\n    // $flow-disable-line\n    return res\n  }\n  var i, dir;\n  for (i = 0; i < dirs.length; i++) {\n    dir = dirs[i];\n    if (!dir.modifiers) {\n      // $flow-disable-line\n      dir.modifiers = emptyModifiers;\n    }\n    res[getRawDirName(dir)] = dir;\n    dir.def = resolveAsset(vm.$options, 'directives', dir.name, true);\n  }\n  // $flow-disable-line\n  return res\n}\n\nfunction getRawDirName (dir) {\n  return dir.rawName || ((dir.name) + \".\" + (Object.keys(dir.modifiers || {}).join('.')))\n}\n\nfunction callHook$1 (dir, hook, vnode, oldVnode, isDestroy) {\n  var fn = dir.def && dir.def[hook];\n  if (fn) {\n    try {\n      fn(vnode.elm, dir, vnode, oldVnode, isDestroy);\n    } catch (e) {\n      handleError(e, vnode.context, (\"directive \" + (dir.name) + \" \" + hook + \" hook\"));\n    }\n  }\n}\n\nvar baseModules = [\n  ref,\n  directives\n]\n\n/*  */\n\nfunction updateAttrs (oldVnode, vnode) {\n  var opts = vnode.componentOptions;\n  if (isDef(opts) && opts.Ctor.options.inheritAttrs === false) {\n    return\n  }\n  if (isUndef(oldVnode.data.attrs) && isUndef(vnode.data.attrs)) {\n    return\n  }\n  var key, cur, old;\n  var elm = vnode.elm;\n  var oldAttrs = oldVnode.data.attrs || {};\n  var attrs = vnode.data.attrs || {};\n  // clone observed objects, as the user probably wants to mutate it\n  if (isDef(attrs.__ob__)) {\n    attrs = vnode.data.attrs = extend({}, attrs);\n  }\n\n  for (key in attrs) {\n    cur = attrs[key];\n    old = oldAttrs[key];\n    if (old !== cur) {\n      setAttr(elm, key, cur);\n    }\n  }\n  // #4391: in IE9, setting type can reset value for input[type=radio]\n  // #6666: IE/Edge forces progress value down to 1 before setting a max\n  /* istanbul ignore if */\n  if ((isIE || isEdge) && attrs.value !== oldAttrs.value) {\n    setAttr(elm, 'value', attrs.value);\n  }\n  for (key in oldAttrs) {\n    if (isUndef(attrs[key])) {\n      if (isXlink(key)) {\n        elm.removeAttributeNS(xlinkNS, getXlinkProp(key));\n      } else if (!isEnumeratedAttr(key)) {\n        elm.removeAttribute(key);\n      }\n    }\n  }\n}\n\nfunction setAttr (el, key, value) {\n  if (el.tagName.indexOf('-') > -1) {\n    baseSetAttr(el, key, value);\n  } else if (isBooleanAttr(key)) {\n    // set attribute for blank value\n    // e.g. <option disabled>Select one</option>\n    if (isFalsyAttrValue(value)) {\n      el.removeAttribute(key);\n    } else {\n      // technically allowfullscreen is a boolean attribute for <iframe>,\n      // but Flash expects a value of \"true\" when used on <embed> tag\n      value = key === 'allowfullscreen' && el.tagName === 'EMBED'\n        ? 'true'\n        : key;\n      el.setAttribute(key, value);\n    }\n  } else if (isEnumeratedAttr(key)) {\n    el.setAttribute(key, isFalsyAttrValue(value) || value === 'false' ? 'false' : 'true');\n  } else if (isXlink(key)) {\n    if (isFalsyAttrValue(value)) {\n      el.removeAttributeNS(xlinkNS, getXlinkProp(key));\n    } else {\n      el.setAttributeNS(xlinkNS, key, value);\n    }\n  } else {\n    baseSetAttr(el, key, value);\n  }\n}\n\nfunction baseSetAttr (el, key, value) {\n  if (isFalsyAttrValue(value)) {\n    el.removeAttribute(key);\n  } else {\n    // #7138: IE10 & 11 fires input event when setting placeholder on\n    // <textarea>... block the first input event and remove the blocker\n    // immediately.\n    /* istanbul ignore if */\n    if (\n      isIE && !isIE9 &&\n      el.tagName === 'TEXTAREA' &&\n      key === 'placeholder' && !el.__ieph\n    ) {\n      var blocker = function (e) {\n        e.stopImmediatePropagation();\n        el.removeEventListener('input', blocker);\n      };\n      el.addEventListener('input', blocker);\n      // $flow-disable-line\n      el.__ieph = true; /* IE placeholder patched */\n    }\n    el.setAttribute(key, value);\n  }\n}\n\nvar attrs = {\n  create: updateAttrs,\n  update: updateAttrs\n}\n\n/*  */\n\nfunction updateClass (oldVnode, vnode) {\n  var el = vnode.elm;\n  var data = vnode.data;\n  var oldData = oldVnode.data;\n  if (\n    isUndef(data.staticClass) &&\n    isUndef(data.class) && (\n      isUndef(oldData) || (\n        isUndef(oldData.staticClass) &&\n        isUndef(oldData.class)\n      )\n    )\n  ) {\n    return\n  }\n\n  var cls = genClassForVnode(vnode);\n\n  // handle transition classes\n  var transitionClass = el._transitionClasses;\n  if (isDef(transitionClass)) {\n    cls = concat(cls, stringifyClass(transitionClass));\n  }\n\n  // set the class\n  if (cls !== el._prevClass) {\n    el.setAttribute('class', cls);\n    el._prevClass = cls;\n  }\n}\n\nvar klass = {\n  create: updateClass,\n  update: updateClass\n}\n\n/*  */\n\nvar validDivisionCharRE = /[\\w).+\\-_$\\]]/;\n\nfunction parseFilters (exp) {\n  var inSingle = false;\n  var inDouble = false;\n  var inTemplateString = false;\n  var inRegex = false;\n  var curly = 0;\n  var square = 0;\n  var paren = 0;\n  var lastFilterIndex = 0;\n  var c, prev, i, expression, filters;\n\n  for (i = 0; i < exp.length; i++) {\n    prev = c;\n    c = exp.charCodeAt(i);\n    if (inSingle) {\n      if (c === 0x27 && prev !== 0x5C) { inSingle = false; }\n    } else if (inDouble) {\n      if (c === 0x22 && prev !== 0x5C) { inDouble = false; }\n    } else if (inTemplateString) {\n      if (c === 0x60 && prev !== 0x5C) { inTemplateString = false; }\n    } else if (inRegex) {\n      if (c === 0x2f && prev !== 0x5C) { inRegex = false; }\n    } else if (\n      c === 0x7C && // pipe\n      exp.charCodeAt(i + 1) !== 0x7C &&\n      exp.charCodeAt(i - 1) !== 0x7C &&\n      !curly && !square && !paren\n    ) {\n      if (expression === undefined) {\n        // first filter, end of expression\n        lastFilterIndex = i + 1;\n        expression = exp.slice(0, i).trim();\n      } else {\n        pushFilter();\n      }\n    } else {\n      switch (c) {\n        case 0x22: inDouble = true; break         // \"\n        case 0x27: inSingle = true; break         // '\n        case 0x60: inTemplateString = true; break // `\n        case 0x28: paren++; break                 // (\n        case 0x29: paren--; break                 // )\n        case 0x5B: square++; break                // [\n        case 0x5D: square--; break                // ]\n        case 0x7B: curly++; break                 // {\n        case 0x7D: curly--; break                 // }\n      }\n      if (c === 0x2f) { // /\n        var j = i - 1;\n        var p = (void 0);\n        // find first non-whitespace prev char\n        for (; j >= 0; j--) {\n          p = exp.charAt(j);\n          if (p !== ' ') { break }\n        }\n        if (!p || !validDivisionCharRE.test(p)) {\n          inRegex = true;\n        }\n      }\n    }\n  }\n\n  if (expression === undefined) {\n    expression = exp.slice(0, i).trim();\n  } else if (lastFilterIndex !== 0) {\n    pushFilter();\n  }\n\n  function pushFilter () {\n    (filters || (filters = [])).push(exp.slice(lastFilterIndex, i).trim());\n    lastFilterIndex = i + 1;\n  }\n\n  if (filters) {\n    for (i = 0; i < filters.length; i++) {\n      expression = wrapFilter(expression, filters[i]);\n    }\n  }\n\n  return expression\n}\n\nfunction wrapFilter (exp, filter) {\n  var i = filter.indexOf('(');\n  if (i < 0) {\n    // _f: resolveFilter\n    return (\"_f(\\\"\" + filter + \"\\\")(\" + exp + \")\")\n  } else {\n    var name = filter.slice(0, i);\n    var args = filter.slice(i + 1);\n    return (\"_f(\\\"\" + name + \"\\\")(\" + exp + (args !== ')' ? ',' + args : args))\n  }\n}\n\n/*  */\n\nfunction baseWarn (msg) {\n  console.error((\"[Vue compiler]: \" + msg));\n}\n\nfunction pluckModuleFunction (\n  modules,\n  key\n) {\n  return modules\n    ? modules.map(function (m) { return m[key]; }).filter(function (_) { return _; })\n    : []\n}\n\nfunction addProp (el, name, value) {\n  (el.props || (el.props = [])).push({ name: name, value: value });\n  el.plain = false;\n}\n\nfunction addAttr (el, name, value) {\n  (el.attrs || (el.attrs = [])).push({ name: name, value: value });\n  el.plain = false;\n}\n\n// add a raw attr (use this in preTransforms)\nfunction addRawAttr (el, name, value) {\n  el.attrsMap[name] = value;\n  el.attrsList.push({ name: name, value: value });\n}\n\nfunction addDirective (\n  el,\n  name,\n  rawName,\n  value,\n  arg,\n  modifiers\n) {\n  (el.directives || (el.directives = [])).push({ name: name, rawName: rawName, value: value, arg: arg, modifiers: modifiers });\n  el.plain = false;\n}\n\nfunction addHandler (\n  el,\n  name,\n  value,\n  modifiers,\n  important,\n  warn\n) {\n  modifiers = modifiers || emptyObject;\n  // warn prevent and passive modifier\n  /* istanbul ignore if */\n  if (\n    process.env.NODE_ENV !== 'production' && warn &&\n    modifiers.prevent && modifiers.passive\n  ) {\n    warn(\n      'passive and prevent can\\'t be used together. ' +\n      'Passive handler can\\'t prevent default event.'\n    );\n  }\n\n  // check capture modifier\n  if (modifiers.capture) {\n    delete modifiers.capture;\n    name = '!' + name; // mark the event as captured\n  }\n  if (modifiers.once) {\n    delete modifiers.once;\n    name = '~' + name; // mark the event as once\n  }\n  /* istanbul ignore if */\n  if (modifiers.passive) {\n    delete modifiers.passive;\n    name = '&' + name; // mark the event as passive\n  }\n\n  // normalize click.right and click.middle since they don't actually fire\n  // this is technically browser-specific, but at least for now browsers are\n  // the only target envs that have right/middle clicks.\n  if (name === 'click') {\n    if (modifiers.right) {\n      name = 'contextmenu';\n      delete modifiers.right;\n    } else if (modifiers.middle) {\n      name = 'mouseup';\n    }\n  }\n\n  var events;\n  if (modifiers.native) {\n    delete modifiers.native;\n    events = el.nativeEvents || (el.nativeEvents = {});\n  } else {\n    events = el.events || (el.events = {});\n  }\n\n  var newHandler = {\n    value: value.trim()\n  };\n  if (modifiers !== emptyObject) {\n    newHandler.modifiers = modifiers;\n  }\n\n  var handlers = events[name];\n  /* istanbul ignore if */\n  if (Array.isArray(handlers)) {\n    important ? handlers.unshift(newHandler) : handlers.push(newHandler);\n  } else if (handlers) {\n    events[name] = important ? [newHandler, handlers] : [handlers, newHandler];\n  } else {\n    events[name] = newHandler;\n  }\n\n  el.plain = false;\n}\n\nfunction getBindingAttr (\n  el,\n  name,\n  getStatic\n) {\n  var dynamicValue =\n    getAndRemoveAttr(el, ':' + name) ||\n    getAndRemoveAttr(el, 'v-bind:' + name);\n  if (dynamicValue != null) {\n    return parseFilters(dynamicValue)\n  } else if (getStatic !== false) {\n    var staticValue = getAndRemoveAttr(el, name);\n    if (staticValue != null) {\n      return JSON.stringify(staticValue)\n    }\n  }\n}\n\n// note: this only removes the attr from the Array (attrsList) so that it\n// doesn't get processed by processAttrs.\n// By default it does NOT remove it from the map (attrsMap) because the map is\n// needed during codegen.\nfunction getAndRemoveAttr (\n  el,\n  name,\n  removeFromMap\n) {\n  var val;\n  if ((val = el.attrsMap[name]) != null) {\n    var list = el.attrsList;\n    for (var i = 0, l = list.length; i < l; i++) {\n      if (list[i].name === name) {\n        list.splice(i, 1);\n        break\n      }\n    }\n  }\n  if (removeFromMap) {\n    delete el.attrsMap[name];\n  }\n  return val\n}\n\n/*  */\n\n/**\n * Cross-platform code generation for component v-model\n */\nfunction genComponentModel (\n  el,\n  value,\n  modifiers\n) {\n  var ref = modifiers || {};\n  var number = ref.number;\n  var trim = ref.trim;\n\n  var baseValueExpression = '$$v';\n  var valueExpression = baseValueExpression;\n  if (trim) {\n    valueExpression =\n      \"(typeof \" + baseValueExpression + \" === 'string'\" +\n      \"? \" + baseValueExpression + \".trim()\" +\n      \": \" + baseValueExpression + \")\";\n  }\n  if (number) {\n    valueExpression = \"_n(\" + valueExpression + \")\";\n  }\n  var assignment = genAssignmentCode(value, valueExpression);\n\n  el.model = {\n    value: (\"(\" + value + \")\"),\n    expression: (\"\\\"\" + value + \"\\\"\"),\n    callback: (\"function (\" + baseValueExpression + \") {\" + assignment + \"}\")\n  };\n}\n\n/**\n * Cross-platform codegen helper for generating v-model value assignment code.\n */\nfunction genAssignmentCode (\n  value,\n  assignment\n) {\n  var res = parseModel(value);\n  if (res.key === null) {\n    return (value + \"=\" + assignment)\n  } else {\n    return (\"$set(\" + (res.exp) + \", \" + (res.key) + \", \" + assignment + \")\")\n  }\n}\n\n/**\n * Parse a v-model expression into a base path and a final key segment.\n * Handles both dot-path and possible square brackets.\n *\n * Possible cases:\n *\n * - test\n * - test[key]\n * - test[test1[key]]\n * - test[\"a\"][key]\n * - xxx.test[a[a].test1[key]]\n * - test.xxx.a[\"asa\"][test1[key]]\n *\n */\n\nvar len;\nvar str;\nvar chr;\nvar index$1;\nvar expressionPos;\nvar expressionEndPos;\n\n\n\nfunction parseModel (val) {\n  // Fix https://github.com/vuejs/vue/pull/7730\n  // allow v-model=\"obj.val \" (trailing whitespace)\n  val = val.trim();\n  len = val.length;\n\n  if (val.indexOf('[') < 0 || val.lastIndexOf(']') < len - 1) {\n    index$1 = val.lastIndexOf('.');\n    if (index$1 > -1) {\n      return {\n        exp: val.slice(0, index$1),\n        key: '\"' + val.slice(index$1 + 1) + '\"'\n      }\n    } else {\n      return {\n        exp: val,\n        key: null\n      }\n    }\n  }\n\n  str = val;\n  index$1 = expressionPos = expressionEndPos = 0;\n\n  while (!eof()) {\n    chr = next();\n    /* istanbul ignore if */\n    if (isStringStart(chr)) {\n      parseString(chr);\n    } else if (chr === 0x5B) {\n      parseBracket(chr);\n    }\n  }\n\n  return {\n    exp: val.slice(0, expressionPos),\n    key: val.slice(expressionPos + 1, expressionEndPos)\n  }\n}\n\nfunction next () {\n  return str.charCodeAt(++index$1)\n}\n\nfunction eof () {\n  return index$1 >= len\n}\n\nfunction isStringStart (chr) {\n  return chr === 0x22 || chr === 0x27\n}\n\nfunction parseBracket (chr) {\n  var inBracket = 1;\n  expressionPos = index$1;\n  while (!eof()) {\n    chr = next();\n    if (isStringStart(chr)) {\n      parseString(chr);\n      continue\n    }\n    if (chr === 0x5B) { inBracket++; }\n    if (chr === 0x5D) { inBracket--; }\n    if (inBracket === 0) {\n      expressionEndPos = index$1;\n      break\n    }\n  }\n}\n\nfunction parseString (chr) {\n  var stringQuote = chr;\n  while (!eof()) {\n    chr = next();\n    if (chr === stringQuote) {\n      break\n    }\n  }\n}\n\n/*  */\n\nvar warn$1;\n\n// in some cases, the event used has to be determined at runtime\n// so we used some reserved tokens during compile.\nvar RANGE_TOKEN = '__r';\nvar CHECKBOX_RADIO_TOKEN = '__c';\n\nfunction model (\n  el,\n  dir,\n  _warn\n) {\n  warn$1 = _warn;\n  var value = dir.value;\n  var modifiers = dir.modifiers;\n  var tag = el.tag;\n  var type = el.attrsMap.type;\n\n  if (process.env.NODE_ENV !== 'production') {\n    // inputs with type=\"file\" are read only and setting the input's\n    // value will throw an error.\n    if (tag === 'input' && type === 'file') {\n      warn$1(\n        \"<\" + (el.tag) + \" v-model=\\\"\" + value + \"\\\" type=\\\"file\\\">:\\n\" +\n        \"File inputs are read only. Use a v-on:change listener instead.\"\n      );\n    }\n  }\n\n  if (el.component) {\n    genComponentModel(el, value, modifiers);\n    // component v-model doesn't need extra runtime\n    return false\n  } else if (tag === 'select') {\n    genSelect(el, value, modifiers);\n  } else if (tag === 'input' && type === 'checkbox') {\n    genCheckboxModel(el, value, modifiers);\n  } else if (tag === 'input' && type === 'radio') {\n    genRadioModel(el, value, modifiers);\n  } else if (tag === 'input' || tag === 'textarea') {\n    genDefaultModel(el, value, modifiers);\n  } else if (!config.isReservedTag(tag)) {\n    genComponentModel(el, value, modifiers);\n    // component v-model doesn't need extra runtime\n    return false\n  } else if (process.env.NODE_ENV !== 'production') {\n    warn$1(\n      \"<\" + (el.tag) + \" v-model=\\\"\" + value + \"\\\">: \" +\n      \"v-model is not supported on this element type. \" +\n      'If you are working with contenteditable, it\\'s recommended to ' +\n      'wrap a library dedicated for that purpose inside a custom component.'\n    );\n  }\n\n  // ensure runtime directive metadata\n  return true\n}\n\nfunction genCheckboxModel (\n  el,\n  value,\n  modifiers\n) {\n  var number = modifiers && modifiers.number;\n  var valueBinding = getBindingAttr(el, 'value') || 'null';\n  var trueValueBinding = getBindingAttr(el, 'true-value') || 'true';\n  var falseValueBinding = getBindingAttr(el, 'false-value') || 'false';\n  addProp(el, 'checked',\n    \"Array.isArray(\" + value + \")\" +\n    \"?_i(\" + value + \",\" + valueBinding + \")>-1\" + (\n      trueValueBinding === 'true'\n        ? (\":(\" + value + \")\")\n        : (\":_q(\" + value + \",\" + trueValueBinding + \")\")\n    )\n  );\n  addHandler(el, 'change',\n    \"var $$a=\" + value + \",\" +\n        '$$el=$event.target,' +\n        \"$$c=$$el.checked?(\" + trueValueBinding + \"):(\" + falseValueBinding + \");\" +\n    'if(Array.isArray($$a)){' +\n      \"var $$v=\" + (number ? '_n(' + valueBinding + ')' : valueBinding) + \",\" +\n          '$$i=_i($$a,$$v);' +\n      \"if($$el.checked){$$i<0&&(\" + (genAssignmentCode(value, '$$a.concat([$$v])')) + \")}\" +\n      \"else{$$i>-1&&(\" + (genAssignmentCode(value, '$$a.slice(0,$$i).concat($$a.slice($$i+1))')) + \")}\" +\n    \"}else{\" + (genAssignmentCode(value, '$$c')) + \"}\",\n    null, true\n  );\n}\n\nfunction genRadioModel (\n  el,\n  value,\n  modifiers\n) {\n  var number = modifiers && modifiers.number;\n  var valueBinding = getBindingAttr(el, 'value') || 'null';\n  valueBinding = number ? (\"_n(\" + valueBinding + \")\") : valueBinding;\n  addProp(el, 'checked', (\"_q(\" + value + \",\" + valueBinding + \")\"));\n  addHandler(el, 'change', genAssignmentCode(value, valueBinding), null, true);\n}\n\nfunction genSelect (\n  el,\n  value,\n  modifiers\n) {\n  var number = modifiers && modifiers.number;\n  var selectedVal = \"Array.prototype.filter\" +\n    \".call($event.target.options,function(o){return o.selected})\" +\n    \".map(function(o){var val = \\\"_value\\\" in o ? o._value : o.value;\" +\n    \"return \" + (number ? '_n(val)' : 'val') + \"})\";\n\n  var assignment = '$event.target.multiple ? $$selectedVal : $$selectedVal[0]';\n  var code = \"var $$selectedVal = \" + selectedVal + \";\";\n  code = code + \" \" + (genAssignmentCode(value, assignment));\n  addHandler(el, 'change', code, null, true);\n}\n\nfunction genDefaultModel (\n  el,\n  value,\n  modifiers\n) {\n  var type = el.attrsMap.type;\n\n  // warn if v-bind:value conflicts with v-model\n  // except for inputs with v-bind:type\n  if (process.env.NODE_ENV !== 'production') {\n    var value$1 = el.attrsMap['v-bind:value'] || el.attrsMap[':value'];\n    var typeBinding = el.attrsMap['v-bind:type'] || el.attrsMap[':type'];\n    if (value$1 && !typeBinding) {\n      var binding = el.attrsMap['v-bind:value'] ? 'v-bind:value' : ':value';\n      warn$1(\n        binding + \"=\\\"\" + value$1 + \"\\\" conflicts with v-model on the same element \" +\n        'because the latter already expands to a value binding internally'\n      );\n    }\n  }\n\n  var ref = modifiers || {};\n  var lazy = ref.lazy;\n  var number = ref.number;\n  var trim = ref.trim;\n  var needCompositionGuard = !lazy && type !== 'range';\n  var event = lazy\n    ? 'change'\n    : type === 'range'\n      ? RANGE_TOKEN\n      : 'input';\n\n  var valueExpression = '$event.target.value';\n  if (trim) {\n    valueExpression = \"$event.target.value.trim()\";\n  }\n  if (number) {\n    valueExpression = \"_n(\" + valueExpression + \")\";\n  }\n\n  var code = genAssignmentCode(value, valueExpression);\n  if (needCompositionGuard) {\n    code = \"if($event.target.composing)return;\" + code;\n  }\n\n  addProp(el, 'value', (\"(\" + value + \")\"));\n  addHandler(el, event, code, null, true);\n  if (trim || number) {\n    addHandler(el, 'blur', '$forceUpdate()');\n  }\n}\n\n/*  */\n\n// normalize v-model event tokens that can only be determined at runtime.\n// it's important to place the event as the first in the array because\n// the whole point is ensuring the v-model callback gets called before\n// user-attached handlers.\nfunction normalizeEvents (on) {\n  /* istanbul ignore if */\n  if (isDef(on[RANGE_TOKEN])) {\n    // IE input[type=range] only supports `change` event\n    var event = isIE ? 'change' : 'input';\n    on[event] = [].concat(on[RANGE_TOKEN], on[event] || []);\n    delete on[RANGE_TOKEN];\n  }\n  // This was originally intended to fix #4521 but no longer necessary\n  // after 2.5. Keeping it for backwards compat with generated code from < 2.4\n  /* istanbul ignore if */\n  if (isDef(on[CHECKBOX_RADIO_TOKEN])) {\n    on.change = [].concat(on[CHECKBOX_RADIO_TOKEN], on.change || []);\n    delete on[CHECKBOX_RADIO_TOKEN];\n  }\n}\n\nvar target$1;\n\nfunction createOnceHandler (handler, event, capture) {\n  var _target = target$1; // save current target element in closure\n  return function onceHandler () {\n    var res = handler.apply(null, arguments);\n    if (res !== null) {\n      remove$2(event, onceHandler, capture, _target);\n    }\n  }\n}\n\nfunction add$1 (\n  event,\n  handler,\n  once$$1,\n  capture,\n  passive\n) {\n  handler = withMacroTask(handler);\n  if (once$$1) { handler = createOnceHandler(handler, event, capture); }\n  target$1.addEventListener(\n    event,\n    handler,\n    supportsPassive\n      ? { capture: capture, passive: passive }\n      : capture\n  );\n}\n\nfunction remove$2 (\n  event,\n  handler,\n  capture,\n  _target\n) {\n  (_target || target$1).removeEventListener(\n    event,\n    handler._withTask || handler,\n    capture\n  );\n}\n\nfunction updateDOMListeners (oldVnode, vnode) {\n  if (isUndef(oldVnode.data.on) && isUndef(vnode.data.on)) {\n    return\n  }\n  var on = vnode.data.on || {};\n  var oldOn = oldVnode.data.on || {};\n  target$1 = vnode.elm;\n  normalizeEvents(on);\n  updateListeners(on, oldOn, add$1, remove$2, vnode.context);\n  target$1 = undefined;\n}\n\nvar events = {\n  create: updateDOMListeners,\n  update: updateDOMListeners\n}\n\n/*  */\n\nfunction updateDOMProps (oldVnode, vnode) {\n  if (isUndef(oldVnode.data.domProps) && isUndef(vnode.data.domProps)) {\n    return\n  }\n  var key, cur;\n  var elm = vnode.elm;\n  var oldProps = oldVnode.data.domProps || {};\n  var props = vnode.data.domProps || {};\n  // clone observed objects, as the user probably wants to mutate it\n  if (isDef(props.__ob__)) {\n    props = vnode.data.domProps = extend({}, props);\n  }\n\n  for (key in oldProps) {\n    if (isUndef(props[key])) {\n      elm[key] = '';\n    }\n  }\n  for (key in props) {\n    cur = props[key];\n    // ignore children if the node has textContent or innerHTML,\n    // as these will throw away existing DOM nodes and cause removal errors\n    // on subsequent patches (#3360)\n    if (key === 'textContent' || key === 'innerHTML') {\n      if (vnode.children) { vnode.children.length = 0; }\n      if (cur === oldProps[key]) { continue }\n      // #6601 work around Chrome version <= 55 bug where single textNode\n      // replaced by innerHTML/textContent retains its parentNode property\n      if (elm.childNodes.length === 1) {\n        elm.removeChild(elm.childNodes[0]);\n      }\n    }\n\n    if (key === 'value') {\n      // store value as _value as well since\n      // non-string values will be stringified\n      elm._value = cur;\n      // avoid resetting cursor position when value is the same\n      var strCur = isUndef(cur) ? '' : String(cur);\n      if (shouldUpdateValue(elm, strCur)) {\n        elm.value = strCur;\n      }\n    } else {\n      elm[key] = cur;\n    }\n  }\n}\n\n// check platforms/web/util/attrs.js acceptValue\n\n\nfunction shouldUpdateValue (elm, checkVal) {\n  return (!elm.composing && (\n    elm.tagName === 'OPTION' ||\n    isNotInFocusAndDirty(elm, checkVal) ||\n    isDirtyWithModifiers(elm, checkVal)\n  ))\n}\n\nfunction isNotInFocusAndDirty (elm, checkVal) {\n  // return true when textbox (.number and .trim) loses focus and its value is\n  // not equal to the updated value\n  var notInFocus = true;\n  // #6157\n  // work around IE bug when accessing document.activeElement in an iframe\n  try { notInFocus = document.activeElement !== elm; } catch (e) {}\n  return notInFocus && elm.value !== checkVal\n}\n\nfunction isDirtyWithModifiers (elm, newVal) {\n  var value = elm.value;\n  var modifiers = elm._vModifiers; // injected by v-model runtime\n  if (isDef(modifiers)) {\n    if (modifiers.lazy) {\n      // inputs with lazy should only be updated when not in focus\n      return false\n    }\n    if (modifiers.number) {\n      return toNumber(value) !== toNumber(newVal)\n    }\n    if (modifiers.trim) {\n      return value.trim() !== newVal.trim()\n    }\n  }\n  return value !== newVal\n}\n\nvar domProps = {\n  create: updateDOMProps,\n  update: updateDOMProps\n}\n\n/*  */\n\nvar parseStyleText = cached(function (cssText) {\n  var res = {};\n  var listDelimiter = /;(?![^(]*\\))/g;\n  var propertyDelimiter = /:(.+)/;\n  cssText.split(listDelimiter).forEach(function (item) {\n    if (item) {\n      var tmp = item.split(propertyDelimiter);\n      tmp.length > 1 && (res[tmp[0].trim()] = tmp[1].trim());\n    }\n  });\n  return res\n});\n\n// merge static and dynamic style data on the same vnode\nfunction normalizeStyleData (data) {\n  var style = normalizeStyleBinding(data.style);\n  // static style is pre-processed into an object during compilation\n  // and is always a fresh object, so it's safe to merge into it\n  return data.staticStyle\n    ? extend(data.staticStyle, style)\n    : style\n}\n\n// normalize possible array / string values into Object\nfunction normalizeStyleBinding (bindingStyle) {\n  if (Array.isArray(bindingStyle)) {\n    return toObject(bindingStyle)\n  }\n  if (typeof bindingStyle === 'string') {\n    return parseStyleText(bindingStyle)\n  }\n  return bindingStyle\n}\n\n/**\n * parent component style should be after child's\n * so that parent component's style could override it\n */\nfunction getStyle (vnode, checkChild) {\n  var res = {};\n  var styleData;\n\n  if (checkChild) {\n    var childNode = vnode;\n    while (childNode.componentInstance) {\n      childNode = childNode.componentInstance._vnode;\n      if (\n        childNode && childNode.data &&\n        (styleData = normalizeStyleData(childNode.data))\n      ) {\n        extend(res, styleData);\n      }\n    }\n  }\n\n  if ((styleData = normalizeStyleData(vnode.data))) {\n    extend(res, styleData);\n  }\n\n  var parentNode = vnode;\n  while ((parentNode = parentNode.parent)) {\n    if (parentNode.data && (styleData = normalizeStyleData(parentNode.data))) {\n      extend(res, styleData);\n    }\n  }\n  return res\n}\n\n/*  */\n\nvar cssVarRE = /^--/;\nvar importantRE = /\\s*!important$/;\nvar setProp = function (el, name, val) {\n  /* istanbul ignore if */\n  if (cssVarRE.test(name)) {\n    el.style.setProperty(name, val);\n  } else if (importantRE.test(val)) {\n    el.style.setProperty(name, val.replace(importantRE, ''), 'important');\n  } else {\n    var normalizedName = normalize(name);\n    if (Array.isArray(val)) {\n      // Support values array created by autoprefixer, e.g.\n      // {display: [\"-webkit-box\", \"-ms-flexbox\", \"flex\"]}\n      // Set them one by one, and the browser will only set those it can recognize\n      for (var i = 0, len = val.length; i < len; i++) {\n        el.style[normalizedName] = val[i];\n      }\n    } else {\n      el.style[normalizedName] = val;\n    }\n  }\n};\n\nvar vendorNames = ['Webkit', 'Moz', 'ms'];\n\nvar emptyStyle;\nvar normalize = cached(function (prop) {\n  emptyStyle = emptyStyle || document.createElement('div').style;\n  prop = camelize(prop);\n  if (prop !== 'filter' && (prop in emptyStyle)) {\n    return prop\n  }\n  var capName = prop.charAt(0).toUpperCase() + prop.slice(1);\n  for (var i = 0; i < vendorNames.length; i++) {\n    var name = vendorNames[i] + capName;\n    if (name in emptyStyle) {\n      return name\n    }\n  }\n});\n\nfunction updateStyle (oldVnode, vnode) {\n  var data = vnode.data;\n  var oldData = oldVnode.data;\n\n  if (isUndef(data.staticStyle) && isUndef(data.style) &&\n    isUndef(oldData.staticStyle) && isUndef(oldData.style)\n  ) {\n    return\n  }\n\n  var cur, name;\n  var el = vnode.elm;\n  var oldStaticStyle = oldData.staticStyle;\n  var oldStyleBinding = oldData.normalizedStyle || oldData.style || {};\n\n  // if static style exists, stylebinding already merged into it when doing normalizeStyleData\n  var oldStyle = oldStaticStyle || oldStyleBinding;\n\n  var style = normalizeStyleBinding(vnode.data.style) || {};\n\n  // store normalized style under a different key for next diff\n  // make sure to clone it if it's reactive, since the user likely wants\n  // to mutate it.\n  vnode.data.normalizedStyle = isDef(style.__ob__)\n    ? extend({}, style)\n    : style;\n\n  var newStyle = getStyle(vnode, true);\n\n  for (name in oldStyle) {\n    if (isUndef(newStyle[name])) {\n      setProp(el, name, '');\n    }\n  }\n  for (name in newStyle) {\n    cur = newStyle[name];\n    if (cur !== oldStyle[name]) {\n      // ie9 setting to null has no effect, must use empty string\n      setProp(el, name, cur == null ? '' : cur);\n    }\n  }\n}\n\nvar style = {\n  create: updateStyle,\n  update: updateStyle\n}\n\n/*  */\n\n/**\n * Add class with compatibility for SVG since classList is not supported on\n * SVG elements in IE\n */\nfunction addClass (el, cls) {\n  /* istanbul ignore if */\n  if (!cls || !(cls = cls.trim())) {\n    return\n  }\n\n  /* istanbul ignore else */\n  if (el.classList) {\n    if (cls.indexOf(' ') > -1) {\n      cls.split(/\\s+/).forEach(function (c) { return el.classList.add(c); });\n    } else {\n      el.classList.add(cls);\n    }\n  } else {\n    var cur = \" \" + (el.getAttribute('class') || '') + \" \";\n    if (cur.indexOf(' ' + cls + ' ') < 0) {\n      el.setAttribute('class', (cur + cls).trim());\n    }\n  }\n}\n\n/**\n * Remove class with compatibility for SVG since classList is not supported on\n * SVG elements in IE\n */\nfunction removeClass (el, cls) {\n  /* istanbul ignore if */\n  if (!cls || !(cls = cls.trim())) {\n    return\n  }\n\n  /* istanbul ignore else */\n  if (el.classList) {\n    if (cls.indexOf(' ') > -1) {\n      cls.split(/\\s+/).forEach(function (c) { return el.classList.remove(c); });\n    } else {\n      el.classList.remove(cls);\n    }\n    if (!el.classList.length) {\n      el.removeAttribute('class');\n    }\n  } else {\n    var cur = \" \" + (el.getAttribute('class') || '') + \" \";\n    var tar = ' ' + cls + ' ';\n    while (cur.indexOf(tar) >= 0) {\n      cur = cur.replace(tar, ' ');\n    }\n    cur = cur.trim();\n    if (cur) {\n      el.setAttribute('class', cur);\n    } else {\n      el.removeAttribute('class');\n    }\n  }\n}\n\n/*  */\n\nfunction resolveTransition (def) {\n  if (!def) {\n    return\n  }\n  /* istanbul ignore else */\n  if (typeof def === 'object') {\n    var res = {};\n    if (def.css !== false) {\n      extend(res, autoCssTransition(def.name || 'v'));\n    }\n    extend(res, def);\n    return res\n  } else if (typeof def === 'string') {\n    return autoCssTransition(def)\n  }\n}\n\nvar autoCssTransition = cached(function (name) {\n  return {\n    enterClass: (name + \"-enter\"),\n    enterToClass: (name + \"-enter-to\"),\n    enterActiveClass: (name + \"-enter-active\"),\n    leaveClass: (name + \"-leave\"),\n    leaveToClass: (name + \"-leave-to\"),\n    leaveActiveClass: (name + \"-leave-active\")\n  }\n});\n\nvar hasTransition = inBrowser && !isIE9;\nvar TRANSITION = 'transition';\nvar ANIMATION = 'animation';\n\n// Transition property/event sniffing\nvar transitionProp = 'transition';\nvar transitionEndEvent = 'transitionend';\nvar animationProp = 'animation';\nvar animationEndEvent = 'animationend';\nif (hasTransition) {\n  /* istanbul ignore if */\n  if (window.ontransitionend === undefined &&\n    window.onwebkittransitionend !== undefined\n  ) {\n    transitionProp = 'WebkitTransition';\n    transitionEndEvent = 'webkitTransitionEnd';\n  }\n  if (window.onanimationend === undefined &&\n    window.onwebkitanimationend !== undefined\n  ) {\n    animationProp = 'WebkitAnimation';\n    animationEndEvent = 'webkitAnimationEnd';\n  }\n}\n\n// binding to window is necessary to make hot reload work in IE in strict mode\nvar raf = inBrowser\n  ? window.requestAnimationFrame\n    ? window.requestAnimationFrame.bind(window)\n    : setTimeout\n  : /* istanbul ignore next */ function (fn) { return fn(); };\n\nfunction nextFrame (fn) {\n  raf(function () {\n    raf(fn);\n  });\n}\n\nfunction addTransitionClass (el, cls) {\n  var transitionClasses = el._transitionClasses || (el._transitionClasses = []);\n  if (transitionClasses.indexOf(cls) < 0) {\n    transitionClasses.push(cls);\n    addClass(el, cls);\n  }\n}\n\nfunction removeTransitionClass (el, cls) {\n  if (el._transitionClasses) {\n    remove(el._transitionClasses, cls);\n  }\n  removeClass(el, cls);\n}\n\nfunction whenTransitionEnds (\n  el,\n  expectedType,\n  cb\n) {\n  var ref = getTransitionInfo(el, expectedType);\n  var type = ref.type;\n  var timeout = ref.timeout;\n  var propCount = ref.propCount;\n  if (!type) { return cb() }\n  var event = type === TRANSITION ? transitionEndEvent : animationEndEvent;\n  var ended = 0;\n  var end = function () {\n    el.removeEventListener(event, onEnd);\n    cb();\n  };\n  var onEnd = function (e) {\n    if (e.target === el) {\n      if (++ended >= propCount) {\n        end();\n      }\n    }\n  };\n  setTimeout(function () {\n    if (ended < propCount) {\n      end();\n    }\n  }, timeout + 1);\n  el.addEventListener(event, onEnd);\n}\n\nvar transformRE = /\\b(transform|all)(,|$)/;\n\nfunction getTransitionInfo (el, expectedType) {\n  var styles = window.getComputedStyle(el);\n  var transitionDelays = styles[transitionProp + 'Delay'].split(', ');\n  var transitionDurations = styles[transitionProp + 'Duration'].split(', ');\n  var transitionTimeout = getTimeout(transitionDelays, transitionDurations);\n  var animationDelays = styles[animationProp + 'Delay'].split(', ');\n  var animationDurations = styles[animationProp + 'Duration'].split(', ');\n  var animationTimeout = getTimeout(animationDelays, animationDurations);\n\n  var type;\n  var timeout = 0;\n  var propCount = 0;\n  /* istanbul ignore if */\n  if (expectedType === TRANSITION) {\n    if (transitionTimeout > 0) {\n      type = TRANSITION;\n      timeout = transitionTimeout;\n      propCount = transitionDurations.length;\n    }\n  } else if (expectedType === ANIMATION) {\n    if (animationTimeout > 0) {\n      type = ANIMATION;\n      timeout = animationTimeout;\n      propCount = animationDurations.length;\n    }\n  } else {\n    timeout = Math.max(transitionTimeout, animationTimeout);\n    type = timeout > 0\n      ? transitionTimeout > animationTimeout\n        ? TRANSITION\n        : ANIMATION\n      : null;\n    propCount = type\n      ? type === TRANSITION\n        ? transitionDurations.length\n        : animationDurations.length\n      : 0;\n  }\n  var hasTransform =\n    type === TRANSITION &&\n    transformRE.test(styles[transitionProp + 'Property']);\n  return {\n    type: type,\n    timeout: timeout,\n    propCount: propCount,\n    hasTransform: hasTransform\n  }\n}\n\nfunction getTimeout (delays, durations) {\n  /* istanbul ignore next */\n  while (delays.length < durations.length) {\n    delays = delays.concat(delays);\n  }\n\n  return Math.max.apply(null, durations.map(function (d, i) {\n    return toMs(d) + toMs(delays[i])\n  }))\n}\n\nfunction toMs (s) {\n  return Number(s.slice(0, -1)) * 1000\n}\n\n/*  */\n\nfunction enter (vnode, toggleDisplay) {\n  var el = vnode.elm;\n\n  // call leave callback now\n  if (isDef(el._leaveCb)) {\n    el._leaveCb.cancelled = true;\n    el._leaveCb();\n  }\n\n  var data = resolveTransition(vnode.data.transition);\n  if (isUndef(data)) {\n    return\n  }\n\n  /* istanbul ignore if */\n  if (isDef(el._enterCb) || el.nodeType !== 1) {\n    return\n  }\n\n  var css = data.css;\n  var type = data.type;\n  var enterClass = data.enterClass;\n  var enterToClass = data.enterToClass;\n  var enterActiveClass = data.enterActiveClass;\n  var appearClass = data.appearClass;\n  var appearToClass = data.appearToClass;\n  var appearActiveClass = data.appearActiveClass;\n  var beforeEnter = data.beforeEnter;\n  var enter = data.enter;\n  var afterEnter = data.afterEnter;\n  var enterCancelled = data.enterCancelled;\n  var beforeAppear = data.beforeAppear;\n  var appear = data.appear;\n  var afterAppear = data.afterAppear;\n  var appearCancelled = data.appearCancelled;\n  var duration = data.duration;\n\n  // activeInstance will always be the <transition> component managing this\n  // transition. One edge case to check is when the <transition> is placed\n  // as the root node of a child component. In that case we need to check\n  // <transition>'s parent for appear check.\n  var context = activeInstance;\n  var transitionNode = activeInstance.$vnode;\n  while (transitionNode && transitionNode.parent) {\n    transitionNode = transitionNode.parent;\n    context = transitionNode.context;\n  }\n\n  var isAppear = !context._isMounted || !vnode.isRootInsert;\n\n  if (isAppear && !appear && appear !== '') {\n    return\n  }\n\n  var startClass = isAppear && appearClass\n    ? appearClass\n    : enterClass;\n  var activeClass = isAppear && appearActiveClass\n    ? appearActiveClass\n    : enterActiveClass;\n  var toClass = isAppear && appearToClass\n    ? appearToClass\n    : enterToClass;\n\n  var beforeEnterHook = isAppear\n    ? (beforeAppear || beforeEnter)\n    : beforeEnter;\n  var enterHook = isAppear\n    ? (typeof appear === 'function' ? appear : enter)\n    : enter;\n  var afterEnterHook = isAppear\n    ? (afterAppear || afterEnter)\n    : afterEnter;\n  var enterCancelledHook = isAppear\n    ? (appearCancelled || enterCancelled)\n    : enterCancelled;\n\n  var explicitEnterDuration = toNumber(\n    isObject(duration)\n      ? duration.enter\n      : duration\n  );\n\n  if (process.env.NODE_ENV !== 'production' && explicitEnterDuration != null) {\n    checkDuration(explicitEnterDuration, 'enter', vnode);\n  }\n\n  var expectsCSS = css !== false && !isIE9;\n  var userWantsControl = getHookArgumentsLength(enterHook);\n\n  var cb = el._enterCb = once(function () {\n    if (expectsCSS) {\n      removeTransitionClass(el, toClass);\n      removeTransitionClass(el, activeClass);\n    }\n    if (cb.cancelled) {\n      if (expectsCSS) {\n        removeTransitionClass(el, startClass);\n      }\n      enterCancelledHook && enterCancelledHook(el);\n    } else {\n      afterEnterHook && afterEnterHook(el);\n    }\n    el._enterCb = null;\n  });\n\n  if (!vnode.data.show) {\n    // remove pending leave element on enter by injecting an insert hook\n    mergeVNodeHook(vnode, 'insert', function () {\n      var parent = el.parentNode;\n      var pendingNode = parent && parent._pending && parent._pending[vnode.key];\n      if (pendingNode &&\n        pendingNode.tag === vnode.tag &&\n        pendingNode.elm._leaveCb\n      ) {\n        pendingNode.elm._leaveCb();\n      }\n      enterHook && enterHook(el, cb);\n    });\n  }\n\n  // start enter transition\n  beforeEnterHook && beforeEnterHook(el);\n  if (expectsCSS) {\n    addTransitionClass(el, startClass);\n    addTransitionClass(el, activeClass);\n    nextFrame(function () {\n      removeTransitionClass(el, startClass);\n      if (!cb.cancelled) {\n        addTransitionClass(el, toClass);\n        if (!userWantsControl) {\n          if (isValidDuration(explicitEnterDuration)) {\n            setTimeout(cb, explicitEnterDuration);\n          } else {\n            whenTransitionEnds(el, type, cb);\n          }\n        }\n      }\n    });\n  }\n\n  if (vnode.data.show) {\n    toggleDisplay && toggleDisplay();\n    enterHook && enterHook(el, cb);\n  }\n\n  if (!expectsCSS && !userWantsControl) {\n    cb();\n  }\n}\n\nfunction leave (vnode, rm) {\n  var el = vnode.elm;\n\n  // call enter callback now\n  if (isDef(el._enterCb)) {\n    el._enterCb.cancelled = true;\n    el._enterCb();\n  }\n\n  var data = resolveTransition(vnode.data.transition);\n  if (isUndef(data) || el.nodeType !== 1) {\n    return rm()\n  }\n\n  /* istanbul ignore if */\n  if (isDef(el._leaveCb)) {\n    return\n  }\n\n  var css = data.css;\n  var type = data.type;\n  var leaveClass = data.leaveClass;\n  var leaveToClass = data.leaveToClass;\n  var leaveActiveClass = data.leaveActiveClass;\n  var beforeLeave = data.beforeLeave;\n  var leave = data.leave;\n  var afterLeave = data.afterLeave;\n  var leaveCancelled = data.leaveCancelled;\n  var delayLeave = data.delayLeave;\n  var duration = data.duration;\n\n  var expectsCSS = css !== false && !isIE9;\n  var userWantsControl = getHookArgumentsLength(leave);\n\n  var explicitLeaveDuration = toNumber(\n    isObject(duration)\n      ? duration.leave\n      : duration\n  );\n\n  if (process.env.NODE_ENV !== 'production' && isDef(explicitLeaveDuration)) {\n    checkDuration(explicitLeaveDuration, 'leave', vnode);\n  }\n\n  var cb = el._leaveCb = once(function () {\n    if (el.parentNode && el.parentNode._pending) {\n      el.parentNode._pending[vnode.key] = null;\n    }\n    if (expectsCSS) {\n      removeTransitionClass(el, leaveToClass);\n      removeTransitionClass(el, leaveActiveClass);\n    }\n    if (cb.cancelled) {\n      if (expectsCSS) {\n        removeTransitionClass(el, leaveClass);\n      }\n      leaveCancelled && leaveCancelled(el);\n    } else {\n      rm();\n      afterLeave && afterLeave(el);\n    }\n    el._leaveCb = null;\n  });\n\n  if (delayLeave) {\n    delayLeave(performLeave);\n  } else {\n    performLeave();\n  }\n\n  function performLeave () {\n    // the delayed leave may have already been cancelled\n    if (cb.cancelled) {\n      return\n    }\n    // record leaving element\n    if (!vnode.data.show) {\n      (el.parentNode._pending || (el.parentNode._pending = {}))[(vnode.key)] = vnode;\n    }\n    beforeLeave && beforeLeave(el);\n    if (expectsCSS) {\n      addTransitionClass(el, leaveClass);\n      addTransitionClass(el, leaveActiveClass);\n      nextFrame(function () {\n        removeTransitionClass(el, leaveClass);\n        if (!cb.cancelled) {\n          addTransitionClass(el, leaveToClass);\n          if (!userWantsControl) {\n            if (isValidDuration(explicitLeaveDuration)) {\n              setTimeout(cb, explicitLeaveDuration);\n            } else {\n              whenTransitionEnds(el, type, cb);\n            }\n          }\n        }\n      });\n    }\n    leave && leave(el, cb);\n    if (!expectsCSS && !userWantsControl) {\n      cb();\n    }\n  }\n}\n\n// only used in dev mode\nfunction checkDuration (val, name, vnode) {\n  if (typeof val !== 'number') {\n    warn(\n      \"<transition> explicit \" + name + \" duration is not a valid number - \" +\n      \"got \" + (JSON.stringify(val)) + \".\",\n      vnode.context\n    );\n  } else if (isNaN(val)) {\n    warn(\n      \"<transition> explicit \" + name + \" duration is NaN - \" +\n      'the duration expression might be incorrect.',\n      vnode.context\n    );\n  }\n}\n\nfunction isValidDuration (val) {\n  return typeof val === 'number' && !isNaN(val)\n}\n\n/**\n * Normalize a transition hook's argument length. The hook may be:\n * - a merged hook (invoker) with the original in .fns\n * - a wrapped component method (check ._length)\n * - a plain function (.length)\n */\nfunction getHookArgumentsLength (fn) {\n  if (isUndef(fn)) {\n    return false\n  }\n  var invokerFns = fn.fns;\n  if (isDef(invokerFns)) {\n    // invoker\n    return getHookArgumentsLength(\n      Array.isArray(invokerFns)\n        ? invokerFns[0]\n        : invokerFns\n    )\n  } else {\n    return (fn._length || fn.length) > 1\n  }\n}\n\nfunction _enter (_, vnode) {\n  if (vnode.data.show !== true) {\n    enter(vnode);\n  }\n}\n\nvar transition = inBrowser ? {\n  create: _enter,\n  activate: _enter,\n  remove: function remove$$1 (vnode, rm) {\n    /* istanbul ignore else */\n    if (vnode.data.show !== true) {\n      leave(vnode, rm);\n    } else {\n      rm();\n    }\n  }\n} : {}\n\nvar platformModules = [\n  attrs,\n  klass,\n  events,\n  domProps,\n  style,\n  transition\n]\n\n/*  */\n\n// the directive module should be applied last, after all\n// built-in modules have been applied.\nvar modules = platformModules.concat(baseModules);\n\nvar patch = createPatchFunction({ nodeOps: nodeOps, modules: modules });\n\n/**\n * Not type checking this file because flow doesn't like attaching\n * properties to Elements.\n */\n\n/* istanbul ignore if */\nif (isIE9) {\n  // http://www.matts411.com/post/internet-explorer-9-oninput/\n  document.addEventListener('selectionchange', function () {\n    var el = document.activeElement;\n    if (el && el.vmodel) {\n      trigger(el, 'input');\n    }\n  });\n}\n\nvar directive = {\n  inserted: function inserted (el, binding, vnode, oldVnode) {\n    if (vnode.tag === 'select') {\n      // #6903\n      if (oldVnode.elm && !oldVnode.elm._vOptions) {\n        mergeVNodeHook(vnode, 'postpatch', function () {\n          directive.componentUpdated(el, binding, vnode);\n        });\n      } else {\n        setSelected(el, binding, vnode.context);\n      }\n      el._vOptions = [].map.call(el.options, getValue);\n    } else if (vnode.tag === 'textarea' || isTextInputType(el.type)) {\n      el._vModifiers = binding.modifiers;\n      if (!binding.modifiers.lazy) {\n        el.addEventListener('compositionstart', onCompositionStart);\n        el.addEventListener('compositionend', onCompositionEnd);\n        // Safari < 10.2 & UIWebView doesn't fire compositionend when\n        // switching focus before confirming composition choice\n        // this also fixes the issue where some browsers e.g. iOS Chrome\n        // fires \"change\" instead of \"input\" on autocomplete.\n        el.addEventListener('change', onCompositionEnd);\n        /* istanbul ignore if */\n        if (isIE9) {\n          el.vmodel = true;\n        }\n      }\n    }\n  },\n\n  componentUpdated: function componentUpdated (el, binding, vnode) {\n    if (vnode.tag === 'select') {\n      setSelected(el, binding, vnode.context);\n      // in case the options rendered by v-for have changed,\n      // it's possible that the value is out-of-sync with the rendered options.\n      // detect such cases and filter out values that no longer has a matching\n      // option in the DOM.\n      var prevOptions = el._vOptions;\n      var curOptions = el._vOptions = [].map.call(el.options, getValue);\n      if (curOptions.some(function (o, i) { return !looseEqual(o, prevOptions[i]); })) {\n        // trigger change event if\n        // no matching option found for at least one value\n        var needReset = el.multiple\n          ? binding.value.some(function (v) { return hasNoMatchingOption(v, curOptions); })\n          : binding.value !== binding.oldValue && hasNoMatchingOption(binding.value, curOptions);\n        if (needReset) {\n          trigger(el, 'change');\n        }\n      }\n    }\n  }\n};\n\nfunction setSelected (el, binding, vm) {\n  actuallySetSelected(el, binding, vm);\n  /* istanbul ignore if */\n  if (isIE || isEdge) {\n    setTimeout(function () {\n      actuallySetSelected(el, binding, vm);\n    }, 0);\n  }\n}\n\nfunction actuallySetSelected (el, binding, vm) {\n  var value = binding.value;\n  var isMultiple = el.multiple;\n  if (isMultiple && !Array.isArray(value)) {\n    process.env.NODE_ENV !== 'production' && warn(\n      \"<select multiple v-model=\\\"\" + (binding.expression) + \"\\\"> \" +\n      \"expects an Array value for its binding, but got \" + (Object.prototype.toString.call(value).slice(8, -1)),\n      vm\n    );\n    return\n  }\n  var selected, option;\n  for (var i = 0, l = el.options.length; i < l; i++) {\n    option = el.options[i];\n    if (isMultiple) {\n      selected = looseIndexOf(value, getValue(option)) > -1;\n      if (option.selected !== selected) {\n        option.selected = selected;\n      }\n    } else {\n      if (looseEqual(getValue(option), value)) {\n        if (el.selectedIndex !== i) {\n          el.selectedIndex = i;\n        }\n        return\n      }\n    }\n  }\n  if (!isMultiple) {\n    el.selectedIndex = -1;\n  }\n}\n\nfunction hasNoMatchingOption (value, options) {\n  return options.every(function (o) { return !looseEqual(o, value); })\n}\n\nfunction getValue (option) {\n  return '_value' in option\n    ? option._value\n    : option.value\n}\n\nfunction onCompositionStart (e) {\n  e.target.composing = true;\n}\n\nfunction onCompositionEnd (e) {\n  // prevent triggering an input event for no reason\n  if (!e.target.composing) { return }\n  e.target.composing = false;\n  trigger(e.target, 'input');\n}\n\nfunction trigger (el, type) {\n  var e = document.createEvent('HTMLEvents');\n  e.initEvent(type, true, true);\n  el.dispatchEvent(e);\n}\n\n/*  */\n\n// recursively search for possible transition defined inside the component root\nfunction locateNode (vnode) {\n  return vnode.componentInstance && (!vnode.data || !vnode.data.transition)\n    ? locateNode(vnode.componentInstance._vnode)\n    : vnode\n}\n\nvar show = {\n  bind: function bind (el, ref, vnode) {\n    var value = ref.value;\n\n    vnode = locateNode(vnode);\n    var transition$$1 = vnode.data && vnode.data.transition;\n    var originalDisplay = el.__vOriginalDisplay =\n      el.style.display === 'none' ? '' : el.style.display;\n    if (value && transition$$1) {\n      vnode.data.show = true;\n      enter(vnode, function () {\n        el.style.display = originalDisplay;\n      });\n    } else {\n      el.style.display = value ? originalDisplay : 'none';\n    }\n  },\n\n  update: function update (el, ref, vnode) {\n    var value = ref.value;\n    var oldValue = ref.oldValue;\n\n    /* istanbul ignore if */\n    if (!value === !oldValue) { return }\n    vnode = locateNode(vnode);\n    var transition$$1 = vnode.data && vnode.data.transition;\n    if (transition$$1) {\n      vnode.data.show = true;\n      if (value) {\n        enter(vnode, function () {\n          el.style.display = el.__vOriginalDisplay;\n        });\n      } else {\n        leave(vnode, function () {\n          el.style.display = 'none';\n        });\n      }\n    } else {\n      el.style.display = value ? el.__vOriginalDisplay : 'none';\n    }\n  },\n\n  unbind: function unbind (\n    el,\n    binding,\n    vnode,\n    oldVnode,\n    isDestroy\n  ) {\n    if (!isDestroy) {\n      el.style.display = el.__vOriginalDisplay;\n    }\n  }\n}\n\nvar platformDirectives = {\n  model: directive,\n  show: show\n}\n\n/*  */\n\n// Provides transition support for a single element/component.\n// supports transition mode (out-in / in-out)\n\nvar transitionProps = {\n  name: String,\n  appear: Boolean,\n  css: Boolean,\n  mode: String,\n  type: String,\n  enterClass: String,\n  leaveClass: String,\n  enterToClass: String,\n  leaveToClass: String,\n  enterActiveClass: String,\n  leaveActiveClass: String,\n  appearClass: String,\n  appearActiveClass: String,\n  appearToClass: String,\n  duration: [Number, String, Object]\n};\n\n// in case the child is also an abstract component, e.g. <keep-alive>\n// we want to recursively retrieve the real component to be rendered\nfunction getRealChild (vnode) {\n  var compOptions = vnode && vnode.componentOptions;\n  if (compOptions && compOptions.Ctor.options.abstract) {\n    return getRealChild(getFirstComponentChild(compOptions.children))\n  } else {\n    return vnode\n  }\n}\n\nfunction extractTransitionData (comp) {\n  var data = {};\n  var options = comp.$options;\n  // props\n  for (var key in options.propsData) {\n    data[key] = comp[key];\n  }\n  // events.\n  // extract listeners and pass them directly to the transition methods\n  var listeners = options._parentListeners;\n  for (var key$1 in listeners) {\n    data[camelize(key$1)] = listeners[key$1];\n  }\n  return data\n}\n\nfunction placeholder (h, rawChild) {\n  if (/\\d-keep-alive$/.test(rawChild.tag)) {\n    return h('keep-alive', {\n      props: rawChild.componentOptions.propsData\n    })\n  }\n}\n\nfunction hasParentTransition (vnode) {\n  while ((vnode = vnode.parent)) {\n    if (vnode.data.transition) {\n      return true\n    }\n  }\n}\n\nfunction isSameChild (child, oldChild) {\n  return oldChild.key === child.key && oldChild.tag === child.tag\n}\n\nvar Transition = {\n  name: 'transition',\n  props: transitionProps,\n  abstract: true,\n\n  render: function render (h) {\n    var this$1 = this;\n\n    var children = this.$slots.default;\n    if (!children) {\n      return\n    }\n\n    // filter out text nodes (possible whitespaces)\n    children = children.filter(function (c) { return c.tag || isAsyncPlaceholder(c); });\n    /* istanbul ignore if */\n    if (!children.length) {\n      return\n    }\n\n    // warn multiple elements\n    if (process.env.NODE_ENV !== 'production' && children.length > 1) {\n      warn(\n        '<transition> can only be used on a single element. Use ' +\n        '<transition-group> for lists.',\n        this.$parent\n      );\n    }\n\n    var mode = this.mode;\n\n    // warn invalid mode\n    if (process.env.NODE_ENV !== 'production' &&\n      mode && mode !== 'in-out' && mode !== 'out-in'\n    ) {\n      warn(\n        'invalid <transition> mode: ' + mode,\n        this.$parent\n      );\n    }\n\n    var rawChild = children[0];\n\n    // if this is a component root node and the component's\n    // parent container node also has transition, skip.\n    if (hasParentTransition(this.$vnode)) {\n      return rawChild\n    }\n\n    // apply transition data to child\n    // use getRealChild() to ignore abstract components e.g. keep-alive\n    var child = getRealChild(rawChild);\n    /* istanbul ignore if */\n    if (!child) {\n      return rawChild\n    }\n\n    if (this._leaving) {\n      return placeholder(h, rawChild)\n    }\n\n    // ensure a key that is unique to the vnode type and to this transition\n    // component instance. This key will be used to remove pending leaving nodes\n    // during entering.\n    var id = \"__transition-\" + (this._uid) + \"-\";\n    child.key = child.key == null\n      ? child.isComment\n        ? id + 'comment'\n        : id + child.tag\n      : isPrimitive(child.key)\n        ? (String(child.key).indexOf(id) === 0 ? child.key : id + child.key)\n        : child.key;\n\n    var data = (child.data || (child.data = {})).transition = extractTransitionData(this);\n    var oldRawChild = this._vnode;\n    var oldChild = getRealChild(oldRawChild);\n\n    // mark v-show\n    // so that the transition module can hand over the control to the directive\n    if (child.data.directives && child.data.directives.some(function (d) { return d.name === 'show'; })) {\n      child.data.show = true;\n    }\n\n    if (\n      oldChild &&\n      oldChild.data &&\n      !isSameChild(child, oldChild) &&\n      !isAsyncPlaceholder(oldChild) &&\n      // #6687 component root is a comment node\n      !(oldChild.componentInstance && oldChild.componentInstance._vnode.isComment)\n    ) {\n      // replace old child transition data with fresh one\n      // important for dynamic transitions!\n      var oldData = oldChild.data.transition = extend({}, data);\n      // handle transition mode\n      if (mode === 'out-in') {\n        // return placeholder node and queue update when leave finishes\n        this._leaving = true;\n        mergeVNodeHook(oldData, 'afterLeave', function () {\n          this$1._leaving = false;\n          this$1.$forceUpdate();\n        });\n        return placeholder(h, rawChild)\n      } else if (mode === 'in-out') {\n        if (isAsyncPlaceholder(child)) {\n          return oldRawChild\n        }\n        var delayedLeave;\n        var performLeave = function () { delayedLeave(); };\n        mergeVNodeHook(data, 'afterEnter', performLeave);\n        mergeVNodeHook(data, 'enterCancelled', performLeave);\n        mergeVNodeHook(oldData, 'delayLeave', function (leave) { delayedLeave = leave; });\n      }\n    }\n\n    return rawChild\n  }\n}\n\n/*  */\n\n// Provides transition support for list items.\n// supports move transitions using the FLIP technique.\n\n// Because the vdom's children update algorithm is \"unstable\" - i.e.\n// it doesn't guarantee the relative positioning of removed elements,\n// we force transition-group to update its children into two passes:\n// in the first pass, we remove all nodes that need to be removed,\n// triggering their leaving transition; in the second pass, we insert/move\n// into the final desired state. This way in the second pass removed\n// nodes will remain where they should be.\n\nvar props = extend({\n  tag: String,\n  moveClass: String\n}, transitionProps);\n\ndelete props.mode;\n\nvar TransitionGroup = {\n  props: props,\n\n  render: function render (h) {\n    var tag = this.tag || this.$vnode.data.tag || 'span';\n    var map = Object.create(null);\n    var prevChildren = this.prevChildren = this.children;\n    var rawChildren = this.$slots.default || [];\n    var children = this.children = [];\n    var transitionData = extractTransitionData(this);\n\n    for (var i = 0; i < rawChildren.length; i++) {\n      var c = rawChildren[i];\n      if (c.tag) {\n        if (c.key != null && String(c.key).indexOf('__vlist') !== 0) {\n          children.push(c);\n          map[c.key] = c\n          ;(c.data || (c.data = {})).transition = transitionData;\n        } else if (process.env.NODE_ENV !== 'production') {\n          var opts = c.componentOptions;\n          var name = opts ? (opts.Ctor.options.name || opts.tag || '') : c.tag;\n          warn((\"<transition-group> children must be keyed: <\" + name + \">\"));\n        }\n      }\n    }\n\n    if (prevChildren) {\n      var kept = [];\n      var removed = [];\n      for (var i$1 = 0; i$1 < prevChildren.length; i$1++) {\n        var c$1 = prevChildren[i$1];\n        c$1.data.transition = transitionData;\n        c$1.data.pos = c$1.elm.getBoundingClientRect();\n        if (map[c$1.key]) {\n          kept.push(c$1);\n        } else {\n          removed.push(c$1);\n        }\n      }\n      this.kept = h(tag, null, kept);\n      this.removed = removed;\n    }\n\n    return h(tag, null, children)\n  },\n\n  beforeUpdate: function beforeUpdate () {\n    // force removing pass\n    this.__patch__(\n      this._vnode,\n      this.kept,\n      false, // hydrating\n      true // removeOnly (!important, avoids unnecessary moves)\n    );\n    this._vnode = this.kept;\n  },\n\n  updated: function updated () {\n    var children = this.prevChildren;\n    var moveClass = this.moveClass || ((this.name || 'v') + '-move');\n    if (!children.length || !this.hasMove(children[0].elm, moveClass)) {\n      return\n    }\n\n    // we divide the work into three loops to avoid mixing DOM reads and writes\n    // in each iteration - which helps prevent layout thrashing.\n    children.forEach(callPendingCbs);\n    children.forEach(recordPosition);\n    children.forEach(applyTranslation);\n\n    // force reflow to put everything in position\n    // assign to this to avoid being removed in tree-shaking\n    // $flow-disable-line\n    this._reflow = document.body.offsetHeight;\n\n    children.forEach(function (c) {\n      if (c.data.moved) {\n        var el = c.elm;\n        var s = el.style;\n        addTransitionClass(el, moveClass);\n        s.transform = s.WebkitTransform = s.transitionDuration = '';\n        el.addEventListener(transitionEndEvent, el._moveCb = function cb (e) {\n          if (!e || /transform$/.test(e.propertyName)) {\n            el.removeEventListener(transitionEndEvent, cb);\n            el._moveCb = null;\n            removeTransitionClass(el, moveClass);\n          }\n        });\n      }\n    });\n  },\n\n  methods: {\n    hasMove: function hasMove (el, moveClass) {\n      /* istanbul ignore if */\n      if (!hasTransition) {\n        return false\n      }\n      /* istanbul ignore if */\n      if (this._hasMove) {\n        return this._hasMove\n      }\n      // Detect whether an element with the move class applied has\n      // CSS transitions. Since the element may be inside an entering\n      // transition at this very moment, we make a clone of it and remove\n      // all other transition classes applied to ensure only the move class\n      // is applied.\n      var clone = el.cloneNode();\n      if (el._transitionClasses) {\n        el._transitionClasses.forEach(function (cls) { removeClass(clone, cls); });\n      }\n      addClass(clone, moveClass);\n      clone.style.display = 'none';\n      this.$el.appendChild(clone);\n      var info = getTransitionInfo(clone);\n      this.$el.removeChild(clone);\n      return (this._hasMove = info.hasTransform)\n    }\n  }\n}\n\nfunction callPendingCbs (c) {\n  /* istanbul ignore if */\n  if (c.elm._moveCb) {\n    c.elm._moveCb();\n  }\n  /* istanbul ignore if */\n  if (c.elm._enterCb) {\n    c.elm._enterCb();\n  }\n}\n\nfunction recordPosition (c) {\n  c.data.newPos = c.elm.getBoundingClientRect();\n}\n\nfunction applyTranslation (c) {\n  var oldPos = c.data.pos;\n  var newPos = c.data.newPos;\n  var dx = oldPos.left - newPos.left;\n  var dy = oldPos.top - newPos.top;\n  if (dx || dy) {\n    c.data.moved = true;\n    var s = c.elm.style;\n    s.transform = s.WebkitTransform = \"translate(\" + dx + \"px,\" + dy + \"px)\";\n    s.transitionDuration = '0s';\n  }\n}\n\nvar platformComponents = {\n  Transition: Transition,\n  TransitionGroup: TransitionGroup\n}\n\n/*  */\n\n// install platform specific utils\nVue.config.mustUseProp = mustUseProp;\nVue.config.isReservedTag = isReservedTag;\nVue.config.isReservedAttr = isReservedAttr;\nVue.config.getTagNamespace = getTagNamespace;\nVue.config.isUnknownElement = isUnknownElement;\n\n// install platform runtime directives & components\nextend(Vue.options.directives, platformDirectives);\nextend(Vue.options.components, platformComponents);\n\n// install platform patch function\nVue.prototype.__patch__ = inBrowser ? patch : noop;\n\n// public mount method\nVue.prototype.$mount = function (\n  el,\n  hydrating\n) {\n  el = el && inBrowser ? query(el) : undefined;\n  return mountComponent(this, el, hydrating)\n};\n\n// devtools global hook\n/* istanbul ignore next */\nif (inBrowser) {\n  setTimeout(function () {\n    if (config.devtools) {\n      if (devtools) {\n        devtools.emit('init', Vue);\n      } else if (\n        process.env.NODE_ENV !== 'production' &&\n        process.env.NODE_ENV !== 'test' &&\n        isChrome\n      ) {\n        console[console.info ? 'info' : 'log'](\n          'Download the Vue Devtools extension for a better development experience:\\n' +\n          'https://github.com/vuejs/vue-devtools'\n        );\n      }\n    }\n    if (process.env.NODE_ENV !== 'production' &&\n      process.env.NODE_ENV !== 'test' &&\n      config.productionTip !== false &&\n      typeof console !== 'undefined'\n    ) {\n      console[console.info ? 'info' : 'log'](\n        \"You are running Vue in development mode.\\n\" +\n        \"Make sure to turn on production mode when deploying for production.\\n\" +\n        \"See more tips at https://vuejs.org/guide/deployment.html\"\n      );\n    }\n  }, 0);\n}\n\n/*  */\n\nvar defaultTagRE = /\\{\\{((?:.|\\n)+?)\\}\\}/g;\nvar regexEscapeRE = /[-.*+?^${}()|[\\]\\/\\\\]/g;\n\nvar buildRegex = cached(function (delimiters) {\n  var open = delimiters[0].replace(regexEscapeRE, '\\\\$&');\n  var close = delimiters[1].replace(regexEscapeRE, '\\\\$&');\n  return new RegExp(open + '((?:.|\\\\n)+?)' + close, 'g')\n});\n\n\n\nfunction parseText (\n  text,\n  delimiters\n) {\n  var tagRE = delimiters ? buildRegex(delimiters) : defaultTagRE;\n  if (!tagRE.test(text)) {\n    return\n  }\n  var tokens = [];\n  var rawTokens = [];\n  var lastIndex = tagRE.lastIndex = 0;\n  var match, index, tokenValue;\n  while ((match = tagRE.exec(text))) {\n    index = match.index;\n    // push text token\n    if (index > lastIndex) {\n      rawTokens.push(tokenValue = text.slice(lastIndex, index));\n      tokens.push(JSON.stringify(tokenValue));\n    }\n    // tag token\n    var exp = parseFilters(match[1].trim());\n    tokens.push((\"_s(\" + exp + \")\"));\n    rawTokens.push({ '@binding': exp });\n    lastIndex = index + match[0].length;\n  }\n  if (lastIndex < text.length) {\n    rawTokens.push(tokenValue = text.slice(lastIndex));\n    tokens.push(JSON.stringify(tokenValue));\n  }\n  return {\n    expression: tokens.join('+'),\n    tokens: rawTokens\n  }\n}\n\n/*  */\n\nfunction transformNode (el, options) {\n  var warn = options.warn || baseWarn;\n  var staticClass = getAndRemoveAttr(el, 'class');\n  if (process.env.NODE_ENV !== 'production' && staticClass) {\n    var res = parseText(staticClass, options.delimiters);\n    if (res) {\n      warn(\n        \"class=\\\"\" + staticClass + \"\\\": \" +\n        'Interpolation inside attributes has been removed. ' +\n        'Use v-bind or the colon shorthand instead. For example, ' +\n        'instead of <div class=\"{{ val }}\">, use <div :class=\"val\">.'\n      );\n    }\n  }\n  if (staticClass) {\n    el.staticClass = JSON.stringify(staticClass);\n  }\n  var classBinding = getBindingAttr(el, 'class', false /* getStatic */);\n  if (classBinding) {\n    el.classBinding = classBinding;\n  }\n}\n\nfunction genData (el) {\n  var data = '';\n  if (el.staticClass) {\n    data += \"staticClass:\" + (el.staticClass) + \",\";\n  }\n  if (el.classBinding) {\n    data += \"class:\" + (el.classBinding) + \",\";\n  }\n  return data\n}\n\nvar klass$1 = {\n  staticKeys: ['staticClass'],\n  transformNode: transformNode,\n  genData: genData\n}\n\n/*  */\n\nfunction transformNode$1 (el, options) {\n  var warn = options.warn || baseWarn;\n  var staticStyle = getAndRemoveAttr(el, 'style');\n  if (staticStyle) {\n    /* istanbul ignore if */\n    if (process.env.NODE_ENV !== 'production') {\n      var res = parseText(staticStyle, options.delimiters);\n      if (res) {\n        warn(\n          \"style=\\\"\" + staticStyle + \"\\\": \" +\n          'Interpolation inside attributes has been removed. ' +\n          'Use v-bind or the colon shorthand instead. For example, ' +\n          'instead of <div style=\"{{ val }}\">, use <div :style=\"val\">.'\n        );\n      }\n    }\n    el.staticStyle = JSON.stringify(parseStyleText(staticStyle));\n  }\n\n  var styleBinding = getBindingAttr(el, 'style', false /* getStatic */);\n  if (styleBinding) {\n    el.styleBinding = styleBinding;\n  }\n}\n\nfunction genData$1 (el) {\n  var data = '';\n  if (el.staticStyle) {\n    data += \"staticStyle:\" + (el.staticStyle) + \",\";\n  }\n  if (el.styleBinding) {\n    data += \"style:(\" + (el.styleBinding) + \"),\";\n  }\n  return data\n}\n\nvar style$1 = {\n  staticKeys: ['staticStyle'],\n  transformNode: transformNode$1,\n  genData: genData$1\n}\n\n/*  */\n\nvar decoder;\n\nvar he = {\n  decode: function decode (html) {\n    decoder = decoder || document.createElement('div');\n    decoder.innerHTML = html;\n    return decoder.textContent\n  }\n}\n\n/*  */\n\nvar isUnaryTag = makeMap(\n  'area,base,br,col,embed,frame,hr,img,input,isindex,keygen,' +\n  'link,meta,param,source,track,wbr'\n);\n\n// Elements that you can, intentionally, leave open\n// (and which close themselves)\nvar canBeLeftOpenTag = makeMap(\n  'colgroup,dd,dt,li,options,p,td,tfoot,th,thead,tr,source'\n);\n\n// HTML5 tags https://html.spec.whatwg.org/multipage/indices.html#elements-3\n// Phrasing Content https://html.spec.whatwg.org/multipage/dom.html#phrasing-content\nvar isNonPhrasingTag = makeMap(\n  'address,article,aside,base,blockquote,body,caption,col,colgroup,dd,' +\n  'details,dialog,div,dl,dt,fieldset,figcaption,figure,footer,form,' +\n  'h1,h2,h3,h4,h5,h6,head,header,hgroup,hr,html,legend,li,menuitem,meta,' +\n  'optgroup,option,param,rp,rt,source,style,summary,tbody,td,tfoot,th,thead,' +\n  'title,tr,track'\n);\n\n/**\n * Not type-checking this file because it's mostly vendor code.\n */\n\n/*!\n * HTML Parser By John Resig (ejohn.org)\n * Modified by Juriy \"kangax\" Zaytsev\n * Original code by Erik Arvidsson, Mozilla Public License\n * http://erik.eae.net/simplehtmlparser/simplehtmlparser.js\n */\n\n// Regular Expressions for parsing tags and attributes\nvar attribute = /^\\s*([^\\s\"'<>\\/=]+)(?:\\s*(=)\\s*(?:\"([^\"]*)\"+|'([^']*)'+|([^\\s\"'=<>`]+)))?/;\n// could use https://www.w3.org/TR/1999/REC-xml-names-19990114/#NT-QName\n// but for Vue templates we can enforce a simple charset\nvar ncname = '[a-zA-Z_][\\\\w\\\\-\\\\.]*';\nvar qnameCapture = \"((?:\" + ncname + \"\\\\:)?\" + ncname + \")\";\nvar startTagOpen = new RegExp((\"^<\" + qnameCapture));\nvar startTagClose = /^\\s*(\\/?)>/;\nvar endTag = new RegExp((\"^<\\\\/\" + qnameCapture + \"[^>]*>\"));\nvar doctype = /^<!DOCTYPE [^>]+>/i;\n// #7298: escape - to avoid being pased as HTML comment when inlined in page\nvar comment = /^<!\\--/;\nvar conditionalComment = /^<!\\[/;\n\nvar IS_REGEX_CAPTURING_BROKEN = false;\n'x'.replace(/x(.)?/g, function (m, g) {\n  IS_REGEX_CAPTURING_BROKEN = g === '';\n});\n\n// Special Elements (can contain anything)\nvar isPlainTextElement = makeMap('script,style,textarea', true);\nvar reCache = {};\n\nvar decodingMap = {\n  '&lt;': '<',\n  '&gt;': '>',\n  '&quot;': '\"',\n  '&amp;': '&',\n  '&#10;': '\\n',\n  '&#9;': '\\t'\n};\nvar encodedAttr = /&(?:lt|gt|quot|amp);/g;\nvar encodedAttrWithNewLines = /&(?:lt|gt|quot|amp|#10|#9);/g;\n\n// #5992\nvar isIgnoreNewlineTag = makeMap('pre,textarea', true);\nvar shouldIgnoreFirstNewline = function (tag, html) { return tag && isIgnoreNewlineTag(tag) && html[0] === '\\n'; };\n\nfunction decodeAttr (value, shouldDecodeNewlines) {\n  var re = shouldDecodeNewlines ? encodedAttrWithNewLines : encodedAttr;\n  return value.replace(re, function (match) { return decodingMap[match]; })\n}\n\nfunction parseHTML (html, options) {\n  var stack = [];\n  var expectHTML = options.expectHTML;\n  var isUnaryTag$$1 = options.isUnaryTag || no;\n  var canBeLeftOpenTag$$1 = options.canBeLeftOpenTag || no;\n  var index = 0;\n  var last, lastTag;\n  while (html) {\n    last = html;\n    // Make sure we're not in a plaintext content element like script/style\n    if (!lastTag || !isPlainTextElement(lastTag)) {\n      var textEnd = html.indexOf('<');\n      if (textEnd === 0) {\n        // Comment:\n        if (comment.test(html)) {\n          var commentEnd = html.indexOf('-->');\n\n          if (commentEnd >= 0) {\n            if (options.shouldKeepComment) {\n              options.comment(html.substring(4, commentEnd));\n            }\n            advance(commentEnd + 3);\n            continue\n          }\n        }\n\n        // http://en.wikipedia.org/wiki/Conditional_comment#Downlevel-revealed_conditional_comment\n        if (conditionalComment.test(html)) {\n          var conditionalEnd = html.indexOf(']>');\n\n          if (conditionalEnd >= 0) {\n            advance(conditionalEnd + 2);\n            continue\n          }\n        }\n\n        // Doctype:\n        var doctypeMatch = html.match(doctype);\n        if (doctypeMatch) {\n          advance(doctypeMatch[0].length);\n          continue\n        }\n\n        // End tag:\n        var endTagMatch = html.match(endTag);\n        if (endTagMatch) {\n          var curIndex = index;\n          advance(endTagMatch[0].length);\n          parseEndTag(endTagMatch[1], curIndex, index);\n          continue\n        }\n\n        // Start tag:\n        var startTagMatch = parseStartTag();\n        if (startTagMatch) {\n          handleStartTag(startTagMatch);\n          if (shouldIgnoreFirstNewline(lastTag, html)) {\n            advance(1);\n          }\n          continue\n        }\n      }\n\n      var text = (void 0), rest = (void 0), next = (void 0);\n      if (textEnd >= 0) {\n        rest = html.slice(textEnd);\n        while (\n          !endTag.test(rest) &&\n          !startTagOpen.test(rest) &&\n          !comment.test(rest) &&\n          !conditionalComment.test(rest)\n        ) {\n          // < in plain text, be forgiving and treat it as text\n          next = rest.indexOf('<', 1);\n          if (next < 0) { break }\n          textEnd += next;\n          rest = html.slice(textEnd);\n        }\n        text = html.substring(0, textEnd);\n        advance(textEnd);\n      }\n\n      if (textEnd < 0) {\n        text = html;\n        html = '';\n      }\n\n      if (options.chars && text) {\n        options.chars(text);\n      }\n    } else {\n      var endTagLength = 0;\n      var stackedTag = lastTag.toLowerCase();\n      var reStackedTag = reCache[stackedTag] || (reCache[stackedTag] = new RegExp('([\\\\s\\\\S]*?)(</' + stackedTag + '[^>]*>)', 'i'));\n      var rest$1 = html.replace(reStackedTag, function (all, text, endTag) {\n        endTagLength = endTag.length;\n        if (!isPlainTextElement(stackedTag) && stackedTag !== 'noscript') {\n          text = text\n            .replace(/<!\\--([\\s\\S]*?)-->/g, '$1') // #7298\n            .replace(/<!\\[CDATA\\[([\\s\\S]*?)]]>/g, '$1');\n        }\n        if (shouldIgnoreFirstNewline(stackedTag, text)) {\n          text = text.slice(1);\n        }\n        if (options.chars) {\n          options.chars(text);\n        }\n        return ''\n      });\n      index += html.length - rest$1.length;\n      html = rest$1;\n      parseEndTag(stackedTag, index - endTagLength, index);\n    }\n\n    if (html === last) {\n      options.chars && options.chars(html);\n      if (process.env.NODE_ENV !== 'production' && !stack.length && options.warn) {\n        options.warn((\"Mal-formatted tag at end of template: \\\"\" + html + \"\\\"\"));\n      }\n      break\n    }\n  }\n\n  // Clean up any remaining tags\n  parseEndTag();\n\n  function advance (n) {\n    index += n;\n    html = html.substring(n);\n  }\n\n  function parseStartTag () {\n    var start = html.match(startTagOpen);\n    if (start) {\n      var match = {\n        tagName: start[1],\n        attrs: [],\n        start: index\n      };\n      advance(start[0].length);\n      var end, attr;\n      while (!(end = html.match(startTagClose)) && (attr = html.match(attribute))) {\n        advance(attr[0].length);\n        match.attrs.push(attr);\n      }\n      if (end) {\n        match.unarySlash = end[1];\n        advance(end[0].length);\n        match.end = index;\n        return match\n      }\n    }\n  }\n\n  function handleStartTag (match) {\n    var tagName = match.tagName;\n    var unarySlash = match.unarySlash;\n\n    if (expectHTML) {\n      if (lastTag === 'p' && isNonPhrasingTag(tagName)) {\n        parseEndTag(lastTag);\n      }\n      if (canBeLeftOpenTag$$1(tagName) && lastTag === tagName) {\n        parseEndTag(tagName);\n      }\n    }\n\n    var unary = isUnaryTag$$1(tagName) || !!unarySlash;\n\n    var l = match.attrs.length;\n    var attrs = new Array(l);\n    for (var i = 0; i < l; i++) {\n      var args = match.attrs[i];\n      // hackish work around FF bug https://bugzilla.mozilla.org/show_bug.cgi?id=369778\n      if (IS_REGEX_CAPTURING_BROKEN && args[0].indexOf('\"\"') === -1) {\n        if (args[3] === '') { delete args[3]; }\n        if (args[4] === '') { delete args[4]; }\n        if (args[5] === '') { delete args[5]; }\n      }\n      var value = args[3] || args[4] || args[5] || '';\n      var shouldDecodeNewlines = tagName === 'a' && args[1] === 'href'\n        ? options.shouldDecodeNewlinesForHref\n        : options.shouldDecodeNewlines;\n      attrs[i] = {\n        name: args[1],\n        value: decodeAttr(value, shouldDecodeNewlines)\n      };\n    }\n\n    if (!unary) {\n      stack.push({ tag: tagName, lowerCasedTag: tagName.toLowerCase(), attrs: attrs });\n      lastTag = tagName;\n    }\n\n    if (options.start) {\n      options.start(tagName, attrs, unary, match.start, match.end);\n    }\n  }\n\n  function parseEndTag (tagName, start, end) {\n    var pos, lowerCasedTagName;\n    if (start == null) { start = index; }\n    if (end == null) { end = index; }\n\n    if (tagName) {\n      lowerCasedTagName = tagName.toLowerCase();\n    }\n\n    // Find the closest opened tag of the same type\n    if (tagName) {\n      for (pos = stack.length - 1; pos >= 0; pos--) {\n        if (stack[pos].lowerCasedTag === lowerCasedTagName) {\n          break\n        }\n      }\n    } else {\n      // If no tag name is provided, clean shop\n      pos = 0;\n    }\n\n    if (pos >= 0) {\n      // Close all the open elements, up the stack\n      for (var i = stack.length - 1; i >= pos; i--) {\n        if (process.env.NODE_ENV !== 'production' &&\n          (i > pos || !tagName) &&\n          options.warn\n        ) {\n          options.warn(\n            (\"tag <\" + (stack[i].tag) + \"> has no matching end tag.\")\n          );\n        }\n        if (options.end) {\n          options.end(stack[i].tag, start, end);\n        }\n      }\n\n      // Remove the open elements from the stack\n      stack.length = pos;\n      lastTag = pos && stack[pos - 1].tag;\n    } else if (lowerCasedTagName === 'br') {\n      if (options.start) {\n        options.start(tagName, [], true, start, end);\n      }\n    } else if (lowerCasedTagName === 'p') {\n      if (options.start) {\n        options.start(tagName, [], false, start, end);\n      }\n      if (options.end) {\n        options.end(tagName, start, end);\n      }\n    }\n  }\n}\n\n/*  */\n\nvar onRE = /^@|^v-on:/;\nvar dirRE = /^v-|^@|^:/;\nvar forAliasRE = /([^]*?)\\s+(?:in|of)\\s+([^]*)/;\nvar forIteratorRE = /,([^,\\}\\]]*)(?:,([^,\\}\\]]*))?$/;\nvar stripParensRE = /^\\(|\\)$/g;\n\nvar argRE = /:(.*)$/;\nvar bindRE = /^:|^v-bind:/;\nvar modifierRE = /\\.[^.]+/g;\n\nvar decodeHTMLCached = cached(he.decode);\n\n// configurable state\nvar warn$2;\nvar delimiters;\nvar transforms;\nvar preTransforms;\nvar postTransforms;\nvar platformIsPreTag;\nvar platformMustUseProp;\nvar platformGetTagNamespace;\n\n\n\nfunction createASTElement (\n  tag,\n  attrs,\n  parent\n) {\n  return {\n    type: 1,\n    tag: tag,\n    attrsList: attrs,\n    attrsMap: makeAttrsMap(attrs),\n    parent: parent,\n    children: []\n  }\n}\n\n/**\n * Convert HTML string to AST.\n */\nfunction parse (\n  template,\n  options\n) {\n  warn$2 = options.warn || baseWarn;\n\n  platformIsPreTag = options.isPreTag || no;\n  platformMustUseProp = options.mustUseProp || no;\n  platformGetTagNamespace = options.getTagNamespace || no;\n\n  transforms = pluckModuleFunction(options.modules, 'transformNode');\n  preTransforms = pluckModuleFunction(options.modules, 'preTransformNode');\n  postTransforms = pluckModuleFunction(options.modules, 'postTransformNode');\n\n  delimiters = options.delimiters;\n\n  var stack = [];\n  var preserveWhitespace = options.preserveWhitespace !== false;\n  var root;\n  var currentParent;\n  var inVPre = false;\n  var inPre = false;\n  var warned = false;\n\n  function warnOnce (msg) {\n    if (!warned) {\n      warned = true;\n      warn$2(msg);\n    }\n  }\n\n  function closeElement (element) {\n    // check pre state\n    if (element.pre) {\n      inVPre = false;\n    }\n    if (platformIsPreTag(element.tag)) {\n      inPre = false;\n    }\n    // apply post-transforms\n    for (var i = 0; i < postTransforms.length; i++) {\n      postTransforms[i](element, options);\n    }\n  }\n\n  parseHTML(template, {\n    warn: warn$2,\n    expectHTML: options.expectHTML,\n    isUnaryTag: options.isUnaryTag,\n    canBeLeftOpenTag: options.canBeLeftOpenTag,\n    shouldDecodeNewlines: options.shouldDecodeNewlines,\n    shouldDecodeNewlinesForHref: options.shouldDecodeNewlinesForHref,\n    shouldKeepComment: options.comments,\n    start: function start (tag, attrs, unary) {\n      // check namespace.\n      // inherit parent ns if there is one\n      var ns = (currentParent && currentParent.ns) || platformGetTagNamespace(tag);\n\n      // handle IE svg bug\n      /* istanbul ignore if */\n      if (isIE && ns === 'svg') {\n        attrs = guardIESVGBug(attrs);\n      }\n\n      var element = createASTElement(tag, attrs, currentParent);\n      if (ns) {\n        element.ns = ns;\n      }\n\n      if (isForbiddenTag(element) && !isServerRendering()) {\n        element.forbidden = true;\n        process.env.NODE_ENV !== 'production' && warn$2(\n          'Templates should only be responsible for mapping the state to the ' +\n          'UI. Avoid placing tags with side-effects in your templates, such as ' +\n          \"<\" + tag + \">\" + ', as they will not be parsed.'\n        );\n      }\n\n      // apply pre-transforms\n      for (var i = 0; i < preTransforms.length; i++) {\n        element = preTransforms[i](element, options) || element;\n      }\n\n      if (!inVPre) {\n        processPre(element);\n        if (element.pre) {\n          inVPre = true;\n        }\n      }\n      if (platformIsPreTag(element.tag)) {\n        inPre = true;\n      }\n      if (inVPre) {\n        processRawAttrs(element);\n      } else if (!element.processed) {\n        // structural directives\n        processFor(element);\n        processIf(element);\n        processOnce(element);\n        // element-scope stuff\n        processElement(element, options);\n      }\n\n      function checkRootConstraints (el) {\n        if (process.env.NODE_ENV !== 'production') {\n          if (el.tag === 'slot' || el.tag === 'template') {\n            warnOnce(\n              \"Cannot use <\" + (el.tag) + \"> as component root element because it may \" +\n              'contain multiple nodes.'\n            );\n          }\n          if (el.attrsMap.hasOwnProperty('v-for')) {\n            warnOnce(\n              'Cannot use v-for on stateful component root element because ' +\n              'it renders multiple elements.'\n            );\n          }\n        }\n      }\n\n      // tree management\n      if (!root) {\n        root = element;\n        checkRootConstraints(root);\n      } else if (!stack.length) {\n        // allow root elements with v-if, v-else-if and v-else\n        if (root.if && (element.elseif || element.else)) {\n          checkRootConstraints(element);\n          addIfCondition(root, {\n            exp: element.elseif,\n            block: element\n          });\n        } else if (process.env.NODE_ENV !== 'production') {\n          warnOnce(\n            \"Component template should contain exactly one root element. \" +\n            \"If you are using v-if on multiple elements, \" +\n            \"use v-else-if to chain them instead.\"\n          );\n        }\n      }\n      if (currentParent && !element.forbidden) {\n        if (element.elseif || element.else) {\n          processIfConditions(element, currentParent);\n        } else if (element.slotScope) { // scoped slot\n          currentParent.plain = false;\n          var name = element.slotTarget || '\"default\"';(currentParent.scopedSlots || (currentParent.scopedSlots = {}))[name] = element;\n        } else {\n          currentParent.children.push(element);\n          element.parent = currentParent;\n        }\n      }\n      if (!unary) {\n        currentParent = element;\n        stack.push(element);\n      } else {\n        closeElement(element);\n      }\n    },\n\n    end: function end () {\n      // remove trailing whitespace\n      var element = stack[stack.length - 1];\n      var lastNode = element.children[element.children.length - 1];\n      if (lastNode && lastNode.type === 3 && lastNode.text === ' ' && !inPre) {\n        element.children.pop();\n      }\n      // pop stack\n      stack.length -= 1;\n      currentParent = stack[stack.length - 1];\n      closeElement(element);\n    },\n\n    chars: function chars (text) {\n      if (!currentParent) {\n        if (process.env.NODE_ENV !== 'production') {\n          if (text === template) {\n            warnOnce(\n              'Component template requires a root element, rather than just text.'\n            );\n          } else if ((text = text.trim())) {\n            warnOnce(\n              (\"text \\\"\" + text + \"\\\" outside root element will be ignored.\")\n            );\n          }\n        }\n        return\n      }\n      // IE textarea placeholder bug\n      /* istanbul ignore if */\n      if (isIE &&\n        currentParent.tag === 'textarea' &&\n        currentParent.attrsMap.placeholder === text\n      ) {\n        return\n      }\n      var children = currentParent.children;\n      text = inPre || text.trim()\n        ? isTextTag(currentParent) ? text : decodeHTMLCached(text)\n        // only preserve whitespace if its not right after a starting tag\n        : preserveWhitespace && children.length ? ' ' : '';\n      if (text) {\n        var res;\n        if (!inVPre && text !== ' ' && (res = parseText(text, delimiters))) {\n          children.push({\n            type: 2,\n            expression: res.expression,\n            tokens: res.tokens,\n            text: text\n          });\n        } else if (text !== ' ' || !children.length || children[children.length - 1].text !== ' ') {\n          children.push({\n            type: 3,\n            text: text\n          });\n        }\n      }\n    },\n    comment: function comment (text) {\n      currentParent.children.push({\n        type: 3,\n        text: text,\n        isComment: true\n      });\n    }\n  });\n  return root\n}\n\nfunction processPre (el) {\n  if (getAndRemoveAttr(el, 'v-pre') != null) {\n    el.pre = true;\n  }\n}\n\nfunction processRawAttrs (el) {\n  var l = el.attrsList.length;\n  if (l) {\n    var attrs = el.attrs = new Array(l);\n    for (var i = 0; i < l; i++) {\n      attrs[i] = {\n        name: el.attrsList[i].name,\n        value: JSON.stringify(el.attrsList[i].value)\n      };\n    }\n  } else if (!el.pre) {\n    // non root node in pre blocks with no attributes\n    el.plain = true;\n  }\n}\n\nfunction processElement (element, options) {\n  processKey(element);\n\n  // determine whether this is a plain element after\n  // removing structural attributes\n  element.plain = !element.key && !element.attrsList.length;\n\n  processRef(element);\n  processSlot(element);\n  processComponent(element);\n  for (var i = 0; i < transforms.length; i++) {\n    element = transforms[i](element, options) || element;\n  }\n  processAttrs(element);\n}\n\nfunction processKey (el) {\n  var exp = getBindingAttr(el, 'key');\n  if (exp) {\n    if (process.env.NODE_ENV !== 'production' && el.tag === 'template') {\n      warn$2(\"<template> cannot be keyed. Place the key on real elements instead.\");\n    }\n    el.key = exp;\n  }\n}\n\nfunction processRef (el) {\n  var ref = getBindingAttr(el, 'ref');\n  if (ref) {\n    el.ref = ref;\n    el.refInFor = checkInFor(el);\n  }\n}\n\nfunction processFor (el) {\n  var exp;\n  if ((exp = getAndRemoveAttr(el, 'v-for'))) {\n    var res = parseFor(exp);\n    if (res) {\n      extend(el, res);\n    } else if (process.env.NODE_ENV !== 'production') {\n      warn$2(\n        (\"Invalid v-for expression: \" + exp)\n      );\n    }\n  }\n}\n\n\n\nfunction parseFor (exp) {\n  var inMatch = exp.match(forAliasRE);\n  if (!inMatch) { return }\n  var res = {};\n  res.for = inMatch[2].trim();\n  var alias = inMatch[1].trim().replace(stripParensRE, '');\n  var iteratorMatch = alias.match(forIteratorRE);\n  if (iteratorMatch) {\n    res.alias = alias.replace(forIteratorRE, '');\n    res.iterator1 = iteratorMatch[1].trim();\n    if (iteratorMatch[2]) {\n      res.iterator2 = iteratorMatch[2].trim();\n    }\n  } else {\n    res.alias = alias;\n  }\n  return res\n}\n\nfunction processIf (el) {\n  var exp = getAndRemoveAttr(el, 'v-if');\n  if (exp) {\n    el.if = exp;\n    addIfCondition(el, {\n      exp: exp,\n      block: el\n    });\n  } else {\n    if (getAndRemoveAttr(el, 'v-else') != null) {\n      el.else = true;\n    }\n    var elseif = getAndRemoveAttr(el, 'v-else-if');\n    if (elseif) {\n      el.elseif = elseif;\n    }\n  }\n}\n\nfunction processIfConditions (el, parent) {\n  var prev = findPrevElement(parent.children);\n  if (prev && prev.if) {\n    addIfCondition(prev, {\n      exp: el.elseif,\n      block: el\n    });\n  } else if (process.env.NODE_ENV !== 'production') {\n    warn$2(\n      \"v-\" + (el.elseif ? ('else-if=\"' + el.elseif + '\"') : 'else') + \" \" +\n      \"used on element <\" + (el.tag) + \"> without corresponding v-if.\"\n    );\n  }\n}\n\nfunction findPrevElement (children) {\n  var i = children.length;\n  while (i--) {\n    if (children[i].type === 1) {\n      return children[i]\n    } else {\n      if (process.env.NODE_ENV !== 'production' && children[i].text !== ' ') {\n        warn$2(\n          \"text \\\"\" + (children[i].text.trim()) + \"\\\" between v-if and v-else(-if) \" +\n          \"will be ignored.\"\n        );\n      }\n      children.pop();\n    }\n  }\n}\n\nfunction addIfCondition (el, condition) {\n  if (!el.ifConditions) {\n    el.ifConditions = [];\n  }\n  el.ifConditions.push(condition);\n}\n\nfunction processOnce (el) {\n  var once$$1 = getAndRemoveAttr(el, 'v-once');\n  if (once$$1 != null) {\n    el.once = true;\n  }\n}\n\nfunction processSlot (el) {\n  if (el.tag === 'slot') {\n    el.slotName = getBindingAttr(el, 'name');\n    if (process.env.NODE_ENV !== 'production' && el.key) {\n      warn$2(\n        \"`key` does not work on <slot> because slots are abstract outlets \" +\n        \"and can possibly expand into multiple elements. \" +\n        \"Use the key on a wrapping element instead.\"\n      );\n    }\n  } else {\n    var slotScope;\n    if (el.tag === 'template') {\n      slotScope = getAndRemoveAttr(el, 'scope');\n      /* istanbul ignore if */\n      if (process.env.NODE_ENV !== 'production' && slotScope) {\n        warn$2(\n          \"the \\\"scope\\\" attribute for scoped slots have been deprecated and \" +\n          \"replaced by \\\"slot-scope\\\" since 2.5. The new \\\"slot-scope\\\" attribute \" +\n          \"can also be used on plain elements in addition to <template> to \" +\n          \"denote scoped slots.\",\n          true\n        );\n      }\n      el.slotScope = slotScope || getAndRemoveAttr(el, 'slot-scope');\n    } else if ((slotScope = getAndRemoveAttr(el, 'slot-scope'))) {\n      /* istanbul ignore if */\n      if (process.env.NODE_ENV !== 'production' && el.attrsMap['v-for']) {\n        warn$2(\n          \"Ambiguous combined usage of slot-scope and v-for on <\" + (el.tag) + \"> \" +\n          \"(v-for takes higher priority). Use a wrapper <template> for the \" +\n          \"scoped slot to make it clearer.\",\n          true\n        );\n      }\n      el.slotScope = slotScope;\n    }\n    var slotTarget = getBindingAttr(el, 'slot');\n    if (slotTarget) {\n      el.slotTarget = slotTarget === '\"\"' ? '\"default\"' : slotTarget;\n      // preserve slot as an attribute for native shadow DOM compat\n      // only for non-scoped slots.\n      if (el.tag !== 'template' && !el.slotScope) {\n        addAttr(el, 'slot', slotTarget);\n      }\n    }\n  }\n}\n\nfunction processComponent (el) {\n  var binding;\n  if ((binding = getBindingAttr(el, 'is'))) {\n    el.component = binding;\n  }\n  if (getAndRemoveAttr(el, 'inline-template') != null) {\n    el.inlineTemplate = true;\n  }\n}\n\nfunction processAttrs (el) {\n  var list = el.attrsList;\n  var i, l, name, rawName, value, modifiers, isProp;\n  for (i = 0, l = list.length; i < l; i++) {\n    name = rawName = list[i].name;\n    value = list[i].value;\n    if (dirRE.test(name)) {\n      // mark element as dynamic\n      el.hasBindings = true;\n      // modifiers\n      modifiers = parseModifiers(name);\n      if (modifiers) {\n        name = name.replace(modifierRE, '');\n      }\n      if (bindRE.test(name)) { // v-bind\n        name = name.replace(bindRE, '');\n        value = parseFilters(value);\n        isProp = false;\n        if (modifiers) {\n          if (modifiers.prop) {\n            isProp = true;\n            name = camelize(name);\n            if (name === 'innerHtml') { name = 'innerHTML'; }\n          }\n          if (modifiers.camel) {\n            name = camelize(name);\n          }\n          if (modifiers.sync) {\n            addHandler(\n              el,\n              (\"update:\" + (camelize(name))),\n              genAssignmentCode(value, \"$event\")\n            );\n          }\n        }\n        if (isProp || (\n          !el.component && platformMustUseProp(el.tag, el.attrsMap.type, name)\n        )) {\n          addProp(el, name, value);\n        } else {\n          addAttr(el, name, value);\n        }\n      } else if (onRE.test(name)) { // v-on\n        name = name.replace(onRE, '');\n        addHandler(el, name, value, modifiers, false, warn$2);\n      } else { // normal directives\n        name = name.replace(dirRE, '');\n        // parse arg\n        var argMatch = name.match(argRE);\n        var arg = argMatch && argMatch[1];\n        if (arg) {\n          name = name.slice(0, -(arg.length + 1));\n        }\n        addDirective(el, name, rawName, value, arg, modifiers);\n        if (process.env.NODE_ENV !== 'production' && name === 'model') {\n          checkForAliasModel(el, value);\n        }\n      }\n    } else {\n      // literal attribute\n      if (process.env.NODE_ENV !== 'production') {\n        var res = parseText(value, delimiters);\n        if (res) {\n          warn$2(\n            name + \"=\\\"\" + value + \"\\\": \" +\n            'Interpolation inside attributes has been removed. ' +\n            'Use v-bind or the colon shorthand instead. For example, ' +\n            'instead of <div id=\"{{ val }}\">, use <div :id=\"val\">.'\n          );\n        }\n      }\n      addAttr(el, name, JSON.stringify(value));\n      // #6887 firefox doesn't update muted state if set via attribute\n      // even immediately after element creation\n      if (!el.component &&\n          name === 'muted' &&\n          platformMustUseProp(el.tag, el.attrsMap.type, name)) {\n        addProp(el, name, 'true');\n      }\n    }\n  }\n}\n\nfunction checkInFor (el) {\n  var parent = el;\n  while (parent) {\n    if (parent.for !== undefined) {\n      return true\n    }\n    parent = parent.parent;\n  }\n  return false\n}\n\nfunction parseModifiers (name) {\n  var match = name.match(modifierRE);\n  if (match) {\n    var ret = {};\n    match.forEach(function (m) { ret[m.slice(1)] = true; });\n    return ret\n  }\n}\n\nfunction makeAttrsMap (attrs) {\n  var map = {};\n  for (var i = 0, l = attrs.length; i < l; i++) {\n    if (\n      process.env.NODE_ENV !== 'production' &&\n      map[attrs[i].name] && !isIE && !isEdge\n    ) {\n      warn$2('duplicate attribute: ' + attrs[i].name);\n    }\n    map[attrs[i].name] = attrs[i].value;\n  }\n  return map\n}\n\n// for script (e.g. type=\"x/template\") or style, do not decode content\nfunction isTextTag (el) {\n  return el.tag === 'script' || el.tag === 'style'\n}\n\nfunction isForbiddenTag (el) {\n  return (\n    el.tag === 'style' ||\n    (el.tag === 'script' && (\n      !el.attrsMap.type ||\n      el.attrsMap.type === 'text/javascript'\n    ))\n  )\n}\n\nvar ieNSBug = /^xmlns:NS\\d+/;\nvar ieNSPrefix = /^NS\\d+:/;\n\n/* istanbul ignore next */\nfunction guardIESVGBug (attrs) {\n  var res = [];\n  for (var i = 0; i < attrs.length; i++) {\n    var attr = attrs[i];\n    if (!ieNSBug.test(attr.name)) {\n      attr.name = attr.name.replace(ieNSPrefix, '');\n      res.push(attr);\n    }\n  }\n  return res\n}\n\nfunction checkForAliasModel (el, value) {\n  var _el = el;\n  while (_el) {\n    if (_el.for && _el.alias === value) {\n      warn$2(\n        \"<\" + (el.tag) + \" v-model=\\\"\" + value + \"\\\">: \" +\n        \"You are binding v-model directly to a v-for iteration alias. \" +\n        \"This will not be able to modify the v-for source array because \" +\n        \"writing to the alias is like modifying a function local variable. \" +\n        \"Consider using an array of objects and use v-model on an object property instead.\"\n      );\n    }\n    _el = _el.parent;\n  }\n}\n\n/*  */\n\n/**\n * Expand input[v-model] with dyanmic type bindings into v-if-else chains\n * Turn this:\n *   <input v-model=\"data[type]\" :type=\"type\">\n * into this:\n *   <input v-if=\"type === 'checkbox'\" type=\"checkbox\" v-model=\"data[type]\">\n *   <input v-else-if=\"type === 'radio'\" type=\"radio\" v-model=\"data[type]\">\n *   <input v-else :type=\"type\" v-model=\"data[type]\">\n */\n\nfunction preTransformNode (el, options) {\n  if (el.tag === 'input') {\n    var map = el.attrsMap;\n    if (!map['v-model']) {\n      return\n    }\n\n    var typeBinding;\n    if (map[':type'] || map['v-bind:type']) {\n      typeBinding = getBindingAttr(el, 'type');\n    }\n    if (!map.type && !typeBinding && map['v-bind']) {\n      typeBinding = \"(\" + (map['v-bind']) + \").type\";\n    }\n\n    if (typeBinding) {\n      var ifCondition = getAndRemoveAttr(el, 'v-if', true);\n      var ifConditionExtra = ifCondition ? (\"&&(\" + ifCondition + \")\") : \"\";\n      var hasElse = getAndRemoveAttr(el, 'v-else', true) != null;\n      var elseIfCondition = getAndRemoveAttr(el, 'v-else-if', true);\n      // 1. checkbox\n      var branch0 = cloneASTElement(el);\n      // process for on the main node\n      processFor(branch0);\n      addRawAttr(branch0, 'type', 'checkbox');\n      processElement(branch0, options);\n      branch0.processed = true; // prevent it from double-processed\n      branch0.if = \"(\" + typeBinding + \")==='checkbox'\" + ifConditionExtra;\n      addIfCondition(branch0, {\n        exp: branch0.if,\n        block: branch0\n      });\n      // 2. add radio else-if condition\n      var branch1 = cloneASTElement(el);\n      getAndRemoveAttr(branch1, 'v-for', true);\n      addRawAttr(branch1, 'type', 'radio');\n      processElement(branch1, options);\n      addIfCondition(branch0, {\n        exp: \"(\" + typeBinding + \")==='radio'\" + ifConditionExtra,\n        block: branch1\n      });\n      // 3. other\n      var branch2 = cloneASTElement(el);\n      getAndRemoveAttr(branch2, 'v-for', true);\n      addRawAttr(branch2, ':type', typeBinding);\n      processElement(branch2, options);\n      addIfCondition(branch0, {\n        exp: ifCondition,\n        block: branch2\n      });\n\n      if (hasElse) {\n        branch0.else = true;\n      } else if (elseIfCondition) {\n        branch0.elseif = elseIfCondition;\n      }\n\n      return branch0\n    }\n  }\n}\n\nfunction cloneASTElement (el) {\n  return createASTElement(el.tag, el.attrsList.slice(), el.parent)\n}\n\nvar model$2 = {\n  preTransformNode: preTransformNode\n}\n\nvar modules$1 = [\n  klass$1,\n  style$1,\n  model$2\n]\n\n/*  */\n\nfunction text (el, dir) {\n  if (dir.value) {\n    addProp(el, 'textContent', (\"_s(\" + (dir.value) + \")\"));\n  }\n}\n\n/*  */\n\nfunction html (el, dir) {\n  if (dir.value) {\n    addProp(el, 'innerHTML', (\"_s(\" + (dir.value) + \")\"));\n  }\n}\n\nvar directives$1 = {\n  model: model,\n  text: text,\n  html: html\n}\n\n/*  */\n\nvar baseOptions = {\n  expectHTML: true,\n  modules: modules$1,\n  directives: directives$1,\n  isPreTag: isPreTag,\n  isUnaryTag: isUnaryTag,\n  mustUseProp: mustUseProp,\n  canBeLeftOpenTag: canBeLeftOpenTag,\n  isReservedTag: isReservedTag,\n  getTagNamespace: getTagNamespace,\n  staticKeys: genStaticKeys(modules$1)\n};\n\n/*  */\n\nvar isStaticKey;\nvar isPlatformReservedTag;\n\nvar genStaticKeysCached = cached(genStaticKeys$1);\n\n/**\n * Goal of the optimizer: walk the generated template AST tree\n * and detect sub-trees that are purely static, i.e. parts of\n * the DOM that never needs to change.\n *\n * Once we detect these sub-trees, we can:\n *\n * 1. Hoist them into constants, so that we no longer need to\n *    create fresh nodes for them on each re-render;\n * 2. Completely skip them in the patching process.\n */\nfunction optimize (root, options) {\n  if (!root) { return }\n  isStaticKey = genStaticKeysCached(options.staticKeys || '');\n  isPlatformReservedTag = options.isReservedTag || no;\n  // first pass: mark all non-static nodes.\n  markStatic$1(root);\n  // second pass: mark static roots.\n  markStaticRoots(root, false);\n}\n\nfunction genStaticKeys$1 (keys) {\n  return makeMap(\n    'type,tag,attrsList,attrsMap,plain,parent,children,attrs' +\n    (keys ? ',' + keys : '')\n  )\n}\n\nfunction markStatic$1 (node) {\n  node.static = isStatic(node);\n  if (node.type === 1) {\n    // do not make component slot content static. this avoids\n    // 1. components not able to mutate slot nodes\n    // 2. static slot content fails for hot-reloading\n    if (\n      !isPlatformReservedTag(node.tag) &&\n      node.tag !== 'slot' &&\n      node.attrsMap['inline-template'] == null\n    ) {\n      return\n    }\n    for (var i = 0, l = node.children.length; i < l; i++) {\n      var child = node.children[i];\n      markStatic$1(child);\n      if (!child.static) {\n        node.static = false;\n      }\n    }\n    if (node.ifConditions) {\n      for (var i$1 = 1, l$1 = node.ifConditions.length; i$1 < l$1; i$1++) {\n        var block = node.ifConditions[i$1].block;\n        markStatic$1(block);\n        if (!block.static) {\n          node.static = false;\n        }\n      }\n    }\n  }\n}\n\nfunction markStaticRoots (node, isInFor) {\n  if (node.type === 1) {\n    if (node.static || node.once) {\n      node.staticInFor = isInFor;\n    }\n    // For a node to qualify as a static root, it should have children that\n    // are not just static text. Otherwise the cost of hoisting out will\n    // outweigh the benefits and it's better off to just always render it fresh.\n    if (node.static && node.children.length && !(\n      node.children.length === 1 &&\n      node.children[0].type === 3\n    )) {\n      node.staticRoot = true;\n      return\n    } else {\n      node.staticRoot = false;\n    }\n    if (node.children) {\n      for (var i = 0, l = node.children.length; i < l; i++) {\n        markStaticRoots(node.children[i], isInFor || !!node.for);\n      }\n    }\n    if (node.ifConditions) {\n      for (var i$1 = 1, l$1 = node.ifConditions.length; i$1 < l$1; i$1++) {\n        markStaticRoots(node.ifConditions[i$1].block, isInFor);\n      }\n    }\n  }\n}\n\nfunction isStatic (node) {\n  if (node.type === 2) { // expression\n    return false\n  }\n  if (node.type === 3) { // text\n    return true\n  }\n  return !!(node.pre || (\n    !node.hasBindings && // no dynamic bindings\n    !node.if && !node.for && // not v-if or v-for or v-else\n    !isBuiltInTag(node.tag) && // not a built-in\n    isPlatformReservedTag(node.tag) && // not a component\n    !isDirectChildOfTemplateFor(node) &&\n    Object.keys(node).every(isStaticKey)\n  ))\n}\n\nfunction isDirectChildOfTemplateFor (node) {\n  while (node.parent) {\n    node = node.parent;\n    if (node.tag !== 'template') {\n      return false\n    }\n    if (node.for) {\n      return true\n    }\n  }\n  return false\n}\n\n/*  */\n\nvar fnExpRE = /^([\\w$_]+|\\([^)]*?\\))\\s*=>|^function\\s*\\(/;\nvar simplePathRE = /^[A-Za-z_$][\\w$]*(?:\\.[A-Za-z_$][\\w$]*|\\['[^']*?']|\\[\"[^\"]*?\"]|\\[\\d+]|\\[[A-Za-z_$][\\w$]*])*$/;\n\n// KeyboardEvent.keyCode aliases\nvar keyCodes = {\n  esc: 27,\n  tab: 9,\n  enter: 13,\n  space: 32,\n  up: 38,\n  left: 37,\n  right: 39,\n  down: 40,\n  'delete': [8, 46]\n};\n\n// KeyboardEvent.key aliases\nvar keyNames = {\n  esc: 'Escape',\n  tab: 'Tab',\n  enter: 'Enter',\n  space: ' ',\n  // #7806: IE11 uses key names without `Arrow` prefix for arrow keys.\n  up: ['Up', 'ArrowUp'],\n  left: ['Left', 'ArrowLeft'],\n  right: ['Right', 'ArrowRight'],\n  down: ['Down', 'ArrowDown'],\n  'delete': ['Backspace', 'Delete']\n};\n\n// #4868: modifiers that prevent the execution of the listener\n// need to explicitly return null so that we can determine whether to remove\n// the listener for .once\nvar genGuard = function (condition) { return (\"if(\" + condition + \")return null;\"); };\n\nvar modifierCode = {\n  stop: '$event.stopPropagation();',\n  prevent: '$event.preventDefault();',\n  self: genGuard(\"$event.target !== $event.currentTarget\"),\n  ctrl: genGuard(\"!$event.ctrlKey\"),\n  shift: genGuard(\"!$event.shiftKey\"),\n  alt: genGuard(\"!$event.altKey\"),\n  meta: genGuard(\"!$event.metaKey\"),\n  left: genGuard(\"'button' in $event && $event.button !== 0\"),\n  middle: genGuard(\"'button' in $event && $event.button !== 1\"),\n  right: genGuard(\"'button' in $event && $event.button !== 2\")\n};\n\nfunction genHandlers (\n  events,\n  isNative,\n  warn\n) {\n  var res = isNative ? 'nativeOn:{' : 'on:{';\n  for (var name in events) {\n    res += \"\\\"\" + name + \"\\\":\" + (genHandler(name, events[name])) + \",\";\n  }\n  return res.slice(0, -1) + '}'\n}\n\nfunction genHandler (\n  name,\n  handler\n) {\n  if (!handler) {\n    return 'function(){}'\n  }\n\n  if (Array.isArray(handler)) {\n    return (\"[\" + (handler.map(function (handler) { return genHandler(name, handler); }).join(',')) + \"]\")\n  }\n\n  var isMethodPath = simplePathRE.test(handler.value);\n  var isFunctionExpression = fnExpRE.test(handler.value);\n\n  if (!handler.modifiers) {\n    if (isMethodPath || isFunctionExpression) {\n      return handler.value\n    }\n    /* istanbul ignore if */\n    return (\"function($event){\" + (handler.value) + \"}\") // inline statement\n  } else {\n    var code = '';\n    var genModifierCode = '';\n    var keys = [];\n    for (var key in handler.modifiers) {\n      if (modifierCode[key]) {\n        genModifierCode += modifierCode[key];\n        // left/right\n        if (keyCodes[key]) {\n          keys.push(key);\n        }\n      } else if (key === 'exact') {\n        var modifiers = (handler.modifiers);\n        genModifierCode += genGuard(\n          ['ctrl', 'shift', 'alt', 'meta']\n            .filter(function (keyModifier) { return !modifiers[keyModifier]; })\n            .map(function (keyModifier) { return (\"$event.\" + keyModifier + \"Key\"); })\n            .join('||')\n        );\n      } else {\n        keys.push(key);\n      }\n    }\n    if (keys.length) {\n      code += genKeyFilter(keys);\n    }\n    // Make sure modifiers like prevent and stop get executed after key filtering\n    if (genModifierCode) {\n      code += genModifierCode;\n    }\n    var handlerCode = isMethodPath\n      ? (\"return \" + (handler.value) + \"($event)\")\n      : isFunctionExpression\n        ? (\"return (\" + (handler.value) + \")($event)\")\n        : handler.value;\n    /* istanbul ignore if */\n    return (\"function($event){\" + code + handlerCode + \"}\")\n  }\n}\n\nfunction genKeyFilter (keys) {\n  return (\"if(!('button' in $event)&&\" + (keys.map(genFilterCode).join('&&')) + \")return null;\")\n}\n\nfunction genFilterCode (key) {\n  var keyVal = parseInt(key, 10);\n  if (keyVal) {\n    return (\"$event.keyCode!==\" + keyVal)\n  }\n  var keyCode = keyCodes[key];\n  var keyName = keyNames[key];\n  return (\n    \"_k($event.keyCode,\" +\n    (JSON.stringify(key)) + \",\" +\n    (JSON.stringify(keyCode)) + \",\" +\n    \"$event.key,\" +\n    \"\" + (JSON.stringify(keyName)) +\n    \")\"\n  )\n}\n\n/*  */\n\nfunction on (el, dir) {\n  if (process.env.NODE_ENV !== 'production' && dir.modifiers) {\n    warn(\"v-on without argument does not support modifiers.\");\n  }\n  el.wrapListeners = function (code) { return (\"_g(\" + code + \",\" + (dir.value) + \")\"); };\n}\n\n/*  */\n\nfunction bind$1 (el, dir) {\n  el.wrapData = function (code) {\n    return (\"_b(\" + code + \",'\" + (el.tag) + \"',\" + (dir.value) + \",\" + (dir.modifiers && dir.modifiers.prop ? 'true' : 'false') + (dir.modifiers && dir.modifiers.sync ? ',true' : '') + \")\")\n  };\n}\n\n/*  */\n\nvar baseDirectives = {\n  on: on,\n  bind: bind$1,\n  cloak: noop\n}\n\n/*  */\n\nvar CodegenState = function CodegenState (options) {\n  this.options = options;\n  this.warn = options.warn || baseWarn;\n  this.transforms = pluckModuleFunction(options.modules, 'transformCode');\n  this.dataGenFns = pluckModuleFunction(options.modules, 'genData');\n  this.directives = extend(extend({}, baseDirectives), options.directives);\n  var isReservedTag = options.isReservedTag || no;\n  this.maybeComponent = function (el) { return !isReservedTag(el.tag); };\n  this.onceId = 0;\n  this.staticRenderFns = [];\n};\n\n\n\nfunction generate (\n  ast,\n  options\n) {\n  var state = new CodegenState(options);\n  var code = ast ? genElement(ast, state) : '_c(\"div\")';\n  return {\n    render: (\"with(this){return \" + code + \"}\"),\n    staticRenderFns: state.staticRenderFns\n  }\n}\n\nfunction genElement (el, state) {\n  if (el.staticRoot && !el.staticProcessed) {\n    return genStatic(el, state)\n  } else if (el.once && !el.onceProcessed) {\n    return genOnce(el, state)\n  } else if (el.for && !el.forProcessed) {\n    return genFor(el, state)\n  } else if (el.if && !el.ifProcessed) {\n    return genIf(el, state)\n  } else if (el.tag === 'template' && !el.slotTarget) {\n    return genChildren(el, state) || 'void 0'\n  } else if (el.tag === 'slot') {\n    return genSlot(el, state)\n  } else {\n    // component or element\n    var code;\n    if (el.component) {\n      code = genComponent(el.component, el, state);\n    } else {\n      var data = el.plain ? undefined : genData$2(el, state);\n\n      var children = el.inlineTemplate ? null : genChildren(el, state, true);\n      code = \"_c('\" + (el.tag) + \"'\" + (data ? (\",\" + data) : '') + (children ? (\",\" + children) : '') + \")\";\n    }\n    // module transforms\n    for (var i = 0; i < state.transforms.length; i++) {\n      code = state.transforms[i](el, code);\n    }\n    return code\n  }\n}\n\n// hoist static sub-trees out\nfunction genStatic (el, state) {\n  el.staticProcessed = true;\n  state.staticRenderFns.push((\"with(this){return \" + (genElement(el, state)) + \"}\"));\n  return (\"_m(\" + (state.staticRenderFns.length - 1) + (el.staticInFor ? ',true' : '') + \")\")\n}\n\n// v-once\nfunction genOnce (el, state) {\n  el.onceProcessed = true;\n  if (el.if && !el.ifProcessed) {\n    return genIf(el, state)\n  } else if (el.staticInFor) {\n    var key = '';\n    var parent = el.parent;\n    while (parent) {\n      if (parent.for) {\n        key = parent.key;\n        break\n      }\n      parent = parent.parent;\n    }\n    if (!key) {\n      process.env.NODE_ENV !== 'production' && state.warn(\n        \"v-once can only be used inside v-for that is keyed. \"\n      );\n      return genElement(el, state)\n    }\n    return (\"_o(\" + (genElement(el, state)) + \",\" + (state.onceId++) + \",\" + key + \")\")\n  } else {\n    return genStatic(el, state)\n  }\n}\n\nfunction genIf (\n  el,\n  state,\n  altGen,\n  altEmpty\n) {\n  el.ifProcessed = true; // avoid recursion\n  return genIfConditions(el.ifConditions.slice(), state, altGen, altEmpty)\n}\n\nfunction genIfConditions (\n  conditions,\n  state,\n  altGen,\n  altEmpty\n) {\n  if (!conditions.length) {\n    return altEmpty || '_e()'\n  }\n\n  var condition = conditions.shift();\n  if (condition.exp) {\n    return (\"(\" + (condition.exp) + \")?\" + (genTernaryExp(condition.block)) + \":\" + (genIfConditions(conditions, state, altGen, altEmpty)))\n  } else {\n    return (\"\" + (genTernaryExp(condition.block)))\n  }\n\n  // v-if with v-once should generate code like (a)?_m(0):_m(1)\n  function genTernaryExp (el) {\n    return altGen\n      ? altGen(el, state)\n      : el.once\n        ? genOnce(el, state)\n        : genElement(el, state)\n  }\n}\n\nfunction genFor (\n  el,\n  state,\n  altGen,\n  altHelper\n) {\n  var exp = el.for;\n  var alias = el.alias;\n  var iterator1 = el.iterator1 ? (\",\" + (el.iterator1)) : '';\n  var iterator2 = el.iterator2 ? (\",\" + (el.iterator2)) : '';\n\n  if (process.env.NODE_ENV !== 'production' &&\n    state.maybeComponent(el) &&\n    el.tag !== 'slot' &&\n    el.tag !== 'template' &&\n    !el.key\n  ) {\n    state.warn(\n      \"<\" + (el.tag) + \" v-for=\\\"\" + alias + \" in \" + exp + \"\\\">: component lists rendered with \" +\n      \"v-for should have explicit keys. \" +\n      \"See https://vuejs.org/guide/list.html#key for more info.\",\n      true /* tip */\n    );\n  }\n\n  el.forProcessed = true; // avoid recursion\n  return (altHelper || '_l') + \"((\" + exp + \"),\" +\n    \"function(\" + alias + iterator1 + iterator2 + \"){\" +\n      \"return \" + ((altGen || genElement)(el, state)) +\n    '})'\n}\n\nfunction genData$2 (el, state) {\n  var data = '{';\n\n  // directives first.\n  // directives may mutate the el's other properties before they are generated.\n  var dirs = genDirectives(el, state);\n  if (dirs) { data += dirs + ','; }\n\n  // key\n  if (el.key) {\n    data += \"key:\" + (el.key) + \",\";\n  }\n  // ref\n  if (el.ref) {\n    data += \"ref:\" + (el.ref) + \",\";\n  }\n  if (el.refInFor) {\n    data += \"refInFor:true,\";\n  }\n  // pre\n  if (el.pre) {\n    data += \"pre:true,\";\n  }\n  // record original tag name for components using \"is\" attribute\n  if (el.component) {\n    data += \"tag:\\\"\" + (el.tag) + \"\\\",\";\n  }\n  // module data generation functions\n  for (var i = 0; i < state.dataGenFns.length; i++) {\n    data += state.dataGenFns[i](el);\n  }\n  // attributes\n  if (el.attrs) {\n    data += \"attrs:{\" + (genProps(el.attrs)) + \"},\";\n  }\n  // DOM props\n  if (el.props) {\n    data += \"domProps:{\" + (genProps(el.props)) + \"},\";\n  }\n  // event handlers\n  if (el.events) {\n    data += (genHandlers(el.events, false, state.warn)) + \",\";\n  }\n  if (el.nativeEvents) {\n    data += (genHandlers(el.nativeEvents, true, state.warn)) + \",\";\n  }\n  // slot target\n  // only for non-scoped slots\n  if (el.slotTarget && !el.slotScope) {\n    data += \"slot:\" + (el.slotTarget) + \",\";\n  }\n  // scoped slots\n  if (el.scopedSlots) {\n    data += (genScopedSlots(el.scopedSlots, state)) + \",\";\n  }\n  // component v-model\n  if (el.model) {\n    data += \"model:{value:\" + (el.model.value) + \",callback:\" + (el.model.callback) + \",expression:\" + (el.model.expression) + \"},\";\n  }\n  // inline-template\n  if (el.inlineTemplate) {\n    var inlineTemplate = genInlineTemplate(el, state);\n    if (inlineTemplate) {\n      data += inlineTemplate + \",\";\n    }\n  }\n  data = data.replace(/,$/, '') + '}';\n  // v-bind data wrap\n  if (el.wrapData) {\n    data = el.wrapData(data);\n  }\n  // v-on data wrap\n  if (el.wrapListeners) {\n    data = el.wrapListeners(data);\n  }\n  return data\n}\n\nfunction genDirectives (el, state) {\n  var dirs = el.directives;\n  if (!dirs) { return }\n  var res = 'directives:[';\n  var hasRuntime = false;\n  var i, l, dir, needRuntime;\n  for (i = 0, l = dirs.length; i < l; i++) {\n    dir = dirs[i];\n    needRuntime = true;\n    var gen = state.directives[dir.name];\n    if (gen) {\n      // compile-time directive that manipulates AST.\n      // returns true if it also needs a runtime counterpart.\n      needRuntime = !!gen(el, dir, state.warn);\n    }\n    if (needRuntime) {\n      hasRuntime = true;\n      res += \"{name:\\\"\" + (dir.name) + \"\\\",rawName:\\\"\" + (dir.rawName) + \"\\\"\" + (dir.value ? (\",value:(\" + (dir.value) + \"),expression:\" + (JSON.stringify(dir.value))) : '') + (dir.arg ? (\",arg:\\\"\" + (dir.arg) + \"\\\"\") : '') + (dir.modifiers ? (\",modifiers:\" + (JSON.stringify(dir.modifiers))) : '') + \"},\";\n    }\n  }\n  if (hasRuntime) {\n    return res.slice(0, -1) + ']'\n  }\n}\n\nfunction genInlineTemplate (el, state) {\n  var ast = el.children[0];\n  if (process.env.NODE_ENV !== 'production' && (\n    el.children.length !== 1 || ast.type !== 1\n  )) {\n    state.warn('Inline-template components must have exactly one child element.');\n  }\n  if (ast.type === 1) {\n    var inlineRenderFns = generate(ast, state.options);\n    return (\"inlineTemplate:{render:function(){\" + (inlineRenderFns.render) + \"},staticRenderFns:[\" + (inlineRenderFns.staticRenderFns.map(function (code) { return (\"function(){\" + code + \"}\"); }).join(',')) + \"]}\")\n  }\n}\n\nfunction genScopedSlots (\n  slots,\n  state\n) {\n  return (\"scopedSlots:_u([\" + (Object.keys(slots).map(function (key) {\n      return genScopedSlot(key, slots[key], state)\n    }).join(',')) + \"])\")\n}\n\nfunction genScopedSlot (\n  key,\n  el,\n  state\n) {\n  if (el.for && !el.forProcessed) {\n    return genForScopedSlot(key, el, state)\n  }\n  var fn = \"function(\" + (String(el.slotScope)) + \"){\" +\n    \"return \" + (el.tag === 'template'\n      ? el.if\n        ? ((el.if) + \"?\" + (genChildren(el, state) || 'undefined') + \":undefined\")\n        : genChildren(el, state) || 'undefined'\n      : genElement(el, state)) + \"}\";\n  return (\"{key:\" + key + \",fn:\" + fn + \"}\")\n}\n\nfunction genForScopedSlot (\n  key,\n  el,\n  state\n) {\n  var exp = el.for;\n  var alias = el.alias;\n  var iterator1 = el.iterator1 ? (\",\" + (el.iterator1)) : '';\n  var iterator2 = el.iterator2 ? (\",\" + (el.iterator2)) : '';\n  el.forProcessed = true; // avoid recursion\n  return \"_l((\" + exp + \"),\" +\n    \"function(\" + alias + iterator1 + iterator2 + \"){\" +\n      \"return \" + (genScopedSlot(key, el, state)) +\n    '})'\n}\n\nfunction genChildren (\n  el,\n  state,\n  checkSkip,\n  altGenElement,\n  altGenNode\n) {\n  var children = el.children;\n  if (children.length) {\n    var el$1 = children[0];\n    // optimize single v-for\n    if (children.length === 1 &&\n      el$1.for &&\n      el$1.tag !== 'template' &&\n      el$1.tag !== 'slot'\n    ) {\n      return (altGenElement || genElement)(el$1, state)\n    }\n    var normalizationType = checkSkip\n      ? getNormalizationType(children, state.maybeComponent)\n      : 0;\n    var gen = altGenNode || genNode;\n    return (\"[\" + (children.map(function (c) { return gen(c, state); }).join(',')) + \"]\" + (normalizationType ? (\",\" + normalizationType) : ''))\n  }\n}\n\n// determine the normalization needed for the children array.\n// 0: no normalization needed\n// 1: simple normalization needed (possible 1-level deep nested array)\n// 2: full normalization needed\nfunction getNormalizationType (\n  children,\n  maybeComponent\n) {\n  var res = 0;\n  for (var i = 0; i < children.length; i++) {\n    var el = children[i];\n    if (el.type !== 1) {\n      continue\n    }\n    if (needsNormalization(el) ||\n        (el.ifConditions && el.ifConditions.some(function (c) { return needsNormalization(c.block); }))) {\n      res = 2;\n      break\n    }\n    if (maybeComponent(el) ||\n        (el.ifConditions && el.ifConditions.some(function (c) { return maybeComponent(c.block); }))) {\n      res = 1;\n    }\n  }\n  return res\n}\n\nfunction needsNormalization (el) {\n  return el.for !== undefined || el.tag === 'template' || el.tag === 'slot'\n}\n\nfunction genNode (node, state) {\n  if (node.type === 1) {\n    return genElement(node, state)\n  } if (node.type === 3 && node.isComment) {\n    return genComment(node)\n  } else {\n    return genText(node)\n  }\n}\n\nfunction genText (text) {\n  return (\"_v(\" + (text.type === 2\n    ? text.expression // no need for () because already wrapped in _s()\n    : transformSpecialNewlines(JSON.stringify(text.text))) + \")\")\n}\n\nfunction genComment (comment) {\n  return (\"_e(\" + (JSON.stringify(comment.text)) + \")\")\n}\n\nfunction genSlot (el, state) {\n  var slotName = el.slotName || '\"default\"';\n  var children = genChildren(el, state);\n  var res = \"_t(\" + slotName + (children ? (\",\" + children) : '');\n  var attrs = el.attrs && (\"{\" + (el.attrs.map(function (a) { return ((camelize(a.name)) + \":\" + (a.value)); }).join(',')) + \"}\");\n  var bind$$1 = el.attrsMap['v-bind'];\n  if ((attrs || bind$$1) && !children) {\n    res += \",null\";\n  }\n  if (attrs) {\n    res += \",\" + attrs;\n  }\n  if (bind$$1) {\n    res += (attrs ? '' : ',null') + \",\" + bind$$1;\n  }\n  return res + ')'\n}\n\n// componentName is el.component, take it as argument to shun flow's pessimistic refinement\nfunction genComponent (\n  componentName,\n  el,\n  state\n) {\n  var children = el.inlineTemplate ? null : genChildren(el, state, true);\n  return (\"_c(\" + componentName + \",\" + (genData$2(el, state)) + (children ? (\",\" + children) : '') + \")\")\n}\n\nfunction genProps (props) {\n  var res = '';\n  for (var i = 0; i < props.length; i++) {\n    var prop = props[i];\n    /* istanbul ignore if */\n    {\n      res += \"\\\"\" + (prop.name) + \"\\\":\" + (transformSpecialNewlines(prop.value)) + \",\";\n    }\n  }\n  return res.slice(0, -1)\n}\n\n// #3895, #4268\nfunction transformSpecialNewlines (text) {\n  return text\n    .replace(/\\u2028/g, '\\\\u2028')\n    .replace(/\\u2029/g, '\\\\u2029')\n}\n\n/*  */\n\n// these keywords should not appear inside expressions, but operators like\n// typeof, instanceof and in are allowed\nvar prohibitedKeywordRE = new RegExp('\\\\b' + (\n  'do,if,for,let,new,try,var,case,else,with,await,break,catch,class,const,' +\n  'super,throw,while,yield,delete,export,import,return,switch,default,' +\n  'extends,finally,continue,debugger,function,arguments'\n).split(',').join('\\\\b|\\\\b') + '\\\\b');\n\n// these unary operators should not be used as property/method names\nvar unaryOperatorsRE = new RegExp('\\\\b' + (\n  'delete,typeof,void'\n).split(',').join('\\\\s*\\\\([^\\\\)]*\\\\)|\\\\b') + '\\\\s*\\\\([^\\\\)]*\\\\)');\n\n// strip strings in expressions\nvar stripStringRE = /'(?:[^'\\\\]|\\\\.)*'|\"(?:[^\"\\\\]|\\\\.)*\"|`(?:[^`\\\\]|\\\\.)*\\$\\{|\\}(?:[^`\\\\]|\\\\.)*`|`(?:[^`\\\\]|\\\\.)*`/g;\n\n// detect problematic expressions in a template\nfunction detectErrors (ast) {\n  var errors = [];\n  if (ast) {\n    checkNode(ast, errors);\n  }\n  return errors\n}\n\nfunction checkNode (node, errors) {\n  if (node.type === 1) {\n    for (var name in node.attrsMap) {\n      if (dirRE.test(name)) {\n        var value = node.attrsMap[name];\n        if (value) {\n          if (name === 'v-for') {\n            checkFor(node, (\"v-for=\\\"\" + value + \"\\\"\"), errors);\n          } else if (onRE.test(name)) {\n            checkEvent(value, (name + \"=\\\"\" + value + \"\\\"\"), errors);\n          } else {\n            checkExpression(value, (name + \"=\\\"\" + value + \"\\\"\"), errors);\n          }\n        }\n      }\n    }\n    if (node.children) {\n      for (var i = 0; i < node.children.length; i++) {\n        checkNode(node.children[i], errors);\n      }\n    }\n  } else if (node.type === 2) {\n    checkExpression(node.expression, node.text, errors);\n  }\n}\n\nfunction checkEvent (exp, text, errors) {\n  var stipped = exp.replace(stripStringRE, '');\n  var keywordMatch = stipped.match(unaryOperatorsRE);\n  if (keywordMatch && stipped.charAt(keywordMatch.index - 1) !== '$') {\n    errors.push(\n      \"avoid using JavaScript unary operator as property name: \" +\n      \"\\\"\" + (keywordMatch[0]) + \"\\\" in expression \" + (text.trim())\n    );\n  }\n  checkExpression(exp, text, errors);\n}\n\nfunction checkFor (node, text, errors) {\n  checkExpression(node.for || '', text, errors);\n  checkIdentifier(node.alias, 'v-for alias', text, errors);\n  checkIdentifier(node.iterator1, 'v-for iterator', text, errors);\n  checkIdentifier(node.iterator2, 'v-for iterator', text, errors);\n}\n\nfunction checkIdentifier (\n  ident,\n  type,\n  text,\n  errors\n) {\n  if (typeof ident === 'string') {\n    try {\n      new Function((\"var \" + ident + \"=_\"));\n    } catch (e) {\n      errors.push((\"invalid \" + type + \" \\\"\" + ident + \"\\\" in expression: \" + (text.trim())));\n    }\n  }\n}\n\nfunction checkExpression (exp, text, errors) {\n  try {\n    new Function((\"return \" + exp));\n  } catch (e) {\n    var keywordMatch = exp.replace(stripStringRE, '').match(prohibitedKeywordRE);\n    if (keywordMatch) {\n      errors.push(\n        \"avoid using JavaScript keyword as property name: \" +\n        \"\\\"\" + (keywordMatch[0]) + \"\\\"\\n  Raw expression: \" + (text.trim())\n      );\n    } else {\n      errors.push(\n        \"invalid expression: \" + (e.message) + \" in\\n\\n\" +\n        \"    \" + exp + \"\\n\\n\" +\n        \"  Raw expression: \" + (text.trim()) + \"\\n\"\n      );\n    }\n  }\n}\n\n/*  */\n\nfunction createFunction (code, errors) {\n  try {\n    return new Function(code)\n  } catch (err) {\n    errors.push({ err: err, code: code });\n    return noop\n  }\n}\n\nfunction createCompileToFunctionFn (compile) {\n  var cache = Object.create(null);\n\n  return function compileToFunctions (\n    template,\n    options,\n    vm\n  ) {\n    options = extend({}, options);\n    var warn$$1 = options.warn || warn;\n    delete options.warn;\n\n    /* istanbul ignore if */\n    if (process.env.NODE_ENV !== 'production') {\n      // detect possible CSP restriction\n      try {\n        new Function('return 1');\n      } catch (e) {\n        if (e.toString().match(/unsafe-eval|CSP/)) {\n          warn$$1(\n            'It seems you are using the standalone build of Vue.js in an ' +\n            'environment with Content Security Policy that prohibits unsafe-eval. ' +\n            'The template compiler cannot work in this environment. Consider ' +\n            'relaxing the policy to allow unsafe-eval or pre-compiling your ' +\n            'templates into render functions.'\n          );\n        }\n      }\n    }\n\n    // check cache\n    var key = options.delimiters\n      ? String(options.delimiters) + template\n      : template;\n    if (cache[key]) {\n      return cache[key]\n    }\n\n    // compile\n    var compiled = compile(template, options);\n\n    // check compilation errors/tips\n    if (process.env.NODE_ENV !== 'production') {\n      if (compiled.errors && compiled.errors.length) {\n        warn$$1(\n          \"Error compiling template:\\n\\n\" + template + \"\\n\\n\" +\n          compiled.errors.map(function (e) { return (\"- \" + e); }).join('\\n') + '\\n',\n          vm\n        );\n      }\n      if (compiled.tips && compiled.tips.length) {\n        compiled.tips.forEach(function (msg) { return tip(msg, vm); });\n      }\n    }\n\n    // turn code into functions\n    var res = {};\n    var fnGenErrors = [];\n    res.render = createFunction(compiled.render, fnGenErrors);\n    res.staticRenderFns = compiled.staticRenderFns.map(function (code) {\n      return createFunction(code, fnGenErrors)\n    });\n\n    // check function generation errors.\n    // this should only happen if there is a bug in the compiler itself.\n    // mostly for codegen development use\n    /* istanbul ignore if */\n    if (process.env.NODE_ENV !== 'production') {\n      if ((!compiled.errors || !compiled.errors.length) && fnGenErrors.length) {\n        warn$$1(\n          \"Failed to generate render function:\\n\\n\" +\n          fnGenErrors.map(function (ref) {\n            var err = ref.err;\n            var code = ref.code;\n\n            return ((err.toString()) + \" in\\n\\n\" + code + \"\\n\");\n        }).join('\\n'),\n          vm\n        );\n      }\n    }\n\n    return (cache[key] = res)\n  }\n}\n\n/*  */\n\nfunction createCompilerCreator (baseCompile) {\n  return function createCompiler (baseOptions) {\n    function compile (\n      template,\n      options\n    ) {\n      var finalOptions = Object.create(baseOptions);\n      var errors = [];\n      var tips = [];\n      finalOptions.warn = function (msg, tip) {\n        (tip ? tips : errors).push(msg);\n      };\n\n      if (options) {\n        // merge custom modules\n        if (options.modules) {\n          finalOptions.modules =\n            (baseOptions.modules || []).concat(options.modules);\n        }\n        // merge custom directives\n        if (options.directives) {\n          finalOptions.directives = extend(\n            Object.create(baseOptions.directives || null),\n            options.directives\n          );\n        }\n        // copy other options\n        for (var key in options) {\n          if (key !== 'modules' && key !== 'directives') {\n            finalOptions[key] = options[key];\n          }\n        }\n      }\n\n      var compiled = baseCompile(template, finalOptions);\n      if (process.env.NODE_ENV !== 'production') {\n        errors.push.apply(errors, detectErrors(compiled.ast));\n      }\n      compiled.errors = errors;\n      compiled.tips = tips;\n      return compiled\n    }\n\n    return {\n      compile: compile,\n      compileToFunctions: createCompileToFunctionFn(compile)\n    }\n  }\n}\n\n/*  */\n\n// `createCompilerCreator` allows creating compilers that use alternative\n// parser/optimizer/codegen, e.g the SSR optimizing compiler.\n// Here we just export a default compiler using the default parts.\nvar createCompiler = createCompilerCreator(function baseCompile (\n  template,\n  options\n) {\n  var ast = parse(template.trim(), options);\n  if (options.optimize !== false) {\n    optimize(ast, options);\n  }\n  var code = generate(ast, options);\n  return {\n    ast: ast,\n    render: code.render,\n    staticRenderFns: code.staticRenderFns\n  }\n});\n\n/*  */\n\nvar ref$1 = createCompiler(baseOptions);\nvar compileToFunctions = ref$1.compileToFunctions;\n\n/*  */\n\n// check whether current browser encodes a char inside attribute values\nvar div;\nfunction getShouldDecode (href) {\n  div = div || document.createElement('div');\n  div.innerHTML = href ? \"<a href=\\\"\\n\\\"/>\" : \"<div a=\\\"\\n\\\"/>\";\n  return div.innerHTML.indexOf('&#10;') > 0\n}\n\n// #3663: IE encodes newlines inside attribute values while other browsers don't\nvar shouldDecodeNewlines = inBrowser ? getShouldDecode(false) : false;\n// #6828: chrome encodes content in a[href]\nvar shouldDecodeNewlinesForHref = inBrowser ? getShouldDecode(true) : false;\n\n/*  */\n\nvar idToTemplate = cached(function (id) {\n  var el = query(id);\n  return el && el.innerHTML\n});\n\nvar mount = Vue.prototype.$mount;\nVue.prototype.$mount = function (\n  el,\n  hydrating\n) {\n  el = el && query(el);\n\n  /* istanbul ignore if */\n  if (el === document.body || el === document.documentElement) {\n    process.env.NODE_ENV !== 'production' && warn(\n      \"Do not mount Vue to <html> or <body> - mount to normal elements instead.\"\n    );\n    return this\n  }\n\n  var options = this.$options;\n  // resolve template/el and convert to render function\n  if (!options.render) {\n    var template = options.template;\n    if (template) {\n      if (typeof template === 'string') {\n        if (template.charAt(0) === '#') {\n          template = idToTemplate(template);\n          /* istanbul ignore if */\n          if (process.env.NODE_ENV !== 'production' && !template) {\n            warn(\n              (\"Template element not found or is empty: \" + (options.template)),\n              this\n            );\n          }\n        }\n      } else if (template.nodeType) {\n        template = template.innerHTML;\n      } else {\n        if (process.env.NODE_ENV !== 'production') {\n          warn('invalid template option:' + template, this);\n        }\n        return this\n      }\n    } else if (el) {\n      template = getOuterHTML(el);\n    }\n    if (template) {\n      /* istanbul ignore if */\n      if (process.env.NODE_ENV !== 'production' && config.performance && mark) {\n        mark('compile');\n      }\n\n      var ref = compileToFunctions(template, {\n        shouldDecodeNewlines: shouldDecodeNewlines,\n        shouldDecodeNewlinesForHref: shouldDecodeNewlinesForHref,\n        delimiters: options.delimiters,\n        comments: options.comments\n      }, this);\n      var render = ref.render;\n      var staticRenderFns = ref.staticRenderFns;\n      options.render = render;\n      options.staticRenderFns = staticRenderFns;\n\n      /* istanbul ignore if */\n      if (process.env.NODE_ENV !== 'production' && config.performance && mark) {\n        mark('compile end');\n        measure((\"vue \" + (this._name) + \" compile\"), 'compile', 'compile end');\n      }\n    }\n  }\n  return mount.call(this, el, hydrating)\n};\n\n/**\n * Get outerHTML of elements, taking care\n * of SVG elements in IE as well.\n */\nfunction getOuterHTML (el) {\n  if (el.outerHTML) {\n    return el.outerHTML\n  } else {\n    var container = document.createElement('div');\n    container.appendChild(el.cloneNode(true));\n    return container.innerHTML\n  }\n}\n\nVue.compile = compileToFunctions;\n\nexport default Vue;\n","import Vue from 'vue'\nimport App from './App.vue'\n\nnew Vue({\n  el: '#app',\n  render: h => h(App)\n})\n"],"sourceRoot":""}